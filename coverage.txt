[62] 'x = prim
[62] 'x = equal?
[62] 'x = x
[62] 'x = y
[81] '(map desugar-exp es) = (prim equal? x y)
[86] '`(define (,fname ,@params) ,(desugar-exp body)) = (define (equal? x y) (prim equal? x y))
[62] 'x = equal?
[60] '`',y = (quote 1)
[60] '`',y = (quote 1)
[81] '(map desugar-exp es) = (equal? (quote 1) (quote 1))
[59] '`',y = (quote wow)
[59] '`',y = (quote not-wow)
[79] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))
[86] '`(define (,fname ,@params) ,(desugar-exp body)) = (define (call) (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))
[62] 'x = call
[81] '(map desugar-exp es) = (call)
[86] '`(define (,fname ,@params) ,(desugar-exp body)) = (define (brouhaha_main) (call))
[157] '(hash-ref env x) = x
[157] '(hash-ref env x) = y
[148] '`(prim ,op ,@(map (alpha-rename env) es)) = (prim equal? x y)
[167] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = (define (equal? x y) (prim equal? x y))
[157] '(hash-ref env x) = equal?
[161] '`',dat = (quote 1)
[161] '`',dat = (quote 1)
[162] '(map (alpha-rename env) es) = (equal? (quote 1) (quote 1))
[161] '`',dat = (quote wow)
[161] '`',dat = (quote not-wow)
[154] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))
[167] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = (define (call) (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))
[157] '(hash-ref env x) = call
[162] '(map (alpha-rename env) es) = (call)
[167] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = (define (brouhaha_main) (call))
[226] 'x = x
[226] 'x = y
[219] '`(prim (prov ,exp) ,op ,@(map add-prov-exp es)) = (prim (prov (prim equal? x y)) equal? x y)
[241] '`(define (prov ,def) ,params ,(add-prov-exp body)) = (define (prov (define (equal? x y) (prim equal? x y))) (equal? x y) (prim (prov (prim equal? x y)) equal? x y))
[226] 'x = equal?
[224] '`',dat = (quote 1)
[224] '`',dat = (quote 1)
[232] '`(app (prov ,exp) ,@(map add-prov-exp es)) = (app (prov (equal? (quote 1) (quote 1))) equal? (quote 1) (quote 1))
[224] '`',dat = (quote wow)
[224] '`',dat = (quote not-wow)
[222] '`(if (prov ,exp) ,(add-prov-exp guard) ,(add-prov-exp tb) ,(add-prov-exp fb)) = (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) (app (prov (equal? (quote 1) (quote 1))) equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))
[241] '`(define (prov ,def) ,params ,(add-prov-exp body)) = (define (prov (define (call) (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))) (call) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) (app (prov (equal? (quote 1) (quote 1))) equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))
[226] 'x = call
[232] '`(app (prov ,exp) ,@(map add-prov-exp es)) = (app (prov (call)) call)
[241] '`(define (prov ,def) ,params ,(add-prov-exp body)) = (define (prov (define (brouhaha_main) (call))) (brouhaha_main) (app (prov (call)) call))
[284] '(k x) = (prim (prov (prim equal? x y)) equal? x y)
[295] '(k x) = (prim (prov (prim equal? x y)) equal? x y)
[284] '(k x) = (prim (prov (prim equal? x y)) equal? x y)
[295] '(k x) = (prim (prov (prim equal? x y)) equal? x y)
[321] '(normalize-aes es (lambda (xs) (k `(prim ,prov ,op . ,xs)))) = (prim (prov (prim equal? x y)) equal? x y)
[274] '`(let (prov ,e+) ((,x+ ,e+)) ,x+) = (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) xy7826)
[255] '`(define ,prov ,sig ,(normalize-anf body)) = (define (prov (define (equal? x y) (prim equal? x y))) (equal? x y) (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) xy7826))
[294] '(k `',dat) = (quote wow)
[274] '`(let (prov ,e+) ((,x+ ,e+)) ,x+) = (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830)
[294] '(k `',dat) = (quote not-wow)
[274] '`(let (prov ,e+) ((,x+ ,e+)) ,x+) = (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)
[285] '`(let (prov ,anf) ((,x ,anf)) ,(k x)) = (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)))
[285] '`(let (prov ,anf) ((,x ,anf)) ,(k x)) = (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831))))
[294] '(k `',dat) = (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831))))
[285] '`(let (prov ,anf) ((,x ,anf)) ,(k x)) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)))))
[294] '(k `',dat) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)))))
[284] '(k x) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)))))
[295] '(k x) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)))))
[324] '(normalize-aes es (lambda (xs) (k `(app ,prov . ,xs)))) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)))))
[320] '(normalize-ae ec (lambda (xc) (k `(if ,prov ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)))))
[271] 'e+ = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831)))))
[255] '`(define ,prov ,sig ,(normalize-anf body)) = (define (prov (define (call) (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))) (call) (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) ((a7829 (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) xy7830) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) xy7831))))))
[284] '(k x) = (app (prov (call)) call)
[295] '(k x) = (app (prov (call)) call)
[324] '(normalize-aes es (lambda (xs) (k `(app ,prov . ,xs)))) = (app (prov (call)) call)
[274] '`(let (prov ,e+) ((,x+ ,e+)) ,x+) = (let (prov (app (prov (call)) call)) ((xy7832 (app (prov (call)) call))) xy7832)
[255] '`(define ,prov ,sig ,(normalize-anf body)) = (define (prov (define (brouhaha_main) (call))) (brouhaha_main) (let (prov (app (prov (call)) call)) ((xy7832 (app (prov (call)) call))) xy7832))
[346] 'x = x
[346] 'x = y
[355] '`(,cae ,x) = (kont7833 xy7826)
[372] '`(let ,prov ((,x (prim ,prov2 ,op ,@(map T-ae aes)))) ,(T e0 cae)) = (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) (kont7833 xy7826))
[403] '`(define ,prov (,fname ,k ,@params) ,(T body k)) = (define (prov (define (equal? x y) (prim equal? x y))) (equal? kont7833 x y) (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) (kont7833 xy7826)))
[346] 'x = a7829
[355] '`(,cae ,x) = (kont7834 xy7830)
[381] '`(let ,prov ((,x ',dat)) ,(T e0 cae)) = (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830))
[355] '`(,cae ,x) = (kont7834 xy7831)
[381] '`(let ,prov ((,x ',dat)) ,(T e0 cae)) = (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))
[389] '`(if ,prov ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))
[346] 'x = equal?
[346] 'x = a7827
[346] 'x = a7828
[394] '`(app ,prov ,(T-ae fae) ,cae ,@(map T-ae args)) = (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)
[387] '(T rhs `(lambda ,prov (,x) ,(T e0 cae))) = (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))))) (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828))
[381] '`(let ,prov ((,x ',dat)) ,(T e0 cae)) = (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))))) (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)))
[381] '`(let ,prov ((,x ',dat)) ,(T e0 cae)) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))))) (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828))))
[403] '`(define ,prov (,fname ,k ,@params) ,(T body k)) = (define (prov (define (call) (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))) (call kont7834) (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))))) (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)))))
[355] '`(,cae ,x) = (kont7836 xy7832)
[346] 'x = call
[394] '`(app ,prov ,(T-ae fae) ,cae ,@(map T-ae args)) = (app (prov (call)) call f7837)
[387] '(T rhs `(lambda ,prov (,x) ,(T e0 cae))) = (let (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) ((f7837 (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832)))) (app (prov (call)) call f7837))
[403] '`(define ,prov (,fname ,k ,@params) ,(T body k)) = (define (prov (define (brouhaha_main) (call))) (brouhaha_main kont7836) (let (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) ((f7837 (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832)))) (app (prov (call)) call f7837)))
[157] '(hash-ref env x) = x
[157] '(hash-ref env x) = y
[147] '`(prim ,prov ,op ,@(map (alpha-rename env) es)) = (prim (prov (prim equal? x y)) equal? x y)
[157] '(hash-ref env x) = kont7833
[157] '(hash-ref env x) = xy7826
[162] '(map (alpha-rename env) es) = (kont7833 xy7826)
[110] '`(let ,prov ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) (kont7833 xy7826))
[171] '`(define ,prov (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = (define (prov (define (equal? x y) (prim equal? x y))) (equal? kont7833 x y) (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) (kont7833 xy7826)))
[161] '`',dat = (quote 1)
[161] '`',dat = (quote 1)
[157] '(hash-ref env x) = a7829
[161] '`',dat = (quote wow)
[157] '(hash-ref env x) = kont7834
[157] '(hash-ref env x) = xy7830
[162] '(map (alpha-rename env) es) = (kont7834 xy7830)
[110] '`(let ,prov ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830))
[161] '`',dat = (quote not-wow)
[157] '(hash-ref env x) = kont7834
[157] '(hash-ref env x) = xy7831
[162] '(map (alpha-rename env) es) = (kont7834 xy7831)
[110] '`(let ,prov ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))
[152] '`(if ,prov ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))
[124] '`(lambda ,prov ,xs+ ,((alpha-rename env+) e0)) = (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))
[157] '(hash-ref env x) = equal?
[157] '(hash-ref env x) = f7835
[157] '(hash-ref env x) = a7827
[157] '(hash-ref env x) = a7828
[160] '`(app ,prov ,@(map (alpha-rename env) es)) = (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)
[110] '`(let ,prov ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))))) (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828))
[110] '`(let ,prov ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))))) (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)))
[110] '`(let ,prov ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))))) (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828))))
[171] '`(define ,prov (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = (define (prov (define (call) (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))) (call kont7834) (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831)))))) (app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)))))
[157] '(hash-ref env x) = kont7836
[157] '(hash-ref env x) = xy7832
[162] '(map (alpha-rename env) es) = (kont7836 xy7832)
[124] '`(lambda ,prov ,xs+ ,((alpha-rename env+) e0)) = (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))
[157] '(hash-ref env x) = call
[157] '(hash-ref env x) = f7837
[160] '`(app ,prov ,@(map (alpha-rename env) es)) = (app (prov (call)) call f7837)
[110] '`(let ,prov ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = (let (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) ((f7837 (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832)))) (app (prov (call)) call f7837))
[171] '`(define ,prov (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = (define (prov (define (brouhaha_main) (call))) (brouhaha_main kont7836) (let (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) ((f7837 (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832)))) (app (prov (call)) call f7837)))
[479] '`(clo-app dummy_prov ,f ,@xs) = (clo-app dummy_prov kont7833 xy7826)
[429] '`(let ,prov ((,x (prim ,prov2 ,op ,@xs))) ,e0+) = (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) (clo-app dummy_prov kont7833 xy7826))
[500] '`(,@pr+ ,@procs+ (proc ,prov (,fx ,envx . ,xs) ,body+)) = ((proc (prov (define (equal? x y) (prim equal? x y))) (equal? _7838 kont7833 x y) (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) (clo-app dummy_prov kont7833 xy7826))))
[478] '`(clo-app ,prov ,f ,@xs) = (clo-app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)
[479] '`(clo-app dummy_prov ,f ,@xs) = (clo-app dummy_prov kont7834 xy7830)
[421] '`(let ,prov ((,x ',dat)) ,e0+) = (let (prov (quote wow)) ((xy7830 (quote wow))) (clo-app dummy_prov kont7834 xy7830))
[479] '`(clo-app dummy_prov ,f ,@xs) = (clo-app dummy_prov kont7834 xy7831)
[421] '`(let ,prov ((,x ',dat)) ,e0+) = (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (clo-app dummy_prov kont7834 xy7831))
[471] '`(if ,prov ,x ,e0+ ,e1+) = (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (clo-app dummy_prov kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (clo-app dummy_prov kont7834 xy7831)))
[448] '(list (set-remove (set-union envvars freevars) x) `(let ,prov ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc ,prov (,fx ,envx ,@xs) ,body++))) = (#<set: kont7834 equal? a7827 a7828> (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (make-closure lam7841 kont7834))) (clo-app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)) ((proc (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) (lam7841 env7842 a7829) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((kont7834 (env-ref env7842 1))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (clo-app dummy_prov kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (clo-app dummy_prov kont7834 xy7831)))))))
[421] '`(let ,prov ((,x ',dat)) ,e0+) = (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (make-closure lam7841 kont7834))) (clo-app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828)))
[421] '`(let ,prov ((,x ',dat)) ,e0+) = (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (make-closure lam7841 kont7834))) (clo-app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828))))
[500] '`(,@pr+ ,@procs+ (proc ,prov (,fx ,envx . ,xs) ,body+)) = ((proc (prov (define (equal? x y) (prim equal? x y))) (equal? _7838 kont7833 x y) (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) (clo-app dummy_prov kont7833 xy7826))) (proc (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) (lam7841 env7842 a7829) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((kont7834 (env-ref env7842 1))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (clo-app dummy_prov kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (clo-app dummy_prov kont7834 xy7831))))) (proc (prov (define (call) (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))) (call _7845 kont7834) (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (make-closure lam7841 kont7834))) (clo-app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828))))))
[478] '`(clo-app ,prov ,f ,@xs) = (clo-app (prov (call)) call f7837)
[479] '`(clo-app dummy_prov ,f ,@xs) = (clo-app dummy_prov kont7836 xy7832)
[448] '(list (set-remove (set-union envvars freevars) x) `(let ,prov ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc ,prov (,fx ,envx ,@xs) ,body++))) = (#<set: kont7836 call> (let (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) ((f7837 (make-closure lam7846 kont7836))) (clo-app (prov (call)) call f7837)) ((proc (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) (lam7846 env7847 xy7832) (let (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) ((kont7836 (env-ref env7847 1))) (clo-app dummy_prov kont7836 xy7832)))))
[500] '`(,@pr+ ,@procs+ (proc ,prov (,fx ,envx . ,xs) ,body+)) = ((proc (prov (define (equal? x y) (prim equal? x y))) (equal? _7838 kont7833 x y) (let (prov (prim (prov (prim equal? x y)) equal? x y)) ((xy7826 (prim (prov (prim equal? x y)) equal? x y))) (clo-app dummy_prov kont7833 xy7826))) (proc (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) (lam7841 env7842 a7829) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((kont7834 (env-ref env7842 1))) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (clo-app dummy_prov kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (clo-app dummy_prov kont7834 xy7831))))) (proc (prov (define (call) (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow)))) (call _7845 kont7834) (let (prov (quote 1)) ((a7827 (quote 1))) (let (prov (quote 1)) ((a7828 (quote 1))) (let (prov (lambda (prov (app (prov (equal? (quote 1) (quote 1))) equal? a7827 a7828)) (a7829) (if (prov (if (equal? (quote 1) (quote 1)) (quote wow) (quote not-wow))) a7829 (let (prov (quote wow)) ((xy7830 (quote wow))) (kont7834 xy7830)) (let (prov (quote not-wow)) ((xy7831 (quote not-wow))) (kont7834 xy7831))))) ((f7835 (make-closure lam7841 kont7834))) (clo-app (prov (equal? (quote 1) (quote 1))) equal? f7835 a7827 a7828))))) (proc (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) (lam7846 env7847 xy7832) (let (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) ((kont7836 (env-ref env7847 1))) (clo-app dummy_prov kont7836 xy7832))) (proc (prov (define (brouhaha_main) (call))) (brouhaha_main _7848 kont7836) (let (prov (lambda (prov (app (prov (call)) call)) (xy7832) (kont7836 xy7832))) ((f7837 (make-closure lam7846 kont7836))) (clo-app (prov (call)) call f7837))))
