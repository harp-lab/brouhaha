[45] 'x = 'apply-prim
[45] 'x = '+
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim + lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (+ . lst) (apply-prim + lst))
[45] 'x = 'apply-prim
[45] 'x = '-
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim - lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (- . lst) (apply-prim - lst))
[45] 'x = 'apply-prim
[45] 'x = '*
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim * lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (* . lst) (apply-prim * lst))
[45] 'x = 'prim
[45] 'x = 'modulo
[45] 'x = 'a
[45] 'x = 'b
[64] '(map desugar-exp es) = '(prim modulo a b)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (modulo a b) (prim modulo a b))
[45] 'x = 'apply-prim
[45] 'x = '/
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim / lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (/ . lst) (apply-prim / lst))
[45] 'x = 'apply-prim
[45] 'x = '=
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim = lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (= . lst) (apply-prim = lst))
[45] 'x = 'apply-prim
[45] 'x = '>
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim > lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (> . lst) (apply-prim > lst))
[45] 'x = 'apply-prim
[45] 'x = '<
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim < lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (< . lst) (apply-prim < lst))
[45] 'x = 'apply-prim
[45] 'x = '<=
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim <= lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (<= . lst) (apply-prim <= lst))
[45] 'x = 'apply-prim
[45] 'x = '>=
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim >= lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (>= . lst) (apply-prim >= lst))
[45] 'x = 'prim
[45] 'x = 'null?
[45] 'x = 'x
[64] '(map desugar-exp es) = '(prim null? x)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (null? x) (prim null? x))
[45] 'x = 'prim
[45] 'x = 'equal?
[45] 'x = 'x
[45] 'x = 'y
[64] '(map desugar-exp es) = '(prim equal? x y)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (equal? x y) (prim equal? x y))
[45] 'x = 'prim
[45] 'x = 'eq?
[45] 'x = 'x
[45] 'x = 'y
[64] '(map desugar-exp es) = '(prim eq? x y)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (eq? x y) (prim eq? x y))
[45] 'x = 'prim
[45] 'x = 'cons
[45] 'x = 'a
[45] 'x = 'b
[64] '(map desugar-exp es) = '(prim cons a b)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (cons a b) (prim cons a b))
[45] 'x = 'prim
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(prim car lst)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (car lst) (prim car lst))
[45] 'x = 'prim
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(prim cdr lst)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (cdr lst) (prim cdr lst))
[45] 'x = 'equal?
[43] '`',y = ''0
[45] 'x = 'modulo
[45] 'x = 'x
[43] '`',y = ''2
[64] '(map desugar-exp es) = '(modulo x '2)
[64] '(map desugar-exp es) = '(equal? '0 (modulo x '2))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (even? x) (equal? '0 (modulo x '2)))
[45] 'x = 'equal?
[43] '`',y = ''1
[45] 'x = 'modulo
[45] 'x = 'x
[43] '`',y = ''2
[64] '(map desugar-exp es) = '(modulo x '2)
[64] '(map desugar-exp es) = '(equal? '1 (modulo x '2))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (odd? x) (equal? '1 (modulo x '2)))
[45] 'x = 'x
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (list . x) x)
[45] 'x = 'prim
[45] 'x = 'inexact->exact
[45] 'x = 'val
[64] '(map desugar-exp es) = '(prim inexact->exact val)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (float->int val) (prim inexact->exact val))
[45] 'x = 'prim
[45] 'x = 'exact->inexact
[45] 'x = 'val
[64] '(map desugar-exp es) = '(prim exact->inexact val)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (int->float val) (prim exact->inexact val))
[45] 'x = 'null?
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(null? lst)
[46] '`',x = ''#f
[45] 'x = 'equal?
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(car lst)
[45] 'x = 'x
[64] '(map desugar-exp es) = '(equal? (car lst) x)
[46] '`',x = ''#t
[45] 'x = 'member?
[45] 'x = 'x
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[64] '(map desugar-exp es) = '(member? x (cdr lst))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (equal? (car lst) x) '#t (member? x (cdr lst)))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (null? lst) '#f (if (equal? (car lst) x) '#t (member? x (cdr lst))))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (member? x lst) (if (null? lst) '#f (if (equal? (car lst) x) '#t (member? x (cdr lst)))))
[45] 'x = 'null?
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(null? lst)
[45] 'x = 'acc
[45] 'x = 'foldl
[45] 'x = 'fun
[45] 'x = 'fun
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(car lst)
[45] 'x = 'acc
[64] '(map desugar-exp es) = '(fun (car lst) acc)
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[64] '(map desugar-exp es) = '(foldl fun (fun (car lst) acc) (cdr lst))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (null? lst) acc (foldl fun (fun (car lst) acc) (cdr lst)))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (foldl fun acc lst) (if (null? lst) acc (foldl fun (fun (car lst) acc) (cdr lst))))
[45] 'x = 'null?
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(null? lst)
[45] 'x = 'lst2
[45] 'x = 'reverse-helper
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[45] 'x = 'cons
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(car lst)
[45] 'x = 'lst2
[64] '(map desugar-exp es) = '(cons (car lst) lst2)
[64] '(map desugar-exp es) = '(reverse-helper (cdr lst) (cons (car lst) lst2))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (null? lst) lst2 (reverse-helper (cdr lst) (cons (car lst) lst2)))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (reverse-helper lst lst2) (if (null? lst) lst2 (reverse-helper (cdr lst) (cons (car lst) lst2))))
[45] 'x = 'reverse-helper
[45] 'x = 'lst
[45] 'x = 'list
[64] '(map desugar-exp es) = '(list)
[64] '(map desugar-exp es) = '(reverse-helper lst (list))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (reverse lst) (reverse-helper lst (list)))
[45] 'x = '=
[45] 'x = 'n
[43] '`',y = ''0
[64] '(map desugar-exp es) = '(= n '0)
[45] 'x = 'reverse
[45] 'x = 'lst2
[64] '(map desugar-exp es) = '(reverse lst2)
[45] 'x = 'take-helper
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[45] 'x = '-
[45] 'x = 'n
[43] '`',y = ''1
[64] '(map desugar-exp es) = '(- n '1)
[45] 'x = 'cons
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(car lst)
[45] 'x = 'lst2
[64] '(map desugar-exp es) = '(cons (car lst) lst2)
[64] '(map desugar-exp es) = '(take-helper (cdr lst) (- n '1) (cons (car lst) lst2))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (= n '0) (reverse lst2) (take-helper (cdr lst) (- n '1) (cons (car lst) lst2)))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (take-helper lst n lst2) (if (= n '0) (reverse lst2) (take-helper (cdr lst) (- n '1) (cons (car lst) lst2))))
[45] 'x = 'take-helper
[45] 'x = 'lst
[45] 'x = 'n
[45] 'x = 'list
[64] '(map desugar-exp es) = '(list)
[64] '(map desugar-exp es) = '(take-helper lst n (list))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (take lst n) (take-helper lst n (list)))
[45] 'x = 'null?
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(null? lst)
[43] '`',y = ''0
[45] 'x = '+
[43] '`',y = ''1
[45] 'x = 'length
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[64] '(map desugar-exp es) = '(length (cdr lst))
[64] '(map desugar-exp es) = '(+ '1 (length (cdr lst)))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (null? lst) '0 (+ '1 (length (cdr lst))))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (length lst) (if (null? lst) '0 (+ '1 (length (cdr lst)))))
[45] 'x = 'null?
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(null? lst)
[45] 'x = 'list
[64] '(map desugar-exp es) = '(list)
[45] 'x = 'cons
[45] 'x = 'proc
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(car lst)
[64] '(map desugar-exp es) = '(proc (car lst))
[45] 'x = 'map
[45] 'x = 'proc
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[64] '(map desugar-exp es) = '(map proc (cdr lst))
[64] '(map desugar-exp es) = '(cons (proc (car lst)) (map proc (cdr lst)))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (null? lst) (list) (cons (proc (car lst)) (map proc (cdr lst))))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (map proc lst) (if (null? lst) (list) (cons (proc (car lst)) (map proc (cdr lst)))))
[45] 'x = 'null?
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(null? lst)
[45] 'x = 'list
[64] '(map desugar-exp es) = '(list)
[45] 'x = 'op
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(car lst)
[64] '(map desugar-exp es) = '(op (car lst))
[45] 'x = 'cons
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(car lst)
[45] 'x = 'filter
[45] 'x = 'op
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[64] '(map desugar-exp es) = '(filter op (cdr lst))
[64] '(map desugar-exp es) = '(cons (car lst) (filter op (cdr lst)))
[45] 'x = 'filter
[45] 'x = 'op
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[64] '(map desugar-exp es) = '(filter op (cdr lst))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (op (car lst)) (cons (car lst) (filter op (cdr lst))) (filter op (cdr lst)))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (null? lst) (list) (if (op (car lst)) (cons (car lst) (filter op (cdr lst))) (filter op (cdr lst))))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (filter op lst) (if (null? lst) (list) (if (op (car lst)) (cons (car lst) (filter op (cdr lst))) (filter op (cdr lst)))))
[45] 'x = '=
[45] 'x = 'n
[43] '`',y = ''0
[64] '(map desugar-exp es) = '(= n '0)
[45] 'x = 'lst
[45] 'x = 'drop
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[45] 'x = '-
[45] 'x = 'n
[43] '`',y = ''1
[64] '(map desugar-exp es) = '(- n '1)
[64] '(map desugar-exp es) = '(drop (cdr lst) (- n '1))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (= n '0) lst (drop (cdr lst) (- n '1)))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (drop lst n) (if (= n '0) lst (drop (cdr lst) (- n '1))))
[45] 'x = 'null?
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(null? lst)
[45] 'x = 'acc
[45] 'x = 'proc
[45] 'x = 'car
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(car lst)
[45] 'x = 'foldr
[45] 'x = 'proc
[45] 'x = 'acc
[45] 'x = 'cdr
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(cdr lst)
[64] '(map desugar-exp es) = '(foldr proc acc (cdr lst))
[64] '(map desugar-exp es) = '(proc (car lst) (foldr proc acc (cdr lst)))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (null? lst) acc (proc (car lst) (foldr proc acc (cdr lst))))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (foldr proc acc lst) (if (null? lst) acc (proc (car lst) (foldr proc acc (cdr lst)))))
[45] 'x = 'null?
[45] 'x = 'lst1
[64] '(map desugar-exp es) = '(null? lst1)
[45] 'x = 'lst2
[45] 'x = 'cons
[45] 'x = 'car
[45] 'x = 'lst1
[64] '(map desugar-exp es) = '(car lst1)
[45] 'x = 'append
[45] 'x = 'cdr
[45] 'x = 'lst1
[64] '(map desugar-exp es) = '(cdr lst1)
[45] 'x = 'lst2
[64] '(map desugar-exp es) = '(append (cdr lst1) lst2)
[64] '(map desugar-exp es) = '(cons (car lst1) (append (cdr lst1) lst2))
[62] '`(if ,(desugar-exp guard) ,(desugar-exp tr) ,(desugar-exp fl)) = '(if (null? lst1) lst2 (cons (car lst1) (append (cdr lst1) lst2)))
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (append lst1 lst2) (if (null? lst1) lst2 (cons (car lst1) (append (cdr lst1) lst2))))
[45] 'x = 'apply-prim
[45] 'x = 'hash
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim hash lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (hash . lst) (apply-prim hash lst))
[45] 'x = 'prim
[45] 'x = 'hash-ref
[45] 'x = 'h
[45] 'x = 'k
[64] '(map desugar-exp es) = '(prim hash-ref h k)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (hash-ref h k) (prim hash-ref h k))
[45] 'x = 'prim
[45] 'x = 'hash-set
[45] 'x = 'h
[45] 'x = 'k
[45] 'x = 'v
[64] '(map desugar-exp es) = '(prim hash-set h k v)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (hash-set h k v) (prim hash-set h k v))
[45] 'x = 'prim
[45] 'x = 'hash-keys
[45] 'x = 'h
[64] '(map desugar-exp es) = '(prim hash-keys h)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (hash-keys h) (prim hash-keys h))
[45] 'x = 'prim
[45] 'x = 'hash-has-key?
[45] 'x = 'h
[45] 'x = 'k
[64] '(map desugar-exp es) = '(prim hash-has-key? h k)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (hash-has-key? h k) (prim hash-has-key? h k))
[45] 'x = 'prim
[45] 'x = 'hash-count
[45] 'x = 'h
[64] '(map desugar-exp es) = '(prim hash-count h)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (hash-count h) (prim hash-count h))
[45] 'x = 'apply-prim
[45] 'x = 'set
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(apply-prim set lst)
[73] '`(define (,fname . ,params) ,(desugar-exp body)) = '(define (set . lst) (apply-prim set lst))
[45] 'x = 'prim
[45] 'x = 'set->list
[45] 'x = 'h
[64] '(map desugar-exp es) = '(prim set->list h)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (set->list h) (prim set->list h))
[45] 'x = 'prim
[45] 'x = 'list->set
[45] 'x = 'lst
[64] '(map desugar-exp es) = '(prim list->set lst)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (list->set lst) (prim list->set lst))
[45] 'x = 'prim
[45] 'x = 'set-add
[45] 'x = 's
[45] 'x = 'val
[64] '(map desugar-exp es) = '(prim set-add s val)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (set-add s val) (prim set-add s val))
[45] 'x = 'prim
[45] 'x = 'string?
[45] 'x = 'str
[64] '(map desugar-exp es) = '(prim string? str)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (string? str) (prim string? str))
[45] 'x = 'prim
[45] 'x = 'string-length
[45] 'x = 'str
[64] '(map desugar-exp es) = '(prim string-length str)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (string-length str) (prim string-length str))
[45] 'x = 'prim
[45] 'x = 'string-ref
[45] 'x = 'str
[45] 'x = 'pos
[64] '(map desugar-exp es) = '(prim string-ref str pos)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (string-ref str pos) (prim string-ref str pos))
[45] 'x = 'prim
[45] 'x = 'substring
[45] 'x = 'str
[45] 'x = 'start
[45] 'x = 'end
[64] '(map desugar-exp es) = '(prim substring str start end)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (substring str start end) (prim substring str start end))
[45] 'x = 'prim
[45] 'x = 'string-append
[45] 'x = 's1
[45] 'x = 's2
[64] '(map desugar-exp es) = '(prim string-append s1 s2)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (string-append s1 s2) (prim string-append s1 s2))
[45] 'x = 'prim
[45] 'x = 'string->list
[45] 'x = 'str
[64] '(map desugar-exp es) = '(prim string->list str)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (string->list str) (prim string->list str))
[42] '`',y = ''"random"
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (call) '"random")
[45] 'x = 'call
[64] '(map desugar-exp es) = '(call)
[69] '`(define (,fname ,@params) ,(desugar-exp body)) = '(define (brouhaha_main) (call))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim + lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (+ . lst) (apply-prim + lst))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim - lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (- . lst) (apply-prim - lst))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim * lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (* . lst) (apply-prim * lst))
[102] '(hash-ref env x) = 'a
[102] '(hash-ref env x) = 'b
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim modulo a b)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (modulo a b) (prim modulo a b))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim / lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (/ . lst) (apply-prim / lst))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim = lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (= . lst) (apply-prim = lst))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim > lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (> . lst) (apply-prim > lst))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim < lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (< . lst) (apply-prim < lst))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim <= lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (<= . lst) (apply-prim <= lst))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim >= lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (>= . lst) (apply-prim >= lst))
[102] '(hash-ref env x) = 'x
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim null? x)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (null? x) (prim null? x))
[102] '(hash-ref env x) = 'x
[102] '(hash-ref env x) = 'y
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim equal? x y)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (equal? x y) (prim equal? x y))
[102] '(hash-ref env x) = 'x
[102] '(hash-ref env x) = 'y
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim eq? x y)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (eq? x y) (prim eq? x y))
[102] '(hash-ref env x) = 'a
[102] '(hash-ref env x) = 'b
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cons a b)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (cons a b) (prim cons a b))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (car lst) (prim car lst))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (cdr lst) (prim cdr lst))
[102] '(hash-ref env x) = 'equal?
[104] '`',dat = ''0
[102] '(hash-ref env x) = 'modulo
[102] '(hash-ref env x) = 'x
[104] '`',dat = ''2
[105] '(map (alpha-rename env) es) = '(modulo x '2)
[105] '(map (alpha-rename env) es) = '(equal? '0 (modulo x '2))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (even? x) (equal? '0 (modulo x '2)))
[102] '(hash-ref env x) = 'equal?
[104] '`',dat = ''1
[102] '(hash-ref env x) = 'modulo
[102] '(hash-ref env x) = 'x
[104] '`',dat = ''2
[105] '(map (alpha-rename env) es) = '(modulo x '2)
[105] '(map (alpha-rename env) es) = '(equal? '1 (modulo x '2))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (odd? x) (equal? '1 (modulo x '2)))
[102] '(hash-ref env x) = 'x
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (list . x) x)
[102] '(hash-ref env x) = 'val
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim inexact->exact val)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (float->int val) (prim inexact->exact val))
[102] '(hash-ref env x) = 'val
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim exact->inexact val)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (int->float val) (prim exact->inexact val))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? lst)
[104] '`',dat = ''#f
[102] '(hash-ref env x) = 'equal?
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car lst)
[102] '(hash-ref env x) = 'x
[105] '(map (alpha-rename env) es) = '(equal? (car lst) x)
[104] '`',dat = ''#t
[102] '(hash-ref env x) = 'member?
[102] '(hash-ref env x) = 'x
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[105] '(map (alpha-rename env) es) = '(member? x (cdr lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (equal? (car lst) x) '#t (member? x (cdr lst)))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (null? lst) '#f (if (equal? (car lst) x) '#t (member? x (cdr lst))))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (member? x lst) (if (null? lst) '#f (if (equal? (car lst) x) '#t (member? x (cdr lst)))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? lst)
[102] '(hash-ref env x) = 'acc
[102] '(hash-ref env x) = 'foldl
[102] '(hash-ref env x) = 'fun
[102] '(hash-ref env x) = 'fun
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car lst)
[102] '(hash-ref env x) = 'acc
[105] '(map (alpha-rename env) es) = '(fun (car lst) acc)
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[105] '(map (alpha-rename env) es) = '(foldl fun (fun (car lst) acc) (cdr lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (null? lst) acc (foldl fun (fun (car lst) acc) (cdr lst)))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (foldl fun acc lst) (if (null? lst) acc (foldl fun (fun (car lst) acc) (cdr lst))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? lst)
[102] '(hash-ref env x) = 'lst2
[102] '(hash-ref env x) = 'reverse-helper
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car lst)
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(cons (car lst) lst2)
[105] '(map (alpha-rename env) es) = '(reverse-helper (cdr lst) (cons (car lst) lst2))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (null? lst) lst2 (reverse-helper (cdr lst) (cons (car lst) lst2)))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (reverse-helper lst lst2) (if (null? lst) lst2 (reverse-helper (cdr lst) (cons (car lst) lst2))))
[102] '(hash-ref env x) = 'reverse-helper
[102] '(hash-ref env x) = 'lst
[102] '(hash-ref env x) = 'list
[105] '(map (alpha-rename env) es) = '(list)
[105] '(map (alpha-rename env) es) = '(reverse-helper lst (list))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (reverse lst) (reverse-helper lst (list)))
[102] '(hash-ref env x) = '=
[102] '(hash-ref env x) = 'n
[104] '`',dat = ''0
[105] '(map (alpha-rename env) es) = '(= n '0)
[102] '(hash-ref env x) = 'reverse
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(reverse lst2)
[102] '(hash-ref env x) = 'take-helper
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[102] '(hash-ref env x) = '-
[102] '(hash-ref env x) = 'n
[104] '`',dat = ''1
[105] '(map (alpha-rename env) es) = '(- n '1)
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car lst)
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(cons (car lst) lst2)
[105] '(map (alpha-rename env) es) = '(take-helper (cdr lst) (- n '1) (cons (car lst) lst2))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (= n '0) (reverse lst2) (take-helper (cdr lst) (- n '1) (cons (car lst) lst2)))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (take-helper lst n lst2) (if (= n '0) (reverse lst2) (take-helper (cdr lst) (- n '1) (cons (car lst) lst2))))
[102] '(hash-ref env x) = 'take-helper
[102] '(hash-ref env x) = 'lst
[102] '(hash-ref env x) = 'n
[102] '(hash-ref env x) = 'list
[105] '(map (alpha-rename env) es) = '(list)
[105] '(map (alpha-rename env) es) = '(take-helper lst n (list))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (take lst n) (take-helper lst n (list)))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? lst)
[104] '`',dat = ''0
[102] '(hash-ref env x) = '+
[104] '`',dat = ''1
[102] '(hash-ref env x) = 'length
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[105] '(map (alpha-rename env) es) = '(length (cdr lst))
[105] '(map (alpha-rename env) es) = '(+ '1 (length (cdr lst)))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (null? lst) '0 (+ '1 (length (cdr lst))))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (length lst) (if (null? lst) '0 (+ '1 (length (cdr lst)))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? lst)
[102] '(hash-ref env x) = 'list
[105] '(map (alpha-rename env) es) = '(list)
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'proc
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car lst)
[105] '(map (alpha-rename env) es) = '(proc (car lst))
[102] '(hash-ref env x) = 'map
[102] '(hash-ref env x) = 'proc
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[105] '(map (alpha-rename env) es) = '(map proc (cdr lst))
[105] '(map (alpha-rename env) es) = '(cons (proc (car lst)) (map proc (cdr lst)))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (null? lst) (list) (cons (proc (car lst)) (map proc (cdr lst))))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (map proc lst) (if (null? lst) (list) (cons (proc (car lst)) (map proc (cdr lst)))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? lst)
[102] '(hash-ref env x) = 'list
[105] '(map (alpha-rename env) es) = '(list)
[102] '(hash-ref env x) = 'op
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car lst)
[105] '(map (alpha-rename env) es) = '(op (car lst))
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car lst)
[102] '(hash-ref env x) = 'filter
[102] '(hash-ref env x) = 'op
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[105] '(map (alpha-rename env) es) = '(filter op (cdr lst))
[105] '(map (alpha-rename env) es) = '(cons (car lst) (filter op (cdr lst)))
[102] '(hash-ref env x) = 'filter
[102] '(hash-ref env x) = 'op
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[105] '(map (alpha-rename env) es) = '(filter op (cdr lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (op (car lst)) (cons (car lst) (filter op (cdr lst))) (filter op (cdr lst)))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (null? lst) (list) (if (op (car lst)) (cons (car lst) (filter op (cdr lst))) (filter op (cdr lst))))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (filter op lst) (if (null? lst) (list) (if (op (car lst)) (cons (car lst) (filter op (cdr lst))) (filter op (cdr lst)))))
[102] '(hash-ref env x) = '=
[102] '(hash-ref env x) = 'n
[104] '`',dat = ''0
[105] '(map (alpha-rename env) es) = '(= n '0)
[102] '(hash-ref env x) = 'lst
[102] '(hash-ref env x) = 'drop
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[102] '(hash-ref env x) = '-
[102] '(hash-ref env x) = 'n
[104] '`',dat = ''1
[105] '(map (alpha-rename env) es) = '(- n '1)
[105] '(map (alpha-rename env) es) = '(drop (cdr lst) (- n '1))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (= n '0) lst (drop (cdr lst) (- n '1)))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (drop lst n) (if (= n '0) lst (drop (cdr lst) (- n '1))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? lst)
[102] '(hash-ref env x) = 'acc
[102] '(hash-ref env x) = 'proc
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car lst)
[102] '(hash-ref env x) = 'foldr
[102] '(hash-ref env x) = 'proc
[102] '(hash-ref env x) = 'acc
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr lst)
[105] '(map (alpha-rename env) es) = '(foldr proc acc (cdr lst))
[105] '(map (alpha-rename env) es) = '(proc (car lst) (foldr proc acc (cdr lst)))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (null? lst) acc (proc (car lst) (foldr proc acc (cdr lst))))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (foldr proc acc lst) (if (null? lst) acc (proc (car lst) (foldr proc acc (cdr lst)))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'lst1
[105] '(map (alpha-rename env) es) = '(null? lst1)
[102] '(hash-ref env x) = 'lst2
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'lst1
[105] '(map (alpha-rename env) es) = '(car lst1)
[102] '(hash-ref env x) = 'append
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'lst1
[105] '(map (alpha-rename env) es) = '(cdr lst1)
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(append (cdr lst1) lst2)
[105] '(map (alpha-rename env) es) = '(cons (car lst1) (append (cdr lst1) lst2))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if (null? lst1) lst2 (cons (car lst1) (append (cdr lst1) lst2)))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (append lst1 lst2) (if (null? lst1) lst2 (cons (car lst1) (append (cdr lst1) lst2))))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim hash lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (hash . lst) (apply-prim hash lst))
[102] '(hash-ref env x) = 'h
[102] '(hash-ref env x) = 'k
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-ref h k)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-ref h k) (prim hash-ref h k))
[102] '(hash-ref env x) = 'h
[102] '(hash-ref env x) = 'k
[102] '(hash-ref env x) = 'v
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-set h k v)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-set h k v) (prim hash-set h k v))
[102] '(hash-ref env x) = 'h
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-keys h)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-keys h) (prim hash-keys h))
[102] '(hash-ref env x) = 'h
[102] '(hash-ref env x) = 'k
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-has-key? h k)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-has-key? h k) (prim hash-has-key? h k))
[102] '(hash-ref env x) = 'h
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-count h)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-count h) (prim hash-count h))
[102] '(hash-ref env x) = 'lst
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim set lst)
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (set . lst) (apply-prim set lst))
[102] '(hash-ref env x) = 'h
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim set->list h)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (set->list h) (prim set->list h))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim list->set lst)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (list->set lst) (prim list->set lst))
[102] '(hash-ref env x) = 's
[102] '(hash-ref env x) = 'val
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim set-add s val)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (set-add s val) (prim set-add s val))
[102] '(hash-ref env x) = 'str
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string? str)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string? str) (prim string? str))
[102] '(hash-ref env x) = 'str
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string-length str)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string-length str) (prim string-length str))
[102] '(hash-ref env x) = 'str
[102] '(hash-ref env x) = 'pos
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string-ref str pos)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string-ref str pos) (prim string-ref str pos))
[102] '(hash-ref env x) = 'str
[102] '(hash-ref env x) = 'start
[102] '(hash-ref env x) = 'end
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim substring str start end)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (substring str start end) (prim substring str start end))
[102] '(hash-ref env x) = 's1
[102] '(hash-ref env x) = 's2
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string-append s1 s2)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string-append s1 s2) (prim string-append s1 s2))
[102] '(hash-ref env x) = 'str
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string->list str)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string->list str) (prim string->list str))
[104] '`',dat = ''"random"
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (call) '"random")
[102] '(hash-ref env x) = 'call
[105] '(map (alpha-rename env) es) = '(call)
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (brouhaha_main) (call))
[149] '(k x) = '(apply-prim + lst)
[159] '(k x) = '(apply-prim + lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim + lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6914 (apply-prim + lst))) x6914)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (+ . lst) (let ((x6914 (apply-prim + lst))) x6914))
[149] '(k x) = '(apply-prim - lst)
[159] '(k x) = '(apply-prim - lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim - lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6915 (apply-prim - lst))) x6915)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (- . lst) (let ((x6915 (apply-prim - lst))) x6915))
[149] '(k x) = '(apply-prim * lst)
[159] '(k x) = '(apply-prim * lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim * lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6916 (apply-prim * lst))) x6916)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (* . lst) (let ((x6916 (apply-prim * lst))) x6916))
[154] '(k '()) = '(prim modulo a b)
[149] '(k x) = '(prim modulo a b)
[159] '(k x) = '(prim modulo a b)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim modulo a b)
[149] '(k x) = '(prim modulo a b)
[159] '(k x) = '(prim modulo a b)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim modulo a b)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim modulo a b)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6917 (prim modulo a b))) x6917)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (modulo a b) (let ((x6917 (prim modulo a b))) x6917))
[149] '(k x) = '(apply-prim / lst)
[159] '(k x) = '(apply-prim / lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim / lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6918 (apply-prim / lst))) x6918)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (/ . lst) (let ((x6918 (apply-prim / lst))) x6918))
[149] '(k x) = '(apply-prim = lst)
[159] '(k x) = '(apply-prim = lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim = lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6919 (apply-prim = lst))) x6919)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (= . lst) (let ((x6919 (apply-prim = lst))) x6919))
[149] '(k x) = '(apply-prim > lst)
[159] '(k x) = '(apply-prim > lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim > lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6920 (apply-prim > lst))) x6920)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (> . lst) (let ((x6920 (apply-prim > lst))) x6920))
[149] '(k x) = '(apply-prim < lst)
[159] '(k x) = '(apply-prim < lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim < lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6921 (apply-prim < lst))) x6921)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (< . lst) (let ((x6921 (apply-prim < lst))) x6921))
[149] '(k x) = '(apply-prim <= lst)
[159] '(k x) = '(apply-prim <= lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim <= lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6922 (apply-prim <= lst))) x6922)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (<= . lst) (let ((x6922 (apply-prim <= lst))) x6922))
[149] '(k x) = '(apply-prim >= lst)
[159] '(k x) = '(apply-prim >= lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim >= lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6923 (apply-prim >= lst))) x6923)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (>= . lst) (let ((x6923 (apply-prim >= lst))) x6923))
[154] '(k '()) = '(prim null? x)
[149] '(k x) = '(prim null? x)
[159] '(k x) = '(prim null? x)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim null? x)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim null? x)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6924 (prim null? x))) x6924)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (null? x) (let ((x6924 (prim null? x))) x6924))
[154] '(k '()) = '(prim equal? x y)
[149] '(k x) = '(prim equal? x y)
[159] '(k x) = '(prim equal? x y)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim equal? x y)
[149] '(k x) = '(prim equal? x y)
[159] '(k x) = '(prim equal? x y)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim equal? x y)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim equal? x y)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6925 (prim equal? x y))) x6925)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (equal? x y) (let ((x6925 (prim equal? x y))) x6925))
[154] '(k '()) = '(prim eq? x y)
[149] '(k x) = '(prim eq? x y)
[159] '(k x) = '(prim eq? x y)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim eq? x y)
[149] '(k x) = '(prim eq? x y)
[159] '(k x) = '(prim eq? x y)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim eq? x y)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim eq? x y)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6926 (prim eq? x y))) x6926)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (eq? x y) (let ((x6926 (prim eq? x y))) x6926))
[154] '(k '()) = '(prim cons a b)
[149] '(k x) = '(prim cons a b)
[159] '(k x) = '(prim cons a b)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim cons a b)
[149] '(k x) = '(prim cons a b)
[159] '(k x) = '(prim cons a b)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim cons a b)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim cons a b)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6927 (prim cons a b))) x6927)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (cons a b) (let ((x6927 (prim cons a b))) x6927))
[154] '(k '()) = '(prim car lst)
[149] '(k x) = '(prim car lst)
[159] '(k x) = '(prim car lst)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim car lst)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim car lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6928 (prim car lst))) x6928)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (car lst) (let ((x6928 (prim car lst))) x6928))
[154] '(k '()) = '(prim cdr lst)
[149] '(k x) = '(prim cdr lst)
[159] '(k x) = '(prim cdr lst)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim cdr lst)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim cdr lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6929 (prim cdr lst))) x6929)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (cdr lst) (let ((x6929 (prim cdr lst))) x6929))
[154] '(k '()) = '(equal? a6930 a6932)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6932 (modulo x a6931))) (equal? a6930 a6932))
[154] '(k '()) = '(let ((a6932 (modulo x a6931))) (equal? a6930 a6932))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[158] '(k `',dat) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[149] '(k x) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[159] '(k x) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[149] '(k x) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[159] '(k x) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[169] '(normalize-aes es k) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932))))
[158] '(k `',dat) = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932))))
[149] '(k x) = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932))))
[159] '(k x) = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932))))
[169] '(normalize-aes es k) = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932))))
[139] 'e+ = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (even? x) (let ((a6930 '0)) (let ((a6931 '2)) (let ((a6932 (modulo x a6931))) (equal? a6930 a6932)))))
[154] '(k '()) = '(equal? a6933 a6935)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6935 (modulo x a6934))) (equal? a6933 a6935))
[154] '(k '()) = '(let ((a6935 (modulo x a6934))) (equal? a6933 a6935))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[158] '(k `',dat) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[149] '(k x) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[159] '(k x) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[149] '(k x) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[159] '(k x) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[169] '(normalize-aes es k) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935))))
[158] '(k `',dat) = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935))))
[149] '(k x) = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935))))
[159] '(k x) = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935))))
[169] '(normalize-aes es k) = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935))))
[139] 'e+ = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (odd? x) (let ((a6933 '1)) (let ((a6934 '2)) (let ((a6935 (modulo x a6934))) (equal? a6933 a6935)))))
[159] '(k x) = 'x
[138] 'x = 'x
[132] '`(define ,sig ,(normalize-anf body)) = '(define (list . x) x)
[154] '(k '()) = '(prim inexact->exact val)
[149] '(k x) = '(prim inexact->exact val)
[159] '(k x) = '(prim inexact->exact val)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim inexact->exact val)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim inexact->exact val)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6936 (prim inexact->exact val))) x6936)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (float->int val) (let ((x6936 (prim inexact->exact val))) x6936))
[154] '(k '()) = '(prim exact->inexact val)
[149] '(k x) = '(prim exact->inexact val)
[159] '(k x) = '(prim exact->inexact val)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim exact->inexact val)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim exact->inexact val)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6937 (prim exact->inexact val))) x6937)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (int->float val) (let ((x6937 (prim exact->inexact val))) x6937))
[158] '(k `',dat) = ''#f
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6939 '#f)) x6939)
[158] '(k `',dat) = ''#t
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6942 '#t)) x6942)
[154] '(k '()) = '(member? x a6943)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6943 (cdr lst))) (member? x a6943))
[154] '(k '()) = '(let ((a6943 (cdr lst))) (member? x a6943))
[149] '(k x) = '(let ((a6943 (cdr lst))) (member? x a6943))
[159] '(k x) = '(let ((a6943 (cdr lst))) (member? x a6943))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6943 (cdr lst))) (member? x a6943))
[149] '(k x) = '(let ((a6943 (cdr lst))) (member? x a6943))
[159] '(k x) = '(let ((a6943 (cdr lst))) (member? x a6943))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6943 (cdr lst))) (member? x a6943))
[169] '(normalize-aes es k) = '(let ((a6943 (cdr lst))) (member? x a6943))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6943 (cdr lst))) (member? x a6943))
[149] '(k x) = '(let ((a6943 (cdr lst))) (member? x a6943))
[159] '(k x) = '(let ((a6943 (cdr lst))) (member? x a6943))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6943 (cdr lst))) (member? x a6943))
[149] '(k x) = '(let ((a6943 (cdr lst))) (member? x a6943))
[159] '(k x) = '(let ((a6943 (cdr lst))) (member? x a6943))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6943 (cdr lst))) (member? x a6943))
[169] '(normalize-aes es k) = '(let ((a6943 (cdr lst))) (member? x a6943))
[139] 'e+ = '(let ((a6943 (cdr lst))) (member? x a6943))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943))))
[154] '(k '()) = '(let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943))))
[149] '(k x) = '(let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943))))
[159] '(k x) = '(let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[154] '(k '()) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[149] '(k x) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[159] '(k x) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[149] '(k x) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[159] '(k x) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[169] '(normalize-aes es k) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[149] '(k x) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[159] '(k x) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[169] '(normalize-aes es k) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[139] 'e+ = '(let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[154] '(k '()) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[149] '(k x) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[159] '(k x) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[149] '(k x) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[159] '(k x) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[169] '(normalize-aes es k) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[139] 'e+ = '(let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943)))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (member? x lst) (let ((a6938 (null? lst))) (if a6938 (let ((x6939 '#f)) x6939) (let ((a6940 (car lst))) (let ((a6941 (equal? a6940 x))) (if a6941 (let ((x6942 '#t)) x6942) (let ((a6943 (cdr lst))) (member? x a6943))))))))
[159] '(k x) = 'acc
[138] 'x = 'acc
[154] '(k '()) = '(foldl fun a6946 a6947)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[154] '(k '()) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[149] '(k x) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[159] '(k x) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[149] '(k x) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[159] '(k x) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[169] '(normalize-aes es k) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6947 (cdr lst))) (foldl fun a6946 a6947))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947)))
[154] '(k '()) = '(let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947)))
[149] '(k x) = '(let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947)))
[159] '(k x) = '(let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[154] '(k '()) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[149] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[159] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[149] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[159] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[169] '(normalize-aes es k) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[149] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[159] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[169] '(normalize-aes es k) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[149] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[159] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[149] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[159] '(k x) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[169] '(normalize-aes es k) = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[139] 'e+ = '(let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[154] '(k '()) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[149] '(k x) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[159] '(k x) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[149] '(k x) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[159] '(k x) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[169] '(normalize-aes es k) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[139] 'e+ = '(let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (foldl fun acc lst) (let ((a6944 (null? lst))) (if a6944 acc (let ((a6945 (car lst))) (let ((a6946 (fun a6945 acc))) (let ((a6947 (cdr lst))) (foldl fun a6946 a6947)))))))
[159] '(k x) = 'lst2
[138] 'x = 'lst2
[154] '(k '()) = '(reverse-helper a6949 a6951)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))
[154] '(k '()) = '(let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))
[149] '(k x) = '(let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))
[159] '(k x) = '(let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[154] '(k '()) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[149] '(k x) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[159] '(k x) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[149] '(k x) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[159] '(k x) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[169] '(normalize-aes es k) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[149] '(k x) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[159] '(k x) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[169] '(normalize-aes es k) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[154] '(k '()) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[149] '(k x) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[159] '(k x) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[149] '(k x) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[159] '(k x) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[169] '(normalize-aes es k) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[149] '(k x) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[159] '(k x) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[169] '(normalize-aes es k) = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[139] 'e+ = '(let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[154] '(k '()) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[149] '(k x) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[159] '(k x) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[149] '(k x) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[159] '(k x) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[169] '(normalize-aes es k) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[139] 'e+ = '(let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (reverse-helper lst lst2) (let ((a6948 (null? lst))) (if a6948 lst2 (let ((a6949 (cdr lst))) (let ((a6950 (car lst))) (let ((a6951 (cons a6950 lst2))) (reverse-helper a6949 a6951)))))))
[154] '(k '()) = '(reverse-helper lst a6952)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[154] '(k '()) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[149] '(k x) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[159] '(k x) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[169] '(normalize-aes es k) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[149] '(k x) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[159] '(k x) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[149] '(k x) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[159] '(k x) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[169] '(normalize-aes es k) = '(let ((a6952 (list))) (reverse-helper lst a6952))
[139] 'e+ = '(let ((a6952 (list))) (reverse-helper lst a6952))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (reverse lst) (let ((a6952 (list))) (reverse-helper lst a6952)))
[154] '(k '()) = '(reverse lst2)
[149] '(k x) = '(reverse lst2)
[159] '(k x) = '(reverse lst2)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(reverse lst2)
[149] '(k x) = '(reverse lst2)
[159] '(k x) = '(reverse lst2)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(reverse lst2)
[169] '(normalize-aes es k) = '(reverse lst2)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6955 (reverse lst2))) x6955)
[154] '(k '()) = '(take-helper a6956 a6958 a6960)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))
[154] '(k '()) = '(let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))
[149] '(k x) = '(let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))
[159] '(k x) = '(let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[154] '(k '()) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[149] '(k x) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[159] '(k x) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[149] '(k x) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[159] '(k x) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[169] '(normalize-aes es k) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[149] '(k x) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[159] '(k x) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[169] '(normalize-aes es k) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))
[154] '(k '()) = '(let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[158] '(k `',dat) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[149] '(k x) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[159] '(k x) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[149] '(k x) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[159] '(k x) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[169] '(normalize-aes es k) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[154] '(k '()) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[149] '(k x) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[159] '(k x) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[149] '(k x) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[159] '(k x) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[169] '(normalize-aes es k) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[149] '(k x) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[159] '(k x) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[169] '(normalize-aes es k) = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[139] 'e+ = '(let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))))
[154] '(k '()) = '(let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[158] '(k `',dat) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[149] '(k x) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[159] '(k x) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[149] '(k x) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[159] '(k x) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[169] '(normalize-aes es k) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[139] 'e+ = '(let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960)))))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (take-helper lst n lst2) (let ((a6953 '0)) (let ((a6954 (= n a6953))) (if a6954 (let ((x6955 (reverse lst2))) x6955) (let ((a6956 (cdr lst))) (let ((a6957 '1)) (let ((a6958 (- n a6957))) (let ((a6959 (car lst))) (let ((a6960 (cons a6959 lst2))) (take-helper a6956 a6958 a6960))))))))))
[154] '(k '()) = '(take-helper lst n a6961)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6961 (list))) (take-helper lst n a6961))
[154] '(k '()) = '(let ((a6961 (list))) (take-helper lst n a6961))
[149] '(k x) = '(let ((a6961 (list))) (take-helper lst n a6961))
[159] '(k x) = '(let ((a6961 (list))) (take-helper lst n a6961))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6961 (list))) (take-helper lst n a6961))
[169] '(normalize-aes es k) = '(let ((a6961 (list))) (take-helper lst n a6961))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6961 (list))) (take-helper lst n a6961))
[149] '(k x) = '(let ((a6961 (list))) (take-helper lst n a6961))
[159] '(k x) = '(let ((a6961 (list))) (take-helper lst n a6961))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6961 (list))) (take-helper lst n a6961))
[149] '(k x) = '(let ((a6961 (list))) (take-helper lst n a6961))
[159] '(k x) = '(let ((a6961 (list))) (take-helper lst n a6961))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6961 (list))) (take-helper lst n a6961))
[149] '(k x) = '(let ((a6961 (list))) (take-helper lst n a6961))
[159] '(k x) = '(let ((a6961 (list))) (take-helper lst n a6961))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6961 (list))) (take-helper lst n a6961))
[169] '(normalize-aes es k) = '(let ((a6961 (list))) (take-helper lst n a6961))
[139] 'e+ = '(let ((a6961 (list))) (take-helper lst n a6961))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (take lst n) (let ((a6961 (list))) (take-helper lst n a6961)))
[158] '(k `',dat) = ''0
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6963 '0)) x6963)
[154] '(k '()) = '(+ a6964 a6966)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6966 (length a6965))) (+ a6964 a6966))
[154] '(k '()) = '(let ((a6966 (length a6965))) (+ a6964 a6966))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[154] '(k '()) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[149] '(k x) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[159] '(k x) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[149] '(k x) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[159] '(k x) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[169] '(normalize-aes es k) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[149] '(k x) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[159] '(k x) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[169] '(normalize-aes es k) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))
[158] '(k `',dat) = '(let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))
[149] '(k x) = '(let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))
[159] '(k x) = '(let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))
[169] '(normalize-aes es k) = '(let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))
[139] 'e+ = '(let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[154] '(k '()) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[149] '(k x) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[159] '(k x) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[149] '(k x) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[159] '(k x) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[169] '(normalize-aes es k) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[139] 'e+ = '(let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (length lst) (let ((a6962 (null? lst))) (if a6962 (let ((x6963 '0)) x6963) (let ((a6964 '1)) (let ((a6965 (cdr lst))) (let ((a6966 (length a6965))) (+ a6964 a6966)))))))
[154] '(k '()) = '(list)
[149] '(k x) = '(list)
[159] '(k x) = '(list)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(list)
[169] '(normalize-aes es k) = '(list)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6968 (list))) x6968)
[154] '(k '()) = '(cons a6970 a6972)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6972 (map proc a6971))) (cons a6970 a6972))
[154] '(k '()) = '(let ((a6972 (map proc a6971))) (cons a6970 a6972))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[154] '(k '()) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[149] '(k x) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[159] '(k x) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[149] '(k x) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[159] '(k x) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[169] '(normalize-aes es k) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[149] '(k x) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[159] '(k x) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[149] '(k x) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[159] '(k x) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[169] '(normalize-aes es k) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972))))
[154] '(k '()) = '(let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[154] '(k '()) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[149] '(k x) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[159] '(k x) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[149] '(k x) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[159] '(k x) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[169] '(normalize-aes es k) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[149] '(k x) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[159] '(k x) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[169] '(normalize-aes es k) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[149] '(k x) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[159] '(k x) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[169] '(normalize-aes es k) = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[139] 'e+ = '(let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[154] '(k '()) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[149] '(k x) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[159] '(k x) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[149] '(k x) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[159] '(k x) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[169] '(normalize-aes es k) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[139] 'e+ = '(let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972)))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (map proc lst) (let ((a6967 (null? lst))) (if a6967 (let ((x6968 (list))) x6968) (let ((a6969 (car lst))) (let ((a6970 (proc a6969))) (let ((a6971 (cdr lst))) (let ((a6972 (map proc a6971))) (cons a6970 a6972))))))))
[154] '(k '()) = '(list)
[149] '(k x) = '(list)
[159] '(k x) = '(list)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(list)
[169] '(normalize-aes es k) = '(list)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6974 (list))) x6974)
[154] '(k '()) = '(cons a6977 a6979)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6979 (filter op a6978))) (cons a6977 a6979))
[154] '(k '()) = '(let ((a6979 (filter op a6978))) (cons a6977 a6979))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[154] '(k '()) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[149] '(k x) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[159] '(k x) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[149] '(k x) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[159] '(k x) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[169] '(normalize-aes es k) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[149] '(k x) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[159] '(k x) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[149] '(k x) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[159] '(k x) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[169] '(normalize-aes es k) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[154] '(k '()) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[149] '(k x) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[159] '(k x) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[149] '(k x) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[159] '(k x) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[169] '(normalize-aes es k) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[149] '(k x) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[159] '(k x) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[169] '(normalize-aes es k) = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[139] 'e+ = '(let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979))))
[154] '(k '()) = '(filter op a6980)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6980 (cdr lst))) (filter op a6980))
[154] '(k '()) = '(let ((a6980 (cdr lst))) (filter op a6980))
[149] '(k x) = '(let ((a6980 (cdr lst))) (filter op a6980))
[159] '(k x) = '(let ((a6980 (cdr lst))) (filter op a6980))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6980 (cdr lst))) (filter op a6980))
[149] '(k x) = '(let ((a6980 (cdr lst))) (filter op a6980))
[159] '(k x) = '(let ((a6980 (cdr lst))) (filter op a6980))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6980 (cdr lst))) (filter op a6980))
[169] '(normalize-aes es k) = '(let ((a6980 (cdr lst))) (filter op a6980))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6980 (cdr lst))) (filter op a6980))
[149] '(k x) = '(let ((a6980 (cdr lst))) (filter op a6980))
[159] '(k x) = '(let ((a6980 (cdr lst))) (filter op a6980))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6980 (cdr lst))) (filter op a6980))
[149] '(k x) = '(let ((a6980 (cdr lst))) (filter op a6980))
[159] '(k x) = '(let ((a6980 (cdr lst))) (filter op a6980))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6980 (cdr lst))) (filter op a6980))
[169] '(normalize-aes es k) = '(let ((a6980 (cdr lst))) (filter op a6980))
[139] 'e+ = '(let ((a6980 (cdr lst))) (filter op a6980))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980))))
[154] '(k '()) = '(let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[154] '(k '()) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[149] '(k x) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[159] '(k x) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[149] '(k x) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[159] '(k x) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[169] '(normalize-aes es k) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[149] '(k x) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[159] '(k x) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[169] '(normalize-aes es k) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[139] 'e+ = '(let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[154] '(k '()) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[149] '(k x) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[159] '(k x) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[149] '(k x) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[159] '(k x) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[169] '(normalize-aes es k) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[139] 'e+ = '(let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980)))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (filter op lst) (let ((a6973 (null? lst))) (if a6973 (let ((x6974 (list))) x6974) (let ((a6975 (car lst))) (let ((a6976 (op a6975))) (if a6976 (let ((a6977 (car lst))) (let ((a6978 (cdr lst))) (let ((a6979 (filter op a6978))) (cons a6977 a6979)))) (let ((a6980 (cdr lst))) (filter op a6980))))))))
[159] '(k x) = 'lst
[138] 'x = 'lst
[154] '(k '()) = '(drop a6983 a6985)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6985 (- n a6984))) (drop a6983 a6985))
[154] '(k '()) = '(let ((a6985 (- n a6984))) (drop a6983 a6985))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[158] '(k `',dat) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[149] '(k x) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[159] '(k x) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[149] '(k x) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[159] '(k x) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[169] '(normalize-aes es k) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[154] '(k '()) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[149] '(k x) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[159] '(k x) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[149] '(k x) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[159] '(k x) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[169] '(normalize-aes es k) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[149] '(k x) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[159] '(k x) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[169] '(normalize-aes es k) = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[139] 'e+ = '(let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))))
[154] '(k '()) = '(let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[158] '(k `',dat) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[149] '(k x) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[159] '(k x) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[149] '(k x) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[159] '(k x) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[169] '(normalize-aes es k) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[139] 'e+ = '(let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985)))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (drop lst n) (let ((a6981 '0)) (let ((a6982 (= n a6981))) (if a6982 lst (let ((a6983 (cdr lst))) (let ((a6984 '1)) (let ((a6985 (- n a6984))) (drop a6983 a6985))))))))
[159] '(k x) = 'acc
[138] 'x = 'acc
[154] '(k '()) = '(proc a6987 a6989)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))
[154] '(k '()) = '(let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[154] '(k '()) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[149] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[159] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[149] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[159] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[169] '(normalize-aes es k) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[149] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[159] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[149] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[159] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[149] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[159] '(k x) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[169] '(normalize-aes es k) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[154] '(k '()) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[149] '(k x) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[159] '(k x) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[149] '(k x) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[159] '(k x) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[169] '(normalize-aes es k) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[149] '(k x) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[159] '(k x) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[169] '(normalize-aes es k) = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[139] 'e+ = '(let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[154] '(k '()) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[149] '(k x) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[159] '(k x) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[149] '(k x) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[159] '(k x) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[169] '(normalize-aes es k) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[139] 'e+ = '(let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (foldr proc acc lst) (let ((a6986 (null? lst))) (if a6986 acc (let ((a6987 (car lst))) (let ((a6988 (cdr lst))) (let ((a6989 (foldr proc acc a6988))) (proc a6987 a6989)))))))
[159] '(k x) = 'lst2
[138] 'x = 'lst2
[154] '(k '()) = '(cons a6991 a6993)
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6993 (append a6992 lst2))) (cons a6991 a6993))
[154] '(k '()) = '(let ((a6993 (append a6992 lst2))) (cons a6991 a6993))
[149] '(k x) = '(let ((a6993 (append a6992 lst2))) (cons a6991 a6993))
[159] '(k x) = '(let ((a6993 (append a6992 lst2))) (cons a6991 a6993))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6993 (append a6992 lst2))) (cons a6991 a6993))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[154] '(k '()) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[149] '(k x) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[159] '(k x) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[149] '(k x) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[159] '(k x) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[169] '(normalize-aes es k) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[149] '(k x) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[159] '(k x) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[169] '(normalize-aes es k) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[154] '(k '()) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[149] '(k x) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[159] '(k x) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[149] '(k x) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[159] '(k x) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[169] '(normalize-aes es k) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[149] '(k x) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[159] '(k x) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[169] '(normalize-aes es k) = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[139] 'e+ = '(let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))
[150] '`(let ((,x ,anf)) ,(k x)) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[154] '(k '()) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[149] '(k x) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[159] '(k x) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[149] '(k x) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[159] '(k x) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[169] '(normalize-aes es k) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[165] '(normalize-ae ec (lambda (xc) (k `(if ,xc ,(normalize-anf et) ,(normalize-anf ef))))) = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[139] 'e+ = '(let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993))))))
[132] '`(define ,sig ,(normalize-anf body)) = '(define (append lst1 lst2) (let ((a6990 (null? lst1))) (if a6990 lst2 (let ((a6991 (car lst1))) (let ((a6992 (cdr lst1))) (let ((a6993 (append a6992 lst2))) (cons a6991 a6993)))))))
[149] '(k x) = '(apply-prim hash lst)
[159] '(k x) = '(apply-prim hash lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim hash lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6994 (apply-prim hash lst))) x6994)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (hash . lst) (let ((x6994 (apply-prim hash lst))) x6994))
[154] '(k '()) = '(prim hash-ref h k)
[149] '(k x) = '(prim hash-ref h k)
[159] '(k x) = '(prim hash-ref h k)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-ref h k)
[149] '(k x) = '(prim hash-ref h k)
[159] '(k x) = '(prim hash-ref h k)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-ref h k)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim hash-ref h k)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6995 (prim hash-ref h k))) x6995)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (hash-ref h k) (let ((x6995 (prim hash-ref h k))) x6995))
[154] '(k '()) = '(prim hash-set h k v)
[149] '(k x) = '(prim hash-set h k v)
[159] '(k x) = '(prim hash-set h k v)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-set h k v)
[149] '(k x) = '(prim hash-set h k v)
[159] '(k x) = '(prim hash-set h k v)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-set h k v)
[149] '(k x) = '(prim hash-set h k v)
[159] '(k x) = '(prim hash-set h k v)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-set h k v)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim hash-set h k v)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6996 (prim hash-set h k v))) x6996)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (hash-set h k v) (let ((x6996 (prim hash-set h k v))) x6996))
[154] '(k '()) = '(prim hash-keys h)
[149] '(k x) = '(prim hash-keys h)
[159] '(k x) = '(prim hash-keys h)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-keys h)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim hash-keys h)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6997 (prim hash-keys h))) x6997)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (hash-keys h) (let ((x6997 (prim hash-keys h))) x6997))
[154] '(k '()) = '(prim hash-has-key? h k)
[149] '(k x) = '(prim hash-has-key? h k)
[159] '(k x) = '(prim hash-has-key? h k)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-has-key? h k)
[149] '(k x) = '(prim hash-has-key? h k)
[159] '(k x) = '(prim hash-has-key? h k)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-has-key? h k)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim hash-has-key? h k)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6998 (prim hash-has-key? h k))) x6998)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (hash-has-key? h k) (let ((x6998 (prim hash-has-key? h k))) x6998))
[154] '(k '()) = '(prim hash-count h)
[149] '(k x) = '(prim hash-count h)
[159] '(k x) = '(prim hash-count h)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim hash-count h)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim hash-count h)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x6999 (prim hash-count h))) x6999)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (hash-count h) (let ((x6999 (prim hash-count h))) x6999))
[149] '(k x) = '(apply-prim set lst)
[159] '(k x) = '(apply-prim set lst)
[167] '(normalize-ae e0 (lambda (x) (k `(apply-prim ,op ,x)))) = '(apply-prim set lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7000 (apply-prim set lst))) x7000)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (set . lst) (let ((x7000 (apply-prim set lst))) x7000))
[154] '(k '()) = '(prim set->list h)
[149] '(k x) = '(prim set->list h)
[159] '(k x) = '(prim set->list h)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim set->list h)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim set->list h)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7001 (prim set->list h))) x7001)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (set->list h) (let ((x7001 (prim set->list h))) x7001))
[154] '(k '()) = '(prim list->set lst)
[149] '(k x) = '(prim list->set lst)
[159] '(k x) = '(prim list->set lst)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim list->set lst)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim list->set lst)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7002 (prim list->set lst))) x7002)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (list->set lst) (let ((x7002 (prim list->set lst))) x7002))
[154] '(k '()) = '(prim set-add s val)
[149] '(k x) = '(prim set-add s val)
[159] '(k x) = '(prim set-add s val)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim set-add s val)
[149] '(k x) = '(prim set-add s val)
[159] '(k x) = '(prim set-add s val)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim set-add s val)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim set-add s val)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7003 (prim set-add s val))) x7003)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (set-add s val) (let ((x7003 (prim set-add s val))) x7003))
[154] '(k '()) = '(prim string? str)
[149] '(k x) = '(prim string? str)
[159] '(k x) = '(prim string? str)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim string? str)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim string? str)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7004 (prim string? str))) x7004)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (string? str) (let ((x7004 (prim string? str))) x7004))
[154] '(k '()) = '(prim string-length str)
[149] '(k x) = '(prim string-length str)
[159] '(k x) = '(prim string-length str)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim string-length str)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim string-length str)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7005 (prim string-length str))) x7005)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (string-length str) (let ((x7005 (prim string-length str))) x7005))
[154] '(k '()) = '(prim string-ref str pos)
[149] '(k x) = '(prim string-ref str pos)
[159] '(k x) = '(prim string-ref str pos)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim string-ref str pos)
[149] '(k x) = '(prim string-ref str pos)
[159] '(k x) = '(prim string-ref str pos)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim string-ref str pos)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim string-ref str pos)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7006 (prim string-ref str pos))) x7006)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (string-ref str pos) (let ((x7006 (prim string-ref str pos))) x7006))
[154] '(k '()) = '(prim substring str start end)
[149] '(k x) = '(prim substring str start end)
[159] '(k x) = '(prim substring str start end)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim substring str start end)
[149] '(k x) = '(prim substring str start end)
[159] '(k x) = '(prim substring str start end)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim substring str start end)
[149] '(k x) = '(prim substring str start end)
[159] '(k x) = '(prim substring str start end)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim substring str start end)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim substring str start end)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7007 (prim substring str start end))) x7007)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (substring str start end) (let ((x7007 (prim substring str start end))) x7007))
[154] '(k '()) = '(prim string-append s1 s2)
[149] '(k x) = '(prim string-append s1 s2)
[159] '(k x) = '(prim string-append s1 s2)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim string-append s1 s2)
[149] '(k x) = '(prim string-append s1 s2)
[159] '(k x) = '(prim string-append s1 s2)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim string-append s1 s2)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim string-append s1 s2)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7008 (prim string-append s1 s2))) x7008)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (string-append s1 s2) (let ((x7008 (prim string-append s1 s2))) x7008))
[154] '(k '()) = '(prim string->list str)
[149] '(k x) = '(prim string->list str)
[159] '(k x) = '(prim string->list str)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(prim string->list str)
[166] '(normalize-aes es (lambda (xs) (k `(prim ,op . ,xs)))) = '(prim string->list str)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7009 (prim string->list str))) x7009)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (string->list str) (let ((x7009 (prim string->list str))) x7009))
[158] '(k `',dat) = ''"random"
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7010 '"random")) x7010)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (call) (let ((x7010 '"random")) x7010))
[154] '(k '()) = '(call)
[149] '(k x) = '(call)
[159] '(k x) = '(call)
[155] '(normalize-ae (car es) (lambda (x) (normalize-aes (cdr es) (lambda (xs) (k `(,x . ,xs)))))) = '(call)
[169] '(normalize-aes es k) = '(call)
[142] '`(let ((,x+ ,e+)) ,x+) = '(let ((x7011 (call))) x7011)
[132] '`(define ,sig ,(normalize-anf body)) = '(define (brouhaha_main) (let ((x7011 (call))) x7011))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7012 x6914)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6914 (apply-prim + lst))) (kont7012 x6914))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6914 (apply-prim + lst))) (kont7012 x6914)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7012 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6914 (apply-prim + lst))) (kont7012 x6914))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (+ . lst) (let ((kont7012 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6914 (apply-prim + lst))) (kont7012 x6914)))))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7014 x6915)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6915 (apply-prim - lst))) (kont7014 x6915))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6915 (apply-prim - lst))) (kont7014 x6915)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7014 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6915 (apply-prim - lst))) (kont7014 x6915))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (- . lst) (let ((kont7014 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6915 (apply-prim - lst))) (kont7014 x6915)))))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7016 x6916)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6916 (apply-prim * lst))) (kont7016 x6916))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6916 (apply-prim * lst))) (kont7016 x6916)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7016 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6916 (apply-prim * lst))) (kont7016 x6916))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (* . lst) (let ((kont7016 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6916 (apply-prim * lst))) (kont7016 x6916)))))
[181] 'x = 'a
[181] 'x = 'b
[189] '`(,cae ,x) = '(kont7018 x6917)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6917 (prim modulo a b))) (kont7018 x6917))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (modulo kont7018 a b) (let ((x6917 (prim modulo a b))) (kont7018 x6917)))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7019 x6918)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6918 (apply-prim / lst))) (kont7019 x6918))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6918 (apply-prim / lst))) (kont7019 x6918)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7019 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6918 (apply-prim / lst))) (kont7019 x6918))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (/ . lst) (let ((kont7019 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6918 (apply-prim / lst))) (kont7019 x6918)))))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7021 x6919)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6919 (apply-prim = lst))) (kont7021 x6919))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6919 (apply-prim = lst))) (kont7021 x6919)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7021 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6919 (apply-prim = lst))) (kont7021 x6919))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (= . lst) (let ((kont7021 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6919 (apply-prim = lst))) (kont7021 x6919)))))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7023 x6920)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6920 (apply-prim > lst))) (kont7023 x6920))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6920 (apply-prim > lst))) (kont7023 x6920)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7023 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6920 (apply-prim > lst))) (kont7023 x6920))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (> . lst) (let ((kont7023 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6920 (apply-prim > lst))) (kont7023 x6920)))))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7025 x6921)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6921 (apply-prim < lst))) (kont7025 x6921))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6921 (apply-prim < lst))) (kont7025 x6921)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7025 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6921 (apply-prim < lst))) (kont7025 x6921))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (< . lst) (let ((kont7025 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6921 (apply-prim < lst))) (kont7025 x6921)))))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7027 x6922)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6922 (apply-prim <= lst))) (kont7027 x6922))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6922 (apply-prim <= lst))) (kont7027 x6922)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7027 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6922 (apply-prim <= lst))) (kont7027 x6922))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (<= . lst) (let ((kont7027 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6922 (apply-prim <= lst))) (kont7027 x6922)))))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7029 x6923)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6923 (apply-prim >= lst))) (kont7029 x6923))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6923 (apply-prim >= lst))) (kont7029 x6923)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7029 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6923 (apply-prim >= lst))) (kont7029 x6923))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (>= . lst) (let ((kont7029 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6923 (apply-prim >= lst))) (kont7029 x6923)))))
[181] 'x = 'x
[189] '`(,cae ,x) = '(kont7031 x6924)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6924 (prim null? x))) (kont7031 x6924))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (null? kont7031 x) (let ((x6924 (prim null? x))) (kont7031 x6924)))
[181] 'x = 'x
[181] 'x = 'y
[189] '`(,cae ,x) = '(kont7032 x6925)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6925 (prim equal? x y))) (kont7032 x6925))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (equal? kont7032 x y) (let ((x6925 (prim equal? x y))) (kont7032 x6925)))
[181] 'x = 'x
[181] 'x = 'y
[189] '`(,cae ,x) = '(kont7033 x6926)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6926 (prim eq? x y))) (kont7033 x6926))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (eq? kont7033 x y) (let ((x6926 (prim eq? x y))) (kont7033 x6926)))
[181] 'x = 'a
[181] 'x = 'b
[189] '`(,cae ,x) = '(kont7034 x6927)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6927 (prim cons a b))) (kont7034 x6927))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (cons kont7034 a b) (let ((x6927 (prim cons a b))) (kont7034 x6927)))
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7035 x6928)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6928 (prim car lst))) (kont7035 x6928))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (car kont7035 lst) (let ((x6928 (prim car lst))) (kont7035 x6928)))
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7036 x6929)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6929 (prim cdr lst))) (kont7036 x6929))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (cdr kont7036 lst) (let ((x6929 (prim cdr lst))) (kont7036 x6929)))
[181] 'x = 'equal?
[181] 'x = 'a6930
[181] 'x = 'a6932
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(equal? kont7037 a6930 a6932)
[181] 'x = 'modulo
[181] 'x = 'x
[181] 'x = 'a6931
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(modulo f7038 x a6931)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7038 (lambda (a6932) (equal? kont7037 a6930 a6932)))) (modulo f7038 x a6931))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7038 (lambda (a6932) (equal? kont7037 a6930 a6932)))) (modulo f7038 x a6931))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6931 '2)) (let ((f7038 (lambda (a6932) (equal? kont7037 a6930 a6932)))) (modulo f7038 x a6931)))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6930 '0)) (let ((a6931 '2)) (let ((f7038 (lambda (a6932) (equal? kont7037 a6930 a6932)))) (modulo f7038 x a6931))))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (even? kont7037 x) (let ((a6930 '0)) (let ((a6931 '2)) (let ((f7038 (lambda (a6932) (equal? kont7037 a6930 a6932)))) (modulo f7038 x a6931)))))
[181] 'x = 'equal?
[181] 'x = 'a6933
[181] 'x = 'a6935
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(equal? kont7039 a6933 a6935)
[181] 'x = 'modulo
[181] 'x = 'x
[181] 'x = 'a6934
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(modulo f7040 x a6934)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7040 (lambda (a6935) (equal? kont7039 a6933 a6935)))) (modulo f7040 x a6934))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7040 (lambda (a6935) (equal? kont7039 a6933 a6935)))) (modulo f7040 x a6934))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6934 '2)) (let ((f7040 (lambda (a6935) (equal? kont7039 a6933 a6935)))) (modulo f7040 x a6934)))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6933 '1)) (let ((a6934 '2)) (let ((f7040 (lambda (a6935) (equal? kont7039 a6933 a6935)))) (modulo f7040 x a6934))))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (odd? kont7039 x) (let ((a6933 '1)) (let ((a6934 '2)) (let ((f7040 (lambda (a6935) (equal? kont7039 a6933 a6935)))) (modulo f7040 x a6934)))))
[181] 'x = 'x
[181] 'x = 'x
[189] '`(,cae ,x) = '(kont7041 x)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x (prim cdr x))) (kont7041 x))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7041 (prim car x))) (let ((x (prim cdr x))) (kont7041 x)))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (list . x) (let ((kont7041 (prim car x))) (let ((x (prim cdr x))) (kont7041 x))))
[181] 'x = 'val
[189] '`(,cae ,x) = '(kont7043 x6936)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6936 (prim inexact->exact val))) (kont7043 x6936))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (float->int kont7043 val) (let ((x6936 (prim inexact->exact val))) (kont7043 x6936)))
[181] 'x = 'val
[189] '`(,cae ,x) = '(kont7044 x6937)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6937 (prim exact->inexact val))) (kont7044 x6937))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (int->float kont7044 val) (let ((x6937 (prim exact->inexact val))) (kont7044 x6937)))
[181] 'x = 'a6938
[189] '`(,cae ,x) = '(kont7045 x6939)
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((x6939 '#f)) (kont7045 x6939))
[181] 'x = 'a6941
[189] '`(,cae ,x) = '(kont7045 x6942)
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((x6942 '#t)) (kont7045 x6942))
[181] 'x = 'member?
[181] 'x = 'x
[181] 'x = 'a6943
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(member? kont7045 x a6943)
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7046 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))
[181] 'x = 'equal?
[181] 'x = 'a6940
[181] 'x = 'x
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(equal? f7047 a6940 x)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7047 (lambda (a6941) (if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))))) (equal? f7047 a6940 x))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7047 (lambda (a6941) (if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))))) (equal? f7047 a6940 x))
[181] 'x = 'car
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7048 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7048 (lambda (a6940) (let ((f7047 (lambda (a6941) (if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))))) (equal? f7047 a6940 x))))) (car f7048 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7048 (lambda (a6940) (let ((f7047 (lambda (a6941) (if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))))) (equal? f7047 a6940 x))))) (car f7048 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6938 (let ((x6939 '#f)) (kont7045 x6939)) (let ((f7048 (lambda (a6940) (let ((f7047 (lambda (a6941) (if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))))) (equal? f7047 a6940 x))))) (car f7048 lst)))
[181] 'x = 'null?
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(null? f7049 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7049 (lambda (a6938) (if a6938 (let ((x6939 '#f)) (kont7045 x6939)) (let ((f7048 (lambda (a6940) (let ((f7047 (lambda (a6941) (if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))))) (equal? f7047 a6940 x))))) (car f7048 lst)))))) (null? f7049 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7049 (lambda (a6938) (if a6938 (let ((x6939 '#f)) (kont7045 x6939)) (let ((f7048 (lambda (a6940) (let ((f7047 (lambda (a6941) (if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))))) (equal? f7047 a6940 x))))) (car f7048 lst)))))) (null? f7049 lst))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (member? kont7045 x lst) (let ((f7049 (lambda (a6938) (if a6938 (let ((x6939 '#f)) (kont7045 x6939)) (let ((f7048 (lambda (a6940) (let ((f7047 (lambda (a6941) (if a6941 (let ((x6942 '#t)) (kont7045 x6942)) (let ((f7046 (lambda (a6943) (member? kont7045 x a6943)))) (cdr f7046 lst)))))) (equal? f7047 a6940 x))))) (car f7048 lst)))))) (null? f7049 lst)))
[181] 'x = 'a6944
[189] '`(,cae ,x) = '(kont7050 acc)
[181] 'x = 'foldl
[181] 'x = 'fun
[181] 'x = 'a6946
[181] 'x = 'a6947
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(foldl kont7050 fun a6946 a6947)
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7051 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))
[181] 'x = 'fun
[181] 'x = 'a6945
[181] 'x = 'acc
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(fun f7052 a6945 acc)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7052 (lambda (a6946) (let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))))) (fun f7052 a6945 acc))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7052 (lambda (a6946) (let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))))) (fun f7052 a6945 acc))
[181] 'x = 'car
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7053 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7053 (lambda (a6945) (let ((f7052 (lambda (a6946) (let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))))) (fun f7052 a6945 acc))))) (car f7053 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7053 (lambda (a6945) (let ((f7052 (lambda (a6946) (let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))))) (fun f7052 a6945 acc))))) (car f7053 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6944 (kont7050 acc) (let ((f7053 (lambda (a6945) (let ((f7052 (lambda (a6946) (let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))))) (fun f7052 a6945 acc))))) (car f7053 lst)))
[181] 'x = 'null?
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(null? f7054 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7054 (lambda (a6944) (if a6944 (kont7050 acc) (let ((f7053 (lambda (a6945) (let ((f7052 (lambda (a6946) (let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))))) (fun f7052 a6945 acc))))) (car f7053 lst)))))) (null? f7054 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7054 (lambda (a6944) (if a6944 (kont7050 acc) (let ((f7053 (lambda (a6945) (let ((f7052 (lambda (a6946) (let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))))) (fun f7052 a6945 acc))))) (car f7053 lst)))))) (null? f7054 lst))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (foldl kont7050 fun acc lst) (let ((f7054 (lambda (a6944) (if a6944 (kont7050 acc) (let ((f7053 (lambda (a6945) (let ((f7052 (lambda (a6946) (let ((f7051 (lambda (a6947) (foldl kont7050 fun a6946 a6947)))) (cdr f7051 lst))))) (fun f7052 a6945 acc))))) (car f7053 lst)))))) (null? f7054 lst)))
[181] 'x = 'a6948
[189] '`(,cae ,x) = '(kont7055 lst2)
[181] 'x = 'reverse-helper
[181] 'x = 'a6949
[181] 'x = 'a6951
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(reverse-helper kont7055 a6949 a6951)
[181] 'x = 'cons
[181] 'x = 'a6950
[181] 'x = 'lst2
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cons f7056 a6950 lst2)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))
[181] 'x = 'car
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7057 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7057 (lambda (a6950) (let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))))) (car f7057 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7057 (lambda (a6950) (let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))))) (car f7057 lst))
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7058 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7058 (lambda (a6949) (let ((f7057 (lambda (a6950) (let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))))) (car f7057 lst))))) (cdr f7058 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7058 (lambda (a6949) (let ((f7057 (lambda (a6950) (let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))))) (car f7057 lst))))) (cdr f7058 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6948 (kont7055 lst2) (let ((f7058 (lambda (a6949) (let ((f7057 (lambda (a6950) (let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))))) (car f7057 lst))))) (cdr f7058 lst)))
[181] 'x = 'null?
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(null? f7059 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7059 (lambda (a6948) (if a6948 (kont7055 lst2) (let ((f7058 (lambda (a6949) (let ((f7057 (lambda (a6950) (let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))))) (car f7057 lst))))) (cdr f7058 lst)))))) (null? f7059 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7059 (lambda (a6948) (if a6948 (kont7055 lst2) (let ((f7058 (lambda (a6949) (let ((f7057 (lambda (a6950) (let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))))) (car f7057 lst))))) (cdr f7058 lst)))))) (null? f7059 lst))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (reverse-helper kont7055 lst lst2) (let ((f7059 (lambda (a6948) (if a6948 (kont7055 lst2) (let ((f7058 (lambda (a6949) (let ((f7057 (lambda (a6950) (let ((f7056 (lambda (a6951) (reverse-helper kont7055 a6949 a6951)))) (cons f7056 a6950 lst2))))) (car f7057 lst))))) (cdr f7058 lst)))))) (null? f7059 lst)))
[181] 'x = 'reverse-helper
[181] 'x = 'lst
[181] 'x = 'a6952
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(reverse-helper kont7060 lst a6952)
[181] 'x = 'list
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(list f7061)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7061 (lambda (a6952) (reverse-helper kont7060 lst a6952)))) (list f7061))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7061 (lambda (a6952) (reverse-helper kont7060 lst a6952)))) (list f7061))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (reverse kont7060 lst) (let ((f7061 (lambda (a6952) (reverse-helper kont7060 lst a6952)))) (list f7061)))
[181] 'x = 'a6954
[189] '`(,cae ,x) = '(kont7062 x6955)
[181] 'x = 'reverse
[181] 'x = 'lst2
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(reverse f7063 lst2)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7063 (lambda (x6955) (kont7062 x6955)))) (reverse f7063 lst2))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7063 (lambda (x6955) (kont7062 x6955)))) (reverse f7063 lst2))
[181] 'x = 'take-helper
[181] 'x = 'a6956
[181] 'x = 'a6958
[181] 'x = 'a6960
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(take-helper kont7062 a6956 a6958 a6960)
[181] 'x = 'cons
[181] 'x = 'a6959
[181] 'x = 'lst2
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cons f7064 a6959 lst2)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))
[181] 'x = 'car
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7065 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))
[181] 'x = '-
[181] 'x = 'n
[181] 'x = 'a6957
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(- f7066 n a6957)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6957 '1)) (let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957)))
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7067 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7067 (lambda (a6956) (let ((a6957 '1)) (let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957)))))) (cdr f7067 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7067 (lambda (a6956) (let ((a6957 '1)) (let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957)))))) (cdr f7067 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6954 (let ((f7063 (lambda (x6955) (kont7062 x6955)))) (reverse f7063 lst2)) (let ((f7067 (lambda (a6956) (let ((a6957 '1)) (let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957)))))) (cdr f7067 lst)))
[181] 'x = '=
[181] 'x = 'n
[181] 'x = 'a6953
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(= f7068 n a6953)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7068 (lambda (a6954) (if a6954 (let ((f7063 (lambda (x6955) (kont7062 x6955)))) (reverse f7063 lst2)) (let ((f7067 (lambda (a6956) (let ((a6957 '1)) (let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957)))))) (cdr f7067 lst)))))) (= f7068 n a6953))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7068 (lambda (a6954) (if a6954 (let ((f7063 (lambda (x6955) (kont7062 x6955)))) (reverse f7063 lst2)) (let ((f7067 (lambda (a6956) (let ((a6957 '1)) (let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957)))))) (cdr f7067 lst)))))) (= f7068 n a6953))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6953 '0)) (let ((f7068 (lambda (a6954) (if a6954 (let ((f7063 (lambda (x6955) (kont7062 x6955)))) (reverse f7063 lst2)) (let ((f7067 (lambda (a6956) (let ((a6957 '1)) (let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957)))))) (cdr f7067 lst)))))) (= f7068 n a6953)))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (take-helper kont7062 lst n lst2) (let ((a6953 '0)) (let ((f7068 (lambda (a6954) (if a6954 (let ((f7063 (lambda (x6955) (kont7062 x6955)))) (reverse f7063 lst2)) (let ((f7067 (lambda (a6956) (let ((a6957 '1)) (let ((f7066 (lambda (a6958) (let ((f7065 (lambda (a6959) (let ((f7064 (lambda (a6960) (take-helper kont7062 a6956 a6958 a6960)))) (cons f7064 a6959 lst2))))) (car f7065 lst))))) (- f7066 n a6957)))))) (cdr f7067 lst)))))) (= f7068 n a6953))))
[181] 'x = 'take-helper
[181] 'x = 'lst
[181] 'x = 'n
[181] 'x = 'a6961
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(take-helper kont7069 lst n a6961)
[181] 'x = 'list
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(list f7070)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7070 (lambda (a6961) (take-helper kont7069 lst n a6961)))) (list f7070))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7070 (lambda (a6961) (take-helper kont7069 lst n a6961)))) (list f7070))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (take kont7069 lst n) (let ((f7070 (lambda (a6961) (take-helper kont7069 lst n a6961)))) (list f7070)))
[181] 'x = 'a6962
[189] '`(,cae ,x) = '(kont7071 x6963)
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((x6963 '0)) (kont7071 x6963))
[181] 'x = '+
[181] 'x = 'a6964
[181] 'x = 'a6966
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(+ kont7071 a6964 a6966)
[181] 'x = 'length
[181] 'x = 'a6965
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(length f7072 a6965)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7073 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7073 (lambda (a6965) (let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))))) (cdr f7073 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7073 (lambda (a6965) (let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))))) (cdr f7073 lst))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6964 '1)) (let ((f7073 (lambda (a6965) (let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))))) (cdr f7073 lst)))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6962 (let ((x6963 '0)) (kont7071 x6963)) (let ((a6964 '1)) (let ((f7073 (lambda (a6965) (let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))))) (cdr f7073 lst))))
[181] 'x = 'null?
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(null? f7074 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7074 (lambda (a6962) (if a6962 (let ((x6963 '0)) (kont7071 x6963)) (let ((a6964 '1)) (let ((f7073 (lambda (a6965) (let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))))) (cdr f7073 lst))))))) (null? f7074 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7074 (lambda (a6962) (if a6962 (let ((x6963 '0)) (kont7071 x6963)) (let ((a6964 '1)) (let ((f7073 (lambda (a6965) (let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))))) (cdr f7073 lst))))))) (null? f7074 lst))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (length kont7071 lst) (let ((f7074 (lambda (a6962) (if a6962 (let ((x6963 '0)) (kont7071 x6963)) (let ((a6964 '1)) (let ((f7073 (lambda (a6965) (let ((f7072 (lambda (a6966) (+ kont7071 a6964 a6966)))) (length f7072 a6965))))) (cdr f7073 lst))))))) (null? f7074 lst)))
[181] 'x = 'a6967
[189] '`(,cae ,x) = '(kont7075 x6968)
[181] 'x = 'list
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(list f7076)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7076 (lambda (x6968) (kont7075 x6968)))) (list f7076))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7076 (lambda (x6968) (kont7075 x6968)))) (list f7076))
[181] 'x = 'cons
[181] 'x = 'a6970
[181] 'x = 'a6972
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cons kont7075 a6970 a6972)
[181] 'x = 'map
[181] 'x = 'proc
[181] 'x = 'a6971
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(map f7077 proc a6971)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7078 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))
[181] 'x = 'proc
[181] 'x = 'a6969
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(proc f7079 a6969)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7079 (lambda (a6970) (let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))))) (proc f7079 a6969))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7079 (lambda (a6970) (let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))))) (proc f7079 a6969))
[181] 'x = 'car
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7080 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7080 (lambda (a6969) (let ((f7079 (lambda (a6970) (let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))))) (proc f7079 a6969))))) (car f7080 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7080 (lambda (a6969) (let ((f7079 (lambda (a6970) (let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))))) (proc f7079 a6969))))) (car f7080 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6967 (let ((f7076 (lambda (x6968) (kont7075 x6968)))) (list f7076)) (let ((f7080 (lambda (a6969) (let ((f7079 (lambda (a6970) (let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))))) (proc f7079 a6969))))) (car f7080 lst)))
[181] 'x = 'null?
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(null? f7081 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7081 (lambda (a6967) (if a6967 (let ((f7076 (lambda (x6968) (kont7075 x6968)))) (list f7076)) (let ((f7080 (lambda (a6969) (let ((f7079 (lambda (a6970) (let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))))) (proc f7079 a6969))))) (car f7080 lst)))))) (null? f7081 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7081 (lambda (a6967) (if a6967 (let ((f7076 (lambda (x6968) (kont7075 x6968)))) (list f7076)) (let ((f7080 (lambda (a6969) (let ((f7079 (lambda (a6970) (let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))))) (proc f7079 a6969))))) (car f7080 lst)))))) (null? f7081 lst))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (map kont7075 proc lst) (let ((f7081 (lambda (a6967) (if a6967 (let ((f7076 (lambda (x6968) (kont7075 x6968)))) (list f7076)) (let ((f7080 (lambda (a6969) (let ((f7079 (lambda (a6970) (let ((f7078 (lambda (a6971) (let ((f7077 (lambda (a6972) (cons kont7075 a6970 a6972)))) (map f7077 proc a6971))))) (cdr f7078 lst))))) (proc f7079 a6969))))) (car f7080 lst)))))) (null? f7081 lst)))
[181] 'x = 'a6973
[189] '`(,cae ,x) = '(kont7082 x6974)
[181] 'x = 'list
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(list f7083)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7083 (lambda (x6974) (kont7082 x6974)))) (list f7083))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7083 (lambda (x6974) (kont7082 x6974)))) (list f7083))
[181] 'x = 'a6976
[181] 'x = 'cons
[181] 'x = 'a6977
[181] 'x = 'a6979
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cons kont7082 a6977 a6979)
[181] 'x = 'filter
[181] 'x = 'op
[181] 'x = 'a6978
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(filter f7084 op a6978)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7085 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))
[181] 'x = 'car
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7086 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst))
[181] 'x = 'filter
[181] 'x = 'op
[181] 'x = 'a6980
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(filter kont7082 op a6980)
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7087 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))
[181] 'x = 'op
[181] 'x = 'a6975
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(op f7088 a6975)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7088 (lambda (a6976) (if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))))) (op f7088 a6975))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7088 (lambda (a6976) (if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))))) (op f7088 a6975))
[181] 'x = 'car
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7089 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7089 (lambda (a6975) (let ((f7088 (lambda (a6976) (if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))))) (op f7088 a6975))))) (car f7089 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7089 (lambda (a6975) (let ((f7088 (lambda (a6976) (if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))))) (op f7088 a6975))))) (car f7089 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6973 (let ((f7083 (lambda (x6974) (kont7082 x6974)))) (list f7083)) (let ((f7089 (lambda (a6975) (let ((f7088 (lambda (a6976) (if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))))) (op f7088 a6975))))) (car f7089 lst)))
[181] 'x = 'null?
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(null? f7090 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7090 (lambda (a6973) (if a6973 (let ((f7083 (lambda (x6974) (kont7082 x6974)))) (list f7083)) (let ((f7089 (lambda (a6975) (let ((f7088 (lambda (a6976) (if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))))) (op f7088 a6975))))) (car f7089 lst)))))) (null? f7090 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7090 (lambda (a6973) (if a6973 (let ((f7083 (lambda (x6974) (kont7082 x6974)))) (list f7083)) (let ((f7089 (lambda (a6975) (let ((f7088 (lambda (a6976) (if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))))) (op f7088 a6975))))) (car f7089 lst)))))) (null? f7090 lst))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (filter kont7082 op lst) (let ((f7090 (lambda (a6973) (if a6973 (let ((f7083 (lambda (x6974) (kont7082 x6974)))) (list f7083)) (let ((f7089 (lambda (a6975) (let ((f7088 (lambda (a6976) (if a6976 (let ((f7086 (lambda (a6977) (let ((f7085 (lambda (a6978) (let ((f7084 (lambda (a6979) (cons kont7082 a6977 a6979)))) (filter f7084 op a6978))))) (cdr f7085 lst))))) (car f7086 lst)) (let ((f7087 (lambda (a6980) (filter kont7082 op a6980)))) (cdr f7087 lst)))))) (op f7088 a6975))))) (car f7089 lst)))))) (null? f7090 lst)))
[181] 'x = 'a6982
[189] '`(,cae ,x) = '(kont7091 lst)
[181] 'x = 'drop
[181] 'x = 'a6983
[181] 'x = 'a6985
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(drop kont7091 a6983 a6985)
[181] 'x = '-
[181] 'x = 'n
[181] 'x = 'a6984
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(- f7092 n a6984)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6984 '1)) (let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984)))
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7093 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7093 (lambda (a6983) (let ((a6984 '1)) (let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984)))))) (cdr f7093 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7093 (lambda (a6983) (let ((a6984 '1)) (let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984)))))) (cdr f7093 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6982 (kont7091 lst) (let ((f7093 (lambda (a6983) (let ((a6984 '1)) (let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984)))))) (cdr f7093 lst)))
[181] 'x = '=
[181] 'x = 'n
[181] 'x = 'a6981
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(= f7094 n a6981)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7094 (lambda (a6982) (if a6982 (kont7091 lst) (let ((f7093 (lambda (a6983) (let ((a6984 '1)) (let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984)))))) (cdr f7093 lst)))))) (= f7094 n a6981))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7094 (lambda (a6982) (if a6982 (kont7091 lst) (let ((f7093 (lambda (a6983) (let ((a6984 '1)) (let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984)))))) (cdr f7093 lst)))))) (= f7094 n a6981))
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((a6981 '0)) (let ((f7094 (lambda (a6982) (if a6982 (kont7091 lst) (let ((f7093 (lambda (a6983) (let ((a6984 '1)) (let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984)))))) (cdr f7093 lst)))))) (= f7094 n a6981)))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (drop kont7091 lst n) (let ((a6981 '0)) (let ((f7094 (lambda (a6982) (if a6982 (kont7091 lst) (let ((f7093 (lambda (a6983) (let ((a6984 '1)) (let ((f7092 (lambda (a6985) (drop kont7091 a6983 a6985)))) (- f7092 n a6984)))))) (cdr f7093 lst)))))) (= f7094 n a6981))))
[181] 'x = 'a6986
[189] '`(,cae ,x) = '(kont7095 acc)
[181] 'x = 'proc
[181] 'x = 'a6987
[181] 'x = 'a6989
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(proc kont7095 a6987 a6989)
[181] 'x = 'foldr
[181] 'x = 'proc
[181] 'x = 'acc
[181] 'x = 'a6988
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(foldr f7096 proc acc a6988)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))
[181] 'x = 'cdr
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7097 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7097 (lambda (a6988) (let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))))) (cdr f7097 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7097 (lambda (a6988) (let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))))) (cdr f7097 lst))
[181] 'x = 'car
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7098 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7098 (lambda (a6987) (let ((f7097 (lambda (a6988) (let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))))) (cdr f7097 lst))))) (car f7098 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7098 (lambda (a6987) (let ((f7097 (lambda (a6988) (let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))))) (cdr f7097 lst))))) (car f7098 lst))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6986 (kont7095 acc) (let ((f7098 (lambda (a6987) (let ((f7097 (lambda (a6988) (let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))))) (cdr f7097 lst))))) (car f7098 lst)))
[181] 'x = 'null?
[181] 'x = 'lst
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(null? f7099 lst)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7099 (lambda (a6986) (if a6986 (kont7095 acc) (let ((f7098 (lambda (a6987) (let ((f7097 (lambda (a6988) (let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))))) (cdr f7097 lst))))) (car f7098 lst)))))) (null? f7099 lst))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7099 (lambda (a6986) (if a6986 (kont7095 acc) (let ((f7098 (lambda (a6987) (let ((f7097 (lambda (a6988) (let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))))) (cdr f7097 lst))))) (car f7098 lst)))))) (null? f7099 lst))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (foldr kont7095 proc acc lst) (let ((f7099 (lambda (a6986) (if a6986 (kont7095 acc) (let ((f7098 (lambda (a6987) (let ((f7097 (lambda (a6988) (let ((f7096 (lambda (a6989) (proc kont7095 a6987 a6989)))) (foldr f7096 proc acc a6988))))) (cdr f7097 lst))))) (car f7098 lst)))))) (null? f7099 lst)))
[181] 'x = 'a6990
[189] '`(,cae ,x) = '(kont7100 lst2)
[181] 'x = 'cons
[181] 'x = 'a6991
[181] 'x = 'a6993
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cons kont7100 a6991 a6993)
[181] 'x = 'append
[181] 'x = 'a6992
[181] 'x = 'lst2
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(append f7101 a6992 lst2)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))
[181] 'x = 'cdr
[181] 'x = 'lst1
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(cdr f7102 lst1)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7102 (lambda (a6992) (let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))))) (cdr f7102 lst1))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7102 (lambda (a6992) (let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))))) (cdr f7102 lst1))
[181] 'x = 'car
[181] 'x = 'lst1
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(car f7103 lst1)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7103 (lambda (a6991) (let ((f7102 (lambda (a6992) (let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))))) (cdr f7102 lst1))))) (car f7103 lst1))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7103 (lambda (a6991) (let ((f7102 (lambda (a6992) (let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))))) (cdr f7102 lst1))))) (car f7103 lst1))
[206] '`(if ,(T-ae ae) ,(T e0 cae) ,(T e1 cae)) = '(if a6990 (kont7100 lst2) (let ((f7103 (lambda (a6991) (let ((f7102 (lambda (a6992) (let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))))) (cdr f7102 lst1))))) (car f7103 lst1)))
[181] 'x = 'null?
[181] 'x = 'lst1
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(null? f7104 lst1)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7104 (lambda (a6990) (if a6990 (kont7100 lst2) (let ((f7103 (lambda (a6991) (let ((f7102 (lambda (a6992) (let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))))) (cdr f7102 lst1))))) (car f7103 lst1)))))) (null? f7104 lst1))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7104 (lambda (a6990) (if a6990 (kont7100 lst2) (let ((f7103 (lambda (a6991) (let ((f7102 (lambda (a6992) (let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))))) (cdr f7102 lst1))))) (car f7103 lst1)))))) (null? f7104 lst1))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (append kont7100 lst1 lst2) (let ((f7104 (lambda (a6990) (if a6990 (kont7100 lst2) (let ((f7103 (lambda (a6991) (let ((f7102 (lambda (a6992) (let ((f7101 (lambda (a6993) (cons kont7100 a6991 a6993)))) (append f7101 a6992 lst2))))) (cdr f7102 lst1))))) (car f7103 lst1)))))) (null? f7104 lst1)))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7105 x6994)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x6994 (apply-prim hash lst))) (kont7105 x6994))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x6994 (apply-prim hash lst))) (kont7105 x6994)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7105 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6994 (apply-prim hash lst))) (kont7105 x6994))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (hash . lst) (let ((kont7105 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x6994 (apply-prim hash lst))) (kont7105 x6994)))))
[181] 'x = 'h
[181] 'x = 'k
[189] '`(,cae ,x) = '(kont7107 x6995)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6995 (prim hash-ref h k))) (kont7107 x6995))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (hash-ref kont7107 h k) (let ((x6995 (prim hash-ref h k))) (kont7107 x6995)))
[181] 'x = 'h
[181] 'x = 'k
[181] 'x = 'v
[189] '`(,cae ,x) = '(kont7108 x6996)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6996 (prim hash-set h k v))) (kont7108 x6996))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (hash-set kont7108 h k v) (let ((x6996 (prim hash-set h k v))) (kont7108 x6996)))
[181] 'x = 'h
[189] '`(,cae ,x) = '(kont7109 x6997)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6997 (prim hash-keys h))) (kont7109 x6997))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (hash-keys kont7109 h) (let ((x6997 (prim hash-keys h))) (kont7109 x6997)))
[181] 'x = 'h
[181] 'x = 'k
[189] '`(,cae ,x) = '(kont7110 x6998)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6998 (prim hash-has-key? h k))) (kont7110 x6998))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (hash-has-key? kont7110 h k) (let ((x6998 (prim hash-has-key? h k))) (kont7110 x6998)))
[181] 'x = 'h
[189] '`(,cae ,x) = '(kont7111 x6999)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x6999 (prim hash-count h))) (kont7111 x6999))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (hash-count kont7111 h) (let ((x6999 (prim hash-count h))) (kont7111 x6999)))
[181] 'x = 'lst
[181] 'x = 'lst
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7112 x7000)
[197] '`(let ((,x (apply-prim ,op ,(T-ae ae)))) ,(T e0 cae)) = '(let ((x7000 (apply-prim set lst))) (kont7112 x7000))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((lst (prim cdr lst))) (let ((x7000 (apply-prim set lst))) (kont7112 x7000)))
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((kont7112 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x7000 (apply-prim set lst))) (kont7112 x7000))))
[222] '`(define (,fname . ,params) ,(T `(let ((,k (prim car ,params))) (let ((,params (prim cdr ,params))) ,body)) k)) = '(define (set . lst) (let ((kont7112 (prim car lst))) (let ((lst (prim cdr lst))) (let ((x7000 (apply-prim set lst))) (kont7112 x7000)))))
[181] 'x = 'h
[189] '`(,cae ,x) = '(kont7114 x7001)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7001 (prim set->list h))) (kont7114 x7001))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (set->list kont7114 h) (let ((x7001 (prim set->list h))) (kont7114 x7001)))
[181] 'x = 'lst
[189] '`(,cae ,x) = '(kont7115 x7002)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7002 (prim list->set lst))) (kont7115 x7002))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (list->set kont7115 lst) (let ((x7002 (prim list->set lst))) (kont7115 x7002)))
[181] 'x = 's
[181] 'x = 'val
[189] '`(,cae ,x) = '(kont7116 x7003)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7003 (prim set-add s val))) (kont7116 x7003))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (set-add kont7116 s val) (let ((x7003 (prim set-add s val))) (kont7116 x7003)))
[181] 'x = 'str
[189] '`(,cae ,x) = '(kont7117 x7004)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7004 (prim string? str))) (kont7117 x7004))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (string? kont7117 str) (let ((x7004 (prim string? str))) (kont7117 x7004)))
[181] 'x = 'str
[189] '`(,cae ,x) = '(kont7118 x7005)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7005 (prim string-length str))) (kont7118 x7005))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (string-length kont7118 str) (let ((x7005 (prim string-length str))) (kont7118 x7005)))
[181] 'x = 'str
[181] 'x = 'pos
[189] '`(,cae ,x) = '(kont7119 x7006)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7006 (prim string-ref str pos))) (kont7119 x7006))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (string-ref kont7119 str pos) (let ((x7006 (prim string-ref str pos))) (kont7119 x7006)))
[181] 'x = 'str
[181] 'x = 'start
[181] 'x = 'end
[189] '`(,cae ,x) = '(kont7120 x7007)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7007 (prim substring str start end))) (kont7120 x7007))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (substring kont7120 str start end) (let ((x7007 (prim substring str start end))) (kont7120 x7007)))
[181] 'x = 's1
[181] 'x = 's2
[189] '`(,cae ,x) = '(kont7121 x7008)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7008 (prim string-append s1 s2))) (kont7121 x7008))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (string-append kont7121 s1 s2) (let ((x7008 (prim string-append s1 s2))) (kont7121 x7008)))
[181] 'x = 'str
[189] '`(,cae ,x) = '(kont7122 x7009)
[199] '`(let ((,x (prim ,op ,@(map T-ae aes)))) ,(T e0 cae)) = '(let ((x7009 (prim string->list str))) (kont7122 x7009))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (string->list kont7122 str) (let ((x7009 (prim string->list str))) (kont7122 x7009)))
[189] '`(,cae ,x) = '(kont7123 x7010)
[201] '`(let ((,x ',dat)) ,(T e0 cae)) = '(let ((x7010 '"random")) (kont7123 x7010))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (call kont7123) (let ((x7010 '"random")) (kont7123 x7010)))
[189] '`(,cae ,x) = '(kont7124 x7011)
[181] 'x = 'call
[210] '`(,(T-ae fae) ,cae ,@(map T-ae args)) = '(call f7125)
[185] '`(let ((,f ,cae)) ,(T e f)) = '(let ((f7125 (lambda (x7011) (kont7124 x7011)))) (call f7125))
[205] '(T rhs `(lambda (,x) ,(T e0 cae))) = '(let ((f7125 (lambda (x7011) (kont7124 x7011)))) (call f7125))
[216] '`(define (,fname ,k ,@params) ,(T body k)) = '(define (brouhaha_main kont7124) (let ((f7125 (lambda (x7011) (kont7124 x7011)))) (call f7125)))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7127
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim + lst7127)
[102] '(hash-ref env x) = 'kont70127126
[102] '(hash-ref env x) = 'x69147128
[105] '(map (alpha-rename env) es) = '(kont70127126 x69147128)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69147128 (apply-prim + lst7127))) (kont70127126 x69147128))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (kont70127126 x69147128)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (kont70127126 x69147128))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (+ . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (kont70127126 x69147128)))))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7130
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim - lst7130)
[102] '(hash-ref env x) = 'kont70147129
[102] '(hash-ref env x) = 'x69157131
[105] '(map (alpha-rename env) es) = '(kont70147129 x69157131)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69157131 (apply-prim - lst7130))) (kont70147129 x69157131))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (kont70147129 x69157131)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (kont70147129 x69157131))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (- . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (kont70147129 x69157131)))))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7133
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim * lst7133)
[102] '(hash-ref env x) = 'kont70167132
[102] '(hash-ref env x) = 'x69167134
[105] '(map (alpha-rename env) es) = '(kont70167132 x69167134)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69167134 (apply-prim * lst7133))) (kont70167132 x69167134))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (kont70167132 x69167134)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (kont70167132 x69167134))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (* . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (kont70167132 x69167134)))))
[102] '(hash-ref env x) = 'a
[102] '(hash-ref env x) = 'b
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim modulo a b)
[102] '(hash-ref env x) = 'kont7018
[102] '(hash-ref env x) = 'x69177135
[105] '(map (alpha-rename env) es) = '(kont7018 x69177135)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69177135 (prim modulo a b))) (kont7018 x69177135))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (modulo kont7018 a b) (let ((x69177135 (prim modulo a b))) (kont7018 x69177135)))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7137
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim / lst7137)
[102] '(hash-ref env x) = 'kont70197136
[102] '(hash-ref env x) = 'x69187138
[105] '(map (alpha-rename env) es) = '(kont70197136 x69187138)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69187138 (apply-prim / lst7137))) (kont70197136 x69187138))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (kont70197136 x69187138)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (kont70197136 x69187138))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (/ . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (kont70197136 x69187138)))))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7140
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim = lst7140)
[102] '(hash-ref env x) = 'kont70217139
[102] '(hash-ref env x) = 'x69197141
[105] '(map (alpha-rename env) es) = '(kont70217139 x69197141)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69197141 (apply-prim = lst7140))) (kont70217139 x69197141))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (kont70217139 x69197141)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (kont70217139 x69197141))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (= . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (kont70217139 x69197141)))))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7143
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim > lst7143)
[102] '(hash-ref env x) = 'kont70237142
[102] '(hash-ref env x) = 'x69207144
[105] '(map (alpha-rename env) es) = '(kont70237142 x69207144)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69207144 (apply-prim > lst7143))) (kont70237142 x69207144))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (kont70237142 x69207144)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (kont70237142 x69207144))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (> . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (kont70237142 x69207144)))))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7146
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim < lst7146)
[102] '(hash-ref env x) = 'kont70257145
[102] '(hash-ref env x) = 'x69217147
[105] '(map (alpha-rename env) es) = '(kont70257145 x69217147)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69217147 (apply-prim < lst7146))) (kont70257145 x69217147))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (kont70257145 x69217147)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (kont70257145 x69217147))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (< . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (kont70257145 x69217147)))))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7149
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim <= lst7149)
[102] '(hash-ref env x) = 'kont70277148
[102] '(hash-ref env x) = 'x69227150
[105] '(map (alpha-rename env) es) = '(kont70277148 x69227150)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69227150 (apply-prim <= lst7149))) (kont70277148 x69227150))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (kont70277148 x69227150)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (kont70277148 x69227150))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (<= . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (kont70277148 x69227150)))))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7152
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim >= lst7152)
[102] '(hash-ref env x) = 'kont70297151
[102] '(hash-ref env x) = 'x69237153
[105] '(map (alpha-rename env) es) = '(kont70297151 x69237153)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69237153 (apply-prim >= lst7152))) (kont70297151 x69237153))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (kont70297151 x69237153)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (kont70297151 x69237153))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (>= . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (kont70297151 x69237153)))))
[102] '(hash-ref env x) = 'x
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim null? x)
[102] '(hash-ref env x) = 'kont7031
[102] '(hash-ref env x) = 'x69247154
[105] '(map (alpha-rename env) es) = '(kont7031 x69247154)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69247154 (prim null? x))) (kont7031 x69247154))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (null? kont7031 x) (let ((x69247154 (prim null? x))) (kont7031 x69247154)))
[102] '(hash-ref env x) = 'x
[102] '(hash-ref env x) = 'y
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim equal? x y)
[102] '(hash-ref env x) = 'kont7032
[102] '(hash-ref env x) = 'x69257155
[105] '(map (alpha-rename env) es) = '(kont7032 x69257155)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69257155 (prim equal? x y))) (kont7032 x69257155))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (equal? kont7032 x y) (let ((x69257155 (prim equal? x y))) (kont7032 x69257155)))
[102] '(hash-ref env x) = 'x
[102] '(hash-ref env x) = 'y
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim eq? x y)
[102] '(hash-ref env x) = 'kont7033
[102] '(hash-ref env x) = 'x69267156
[105] '(map (alpha-rename env) es) = '(kont7033 x69267156)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69267156 (prim eq? x y))) (kont7033 x69267156))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (eq? kont7033 x y) (let ((x69267156 (prim eq? x y))) (kont7033 x69267156)))
[102] '(hash-ref env x) = 'a
[102] '(hash-ref env x) = 'b
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cons a b)
[102] '(hash-ref env x) = 'kont7034
[102] '(hash-ref env x) = 'x69277157
[105] '(map (alpha-rename env) es) = '(kont7034 x69277157)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69277157 (prim cons a b))) (kont7034 x69277157))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (cons kont7034 a b) (let ((x69277157 (prim cons a b))) (kont7034 x69277157)))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'kont7035
[102] '(hash-ref env x) = 'x69287158
[105] '(map (alpha-rename env) es) = '(kont7035 x69287158)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69287158 (prim car lst))) (kont7035 x69287158))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (car kont7035 lst) (let ((x69287158 (prim car lst))) (kont7035 x69287158)))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'kont7036
[102] '(hash-ref env x) = 'x69297159
[105] '(map (alpha-rename env) es) = '(kont7036 x69297159)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69297159 (prim cdr lst))) (kont7036 x69297159))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (cdr kont7036 lst) (let ((x69297159 (prim cdr lst))) (kont7036 x69297159)))
[104] '`',dat = ''0
[104] '`',dat = ''2
[102] '(hash-ref env x) = 'equal?
[102] '(hash-ref env x) = 'kont7037
[102] '(hash-ref env x) = 'a69307160
[102] '(hash-ref env x) = 'a69327163
[105] '(map (alpha-rename env) es) = '(equal? kont7037 a69307160 a69327163)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69327163) (equal? kont7037 a69307160 a69327163))
[102] '(hash-ref env x) = 'modulo
[102] '(hash-ref env x) = 'f70387162
[102] '(hash-ref env x) = 'x
[102] '(hash-ref env x) = 'a69317161
[105] '(map (alpha-rename env) es) = '(modulo f70387162 x a69317161)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70387162 (lambda (a69327163) (equal? kont7037 a69307160 a69327163)))) (modulo f70387162 x a69317161))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69317161 '2)) (let ((f70387162 (lambda (a69327163) (equal? kont7037 a69307160 a69327163)))) (modulo f70387162 x a69317161)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (lambda (a69327163) (equal? kont7037 a69307160 a69327163)))) (modulo f70387162 x a69317161))))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (even? kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (lambda (a69327163) (equal? kont7037 a69307160 a69327163)))) (modulo f70387162 x a69317161)))))
[104] '`',dat = ''1
[104] '`',dat = ''2
[102] '(hash-ref env x) = 'equal?
[102] '(hash-ref env x) = 'kont7039
[102] '(hash-ref env x) = 'a69337164
[102] '(hash-ref env x) = 'a69357167
[105] '(map (alpha-rename env) es) = '(equal? kont7039 a69337164 a69357167)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69357167) (equal? kont7039 a69337164 a69357167))
[102] '(hash-ref env x) = 'modulo
[102] '(hash-ref env x) = 'f70407166
[102] '(hash-ref env x) = 'x
[102] '(hash-ref env x) = 'a69347165
[105] '(map (alpha-rename env) es) = '(modulo f70407166 x a69347165)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70407166 (lambda (a69357167) (equal? kont7039 a69337164 a69357167)))) (modulo f70407166 x a69347165))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69347165 '2)) (let ((f70407166 (lambda (a69357167) (equal? kont7039 a69337164 a69357167)))) (modulo f70407166 x a69347165)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (lambda (a69357167) (equal? kont7039 a69337164 a69357167)))) (modulo f70407166 x a69347165))))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (odd? kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (lambda (a69357167) (equal? kont7039 a69337164 a69357167)))) (modulo f70407166 x a69347165)))))
[102] '(hash-ref env x) = 'x
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car x)
[102] '(hash-ref env x) = 'x
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr x)
[102] '(hash-ref env x) = 'kont70417168
[102] '(hash-ref env x) = 'x7169
[105] '(map (alpha-rename env) es) = '(kont70417168 x7169)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x7169 (prim cdr x))) (kont70417168 x7169))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (kont70417168 x7169)))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (list . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (kont70417168 x7169))))
[102] '(hash-ref env x) = 'val
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim inexact->exact val)
[102] '(hash-ref env x) = 'kont7043
[102] '(hash-ref env x) = 'x69367170
[105] '(map (alpha-rename env) es) = '(kont7043 x69367170)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69367170 (prim inexact->exact val))) (kont7043 x69367170))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (float->int kont7043 val) (let ((x69367170 (prim inexact->exact val))) (kont7043 x69367170)))
[102] '(hash-ref env x) = 'val
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim exact->inexact val)
[102] '(hash-ref env x) = 'kont7044
[102] '(hash-ref env x) = 'x69377171
[105] '(map (alpha-rename env) es) = '(kont7044 x69377171)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69377171 (prim exact->inexact val))) (kont7044 x69377171))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (int->float kont7044 val) (let ((x69377171 (prim exact->inexact val))) (kont7044 x69377171)))
[102] '(hash-ref env x) = 'a69387173
[104] '`',dat = ''#f
[102] '(hash-ref env x) = 'kont7045
[102] '(hash-ref env x) = 'x69397174
[105] '(map (alpha-rename env) es) = '(kont7045 x69397174)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69397174 '#f)) (kont7045 x69397174))
[102] '(hash-ref env x) = 'a69417178
[104] '`',dat = ''#t
[102] '(hash-ref env x) = 'kont7045
[102] '(hash-ref env x) = 'x69427179
[105] '(map (alpha-rename env) es) = '(kont7045 x69427179)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69427179 '#t)) (kont7045 x69427179))
[102] '(hash-ref env x) = 'member?
[102] '(hash-ref env x) = 'kont7045
[102] '(hash-ref env x) = 'x
[102] '(hash-ref env x) = 'a69437181
[105] '(map (alpha-rename env) es) = '(member? kont7045 x a69437181)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69437181) (member? kont7045 x a69437181))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70467180
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70467180 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69417178) (if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst))))
[102] '(hash-ref env x) = 'equal?
[102] '(hash-ref env x) = 'f70477177
[102] '(hash-ref env x) = 'a69407176
[102] '(hash-ref env x) = 'x
[105] '(map (alpha-rename env) es) = '(equal? f70477177 a69407176 x)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70477177 (lambda (a69417178) (if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst)))))) (equal? f70477177 a69407176 x))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69407176) (let ((f70477177 (lambda (a69417178) (if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst)))))) (equal? f70477177 a69407176 x)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f70487175
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car f70487175 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70487175 (lambda (a69407176) (let ((f70477177 (lambda (a69417178) (if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst)))))) (equal? f70477177 a69407176 x))))) (car f70487175 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69387173 (let ((x69397174 '#f)) (kont7045 x69397174)) (let ((f70487175 (lambda (a69407176) (let ((f70477177 (lambda (a69417178) (if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst)))))) (equal? f70477177 a69407176 x))))) (car f70487175 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69387173) (if a69387173 (let ((x69397174 '#f)) (kont7045 x69397174)) (let ((f70487175 (lambda (a69407176) (let ((f70477177 (lambda (a69417178) (if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst)))))) (equal? f70477177 a69407176 x))))) (car f70487175 lst))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'f70497172
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? f70497172 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70497172 (lambda (a69387173) (if a69387173 (let ((x69397174 '#f)) (kont7045 x69397174)) (let ((f70487175 (lambda (a69407176) (let ((f70477177 (lambda (a69417178) (if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst)))))) (equal? f70477177 a69407176 x))))) (car f70487175 lst)))))) (null? f70497172 lst))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (member? kont7045 x lst) (let ((f70497172 (lambda (a69387173) (if a69387173 (let ((x69397174 '#f)) (kont7045 x69397174)) (let ((f70487175 (lambda (a69407176) (let ((f70477177 (lambda (a69417178) (if a69417178 (let ((x69427179 '#t)) (kont7045 x69427179)) (let ((f70467180 (lambda (a69437181) (member? kont7045 x a69437181)))) (cdr f70467180 lst)))))) (equal? f70477177 a69407176 x))))) (car f70487175 lst)))))) (null? f70497172 lst)))
[102] '(hash-ref env x) = 'a69447183
[102] '(hash-ref env x) = 'kont7050
[102] '(hash-ref env x) = 'acc
[105] '(map (alpha-rename env) es) = '(kont7050 acc)
[102] '(hash-ref env x) = 'foldl
[102] '(hash-ref env x) = 'kont7050
[102] '(hash-ref env x) = 'fun
[102] '(hash-ref env x) = 'a69467187
[102] '(hash-ref env x) = 'a69477189
[105] '(map (alpha-rename env) es) = '(foldl kont7050 fun a69467187 a69477189)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69477189) (foldl kont7050 fun a69467187 a69477189))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70517188
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70517188 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69467187) (let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst)))
[102] '(hash-ref env x) = 'fun
[102] '(hash-ref env x) = 'f70527186
[102] '(hash-ref env x) = 'a69457185
[102] '(hash-ref env x) = 'acc
[105] '(map (alpha-rename env) es) = '(fun f70527186 a69457185 acc)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70527186 (lambda (a69467187) (let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst))))) (fun f70527186 a69457185 acc))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69457185) (let ((f70527186 (lambda (a69467187) (let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst))))) (fun f70527186 a69457185 acc)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f70537184
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car f70537184 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70537184 (lambda (a69457185) (let ((f70527186 (lambda (a69467187) (let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst))))) (fun f70527186 a69457185 acc))))) (car f70537184 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69447183 (kont7050 acc) (let ((f70537184 (lambda (a69457185) (let ((f70527186 (lambda (a69467187) (let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst))))) (fun f70527186 a69457185 acc))))) (car f70537184 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69447183) (if a69447183 (kont7050 acc) (let ((f70537184 (lambda (a69457185) (let ((f70527186 (lambda (a69467187) (let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst))))) (fun f70527186 a69457185 acc))))) (car f70537184 lst))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'f70547182
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? f70547182 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70547182 (lambda (a69447183) (if a69447183 (kont7050 acc) (let ((f70537184 (lambda (a69457185) (let ((f70527186 (lambda (a69467187) (let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst))))) (fun f70527186 a69457185 acc))))) (car f70537184 lst)))))) (null? f70547182 lst))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (foldl kont7050 fun acc lst) (let ((f70547182 (lambda (a69447183) (if a69447183 (kont7050 acc) (let ((f70537184 (lambda (a69457185) (let ((f70527186 (lambda (a69467187) (let ((f70517188 (lambda (a69477189) (foldl kont7050 fun a69467187 a69477189)))) (cdr f70517188 lst))))) (fun f70527186 a69457185 acc))))) (car f70537184 lst)))))) (null? f70547182 lst)))
[102] '(hash-ref env x) = 'a69487191
[102] '(hash-ref env x) = 'kont7055
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(kont7055 lst2)
[102] '(hash-ref env x) = 'reverse-helper
[102] '(hash-ref env x) = 'kont7055
[102] '(hash-ref env x) = 'a69497193
[102] '(hash-ref env x) = 'a69517197
[105] '(map (alpha-rename env) es) = '(reverse-helper kont7055 a69497193 a69517197)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197))
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'f70567196
[102] '(hash-ref env x) = 'a69507195
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(cons f70567196 a69507195 lst2)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69507195) (let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f70577194
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car f70577194 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70577194 (lambda (a69507195) (let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2))))) (car f70577194 lst))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69497193) (let ((f70577194 (lambda (a69507195) (let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2))))) (car f70577194 lst)))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70587192
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70587192 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70587192 (lambda (a69497193) (let ((f70577194 (lambda (a69507195) (let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2))))) (car f70577194 lst))))) (cdr f70587192 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69487191 (kont7055 lst2) (let ((f70587192 (lambda (a69497193) (let ((f70577194 (lambda (a69507195) (let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2))))) (car f70577194 lst))))) (cdr f70587192 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69487191) (if a69487191 (kont7055 lst2) (let ((f70587192 (lambda (a69497193) (let ((f70577194 (lambda (a69507195) (let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2))))) (car f70577194 lst))))) (cdr f70587192 lst))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'f70597190
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? f70597190 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70597190 (lambda (a69487191) (if a69487191 (kont7055 lst2) (let ((f70587192 (lambda (a69497193) (let ((f70577194 (lambda (a69507195) (let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2))))) (car f70577194 lst))))) (cdr f70587192 lst)))))) (null? f70597190 lst))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (reverse-helper kont7055 lst lst2) (let ((f70597190 (lambda (a69487191) (if a69487191 (kont7055 lst2) (let ((f70587192 (lambda (a69497193) (let ((f70577194 (lambda (a69507195) (let ((f70567196 (lambda (a69517197) (reverse-helper kont7055 a69497193 a69517197)))) (cons f70567196 a69507195 lst2))))) (car f70577194 lst))))) (cdr f70587192 lst)))))) (null? f70597190 lst)))
[102] '(hash-ref env x) = 'reverse-helper
[102] '(hash-ref env x) = 'kont7060
[102] '(hash-ref env x) = 'lst
[102] '(hash-ref env x) = 'a69527199
[105] '(map (alpha-rename env) es) = '(reverse-helper kont7060 lst a69527199)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69527199) (reverse-helper kont7060 lst a69527199))
[102] '(hash-ref env x) = 'list
[102] '(hash-ref env x) = 'f70617198
[105] '(map (alpha-rename env) es) = '(list f70617198)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70617198 (lambda (a69527199) (reverse-helper kont7060 lst a69527199)))) (list f70617198))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (reverse kont7060 lst) (let ((f70617198 (lambda (a69527199) (reverse-helper kont7060 lst a69527199)))) (list f70617198)))
[104] '`',dat = ''0
[102] '(hash-ref env x) = 'a69547202
[102] '(hash-ref env x) = 'kont7062
[102] '(hash-ref env x) = 'x69557204
[105] '(map (alpha-rename env) es) = '(kont7062 x69557204)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (x69557204) (kont7062 x69557204))
[102] '(hash-ref env x) = 'reverse
[102] '(hash-ref env x) = 'f70637203
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(reverse f70637203 lst2)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70637203 (lambda (x69557204) (kont7062 x69557204)))) (reverse f70637203 lst2))
[104] '`',dat = ''1
[102] '(hash-ref env x) = 'take-helper
[102] '(hash-ref env x) = 'kont7062
[102] '(hash-ref env x) = 'a69567206
[102] '(hash-ref env x) = 'a69587209
[102] '(hash-ref env x) = 'a69607213
[105] '(map (alpha-rename env) es) = '(take-helper kont7062 a69567206 a69587209 a69607213)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213))
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'f70647212
[102] '(hash-ref env x) = 'a69597211
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(cons f70647212 a69597211 lst2)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f70657210
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car f70657210 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst)))
[102] '(hash-ref env x) = '-
[102] '(hash-ref env x) = 'f70667208
[102] '(hash-ref env x) = 'n
[102] '(hash-ref env x) = 'a69577207
[105] '(map (alpha-rename env) es) = '(- f70667208 n a69577207)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69577207 '1)) (let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69567206) (let ((a69577207 '1)) (let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207))))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70677205
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70677205 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70677205 (lambda (a69567206) (let ((a69577207 '1)) (let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207)))))) (cdr f70677205 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69547202 (let ((f70637203 (lambda (x69557204) (kont7062 x69557204)))) (reverse f70637203 lst2)) (let ((f70677205 (lambda (a69567206) (let ((a69577207 '1)) (let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207)))))) (cdr f70677205 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69547202) (if a69547202 (let ((f70637203 (lambda (x69557204) (kont7062 x69557204)))) (reverse f70637203 lst2)) (let ((f70677205 (lambda (a69567206) (let ((a69577207 '1)) (let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207)))))) (cdr f70677205 lst))))
[102] '(hash-ref env x) = '=
[102] '(hash-ref env x) = 'f70687201
[102] '(hash-ref env x) = 'n
[102] '(hash-ref env x) = 'a69537200
[105] '(map (alpha-rename env) es) = '(= f70687201 n a69537200)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70687201 (lambda (a69547202) (if a69547202 (let ((f70637203 (lambda (x69557204) (kont7062 x69557204)))) (reverse f70637203 lst2)) (let ((f70677205 (lambda (a69567206) (let ((a69577207 '1)) (let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207)))))) (cdr f70677205 lst)))))) (= f70687201 n a69537200))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69537200 '0)) (let ((f70687201 (lambda (a69547202) (if a69547202 (let ((f70637203 (lambda (x69557204) (kont7062 x69557204)))) (reverse f70637203 lst2)) (let ((f70677205 (lambda (a69567206) (let ((a69577207 '1)) (let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207)))))) (cdr f70677205 lst)))))) (= f70687201 n a69537200)))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (take-helper kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (lambda (a69547202) (if a69547202 (let ((f70637203 (lambda (x69557204) (kont7062 x69557204)))) (reverse f70637203 lst2)) (let ((f70677205 (lambda (a69567206) (let ((a69577207 '1)) (let ((f70667208 (lambda (a69587209) (let ((f70657210 (lambda (a69597211) (let ((f70647212 (lambda (a69607213) (take-helper kont7062 a69567206 a69587209 a69607213)))) (cons f70647212 a69597211 lst2))))) (car f70657210 lst))))) (- f70667208 n a69577207)))))) (cdr f70677205 lst)))))) (= f70687201 n a69537200))))
[102] '(hash-ref env x) = 'take-helper
[102] '(hash-ref env x) = 'kont7069
[102] '(hash-ref env x) = 'lst
[102] '(hash-ref env x) = 'n
[102] '(hash-ref env x) = 'a69617215
[105] '(map (alpha-rename env) es) = '(take-helper kont7069 lst n a69617215)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69617215) (take-helper kont7069 lst n a69617215))
[102] '(hash-ref env x) = 'list
[102] '(hash-ref env x) = 'f70707214
[105] '(map (alpha-rename env) es) = '(list f70707214)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70707214 (lambda (a69617215) (take-helper kont7069 lst n a69617215)))) (list f70707214))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (take kont7069 lst n) (let ((f70707214 (lambda (a69617215) (take-helper kont7069 lst n a69617215)))) (list f70707214)))
[102] '(hash-ref env x) = 'a69627217
[104] '`',dat = ''0
[102] '(hash-ref env x) = 'kont7071
[102] '(hash-ref env x) = 'x69637218
[105] '(map (alpha-rename env) es) = '(kont7071 x69637218)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69637218 '0)) (kont7071 x69637218))
[104] '`',dat = ''1
[102] '(hash-ref env x) = '+
[102] '(hash-ref env x) = 'kont7071
[102] '(hash-ref env x) = 'a69647219
[102] '(hash-ref env x) = 'a69667223
[105] '(map (alpha-rename env) es) = '(+ kont7071 a69647219 a69667223)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69667223) (+ kont7071 a69647219 a69667223))
[102] '(hash-ref env x) = 'length
[102] '(hash-ref env x) = 'f70727222
[102] '(hash-ref env x) = 'a69657221
[105] '(map (alpha-rename env) es) = '(length f70727222 a69657221)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70727222 (lambda (a69667223) (+ kont7071 a69647219 a69667223)))) (length f70727222 a69657221))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69657221) (let ((f70727222 (lambda (a69667223) (+ kont7071 a69647219 a69667223)))) (length f70727222 a69657221)))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70737220
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70737220 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70737220 (lambda (a69657221) (let ((f70727222 (lambda (a69667223) (+ kont7071 a69647219 a69667223)))) (length f70727222 a69657221))))) (cdr f70737220 lst))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69647219 '1)) (let ((f70737220 (lambda (a69657221) (let ((f70727222 (lambda (a69667223) (+ kont7071 a69647219 a69667223)))) (length f70727222 a69657221))))) (cdr f70737220 lst)))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69627217 (let ((x69637218 '0)) (kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (lambda (a69657221) (let ((f70727222 (lambda (a69667223) (+ kont7071 a69647219 a69667223)))) (length f70727222 a69657221))))) (cdr f70737220 lst))))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69627217) (if a69627217 (let ((x69637218 '0)) (kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (lambda (a69657221) (let ((f70727222 (lambda (a69667223) (+ kont7071 a69647219 a69667223)))) (length f70727222 a69657221))))) (cdr f70737220 lst)))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'f70747216
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? f70747216 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70747216 (lambda (a69627217) (if a69627217 (let ((x69637218 '0)) (kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (lambda (a69657221) (let ((f70727222 (lambda (a69667223) (+ kont7071 a69647219 a69667223)))) (length f70727222 a69657221))))) (cdr f70737220 lst))))))) (null? f70747216 lst))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (length kont7071 lst) (let ((f70747216 (lambda (a69627217) (if a69627217 (let ((x69637218 '0)) (kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (lambda (a69657221) (let ((f70727222 (lambda (a69667223) (+ kont7071 a69647219 a69667223)))) (length f70727222 a69657221))))) (cdr f70737220 lst))))))) (null? f70747216 lst)))
[102] '(hash-ref env x) = 'a69677225
[102] '(hash-ref env x) = 'kont7075
[102] '(hash-ref env x) = 'x69687227
[105] '(map (alpha-rename env) es) = '(kont7075 x69687227)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (x69687227) (kont7075 x69687227))
[102] '(hash-ref env x) = 'list
[102] '(hash-ref env x) = 'f70767226
[105] '(map (alpha-rename env) es) = '(list f70767226)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70767226 (lambda (x69687227) (kont7075 x69687227)))) (list f70767226))
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'kont7075
[102] '(hash-ref env x) = 'a69707231
[102] '(hash-ref env x) = 'a69727235
[105] '(map (alpha-rename env) es) = '(cons kont7075 a69707231 a69727235)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69727235) (cons kont7075 a69707231 a69727235))
[102] '(hash-ref env x) = 'map
[102] '(hash-ref env x) = 'f70777234
[102] '(hash-ref env x) = 'proc
[102] '(hash-ref env x) = 'a69717233
[105] '(map (alpha-rename env) es) = '(map f70777234 proc a69717233)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233)))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70787232
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70787232 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69707231) (let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst)))
[102] '(hash-ref env x) = 'proc
[102] '(hash-ref env x) = 'f70797230
[102] '(hash-ref env x) = 'a69697229
[105] '(map (alpha-rename env) es) = '(proc f70797230 a69697229)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70797230 (lambda (a69707231) (let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst))))) (proc f70797230 a69697229))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69697229) (let ((f70797230 (lambda (a69707231) (let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst))))) (proc f70797230 a69697229)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f70807228
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car f70807228 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70807228 (lambda (a69697229) (let ((f70797230 (lambda (a69707231) (let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst))))) (proc f70797230 a69697229))))) (car f70807228 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69677225 (let ((f70767226 (lambda (x69687227) (kont7075 x69687227)))) (list f70767226)) (let ((f70807228 (lambda (a69697229) (let ((f70797230 (lambda (a69707231) (let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst))))) (proc f70797230 a69697229))))) (car f70807228 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69677225) (if a69677225 (let ((f70767226 (lambda (x69687227) (kont7075 x69687227)))) (list f70767226)) (let ((f70807228 (lambda (a69697229) (let ((f70797230 (lambda (a69707231) (let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst))))) (proc f70797230 a69697229))))) (car f70807228 lst))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'f70817224
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? f70817224 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70817224 (lambda (a69677225) (if a69677225 (let ((f70767226 (lambda (x69687227) (kont7075 x69687227)))) (list f70767226)) (let ((f70807228 (lambda (a69697229) (let ((f70797230 (lambda (a69707231) (let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst))))) (proc f70797230 a69697229))))) (car f70807228 lst)))))) (null? f70817224 lst))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (map kont7075 proc lst) (let ((f70817224 (lambda (a69677225) (if a69677225 (let ((f70767226 (lambda (x69687227) (kont7075 x69687227)))) (list f70767226)) (let ((f70807228 (lambda (a69697229) (let ((f70797230 (lambda (a69707231) (let ((f70787232 (lambda (a69717233) (let ((f70777234 (lambda (a69727235) (cons kont7075 a69707231 a69727235)))) (map f70777234 proc a69717233))))) (cdr f70787232 lst))))) (proc f70797230 a69697229))))) (car f70807228 lst)))))) (null? f70817224 lst)))
[102] '(hash-ref env x) = 'a69737237
[102] '(hash-ref env x) = 'kont7082
[102] '(hash-ref env x) = 'x69747239
[105] '(map (alpha-rename env) es) = '(kont7082 x69747239)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (x69747239) (kont7082 x69747239))
[102] '(hash-ref env x) = 'list
[102] '(hash-ref env x) = 'f70837238
[105] '(map (alpha-rename env) es) = '(list f70837238)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70837238 (lambda (x69747239) (kont7082 x69747239)))) (list f70837238))
[102] '(hash-ref env x) = 'a69767243
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'kont7082
[102] '(hash-ref env x) = 'a69777245
[102] '(hash-ref env x) = 'a69797249
[105] '(map (alpha-rename env) es) = '(cons kont7082 a69777245 a69797249)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69797249) (cons kont7082 a69777245 a69797249))
[102] '(hash-ref env x) = 'filter
[102] '(hash-ref env x) = 'f70847248
[102] '(hash-ref env x) = 'op
[102] '(hash-ref env x) = 'a69787247
[105] '(map (alpha-rename env) es) = '(filter f70847248 op a69787247)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247)))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70857246
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70857246 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f70867244
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car f70867244 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst))
[102] '(hash-ref env x) = 'filter
[102] '(hash-ref env x) = 'kont7082
[102] '(hash-ref env x) = 'op
[102] '(hash-ref env x) = 'a69807251
[105] '(map (alpha-rename env) es) = '(filter kont7082 op a69807251)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69807251) (filter kont7082 op a69807251))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70877250
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70877250 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69767243) (if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst))))
[102] '(hash-ref env x) = 'op
[102] '(hash-ref env x) = 'f70887242
[102] '(hash-ref env x) = 'a69757241
[105] '(map (alpha-rename env) es) = '(op f70887242 a69757241)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70887242 (lambda (a69767243) (if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst)))))) (op f70887242 a69757241))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69757241) (let ((f70887242 (lambda (a69767243) (if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst)))))) (op f70887242 a69757241)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f70897240
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car f70897240 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70897240 (lambda (a69757241) (let ((f70887242 (lambda (a69767243) (if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst)))))) (op f70887242 a69757241))))) (car f70897240 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69737237 (let ((f70837238 (lambda (x69747239) (kont7082 x69747239)))) (list f70837238)) (let ((f70897240 (lambda (a69757241) (let ((f70887242 (lambda (a69767243) (if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst)))))) (op f70887242 a69757241))))) (car f70897240 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69737237) (if a69737237 (let ((f70837238 (lambda (x69747239) (kont7082 x69747239)))) (list f70837238)) (let ((f70897240 (lambda (a69757241) (let ((f70887242 (lambda (a69767243) (if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst)))))) (op f70887242 a69757241))))) (car f70897240 lst))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'f70907236
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? f70907236 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70907236 (lambda (a69737237) (if a69737237 (let ((f70837238 (lambda (x69747239) (kont7082 x69747239)))) (list f70837238)) (let ((f70897240 (lambda (a69757241) (let ((f70887242 (lambda (a69767243) (if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst)))))) (op f70887242 a69757241))))) (car f70897240 lst)))))) (null? f70907236 lst))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (filter kont7082 op lst) (let ((f70907236 (lambda (a69737237) (if a69737237 (let ((f70837238 (lambda (x69747239) (kont7082 x69747239)))) (list f70837238)) (let ((f70897240 (lambda (a69757241) (let ((f70887242 (lambda (a69767243) (if a69767243 (let ((f70867244 (lambda (a69777245) (let ((f70857246 (lambda (a69787247) (let ((f70847248 (lambda (a69797249) (cons kont7082 a69777245 a69797249)))) (filter f70847248 op a69787247))))) (cdr f70857246 lst))))) (car f70867244 lst)) (let ((f70877250 (lambda (a69807251) (filter kont7082 op a69807251)))) (cdr f70877250 lst)))))) (op f70887242 a69757241))))) (car f70897240 lst)))))) (null? f70907236 lst)))
[104] '`',dat = ''0
[102] '(hash-ref env x) = 'a69827254
[102] '(hash-ref env x) = 'kont7091
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(kont7091 lst)
[104] '`',dat = ''1
[102] '(hash-ref env x) = 'drop
[102] '(hash-ref env x) = 'kont7091
[102] '(hash-ref env x) = 'a69837256
[102] '(hash-ref env x) = 'a69857259
[105] '(map (alpha-rename env) es) = '(drop kont7091 a69837256 a69857259)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69857259) (drop kont7091 a69837256 a69857259))
[102] '(hash-ref env x) = '-
[102] '(hash-ref env x) = 'f70927258
[102] '(hash-ref env x) = 'n
[102] '(hash-ref env x) = 'a69847257
[105] '(map (alpha-rename env) es) = '(- f70927258 n a69847257)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69847257 '1)) (let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69837256) (let ((a69847257 '1)) (let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257))))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70937255
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70937255 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70937255 (lambda (a69837256) (let ((a69847257 '1)) (let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257)))))) (cdr f70937255 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69827254 (kont7091 lst) (let ((f70937255 (lambda (a69837256) (let ((a69847257 '1)) (let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257)))))) (cdr f70937255 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69827254) (if a69827254 (kont7091 lst) (let ((f70937255 (lambda (a69837256) (let ((a69847257 '1)) (let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257)))))) (cdr f70937255 lst))))
[102] '(hash-ref env x) = '=
[102] '(hash-ref env x) = 'f70947253
[102] '(hash-ref env x) = 'n
[102] '(hash-ref env x) = 'a69817252
[105] '(map (alpha-rename env) es) = '(= f70947253 n a69817252)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70947253 (lambda (a69827254) (if a69827254 (kont7091 lst) (let ((f70937255 (lambda (a69837256) (let ((a69847257 '1)) (let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257)))))) (cdr f70937255 lst)))))) (= f70947253 n a69817252))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((a69817252 '0)) (let ((f70947253 (lambda (a69827254) (if a69827254 (kont7091 lst) (let ((f70937255 (lambda (a69837256) (let ((a69847257 '1)) (let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257)))))) (cdr f70937255 lst)))))) (= f70947253 n a69817252)))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (drop kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (lambda (a69827254) (if a69827254 (kont7091 lst) (let ((f70937255 (lambda (a69837256) (let ((a69847257 '1)) (let ((f70927258 (lambda (a69857259) (drop kont7091 a69837256 a69857259)))) (- f70927258 n a69847257)))))) (cdr f70937255 lst)))))) (= f70947253 n a69817252))))
[102] '(hash-ref env x) = 'a69867261
[102] '(hash-ref env x) = 'kont7095
[102] '(hash-ref env x) = 'acc
[105] '(map (alpha-rename env) es) = '(kont7095 acc)
[102] '(hash-ref env x) = 'proc
[102] '(hash-ref env x) = 'kont7095
[102] '(hash-ref env x) = 'a69877263
[102] '(hash-ref env x) = 'a69897267
[105] '(map (alpha-rename env) es) = '(proc kont7095 a69877263 a69897267)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69897267) (proc kont7095 a69877263 a69897267))
[102] '(hash-ref env x) = 'foldr
[102] '(hash-ref env x) = 'f70967266
[102] '(hash-ref env x) = 'proc
[102] '(hash-ref env x) = 'acc
[102] '(hash-ref env x) = 'a69887265
[105] '(map (alpha-rename env) es) = '(foldr f70967266 proc acc a69887265)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69887265) (let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265)))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f70977264
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(cdr f70977264 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70977264 (lambda (a69887265) (let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265))))) (cdr f70977264 lst))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69877263) (let ((f70977264 (lambda (a69887265) (let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265))))) (cdr f70977264 lst)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f70987262
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(car f70987262 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70987262 (lambda (a69877263) (let ((f70977264 (lambda (a69887265) (let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265))))) (cdr f70977264 lst))))) (car f70987262 lst))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69867261 (kont7095 acc) (let ((f70987262 (lambda (a69877263) (let ((f70977264 (lambda (a69887265) (let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265))))) (cdr f70977264 lst))))) (car f70987262 lst)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69867261) (if a69867261 (kont7095 acc) (let ((f70987262 (lambda (a69877263) (let ((f70977264 (lambda (a69887265) (let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265))))) (cdr f70977264 lst))))) (car f70987262 lst))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'f70997260
[102] '(hash-ref env x) = 'lst
[105] '(map (alpha-rename env) es) = '(null? f70997260 lst)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f70997260 (lambda (a69867261) (if a69867261 (kont7095 acc) (let ((f70987262 (lambda (a69877263) (let ((f70977264 (lambda (a69887265) (let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265))))) (cdr f70977264 lst))))) (car f70987262 lst)))))) (null? f70997260 lst))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (foldr kont7095 proc acc lst) (let ((f70997260 (lambda (a69867261) (if a69867261 (kont7095 acc) (let ((f70987262 (lambda (a69877263) (let ((f70977264 (lambda (a69887265) (let ((f70967266 (lambda (a69897267) (proc kont7095 a69877263 a69897267)))) (foldr f70967266 proc acc a69887265))))) (cdr f70977264 lst))))) (car f70987262 lst)))))) (null? f70997260 lst)))
[102] '(hash-ref env x) = 'a69907269
[102] '(hash-ref env x) = 'kont7100
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(kont7100 lst2)
[102] '(hash-ref env x) = 'cons
[102] '(hash-ref env x) = 'kont7100
[102] '(hash-ref env x) = 'a69917271
[102] '(hash-ref env x) = 'a69937275
[105] '(map (alpha-rename env) es) = '(cons kont7100 a69917271 a69937275)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69937275) (cons kont7100 a69917271 a69937275))
[102] '(hash-ref env x) = 'append
[102] '(hash-ref env x) = 'f71017274
[102] '(hash-ref env x) = 'a69927273
[102] '(hash-ref env x) = 'lst2
[105] '(map (alpha-rename env) es) = '(append f71017274 a69927273 lst2)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69927273) (let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2)))
[102] '(hash-ref env x) = 'cdr
[102] '(hash-ref env x) = 'f71027272
[102] '(hash-ref env x) = 'lst1
[105] '(map (alpha-rename env) es) = '(cdr f71027272 lst1)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f71027272 (lambda (a69927273) (let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2))))) (cdr f71027272 lst1))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69917271) (let ((f71027272 (lambda (a69927273) (let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2))))) (cdr f71027272 lst1)))
[102] '(hash-ref env x) = 'car
[102] '(hash-ref env x) = 'f71037270
[102] '(hash-ref env x) = 'lst1
[105] '(map (alpha-rename env) es) = '(car f71037270 lst1)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f71037270 (lambda (a69917271) (let ((f71027272 (lambda (a69927273) (let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2))))) (cdr f71027272 lst1))))) (car f71037270 lst1))
[100] '`(if ,((alpha-rename env) e0) ,((alpha-rename env) e1) ,((alpha-rename env) e2)) = '(if a69907269 (kont7100 lst2) (let ((f71037270 (lambda (a69917271) (let ((f71027272 (lambda (a69927273) (let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2))))) (cdr f71027272 lst1))))) (car f71037270 lst1)))
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (a69907269) (if a69907269 (kont7100 lst2) (let ((f71037270 (lambda (a69917271) (let ((f71027272 (lambda (a69927273) (let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2))))) (cdr f71027272 lst1))))) (car f71037270 lst1))))
[102] '(hash-ref env x) = 'null?
[102] '(hash-ref env x) = 'f71047268
[102] '(hash-ref env x) = 'lst1
[105] '(map (alpha-rename env) es) = '(null? f71047268 lst1)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f71047268 (lambda (a69907269) (if a69907269 (kont7100 lst2) (let ((f71037270 (lambda (a69917271) (let ((f71027272 (lambda (a69927273) (let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2))))) (cdr f71027272 lst1))))) (car f71037270 lst1)))))) (null? f71047268 lst1))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (append kont7100 lst1 lst2) (let ((f71047268 (lambda (a69907269) (if a69907269 (kont7100 lst2) (let ((f71037270 (lambda (a69917271) (let ((f71027272 (lambda (a69927273) (let ((f71017274 (lambda (a69937275) (cons kont7100 a69917271 a69937275)))) (append f71017274 a69927273 lst2))))) (cdr f71027272 lst1))))) (car f71037270 lst1)))))) (null? f71047268 lst1)))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7277
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim hash lst7277)
[102] '(hash-ref env x) = 'kont71057276
[102] '(hash-ref env x) = 'x69947278
[105] '(map (alpha-rename env) es) = '(kont71057276 x69947278)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69947278 (apply-prim hash lst7277))) (kont71057276 x69947278))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (kont71057276 x69947278)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (kont71057276 x69947278))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (hash . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (kont71057276 x69947278)))))
[102] '(hash-ref env x) = 'h
[102] '(hash-ref env x) = 'k
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-ref h k)
[102] '(hash-ref env x) = 'kont7107
[102] '(hash-ref env x) = 'x69957279
[105] '(map (alpha-rename env) es) = '(kont7107 x69957279)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69957279 (prim hash-ref h k))) (kont7107 x69957279))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-ref kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (kont7107 x69957279)))
[102] '(hash-ref env x) = 'h
[102] '(hash-ref env x) = 'k
[102] '(hash-ref env x) = 'v
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-set h k v)
[102] '(hash-ref env x) = 'kont7108
[102] '(hash-ref env x) = 'x69967280
[105] '(map (alpha-rename env) es) = '(kont7108 x69967280)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69967280 (prim hash-set h k v))) (kont7108 x69967280))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-set kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (kont7108 x69967280)))
[102] '(hash-ref env x) = 'h
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-keys h)
[102] '(hash-ref env x) = 'kont7109
[102] '(hash-ref env x) = 'x69977281
[105] '(map (alpha-rename env) es) = '(kont7109 x69977281)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69977281 (prim hash-keys h))) (kont7109 x69977281))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-keys kont7109 h) (let ((x69977281 (prim hash-keys h))) (kont7109 x69977281)))
[102] '(hash-ref env x) = 'h
[102] '(hash-ref env x) = 'k
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-has-key? h k)
[102] '(hash-ref env x) = 'kont7110
[102] '(hash-ref env x) = 'x69987282
[105] '(map (alpha-rename env) es) = '(kont7110 x69987282)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69987282 (prim hash-has-key? h k))) (kont7110 x69987282))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-has-key? kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (kont7110 x69987282)))
[102] '(hash-ref env x) = 'h
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim hash-count h)
[102] '(hash-ref env x) = 'kont7111
[102] '(hash-ref env x) = 'x69997283
[105] '(map (alpha-rename env) es) = '(kont7111 x69997283)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x69997283 (prim hash-count h))) (kont7111 x69997283))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (hash-count kont7111 h) (let ((x69997283 (prim hash-count h))) (kont7111 x69997283)))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim car lst)
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim cdr lst)
[102] '(hash-ref env x) = 'lst7285
[98] '`(apply-prim ,op ,((alpha-rename env) e0)) = '(apply-prim set lst7285)
[102] '(hash-ref env x) = 'kont71127284
[102] '(hash-ref env x) = 'x70007286
[105] '(map (alpha-rename env) es) = '(kont71127284 x70007286)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70007286 (apply-prim set lst7285))) (kont71127284 x70007286))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (kont71127284 x70007286)))
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (kont71127284 x70007286))))
[114] '`(define (,fname . ,params) ,((alpha-rename (hash-set env params params)) body)) = '(define (set . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (kont71127284 x70007286)))))
[102] '(hash-ref env x) = 'h
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim set->list h)
[102] '(hash-ref env x) = 'kont7114
[102] '(hash-ref env x) = 'x70017287
[105] '(map (alpha-rename env) es) = '(kont7114 x70017287)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70017287 (prim set->list h))) (kont7114 x70017287))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (set->list kont7114 h) (let ((x70017287 (prim set->list h))) (kont7114 x70017287)))
[102] '(hash-ref env x) = 'lst
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim list->set lst)
[102] '(hash-ref env x) = 'kont7115
[102] '(hash-ref env x) = 'x70027288
[105] '(map (alpha-rename env) es) = '(kont7115 x70027288)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70027288 (prim list->set lst))) (kont7115 x70027288))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (list->set kont7115 lst) (let ((x70027288 (prim list->set lst))) (kont7115 x70027288)))
[102] '(hash-ref env x) = 's
[102] '(hash-ref env x) = 'val
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim set-add s val)
[102] '(hash-ref env x) = 'kont7116
[102] '(hash-ref env x) = 'x70037289
[105] '(map (alpha-rename env) es) = '(kont7116 x70037289)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70037289 (prim set-add s val))) (kont7116 x70037289))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (set-add kont7116 s val) (let ((x70037289 (prim set-add s val))) (kont7116 x70037289)))
[102] '(hash-ref env x) = 'str
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string? str)
[102] '(hash-ref env x) = 'kont7117
[102] '(hash-ref env x) = 'x70047290
[105] '(map (alpha-rename env) es) = '(kont7117 x70047290)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70047290 (prim string? str))) (kont7117 x70047290))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string? kont7117 str) (let ((x70047290 (prim string? str))) (kont7117 x70047290)))
[102] '(hash-ref env x) = 'str
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string-length str)
[102] '(hash-ref env x) = 'kont7118
[102] '(hash-ref env x) = 'x70057291
[105] '(map (alpha-rename env) es) = '(kont7118 x70057291)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70057291 (prim string-length str))) (kont7118 x70057291))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string-length kont7118 str) (let ((x70057291 (prim string-length str))) (kont7118 x70057291)))
[102] '(hash-ref env x) = 'str
[102] '(hash-ref env x) = 'pos
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string-ref str pos)
[102] '(hash-ref env x) = 'kont7119
[102] '(hash-ref env x) = 'x70067292
[105] '(map (alpha-rename env) es) = '(kont7119 x70067292)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70067292 (prim string-ref str pos))) (kont7119 x70067292))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string-ref kont7119 str pos) (let ((x70067292 (prim string-ref str pos))) (kont7119 x70067292)))
[102] '(hash-ref env x) = 'str
[102] '(hash-ref env x) = 'start
[102] '(hash-ref env x) = 'end
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim substring str start end)
[102] '(hash-ref env x) = 'kont7120
[102] '(hash-ref env x) = 'x70077293
[105] '(map (alpha-rename env) es) = '(kont7120 x70077293)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70077293 (prim substring str start end))) (kont7120 x70077293))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (substring kont7120 str start end) (let ((x70077293 (prim substring str start end))) (kont7120 x70077293)))
[102] '(hash-ref env x) = 's1
[102] '(hash-ref env x) = 's2
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string-append s1 s2)
[102] '(hash-ref env x) = 'kont7121
[102] '(hash-ref env x) = 'x70087294
[105] '(map (alpha-rename env) es) = '(kont7121 x70087294)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70087294 (prim string-append s1 s2))) (kont7121 x70087294))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string-append kont7121 s1 s2) (let ((x70087294 (prim string-append s1 s2))) (kont7121 x70087294)))
[102] '(hash-ref env x) = 'str
[97] '`(prim ,op ,@(map (alpha-rename env) es)) = '(prim string->list str)
[102] '(hash-ref env x) = 'kont7122
[102] '(hash-ref env x) = 'x70097295
[105] '(map (alpha-rename env) es) = '(kont7122 x70097295)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70097295 (prim string->list str))) (kont7122 x70097295))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (string->list kont7122 str) (let ((x70097295 (prim string->list str))) (kont7122 x70097295)))
[104] '`',dat = ''"random"
[102] '(hash-ref env x) = 'kont7123
[102] '(hash-ref env x) = 'x70107296
[105] '(map (alpha-rename env) es) = '(kont7123 x70107296)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((x70107296 '"random")) (kont7123 x70107296))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (call kont7123) (let ((x70107296 '"random")) (kont7123 x70107296)))
[102] '(hash-ref env x) = 'kont7124
[102] '(hash-ref env x) = 'x70117298
[105] '(map (alpha-rename env) es) = '(kont7124 x70117298)
[92] '`(lambda ,xs+ ,((alpha-rename env+) e0)) = '(lambda (x70117298) (kont7124 x70117298))
[102] '(hash-ref env x) = 'call
[102] '(hash-ref env x) = 'f71257297
[105] '(map (alpha-rename env) es) = '(call f71257297)
[88] '`(let ,(map list xs+ (map (alpha-rename env) es)) ,((alpha-rename env+) e0)) = '(let ((f71257297 (lambda (x70117298) (kont7124 x70117298)))) (call f71257297))
[110] '`(define (,fname ,@params) ,((alpha-rename (foldl (lambda (x h) (hash-set h x x)) env params)) body)) = '(define (brouhaha_main kont7124) (let ((f71257297 (lambda (x70117298) (kont7124 x70117298)))) (call f71257297)))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70127126 'x69147128) '(clo-app kont70127126 x69147128) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70127126 'lst7127) '(let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst 'kont70127126) '(let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70147129 'x69157131) '(clo-app kont70147129 x69157131) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70147129 'lst7130) '(let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont70147129 'lst) '(let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70167132 'x69167134) '(clo-app kont70167132 x69167134) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70167132 'lst7133) '(let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont70167132 'lst) '(let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7018 'x69177135) '(clo-app kont7018 x69177135) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'a 'kont7018 'b) '(let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70197136 'x69187138) '(clo-app kont70197136 x69187138) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70197136 'lst7137) '(let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst 'kont70197136) '(let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70217139 'x69197141) '(clo-app kont70217139 x69197141) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70217139 'lst7140) '(let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst 'kont70217139) '(let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70237142 'x69207144) '(clo-app kont70237142 x69207144) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70237142 'lst7143) '(let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst 'kont70237142) '(let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70257145 'x69217147) '(clo-app kont70257145 x69217147) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70257145 'lst7146) '(let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont70257145 'lst) '(let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70277148 'x69227150) '(clo-app kont70277148 x69227150) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70277148 'lst7149) '(let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont70277148 'lst) '(let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70297151 'x69237153) '(clo-app kont70297151 x69237153) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont70297151 'lst7152) '(let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst 'kont70297151) '(let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69247154 'kont7031) '(clo-app kont7031 x69247154) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'x 'kont7031) '(let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69257155 'kont7032) '(clo-app kont7032 x69257155) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'y 'x 'kont7032) '(let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7033 'x69267156) '(clo-app kont7033 x69267156) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7033 'y 'x) '(let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7034 'x69277157) '(clo-app kont7034 x69277157) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'a 'kont7034 'b) '(let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7035 'x69287158) '(clo-app kont7035 x69287158) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7035 'lst) '(let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7036 'x69297159) '(clo-app kont7036 x69297159) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7036 'lst) '(let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69317161 'f70387162 'modulo 'x) '(clo-app modulo f70387162 x a69317161) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69327163 'kont7037 'equal? 'a69307160) '(clo-app equal? kont7037 a69307160 a69327163) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'a69317161 'equal? 'x 'a69307160 'modulo 'kont7037) '(let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161)) '((proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163)))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'equal? 'x 'a69307160 'modulo 'kont7037) '(let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))) '((proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163)))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'equal? 'x 'modulo 'kont7037) '(let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161)))) '((proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163)))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f70407166 'x 'modulo 'a69347165) '(clo-app modulo f70407166 x a69347165) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69337164 'equal? 'kont7039 'a69357167) '(clo-app equal? kont7039 a69337164 a69357167) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'a69337164 'kont7039 'equal? 'x 'modulo 'a69347165) '(let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165)) '((proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167)))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'a69337164 'modulo 'kont7039 'equal? 'x) '(let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))) '((proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167)))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'modulo 'kont7039 'equal? 'x) '(let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165)))) '((proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167)))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont70417168 'x7169) '(clo-app kont70417168 x7169) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont70417168 'x) '(let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'x) '(let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69367170 'kont7043) '(clo-app kont7043 x69367170) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'val 'kont7043) '(let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69377171 'kont7044) '(clo-app kont7044 x69377171) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'val 'kont7044) '(let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'null? 'f70497172) '(clo-app null? f70497172 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7045 'x69397174) '(clo-app kont7045 x69397174) '())
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'kont7045) '(let ((x69397174 '#f)) (clo-app kont7045 x69397174)) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'car 'f70487175) '(clo-app car f70487175 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f70477177 'equal? 'x 'a69407176) '(clo-app equal? f70477177 a69407176 x) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69427179 'kont7045) '(clo-app kont7045 x69427179) '())
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'kont7045) '(let ((x69427179 '#t)) (clo-app kont7045 x69427179)) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'f70467180 'lst) '(clo-app cdr f70467180 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69437181 'x 'kont7045 'member?) '(clo-app member? kont7045 x a69437181) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'x 'kont7045 'member?) '(let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst)) '((proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181)))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'a69417178 'lst 'x 'kont7045 'member?) '(if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))) '((proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'equal? 'x 'kont7045 'member? 'a69407176) '(let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x)) '((proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'equal? 'x 'kont7045 'car 'member?) '(let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst)) '((proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x)))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'lst 'equal? 'x 'car 'member? 'kont7045 'a69387173) '(if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))) '((proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'null? 'equal? 'x 'kont7045 'car 'member?) '(let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst)) '((proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst)))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'null? 'f70547182) '(clo-app null? f70547182 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7050 'acc) '(clo-app kont7050 acc) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'f70537184 'car) '(clo-app car f70537184 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69457185 'f70527186 'fun 'acc) '(clo-app fun f70527186 a69457185 acc) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70517188) '(clo-app cdr f70517188 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7050 'a69477189 'foldl 'fun 'a69467187) '(clo-app foldl kont7050 fun a69467187 a69477189) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7050 'lst 'foldl 'fun 'a69467187) '(let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)) '((proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7050 'lst 'a69457185 'fun 'acc 'foldl) '(let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc)) '((proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7050 'lst 'fun 'acc 'car 'foldl) '(let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst)) '((proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc)))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'kont7050 'lst 'a69447183 'fun 'acc 'car 'foldl) '(if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))) '((proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7050 'lst 'null? 'fun 'acc 'car 'foldl) '(let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst)) '((proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst)))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'null? 'f70597190) '(clo-app null? f70597190 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7055 'lst2) '(clo-app kont7055 lst2) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70587192) '(clo-app cdr f70587192 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f70577194 'lst 'car) '(clo-app car f70577194 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69507195 'f70567196 'lst2 'cons) '(clo-app cons f70567196 a69507195 lst2) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69497193 'a69517197 'kont7055 'reverse-helper) '(clo-app reverse-helper kont7055 a69497193 a69517197) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'a69497193 'a69507195 'kont7055 'reverse-helper 'lst2 'cons) '(let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)) '((proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'a69497193 'lst 'kont7055 'reverse-helper 'lst2 'car 'cons) '(let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst)) '((proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'kont7055 'reverse-helper 'lst2 'car 'cons) '(let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst)) '((proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst)))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'lst 'kont7055 'reverse-helper 'lst2 'car 'cons 'a69487191) '(if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))) '((proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'null? 'kont7055 'reverse-helper 'lst2 'car 'cons) '(let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst)) '((proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst)))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'list 'f70617198) '(clo-app list f70617198) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'a69527199 'reverse-helper 'kont7060) '(clo-app reverse-helper kont7060 lst a69527199) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'list 'lst 'reverse-helper 'kont7060) '(let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198)) '((proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199)))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69537200 'f70687201 'n '=) '(clo-app = f70687201 n a69537200) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'reverse 'f70637203 'lst2) '(clo-app reverse f70637203 lst2) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69557204 'kont7062) '(clo-app kont7062 x69557204) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'reverse 'lst2 'kont7062) '(let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) '((proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204)))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70677205) '(clo-app cdr f70677205 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'n 'a69577207 'f70667208 '-) '(clo-app - f70667208 n a69577207) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f70657210 'lst 'car) '(clo-app car f70657210 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69597211 'f70647212 'lst2 'cons) '(clo-app cons f70647212 a69597211 lst2) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69587209 'a69607213 'take-helper 'a69567206 'kont7062) '(clo-app take-helper kont7062 a69567206 a69587209 a69607213) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'a69587209 'a69597211 'cons 'take-helper 'lst2 'a69567206 'kont7062) '(let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2)) '((proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'a69587209 'lst 'cons 'take-helper 'lst2 'a69567206 'kont7062 'car) '(let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)) '((proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'lst '- 'take-helper 'lst2 'a69567206 'kont7062 'n 'car 'a69577207 'cons) '(let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)) '((proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst))))))))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'lst 'cons '- 'take-helper 'lst2 'a69567206 'kont7062 'n 'car) '(let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207))) '((proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst))))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'cons '- 'take-helper 'lst2 'kont7062 'n 'car) '(let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)) '((proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207))))))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'lst 'reverse 'a69547202 'cons '- 'take-helper 'lst2 'kont7062 'n 'car) '(if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst))) '((proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207))))))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'cons 'a69537200 'reverse 'take-helper 'lst2 'kont7062 'n 'car '= '-) '(let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)) '((proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst))))))))))))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'cdr 'lst 'reverse 'cons 'take-helper 'lst2 'kont7062 'n 'car '= '-) '(let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200))) '((proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst))))))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'list 'f70707214) '(clo-app list f70707214) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69617215 'take-helper 'n 'lst 'kont7069) '(clo-app take-helper kont7069 lst n a69617215) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'list 'take-helper 'n 'lst 'kont7069) '(let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214)) '((proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'null? 'f70747216) '(clo-app null? f70747216 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7071 'x69637218) '(clo-app kont7071 x69637218) '())
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'kont7071) '(let ((x69637218 '0)) (clo-app kont7071 x69637218)) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70737220) '(clo-app cdr f70737220 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'length 'a69657221 'f70727222) '(clo-app length f70727222 a69657221) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7071 '+ 'a69647219 'a69667223) '(clo-app + kont7071 a69647219 a69667223) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'length 'kont7071 '+ 'a69647219 'a69657221) '(let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221)) '((proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'length 'kont7071 '+ 'a69647219) '(let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)) '((proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221)))))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'cdr 'lst 'length 'kont7071 '+) '(let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst))) '((proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221)))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'lst 'length 'kont7071 'a69627217 '+) '(if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))) '((proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221)))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'kont7071 '+ 'null? 'length) '(let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst)) '((proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'null? 'f70817224) '(clo-app null? f70817224 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'list 'f70767226) '(clo-app list f70767226) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69687227 'kont7075) '(clo-app kont7075 x69687227) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'list 'kont7075) '(let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) '((proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227)))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f70807228 'lst 'car) '(clo-app car f70807228 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69697229 'f70797230 'proc) '(clo-app proc f70797230 a69697229) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70787232) '(clo-app cdr f70787232 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'map 'a69717233 'f70777234 'proc) '(clo-app map f70777234 proc a69717233) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69707231 'cons 'a69727235 'kont7075) '(clo-app cons kont7075 a69707231 a69727235) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'map 'a69707231 'a69717233 'kont7075 'proc 'cons) '(let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)) '((proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'map 'a69707231 'kont7075 'proc 'cons) '(let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst)) '((proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'map 'kont7075 'proc 'cons 'lst 'a69697229) '(let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229)) '((proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'lst 'map 'kont7075 'proc 'car 'cons) '(let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)) '((proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229)))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'lst 'map 'kont7075 'proc 'car 'cons 'a69677225 'list 'cdr) '(if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst))) '((proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'lst 'kont7075 'proc 'car 'cons 'list 'cdr 'map 'null?) '(let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst)) '((proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst))))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'null? 'f70907236) '(clo-app null? f70907236 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'list 'f70837238) '(clo-app list f70837238) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7082 'x69747239) '(clo-app kont7082 x69747239) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'list 'kont7082) '(let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) '((proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239)))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'car 'f70897240) '(clo-app car f70897240 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69757241 'f70887242 'op) '(clo-app op f70887242 a69757241) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f70867244 'lst 'car) '(clo-app car f70867244 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70857246) '(clo-app cdr f70857246 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69787247 'filter 'f70847248 'op) '(clo-app filter f70847248 op a69787247) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7082 'a69777245 'a69797249 'cons) '(clo-app cons kont7082 a69777245 a69797249) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'kont7082 'a69777245 'a69787247 'op 'filter 'cons) '(let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)) '((proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7082 'op 'filter 'cons 'lst 'a69777245) '(let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst)) '((proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7082 'lst 'op 'cons 'filter 'car) '(let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) '((proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst)))))))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70877250) '(clo-app cdr f70877250 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7082 'op 'a69807251 'filter) '(clo-app filter kont7082 op a69807251) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7082 'lst 'op 'filter) '(let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst)) '((proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251)))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'kont7082 'a69767243 'lst 'op 'cons 'filter 'car) '(if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))) '((proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'kont7082 'lst 'op 'cons 'a69757241 'cdr 'filter 'car) '(let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)) '((proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst)))))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7082 'lst 'op 'cons 'filter 'car) '(let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)) '((proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241))))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'kont7082 'lst 'op 'a69737237 'cons 'list 'cdr 'filter 'car) '(if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst))) '((proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241))))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'kont7082 'lst 'null? 'op 'cons 'list 'cdr 'filter 'car) '(let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst)) '((proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst))))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69817252 'f70947253 'n '=) '(clo-app = f70947253 n a69817252) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'kont7091) '(clo-app kont7091 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70937255) '(clo-app cdr f70937255 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69847257 'f70927258 'n '-) '(clo-app - f70927258 n a69847257) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69857259 'drop 'kont7091 'a69837256) '(clo-app drop kont7091 a69837256 a69857259) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'a69847257 'drop 'kont7091 'n 'a69837256 '-) '(let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)) '((proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259)))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'drop 'kont7091 'n 'a69837256 '-) '(let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257))) '((proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7091 'n '- 'lst 'drop) '(let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)) '((proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'kont7091 '- 'lst 'drop 'a69827254 'n) '(if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst))) '((proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7091 'a69817252 'n 'lst 'drop '= '-) '(let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)) '((proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst))))))))))))
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'cdr 'kont7091 'n 'lst 'drop '= '-) '(let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252))) '((proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f70997260 'lst 'null?) '(clo-app null? f70997260 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'acc 'kont7095) '(clo-app kont7095 acc) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'lst 'f70987262 'car) '(clo-app car f70987262 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst 'f70977264) '(clo-app cdr f70977264 lst) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'foldr 'a69887265 'f70967266 'proc 'acc) '(clo-app foldr f70967266 proc acc a69887265) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69877263 'a69897267 'proc 'kont7095) '(clo-app proc kont7095 a69877263 a69897267) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'foldr 'a69877263 'a69887265 'kont7095 'proc 'acc) '(let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)) '((proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'a69877263 'kont7095 'foldr 'lst 'proc 'acc) '(let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst)) '((proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'car 'kont7095 'foldr 'lst 'proc 'acc) '(let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst)) '((proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst)))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'car 'kont7095 'a69867261 'foldr 'lst 'proc 'acc) '(if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))) '((proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'null? 'car 'kont7095 'foldr 'lst 'proc 'acc) '(let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst)) '((proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst)))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'null? 'f71047268 'lst1) '(clo-app null? f71047268 lst1) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7100 'lst2) '(clo-app kont7100 lst2) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f71037270 'lst1 'car) '(clo-app car f71037270 lst1) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'cdr 'lst1 'f71027272) '(clo-app cdr f71027272 lst1) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69927273 'f71017274 'append 'lst2) '(clo-app append f71017274 a69927273 lst2) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'a69937275 'kont7100 'cons 'a69917271) '(clo-app cons kont7100 a69917271 a69937275) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'a69927273 'kont7100 'append 'lst2 'cons 'a69917271) '(let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)) '((proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275)))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7100 'append 'lst2 'lst1 'cons 'a69917271) '(let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1)) '((proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7100 'append 'lst2 'cons 'lst1 'car) '(let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1)) '((proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1)))))))))))
[280] '(list (set-add (set-union freevars0 freevars1) x) `(if ,x ,e0+ ,e1+) (append procs0+ procs1+)) = (list (set 'cdr 'kont7100 'append 'cons 'a69907269 'lst2 'lst1 'car) '(if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))) '((proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1)))))))))))
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'cdr 'kont7100 'null? 'append 'lst2 'cons 'lst1 'car) '(let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1)) '((proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1)))))))))))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont71057276 'x69947278) '(clo-app kont71057276 x69947278) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont71057276 'lst7277) '(let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont71057276 'lst) '(let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69957279 'kont7107) '(clo-app kont7107 x69957279) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'k 'kont7107 'h) '(let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69967280 'kont7108) '(clo-app kont7108 x69967280) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'v 'k 'h 'kont7108) '(let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69977281 'kont7109) '(clo-app kont7109 x69977281) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'h 'kont7109) '(let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69987282 'kont7110) '(clo-app kont7110 x69987282) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'k 'h 'kont7110) '(let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x69997283 'kont7111) '(clo-app kont7111 x69997283) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'h 'kont7111) '(let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont71127284 'x70007286) '(clo-app kont71127284 x70007286) '())
[244] '(list (set-remove (set-add freevars y) x) `(let ((,x (apply-prim ,op ,y))) ,e0+) procs+) = (list (set 'kont71127284 'lst7285) '(let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286)) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst 'kont71127284) '(let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'lst) '(let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286)))) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7114 'x70017287) '(clo-app kont7114 x70017287) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7114 'h) '(let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'kont7115 'x70027288) '(clo-app kont7115 x70027288) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7115 'lst) '(let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70037289 'kont7116) '(clo-app kont7116 x70037289) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 's 'val 'kont7116) '(let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70047290 'kont7117) '(clo-app kont7117 x70047290) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7117 'str) '(let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))) (proc (string? _7454 kont7117 str) (let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70057291 'kont7118) '(clo-app kont7118 x70057291) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7118 'str) '(let ((x70057291 (prim string-length str))) (clo-app kont7118 x70057291)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))) (proc (string? _7454 kont7117 str) (let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290))) (proc (string-length _7455 kont7118 str) (let ((x70057291 (prim string-length str))) (clo-app kont7118 x70057291))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70067292 'kont7119) '(clo-app kont7119 x70067292) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7119 'str 'pos) '(let ((x70067292 (prim string-ref str pos))) (clo-app kont7119 x70067292)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))) (proc (string? _7454 kont7117 str) (let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290))) (proc (string-length _7455 kont7118 str) (let ((x70057291 (prim string-length str))) (clo-app kont7118 x70057291))) (proc (string-ref _7456 kont7119 str pos) (let ((x70067292 (prim string-ref str pos))) (clo-app kont7119 x70067292))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70077293 'kont7120) '(clo-app kont7120 x70077293) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'start 'kont7120 'str 'end) '(let ((x70077293 (prim substring str start end))) (clo-app kont7120 x70077293)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))) (proc (string? _7454 kont7117 str) (let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290))) (proc (string-length _7455 kont7118 str) (let ((x70057291 (prim string-length str))) (clo-app kont7118 x70057291))) (proc (string-ref _7456 kont7119 str pos) (let ((x70067292 (prim string-ref str pos))) (clo-app kont7119 x70067292))) (proc (substring _7457 kont7120 str start end) (let ((x70077293 (prim substring str start end))) (clo-app kont7120 x70077293))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70087294 'kont7121) '(clo-app kont7121 x70087294) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'kont7121 's1 's2) '(let ((x70087294 (prim string-append s1 s2))) (clo-app kont7121 x70087294)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))) (proc (string? _7454 kont7117 str) (let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290))) (proc (string-length _7455 kont7118 str) (let ((x70057291 (prim string-length str))) (clo-app kont7118 x70057291))) (proc (string-ref _7456 kont7119 str pos) (let ((x70067292 (prim string-ref str pos))) (clo-app kont7119 x70067292))) (proc (substring _7457 kont7120 str start end) (let ((x70077293 (prim substring str start end))) (clo-app kont7120 x70077293))) (proc (string-append _7458 kont7121 s1 s2) (let ((x70087294 (prim string-append s1 s2))) (clo-app kont7121 x70087294))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70097295 'kont7122) '(clo-app kont7122 x70097295) '())
[239] '(list (set-remove (set-union (list->set xs) freevars) x) `(let ((,x (prim ,op ,@xs))) ,e0+) procs+) = (list (set 'str 'kont7122) '(let ((x70097295 (prim string->list str))) (clo-app kont7122 x70097295)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))) (proc (string? _7454 kont7117 str) (let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290))) (proc (string-length _7455 kont7118 str) (let ((x70057291 (prim string-length str))) (clo-app kont7118 x70057291))) (proc (string-ref _7456 kont7119 str pos) (let ((x70067292 (prim string-ref str pos))) (clo-app kont7119 x70067292))) (proc (substring _7457 kont7120 str start end) (let ((x70077293 (prim substring str start end))) (clo-app kont7120 x70077293))) (proc (string-append _7458 kont7121 s1 s2) (let ((x70087294 (prim string-append s1 s2))) (clo-app kont7121 x70087294))) (proc (string->list _7459 kont7122 str) (let ((x70097295 (prim string->list str))) (clo-app kont7122 x70097295))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70107296 'kont7123) '(clo-app kont7123 x70107296) '())
[232] '(list (set-remove freevars x) `(let ((,x ',dat)) ,e0+) procs+) = (list (set 'kont7123) '(let ((x70107296 '"random")) (clo-app kont7123 x70107296)) '())
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))) (proc (string? _7454 kont7117 str) (let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290))) (proc (string-length _7455 kont7118 str) (let ((x70057291 (prim string-length str))) (clo-app kont7118 x70057291))) (proc (string-ref _7456 kont7119 str pos) (let ((x70067292 (prim string-ref str pos))) (clo-app kont7119 x70067292))) (proc (substring _7457 kont7120 str start end) (let ((x70077293 (prim substring str start end))) (clo-app kont7120 x70077293))) (proc (string-append _7458 kont7121 s1 s2) (let ((x70087294 (prim string-append s1 s2))) (clo-app kont7121 x70087294))) (proc (string->list _7459 kont7122 str) (let ((x70097295 (prim string->list str))) (clo-app kont7122 x70097295))) (proc (call _7461 kont7123) (let ((x70107296 '"random")) (clo-app kont7123 x70107296))))
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'f71257297 'call) '(clo-app call f71257297) '())
[282] '(list (list->set `(,f ,@xs)) `(clo-app ,f ,@xs) '()) = (list (set 'x70117298 'kont7124) '(clo-app kont7124 x70117298) '())
[258] '(list (set-remove (set-union envvars freevars) x) `(let ((,x (make-closure ,fx ,@envlist))) ,e0+) `(,@procs0+ ,@procs1+ (proc (,fx ,envx ,@xs) ,body++))) = (list (set 'kont7124 'call) '(let ((f71257297 (make-closure lam7462 kont7124))) (clo-app call f71257297)) '((proc (lam7462 env7463 x70117298) (let ((kont7124 (env-ref env7463 1))) (clo-app kont7124 x70117298)))))
[291] '`(,@pr+ ,@procs+ (proc (,fx ,envx . ,xs) ,body+)) = '((proc (+ _7299 . lst) (let ((kont70127126 (prim car lst))) (let ((lst7127 (prim cdr lst))) (let ((x69147128 (apply-prim + lst7127))) (clo-app kont70127126 x69147128))))) (proc (- _7300 . lst) (let ((kont70147129 (prim car lst))) (let ((lst7130 (prim cdr lst))) (let ((x69157131 (apply-prim - lst7130))) (clo-app kont70147129 x69157131))))) (proc (* _7301 . lst) (let ((kont70167132 (prim car lst))) (let ((lst7133 (prim cdr lst))) (let ((x69167134 (apply-prim * lst7133))) (clo-app kont70167132 x69167134))))) (proc (modulo _7302 kont7018 a b) (let ((x69177135 (prim modulo a b))) (clo-app kont7018 x69177135))) (proc (/ _7303 . lst) (let ((kont70197136 (prim car lst))) (let ((lst7137 (prim cdr lst))) (let ((x69187138 (apply-prim / lst7137))) (clo-app kont70197136 x69187138))))) (proc (= _7304 . lst) (let ((kont70217139 (prim car lst))) (let ((lst7140 (prim cdr lst))) (let ((x69197141 (apply-prim = lst7140))) (clo-app kont70217139 x69197141))))) (proc (> _7305 . lst) (let ((kont70237142 (prim car lst))) (let ((lst7143 (prim cdr lst))) (let ((x69207144 (apply-prim > lst7143))) (clo-app kont70237142 x69207144))))) (proc (< _7306 . lst) (let ((kont70257145 (prim car lst))) (let ((lst7146 (prim cdr lst))) (let ((x69217147 (apply-prim < lst7146))) (clo-app kont70257145 x69217147))))) (proc (<= _7307 . lst) (let ((kont70277148 (prim car lst))) (let ((lst7149 (prim cdr lst))) (let ((x69227150 (apply-prim <= lst7149))) (clo-app kont70277148 x69227150))))) (proc (>= _7308 . lst) (let ((kont70297151 (prim car lst))) (let ((lst7152 (prim cdr lst))) (let ((x69237153 (apply-prim >= lst7152))) (clo-app kont70297151 x69237153))))) (proc (null? _7309 kont7031 x) (let ((x69247154 (prim null? x))) (clo-app kont7031 x69247154))) (proc (equal? _7310 kont7032 x y) (let ((x69257155 (prim equal? x y))) (clo-app kont7032 x69257155))) (proc (eq? _7311 kont7033 x y) (let ((x69267156 (prim eq? x y))) (clo-app kont7033 x69267156))) (proc (cons _7312 kont7034 a b) (let ((x69277157 (prim cons a b))) (clo-app kont7034 x69277157))) (proc (car _7313 kont7035 lst) (let ((x69287158 (prim car lst))) (clo-app kont7035 x69287158))) (proc (cdr _7314 kont7036 lst) (let ((x69297159 (prim cdr lst))) (clo-app kont7036 x69297159))) (proc (lam7315 env7316 a69327163) (let ((kont7037 (env-ref env7316 3))) (let ((equal? (env-ref env7316 2))) (let ((a69307160 (env-ref env7316 1))) (clo-app equal? kont7037 a69307160 a69327163))))) (proc (even? _7319 kont7037 x) (let ((a69307160 '0)) (let ((a69317161 '2)) (let ((f70387162 (make-closure lam7315 a69307160 equal? kont7037))) (clo-app modulo f70387162 x a69317161))))) (proc (lam7320 env7321 a69357167) (let ((a69337164 (env-ref env7321 3))) (let ((kont7039 (env-ref env7321 2))) (let ((equal? (env-ref env7321 1))) (clo-app equal? kont7039 a69337164 a69357167))))) (proc (odd? _7324 kont7039 x) (let ((a69337164 '1)) (let ((a69347165 '2)) (let ((f70407166 (make-closure lam7320 equal? kont7039 a69337164))) (clo-app modulo f70407166 x a69347165))))) (proc (list _7325 . x) (let ((kont70417168 (prim car x))) (let ((x7169 (prim cdr x))) (clo-app kont70417168 x7169)))) (proc (float->int _7326 kont7043 val) (let ((x69367170 (prim inexact->exact val))) (clo-app kont7043 x69367170))) (proc (int->float _7327 kont7044 val) (let ((x69377171 (prim exact->inexact val))) (clo-app kont7044 x69377171))) (proc (lam7330 env7331 a69437181) (let ((x (env-ref env7331 3))) (let ((kont7045 (env-ref env7331 2))) (let ((member? (env-ref env7331 1))) (clo-app member? kont7045 x a69437181))))) (proc (lam7332 env7333 a69417178) (let ((cdr (env-ref env7333 5))) (let ((lst (env-ref env7333 4))) (let ((x (env-ref env7333 3))) (let ((kont7045 (env-ref env7333 2))) (let ((member? (env-ref env7333 1))) (if a69417178 (let ((x69427179 '#t)) (clo-app kont7045 x69427179)) (let ((f70467180 (make-closure lam7330 member? kont7045 x))) (clo-app cdr f70467180 lst))))))))) (proc (lam7334 env7335 a69407176) (let ((cdr (env-ref env7335 6))) (let ((lst (env-ref env7335 5))) (let ((equal? (env-ref env7335 4))) (let ((x (env-ref env7335 3))) (let ((kont7045 (env-ref env7335 2))) (let ((member? (env-ref env7335 1))) (let ((f70477177 (make-closure lam7332 member? kont7045 x lst cdr))) (clo-app equal? f70477177 a69407176 x))))))))) (proc (lam7336 env7337 a69387173) (let ((cdr (env-ref env7337 7))) (let ((lst (env-ref env7337 6))) (let ((equal? (env-ref env7337 5))) (let ((x (env-ref env7337 4))) (let ((kont7045 (env-ref env7337 3))) (let ((car (env-ref env7337 2))) (let ((member? (env-ref env7337 1))) (if a69387173 (let ((x69397174 '#f)) (clo-app kont7045 x69397174)) (let ((f70487175 (make-closure lam7334 member? kont7045 x equal? lst cdr))) (clo-app car f70487175 lst))))))))))) (proc (member? _7338 kont7045 x lst) (let ((f70497172 (make-closure lam7336 member? car kont7045 x equal? lst cdr))) (clo-app null? f70497172 lst))) (proc (lam7339 env7340 a69477189) (let ((kont7050 (env-ref env7340 4))) (let ((foldl (env-ref env7340 3))) (let ((fun (env-ref env7340 2))) (let ((a69467187 (env-ref env7340 1))) (clo-app foldl kont7050 fun a69467187 a69477189)))))) (proc (lam7341 env7342 a69467187) (let ((cdr (env-ref env7342 5))) (let ((kont7050 (env-ref env7342 4))) (let ((lst (env-ref env7342 3))) (let ((fun (env-ref env7342 2))) (let ((foldl (env-ref env7342 1))) (let ((f70517188 (make-closure lam7339 a69467187 fun foldl kont7050))) (clo-app cdr f70517188 lst)))))))) (proc (lam7343 env7344 a69457185) (let ((cdr (env-ref env7344 6))) (let ((kont7050 (env-ref env7344 5))) (let ((lst (env-ref env7344 4))) (let ((fun (env-ref env7344 3))) (let ((acc (env-ref env7344 2))) (let ((foldl (env-ref env7344 1))) (let ((f70527186 (make-closure lam7341 foldl fun lst kont7050 cdr))) (clo-app fun f70527186 a69457185 acc))))))))) (proc (lam7345 env7346 a69447183) (let ((cdr (env-ref env7346 7))) (let ((kont7050 (env-ref env7346 6))) (let ((lst (env-ref env7346 5))) (let ((fun (env-ref env7346 4))) (let ((acc (env-ref env7346 3))) (let ((car (env-ref env7346 2))) (let ((foldl (env-ref env7346 1))) (if a69447183 (clo-app kont7050 acc) (let ((f70537184 (make-closure lam7343 foldl acc fun lst kont7050 cdr))) (clo-app car f70537184 lst))))))))))) (proc (foldl _7347 kont7050 fun acc lst) (let ((f70547182 (make-closure lam7345 foldl car acc fun lst kont7050 cdr))) (clo-app null? f70547182 lst))) (proc (lam7348 env7349 a69517197) (let ((a69497193 (env-ref env7349 3))) (let ((kont7055 (env-ref env7349 2))) (let ((reverse-helper (env-ref env7349 1))) (clo-app reverse-helper kont7055 a69497193 a69517197))))) (proc (lam7350 env7351 a69507195) (let ((a69497193 (env-ref env7351 5))) (let ((kont7055 (env-ref env7351 4))) (let ((reverse-helper (env-ref env7351 3))) (let ((lst2 (env-ref env7351 2))) (let ((cons (env-ref env7351 1))) (let ((f70567196 (make-closure lam7348 reverse-helper kont7055 a69497193))) (clo-app cons f70567196 a69507195 lst2)))))))) (proc (lam7352 env7353 a69497193) (let ((lst (env-ref env7353 6))) (let ((kont7055 (env-ref env7353 5))) (let ((reverse-helper (env-ref env7353 4))) (let ((lst2 (env-ref env7353 3))) (let ((car (env-ref env7353 2))) (let ((cons (env-ref env7353 1))) (let ((f70577194 (make-closure lam7350 cons lst2 reverse-helper kont7055 a69497193))) (clo-app car f70577194 lst))))))))) (proc (lam7354 env7355 a69487191) (let ((cdr (env-ref env7355 7))) (let ((lst (env-ref env7355 6))) (let ((kont7055 (env-ref env7355 5))) (let ((reverse-helper (env-ref env7355 4))) (let ((lst2 (env-ref env7355 3))) (let ((car (env-ref env7355 2))) (let ((cons (env-ref env7355 1))) (if a69487191 (clo-app kont7055 lst2) (let ((f70587192 (make-closure lam7352 cons car lst2 reverse-helper kont7055 lst))) (clo-app cdr f70587192 lst))))))))))) (proc (reverse-helper _7356 kont7055 lst lst2) (let ((f70597190 (make-closure lam7354 cons car lst2 reverse-helper kont7055 lst cdr))) (clo-app null? f70597190 lst))) (proc (lam7357 env7358 a69527199) (let ((lst (env-ref env7358 3))) (let ((reverse-helper (env-ref env7358 2))) (let ((kont7060 (env-ref env7358 1))) (clo-app reverse-helper kont7060 lst a69527199))))) (proc (reverse _7359 kont7060 lst) (let ((f70617198 (make-closure lam7357 kont7060 reverse-helper lst))) (clo-app list f70617198))) (proc (lam7360 env7361 x69557204) (let ((kont7062 (env-ref env7361 1))) (clo-app kont7062 x69557204))) (proc (lam7362 env7363 a69607213) (let ((a69587209 (env-ref env7363 4))) (let ((take-helper (env-ref env7363 3))) (let ((a69567206 (env-ref env7363 2))) (let ((kont7062 (env-ref env7363 1))) (clo-app take-helper kont7062 a69567206 a69587209 a69607213)))))) (proc (lam7364 env7365 a69597211) (let ((a69587209 (env-ref env7365 6))) (let ((cons (env-ref env7365 5))) (let ((take-helper (env-ref env7365 4))) (let ((lst2 (env-ref env7365 3))) (let ((a69567206 (env-ref env7365 2))) (let ((kont7062 (env-ref env7365 1))) (let ((f70647212 (make-closure lam7362 kont7062 a69567206 take-helper a69587209))) (clo-app cons f70647212 a69597211 lst2))))))))) (proc (lam7366 env7367 a69587209) (let ((lst (env-ref env7367 7))) (let ((cons (env-ref env7367 6))) (let ((take-helper (env-ref env7367 5))) (let ((lst2 (env-ref env7367 4))) (let ((a69567206 (env-ref env7367 3))) (let ((kont7062 (env-ref env7367 2))) (let ((car (env-ref env7367 1))) (let ((f70657210 (make-closure lam7364 kont7062 a69567206 lst2 take-helper cons a69587209))) (clo-app car f70657210 lst)))))))))) (proc (lam7369 env7370 a69567206) (let ((lst (env-ref env7370 8))) (let ((cons (env-ref env7370 7))) (let ((- (env-ref env7370 6))) (let ((take-helper (env-ref env7370 5))) (let ((lst2 (env-ref env7370 4))) (let ((kont7062 (env-ref env7370 3))) (let ((n (env-ref env7370 2))) (let ((car (env-ref env7370 1))) (let ((a69577207 '1)) (let ((f70667208 (make-closure lam7366 car kont7062 a69567206 lst2 take-helper cons lst))) (clo-app - f70667208 n a69577207)))))))))))) (proc (lam7371 env7372 a69547202) (let ((cdr (env-ref env7372 10))) (let ((lst (env-ref env7372 9))) (let ((reverse (env-ref env7372 8))) (let ((cons (env-ref env7372 7))) (let ((- (env-ref env7372 6))) (let ((take-helper (env-ref env7372 5))) (let ((lst2 (env-ref env7372 4))) (let ((kont7062 (env-ref env7372 3))) (let ((n (env-ref env7372 2))) (let ((car (env-ref env7372 1))) (if a69547202 (let ((f70637203 (make-closure lam7360 kont7062))) (clo-app reverse f70637203 lst2)) (let ((f70677205 (make-closure lam7369 car n kont7062 lst2 take-helper - cons lst))) (clo-app cdr f70677205 lst)))))))))))))) (proc (take-helper _7374 kont7062 lst n lst2) (let ((a69537200 '0)) (let ((f70687201 (make-closure lam7371 car n kont7062 lst2 take-helper - cons reverse lst cdr))) (clo-app = f70687201 n a69537200)))) (proc (lam7375 env7376 a69617215) (let ((take-helper (env-ref env7376 4))) (let ((n (env-ref env7376 3))) (let ((lst (env-ref env7376 2))) (let ((kont7069 (env-ref env7376 1))) (clo-app take-helper kont7069 lst n a69617215)))))) (proc (take _7377 kont7069 lst n) (let ((f70707214 (make-closure lam7375 kont7069 lst n take-helper))) (clo-app list f70707214))) (proc (lam7379 env7380 a69667223) (let ((kont7071 (env-ref env7380 3))) (let ((+ (env-ref env7380 2))) (let ((a69647219 (env-ref env7380 1))) (clo-app + kont7071 a69647219 a69667223))))) (proc (lam7381 env7382 a69657221) (let ((length (env-ref env7382 4))) (let ((kont7071 (env-ref env7382 3))) (let ((+ (env-ref env7382 2))) (let ((a69647219 (env-ref env7382 1))) (let ((f70727222 (make-closure lam7379 a69647219 + kont7071))) (clo-app length f70727222 a69657221))))))) (proc (lam7384 env7385 a69627217) (let ((cdr (env-ref env7385 5))) (let ((lst (env-ref env7385 4))) (let ((length (env-ref env7385 3))) (let ((kont7071 (env-ref env7385 2))) (let ((+ (env-ref env7385 1))) (if a69627217 (let ((x69637218 '0)) (clo-app kont7071 x69637218)) (let ((a69647219 '1)) (let ((f70737220 (make-closure lam7381 a69647219 + kont7071 length))) (clo-app cdr f70737220 lst)))))))))) (proc (length _7386 kont7071 lst) (let ((f70747216 (make-closure lam7384 + kont7071 length lst cdr))) (clo-app null? f70747216 lst))) (proc (lam7387 env7388 x69687227) (let ((kont7075 (env-ref env7388 1))) (clo-app kont7075 x69687227))) (proc (lam7389 env7390 a69727235) (let ((a69707231 (env-ref env7390 3))) (let ((kont7075 (env-ref env7390 2))) (let ((cons (env-ref env7390 1))) (clo-app cons kont7075 a69707231 a69727235))))) (proc (lam7391 env7392 a69717233) (let ((map (env-ref env7392 5))) (let ((a69707231 (env-ref env7392 4))) (let ((kont7075 (env-ref env7392 3))) (let ((proc (env-ref env7392 2))) (let ((cons (env-ref env7392 1))) (let ((f70777234 (make-closure lam7389 cons kont7075 a69707231))) (clo-app map f70777234 proc a69717233)))))))) (proc (lam7393 env7394 a69707231) (let ((cdr (env-ref env7394 6))) (let ((lst (env-ref env7394 5))) (let ((map (env-ref env7394 4))) (let ((kont7075 (env-ref env7394 3))) (let ((proc (env-ref env7394 2))) (let ((cons (env-ref env7394 1))) (let ((f70787232 (make-closure lam7391 cons proc kont7075 a69707231 map))) (clo-app cdr f70787232 lst))))))))) (proc (lam7395 env7396 a69697229) (let ((cdr (env-ref env7396 6))) (let ((lst (env-ref env7396 5))) (let ((map (env-ref env7396 4))) (let ((kont7075 (env-ref env7396 3))) (let ((proc (env-ref env7396 2))) (let ((cons (env-ref env7396 1))) (let ((f70797230 (make-closure lam7393 cons proc kont7075 map lst cdr))) (clo-app proc f70797230 a69697229))))))))) (proc (lam7397 env7398 a69677225) (let ((lst (env-ref env7398 8))) (let ((map (env-ref env7398 7))) (let ((kont7075 (env-ref env7398 6))) (let ((proc (env-ref env7398 5))) (let ((car (env-ref env7398 4))) (let ((cons (env-ref env7398 3))) (let ((list (env-ref env7398 2))) (let ((cdr (env-ref env7398 1))) (if a69677225 (let ((f70767226 (make-closure lam7387 kont7075))) (clo-app list f70767226)) (let ((f70807228 (make-closure lam7395 cons proc kont7075 map lst cdr))) (clo-app car f70807228 lst)))))))))))) (proc (map _7399 kont7075 proc lst) (let ((f70817224 (make-closure lam7397 cdr list cons car proc kont7075 map lst))) (clo-app null? f70817224 lst))) (proc (lam7400 env7401 x69747239) (let ((kont7082 (env-ref env7401 1))) (clo-app kont7082 x69747239))) (proc (lam7402 env7403 a69797249) (let ((kont7082 (env-ref env7403 3))) (let ((a69777245 (env-ref env7403 2))) (let ((cons (env-ref env7403 1))) (clo-app cons kont7082 a69777245 a69797249))))) (proc (lam7404 env7405 a69787247) (let ((kont7082 (env-ref env7405 5))) (let ((a69777245 (env-ref env7405 4))) (let ((op (env-ref env7405 3))) (let ((filter (env-ref env7405 2))) (let ((cons (env-ref env7405 1))) (let ((f70847248 (make-closure lam7402 cons a69777245 kont7082))) (clo-app filter f70847248 op a69787247)))))))) (proc (lam7406 env7407 a69777245) (let ((cdr (env-ref env7407 6))) (let ((kont7082 (env-ref env7407 5))) (let ((lst (env-ref env7407 4))) (let ((op (env-ref env7407 3))) (let ((filter (env-ref env7407 2))) (let ((cons (env-ref env7407 1))) (let ((f70857246 (make-closure lam7404 cons filter op a69777245 kont7082))) (clo-app cdr f70857246 lst))))))))) (proc (lam7408 env7409 a69807251) (let ((kont7082 (env-ref env7409 3))) (let ((op (env-ref env7409 2))) (let ((filter (env-ref env7409 1))) (clo-app filter kont7082 op a69807251))))) (proc (lam7410 env7411 a69767243) (let ((cdr (env-ref env7411 7))) (let ((kont7082 (env-ref env7411 6))) (let ((lst (env-ref env7411 5))) (let ((op (env-ref env7411 4))) (let ((cons (env-ref env7411 3))) (let ((filter (env-ref env7411 2))) (let ((car (env-ref env7411 1))) (if a69767243 (let ((f70867244 (make-closure lam7406 cons filter op lst kont7082 cdr))) (clo-app car f70867244 lst)) (let ((f70877250 (make-closure lam7408 filter op kont7082))) (clo-app cdr f70877250 lst))))))))))) (proc (lam7412 env7413 a69757241) (let ((cdr (env-ref env7413 7))) (let ((kont7082 (env-ref env7413 6))) (let ((lst (env-ref env7413 5))) (let ((op (env-ref env7413 4))) (let ((cons (env-ref env7413 3))) (let ((filter (env-ref env7413 2))) (let ((car (env-ref env7413 1))) (let ((f70887242 (make-closure lam7410 car filter cons op lst kont7082 cdr))) (clo-app op f70887242 a69757241)))))))))) (proc (lam7414 env7415 a69737237) (let ((kont7082 (env-ref env7415 8))) (let ((lst (env-ref env7415 7))) (let ((op (env-ref env7415 6))) (let ((cons (env-ref env7415 5))) (let ((list (env-ref env7415 4))) (let ((cdr (env-ref env7415 3))) (let ((filter (env-ref env7415 2))) (let ((car (env-ref env7415 1))) (if a69737237 (let ((f70837238 (make-closure lam7400 kont7082))) (clo-app list f70837238)) (let ((f70897240 (make-closure lam7412 car filter cons op lst kont7082 cdr))) (clo-app car f70897240 lst)))))))))))) (proc (filter _7416 kont7082 op lst) (let ((f70907236 (make-closure lam7414 car filter cdr list cons op lst kont7082))) (clo-app null? f70907236 lst))) (proc (lam7417 env7418 a69857259) (let ((drop (env-ref env7418 3))) (let ((kont7091 (env-ref env7418 2))) (let ((a69837256 (env-ref env7418 1))) (clo-app drop kont7091 a69837256 a69857259))))) (proc (lam7420 env7421 a69837256) (let ((drop (env-ref env7421 4))) (let ((kont7091 (env-ref env7421 3))) (let ((n (env-ref env7421 2))) (let ((- (env-ref env7421 1))) (let ((a69847257 '1)) (let ((f70927258 (make-closure lam7417 a69837256 kont7091 drop))) (clo-app - f70927258 n a69847257)))))))) (proc (lam7422 env7423 a69827254) (let ((cdr (env-ref env7423 6))) (let ((kont7091 (env-ref env7423 5))) (let ((n (env-ref env7423 4))) (let ((- (env-ref env7423 3))) (let ((lst (env-ref env7423 2))) (let ((drop (env-ref env7423 1))) (if a69827254 (clo-app kont7091 lst) (let ((f70937255 (make-closure lam7420 - n kont7091 drop))) (clo-app cdr f70937255 lst)))))))))) (proc (drop _7425 kont7091 lst n) (let ((a69817252 '0)) (let ((f70947253 (make-closure lam7422 drop lst - n kont7091 cdr))) (clo-app = f70947253 n a69817252)))) (proc (lam7426 env7427 a69897267) (let ((a69877263 (env-ref env7427 3))) (let ((proc (env-ref env7427 2))) (let ((kont7095 (env-ref env7427 1))) (clo-app proc kont7095 a69877263 a69897267))))) (proc (lam7428 env7429 a69887265) (let ((foldr (env-ref env7429 5))) (let ((a69877263 (env-ref env7429 4))) (let ((kont7095 (env-ref env7429 3))) (let ((proc (env-ref env7429 2))) (let ((acc (env-ref env7429 1))) (let ((f70967266 (make-closure lam7426 kont7095 proc a69877263))) (clo-app foldr f70967266 proc acc a69887265)))))))) (proc (lam7430 env7431 a69877263) (let ((cdr (env-ref env7431 6))) (let ((kont7095 (env-ref env7431 5))) (let ((foldr (env-ref env7431 4))) (let ((lst (env-ref env7431 3))) (let ((proc (env-ref env7431 2))) (let ((acc (env-ref env7431 1))) (let ((f70977264 (make-closure lam7428 acc proc kont7095 a69877263 foldr))) (clo-app cdr f70977264 lst))))))))) (proc (lam7432 env7433 a69867261) (let ((cdr (env-ref env7433 7))) (let ((car (env-ref env7433 6))) (let ((kont7095 (env-ref env7433 5))) (let ((foldr (env-ref env7433 4))) (let ((lst (env-ref env7433 3))) (let ((proc (env-ref env7433 2))) (let ((acc (env-ref env7433 1))) (if a69867261 (clo-app kont7095 acc) (let ((f70987262 (make-closure lam7430 acc proc lst foldr kont7095 cdr))) (clo-app car f70987262 lst))))))))))) (proc (foldr _7434 kont7095 proc acc lst) (let ((f70997260 (make-closure lam7432 acc proc lst foldr kont7095 car cdr))) (clo-app null? f70997260 lst))) (proc (lam7435 env7436 a69937275) (let ((kont7100 (env-ref env7436 3))) (let ((cons (env-ref env7436 2))) (let ((a69917271 (env-ref env7436 1))) (clo-app cons kont7100 a69917271 a69937275))))) (proc (lam7437 env7438 a69927273) (let ((kont7100 (env-ref env7438 5))) (let ((append (env-ref env7438 4))) (let ((lst2 (env-ref env7438 3))) (let ((cons (env-ref env7438 2))) (let ((a69917271 (env-ref env7438 1))) (let ((f71017274 (make-closure lam7435 a69917271 cons kont7100))) (clo-app append f71017274 a69927273 lst2)))))))) (proc (lam7439 env7440 a69917271) (let ((cdr (env-ref env7440 6))) (let ((kont7100 (env-ref env7440 5))) (let ((append (env-ref env7440 4))) (let ((lst2 (env-ref env7440 3))) (let ((lst1 (env-ref env7440 2))) (let ((cons (env-ref env7440 1))) (let ((f71027272 (make-closure lam7437 a69917271 cons lst2 append kont7100))) (clo-app cdr f71027272 lst1))))))))) (proc (lam7441 env7442 a69907269) (let ((cdr (env-ref env7442 7))) (let ((kont7100 (env-ref env7442 6))) (let ((append (env-ref env7442 5))) (let ((lst2 (env-ref env7442 4))) (let ((cons (env-ref env7442 3))) (let ((lst1 (env-ref env7442 2))) (let ((car (env-ref env7442 1))) (if a69907269 (clo-app kont7100 lst2) (let ((f71037270 (make-closure lam7439 cons lst1 lst2 append kont7100 cdr))) (clo-app car f71037270 lst1))))))))))) (proc (append _7443 kont7100 lst1 lst2) (let ((f71047268 (make-closure lam7441 car lst1 cons lst2 append kont7100 cdr))) (clo-app null? f71047268 lst1))) (proc (hash _7444 . lst) (let ((kont71057276 (prim car lst))) (let ((lst7277 (prim cdr lst))) (let ((x69947278 (apply-prim hash lst7277))) (clo-app kont71057276 x69947278))))) (proc (hash-ref _7445 kont7107 h k) (let ((x69957279 (prim hash-ref h k))) (clo-app kont7107 x69957279))) (proc (hash-set _7446 kont7108 h k v) (let ((x69967280 (prim hash-set h k v))) (clo-app kont7108 x69967280))) (proc (hash-keys _7447 kont7109 h) (let ((x69977281 (prim hash-keys h))) (clo-app kont7109 x69977281))) (proc (hash-has-key? _7448 kont7110 h k) (let ((x69987282 (prim hash-has-key? h k))) (clo-app kont7110 x69987282))) (proc (hash-count _7449 kont7111 h) (let ((x69997283 (prim hash-count h))) (clo-app kont7111 x69997283))) (proc (set _7450 . lst) (let ((kont71127284 (prim car lst))) (let ((lst7285 (prim cdr lst))) (let ((x70007286 (apply-prim set lst7285))) (clo-app kont71127284 x70007286))))) (proc (set->list _7451 kont7114 h) (let ((x70017287 (prim set->list h))) (clo-app kont7114 x70017287))) (proc (list->set _7452 kont7115 lst) (let ((x70027288 (prim list->set lst))) (clo-app kont7115 x70027288))) (proc (set-add _7453 kont7116 s val) (let ((x70037289 (prim set-add s val))) (clo-app kont7116 x70037289))) (proc (string? _7454 kont7117 str) (let ((x70047290 (prim string? str))) (clo-app kont7117 x70047290))) (proc (string-length _7455 kont7118 str) (let ((x70057291 (prim string-length str))) (clo-app kont7118 x70057291))) (proc (string-ref _7456 kont7119 str pos) (let ((x70067292 (prim string-ref str pos))) (clo-app kont7119 x70067292))) (proc (substring _7457 kont7120 str start end) (let ((x70077293 (prim substring str start end))) (clo-app kont7120 x70077293))) (proc (string-append _7458 kont7121 s1 s2) (let ((x70087294 (prim string-append s1 s2))) (clo-app kont7121 x70087294))) (proc (string->list _7459 kont7122 str) (let ((x70097295 (prim string->list str))) (clo-app kont7122 x70097295))) (proc (call _7461 kont7123) (let ((x70107296 '"random")) (clo-app kont7123 x70107296))) (proc (lam7462 env7463 x70117298) (let ((kont7124 (env-ref env7463 1))) (clo-app kont7124 x70117298))) (proc (brouhaha_main _7464 kont7124) (let ((f71257297 (make-closure lam7462 kont7124))) (clo-app call f71257297))))
Now running: string
Emitting Slog for: string and outputting to: tests/string/output/string.slog
Emitting C++ for: string and outputting to: tests/string/compiler-out/string_cpp_program.cpp
[32mEach output stage matched![0m

