'((define (+ . lst) (let ((x76210 (apply-prim + lst))) x76210))
  (define (- . lst) (let ((x76211 (apply-prim - lst))) x76211))
  (define (* . lst) (let ((x76212 (apply-prim * lst))) x76212))
  (define (modulo a b) (let ((x76213 (prim modulo a b))) x76213))
  (define (/ . lst) (let ((x76214 (apply-prim / lst))) x76214))
  (define (= . lst) (let ((x76215 (apply-prim = lst))) x76215))
  (define (> . lst) (let ((x76216 (apply-prim > lst))) x76216))
  (define (< . lst) (let ((x76217 (apply-prim < lst))) x76217))
  (define (<= . lst) (let ((x76218 (apply-prim <= lst))) x76218))
  (define (>= . lst) (let ((x76219 (apply-prim >= lst))) x76219))
  (define (null? x) (let ((x76220 (prim null? x))) x76220))
  (define (equal? x y) (let ((x76221 (prim equal? x y))) x76221))
  (define (eq? x y) (let ((x76222 (prim eq? x y))) x76222))
  (define (cons a b) (let ((x76223 (prim cons a b))) x76223))
  (define (car lst) (let ((x76224 (prim car lst))) x76224))
  (define (cdr lst) (let ((x76225 (prim cdr lst))) x76225))
  (define (even? x)
    (let ((a76226 '0))
      (let ((a76227 '2))
        (let ((a76228 (modulo x a76227))) (equal? a76226 a76228)))))
  (define (odd? x)
    (let ((a76229 '1))
      (let ((a76230 '2))
        (let ((a76231 (modulo x a76230))) (equal? a76229 a76231)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a76232 (null? lst)))
      (if a76232
        (let ((x76233 '#f)) x76233)
        (let ((a76234 (car lst)))
          (let ((a76235 (equal? a76234 x)))
            (if a76235
              (let ((x76236 '#t)) x76236)
              (let ((a76237 (cdr lst))) (member? x a76237))))))))
  (define (foldl fun acc lst)
    (let ((a76238 (null? lst)))
      (if a76238
        acc
        (let ((a76239 (car lst)))
          (let ((a76240 (fun a76239 acc)))
            (let ((a76241 (cdr lst))) (foldl fun a76240 a76241)))))))
  (define (reverse-helper lst lst2)
    (let ((a76242 (null? lst)))
      (if a76242
        lst2
        (let ((a76243 (cdr lst)))
          (let ((a76244 (car lst)))
            (let ((a76245 (cons a76244 lst2)))
              (reverse-helper a76243 a76245)))))))
  (define (reverse lst) (let ((a76246 (list))) (reverse-helper lst a76246)))
  (define (take-helper lst n lst2)
    (let ((a76247 '0))
      (let ((a76248 (= n a76247)))
        (if a76248
          (let ((x76249 (reverse lst2))) x76249)
          (let ((a76250 (cdr lst)))
            (let ((a76251 '1))
              (let ((a76252 (- n a76251)))
                (let ((a76253 (car lst)))
                  (let ((a76254 (cons a76253 lst2)))
                    (take-helper a76250 a76252 a76254))))))))))
  (define (take lst n) (let ((a76255 (list))) (take-helper lst n a76255)))
  (define (length lst)
    (let ((a76256 (null? lst)))
      (if a76256
        (let ((x76257 '0)) x76257)
        (let ((a76258 '1))
          (let ((a76259 (cdr lst)))
            (let ((a76260 (length a76259))) (+ a76258 a76260)))))))
  (define (map proc lst)
    (let ((a76261 (null? lst)))
      (if a76261
        (let ((x76262 (list))) x76262)
        (let ((a76263 (car lst)))
          (let ((a76264 (proc a76263)))
            (let ((a76265 (cdr lst)))
              (let ((a76266 (map proc a76265))) (cons a76264 a76266))))))))
  (define (filter op lst)
    (let ((a76267 (null? lst)))
      (if a76267
        (let ((x76268 (list))) x76268)
        (let ((a76269 (car lst)))
          (let ((a76270 (op a76269)))
            (if a76270
              (let ((a76271 (car lst)))
                (let ((a76272 (cdr lst)))
                  (let ((a76273 (filter op a76272))) (cons a76271 a76273))))
              (let ((a76274 (cdr lst))) (filter op a76274))))))))
  (define (drop lst n)
    (let ((a76275 '0))
      (let ((a76276 (= n a76275)))
        (if a76276
          lst
          (let ((a76277 (cdr lst)))
            (let ((a76278 '1))
              (let ((a76279 (- n a76278))) (drop a76277 a76279))))))))
  (define (foldr proc acc lst)
    (let ((a76280 (null? lst)))
      (if a76280
        acc
        (let ((a76281 (car lst)))
          (let ((a76282 (cdr lst)))
            (let ((a76283 (foldr proc acc a76282))) (proc a76281 a76283)))))))
  (define (append lst1 lst2)
    (let ((a76284 (null? lst1)))
      (if a76284
        lst2
        (let ((a76285 (car lst1)))
          (let ((a76286 (cdr lst1)))
            (let ((a76287 (append a76286 lst2))) (cons a76285 a76287)))))))
  (define (hash . lst) (let ((x76288 (apply-prim hash lst))) x76288))
  (define (hash-ref h k) (let ((x76289 (prim hash-ref h k))) x76289))
  (define (hash-set h k v) (let ((x76290 (prim hash-set h k v))) x76290))
  (define (hash-has-key? h k) (let ((x76291 (prim hash-has-key? h k))) x76291))
  (define (hash-count h) (let ((x76292 (prim hash-count h))) x76292))
  (define (lam x y)
    (let ((a76293 (lambda (a76208 b76209) b76209))) (a76293 x y)))
  (define (brouhaha_main)
    (let ((a76294 '5)) (let ((a76295 '6)) (lam a76294 a76295)))))
