'((define (+ . lst)
    (let ((kont7260572705 (prim car lst)))
      (let ((lst72706 (prim cdr lst)))
        (let ((x7251972707 (apply-prim + lst72706)))
          (kont7260572705 x7251972707)))))
  (define (- . lst)
    (let ((kont7260772708 (prim car lst)))
      (let ((lst72709 (prim cdr lst)))
        (let ((x7252072710 (apply-prim - lst72709)))
          (kont7260772708 x7252072710)))))
  (define (* . lst)
    (let ((kont7260972711 (prim car lst)))
      (let ((lst72712 (prim cdr lst)))
        (let ((x7252172713 (apply-prim * lst72712)))
          (kont7260972711 x7252172713)))))
  (define (modulo kont72611 a b)
    (let ((x7252272714 (prim modulo a b))) (kont72611 x7252272714)))
  (define (/ . lst)
    (let ((kont7261272715 (prim car lst)))
      (let ((lst72716 (prim cdr lst)))
        (let ((x7252372717 (apply-prim / lst72716)))
          (kont7261272715 x7252372717)))))
  (define (= . lst)
    (let ((kont7261472718 (prim car lst)))
      (let ((lst72719 (prim cdr lst)))
        (let ((x7252472720 (apply-prim = lst72719)))
          (kont7261472718 x7252472720)))))
  (define (> . lst)
    (let ((kont7261672721 (prim car lst)))
      (let ((lst72722 (prim cdr lst)))
        (let ((x7252572723 (apply-prim > lst72722)))
          (kont7261672721 x7252572723)))))
  (define (< . lst)
    (let ((kont7261872724 (prim car lst)))
      (let ((lst72725 (prim cdr lst)))
        (let ((x7252672726 (apply-prim < lst72725)))
          (kont7261872724 x7252672726)))))
  (define (<= . lst)
    (let ((kont7262072727 (prim car lst)))
      (let ((lst72728 (prim cdr lst)))
        (let ((x7252772729 (apply-prim <= lst72728)))
          (kont7262072727 x7252772729)))))
  (define (>= . lst)
    (let ((kont7262272730 (prim car lst)))
      (let ((lst72731 (prim cdr lst)))
        (let ((x7252872732 (apply-prim >= lst72731)))
          (kont7262272730 x7252872732)))))
  (define (null? kont72624 x)
    (let ((x7252972733 (prim null? x))) (kont72624 x7252972733)))
  (define (equal? kont72625 x y)
    (let ((x7253072734 (prim equal? x y))) (kont72625 x7253072734)))
  (define (eq? kont72626 x y)
    (let ((x7253172735 (prim eq? x y))) (kont72626 x7253172735)))
  (define (cons kont72627 a b)
    (let ((x7253272736 (prim cons a b))) (kont72627 x7253272736)))
  (define (car kont72628 lst)
    (let ((x7253372737 (prim car lst))) (kont72628 x7253372737)))
  (define (cdr kont72629 lst)
    (let ((x7253472738 (prim cdr lst))) (kont72629 x7253472738)))
  (define (even? kont72630 x)
    (let ((a7253572739 '0))
      (let ((a7253672740 '2))
        (let ((f7263172741
               (lambda (a7253772742)
                 (equal? kont72630 a7253572739 a7253772742))))
          (modulo f7263172741 x a7253672740)))))
  (define (odd? kont72632 x)
    (let ((a7253872743 '1))
      (let ((a7253972744 '2))
        (let ((f7263372745
               (lambda (a7254072746)
                 (equal? kont72632 a7253872743 a7254072746))))
          (modulo f7263372745 x a7253972744)))))
  (define (list . x)
    (let ((kont7263472747 (prim car x)))
      (let ((x72748 (prim cdr x))) (kont7263472747 x72748))))
  (define (member? kont72636 x lst)
    (let ((f7264072749
           (lambda (a7254172750)
             (if a7254172750
               (let ((x7254272751 '#f)) (kont72636 x7254272751))
               (let ((f7263972752
                      (lambda (a7254372753)
                        (let ((f7263872754
                               (lambda (a7254472755)
                                 (if a7254472755
                                   (let ((x7254572756 '#t))
                                     (kont72636 x7254572756))
                                   (let ((f7263772757
                                          (lambda (a7254672758)
                                            (member?
                                             kont72636
                                             x
                                             a7254672758))))
                                     (cdr f7263772757 lst))))))
                          (equal? f7263872754 a7254372753 x)))))
                 (car f7263972752 lst))))))
      (null? f7264072749 lst)))
  (define (foldl kont72641 fun acc lst)
    (let ((f7264572759
           (lambda (a7254772760)
             (if a7254772760
               (kont72641 acc)
               (let ((f7264472761
                      (lambda (a7254872762)
                        (let ((f7264372763
                               (lambda (a7254972764)
                                 (let ((f7264272765
                                        (lambda (a7255072766)
                                          (foldl
                                           kont72641
                                           fun
                                           a7254972764
                                           a7255072766))))
                                   (cdr f7264272765 lst)))))
                          (fun f7264372763 a7254872762 acc)))))
                 (car f7264472761 lst))))))
      (null? f7264572759 lst)))
  (define (reverse-helper kont72646 lst lst2)
    (let ((f7265072767
           (lambda (a7255172768)
             (if a7255172768
               (kont72646 lst2)
               (let ((f7264972769
                      (lambda (a7255272770)
                        (let ((f7264872771
                               (lambda (a7255372772)
                                 (let ((f7264772773
                                        (lambda (a7255472774)
                                          (reverse-helper
                                           kont72646
                                           a7255272770
                                           a7255472774))))
                                   (cons f7264772773 a7255372772 lst2)))))
                          (car f7264872771 lst)))))
                 (cdr f7264972769 lst))))))
      (null? f7265072767 lst)))
  (define (reverse kont72651 lst)
    (let ((f7265272775
           (lambda (a7255572776) (reverse-helper kont72651 lst a7255572776))))
      (list f7265272775)))
  (define (take-helper kont72653 lst n lst2)
    (let ((a7255672777 '0))
      (let ((f7265972778
             (lambda (a7255772779)
               (if a7255772779
                 (let ((f7265472780
                        (lambda (x7255872781) (kont72653 x7255872781))))
                   (reverse f7265472780 lst2))
                 (let ((f7265872782
                        (lambda (a7255972783)
                          (let ((a7256072784 '1))
                            (let ((f7265772785
                                   (lambda (a7256172786)
                                     (let ((f7265672787
                                            (lambda (a7256272788)
                                              (let ((f7265572789
                                                     (lambda (a7256372790)
                                                       (take-helper
                                                        kont72653
                                                        a7255972783
                                                        a7256172786
                                                        a7256372790))))
                                                (cons
                                                 f7265572789
                                                 a7256272788
                                                 lst2)))))
                                       (car f7265672787 lst)))))
                              (- f7265772785 n a7256072784))))))
                   (cdr f7265872782 lst))))))
        (= f7265972778 n a7255672777))))
  (define (take kont72660 lst n)
    (let ((f7266172791
           (lambda (a7256472792) (take-helper kont72660 lst n a7256472792))))
      (list f7266172791)))
  (define (length kont72662 lst)
    (let ((f7266572793
           (lambda (a7256572794)
             (if a7256572794
               (let ((x7256672795 '0)) (kont72662 x7256672795))
               (let ((a7256772796 '1))
                 (let ((f7266472797
                        (lambda (a7256872798)
                          (let ((f7266372799
                                 (lambda (a7256972800)
                                   (+ kont72662 a7256772796 a7256972800))))
                            (length f7266372799 a7256872798)))))
                   (cdr f7266472797 lst)))))))
      (null? f7266572793 lst)))
  (define (map kont72666 proc lst)
    (let ((f7267272801
           (lambda (a7257072802)
             (if a7257072802
               (let ((f7266772803
                      (lambda (x7257172804) (kont72666 x7257172804))))
                 (list f7266772803))
               (let ((f7267172805
                      (lambda (a7257272806)
                        (let ((f7267072807
                               (lambda (a7257372808)
                                 (let ((f7266972809
                                        (lambda (a7257472810)
                                          (let ((f7266872811
                                                 (lambda (a7257572812)
                                                   (cons
                                                    kont72666
                                                    a7257372808
                                                    a7257572812))))
                                            (map
                                             f7266872811
                                             proc
                                             a7257472810)))))
                                   (cdr f7266972809 lst)))))
                          (proc f7267072807 a7257272806)))))
                 (car f7267172805 lst))))))
      (null? f7267272801 lst)))
  (define (filter kont72673 op lst)
    (let ((f7268172813
           (lambda (a7257672814)
             (if a7257672814
               (let ((f7267472815
                      (lambda (x7257772816) (kont72673 x7257772816))))
                 (list f7267472815))
               (let ((f7268072817
                      (lambda (a7257872818)
                        (let ((f7267972819
                               (lambda (a7257972820)
                                 (if a7257972820
                                   (let ((f7267772821
                                          (lambda (a7258072822)
                                            (let ((f7267672823
                                                   (lambda (a7258172824)
                                                     (let ((f7267572825
                                                            (lambda (a7258272826)
                                                              (cons
                                                               kont72673
                                                               a7258072822
                                                               a7258272826))))
                                                       (filter
                                                        f7267572825
                                                        op
                                                        a7258172824)))))
                                              (cdr f7267672823 lst)))))
                                     (car f7267772821 lst))
                                   (let ((f7267872827
                                          (lambda (a7258372828)
                                            (filter
                                             kont72673
                                             op
                                             a7258372828))))
                                     (cdr f7267872827 lst))))))
                          (op f7267972819 a7257872818)))))
                 (car f7268072817 lst))))))
      (null? f7268172813 lst)))
  (define (drop kont72682 lst n)
    (let ((a7258472829 '0))
      (let ((f7268572830
             (lambda (a7258572831)
               (if a7258572831
                 (kont72682 lst)
                 (let ((f7268472832
                        (lambda (a7258672833)
                          (let ((a7258772834 '1))
                            (let ((f7268372835
                                   (lambda (a7258872836)
                                     (drop
                                      kont72682
                                      a7258672833
                                      a7258872836))))
                              (- f7268372835 n a7258772834))))))
                   (cdr f7268472832 lst))))))
        (= f7268572830 n a7258472829))))
  (define (foldr kont72686 proc acc lst)
    (let ((f7269072837
           (lambda (a7258972838)
             (if a7258972838
               (kont72686 acc)
               (let ((f7268972839
                      (lambda (a7259072840)
                        (let ((f7268872841
                               (lambda (a7259172842)
                                 (let ((f7268772843
                                        (lambda (a7259272844)
                                          (proc
                                           kont72686
                                           a7259072840
                                           a7259272844))))
                                   (foldr f7268772843 proc acc a7259172842)))))
                          (cdr f7268872841 lst)))))
                 (car f7268972839 lst))))))
      (null? f7269072837 lst)))
  (define (append kont72691 lst1 lst2)
    (let ((f7269572845
           (lambda (a7259372846)
             (if a7259372846
               (kont72691 lst2)
               (let ((f7269472847
                      (lambda (a7259472848)
                        (let ((f7269372849
                               (lambda (a7259572850)
                                 (let ((f7269272851
                                        (lambda (a7259672852)
                                          (cons
                                           kont72691
                                           a7259472848
                                           a7259672852))))
                                   (append f7269272851 a7259572850 lst2)))))
                          (cdr f7269372849 lst1)))))
                 (car f7269472847 lst1))))))
      (null? f7269572845 lst1)))
  (define (hash . lst)
    (let ((kont7269672853 (prim car lst)))
      (let ((lst72854 (prim cdr lst)))
        (let ((x7259772855 (apply-prim hash lst72854)))
          (kont7269672853 x7259772855)))))
  (define (hash-ref kont72698 h k)
    (let ((x7259872856 (prim hash-ref h k))) (kont72698 x7259872856)))
  (define (hash-set kont72699 h k v)
    (let ((x7259972857 (prim hash-set h k v))) (kont72699 x7259972857)))
  (define (hash-has-key? kont72700 h k)
    (let ((x7260072858 (prim hash-has-key? h k))) (kont72700 x7260072858)))
  (define (hash-count kont72701 h)
    (let ((x7260172859 (prim hash-count h))) (kont72701 x7260172859)))
  (define (lam kont72702 x y)
    (let ((a7260272860
           (lambda (cont7270372861 a7251772862 b7251872863)
             (cont7270372861 b7251872863))))
      (a7260272860 kont72702 x y)))
  (define (brouhaha_main kont72704)
    (let ((a7260372864 '5))
      (let ((a7260472865 '6)) (lam kont72704 a7260372864 a7260472865)))))
