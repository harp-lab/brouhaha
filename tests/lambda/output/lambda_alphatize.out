'((define (+ . lst) (let ((x72519 (apply-prim + lst))) x72519))
  (define (- . lst) (let ((x72520 (apply-prim - lst))) x72520))
  (define (* . lst) (let ((x72521 (apply-prim * lst))) x72521))
  (define (modulo a b) (let ((x72522 (prim modulo a b))) x72522))
  (define (/ . lst) (let ((x72523 (apply-prim / lst))) x72523))
  (define (= . lst) (let ((x72524 (apply-prim = lst))) x72524))
  (define (> . lst) (let ((x72525 (apply-prim > lst))) x72525))
  (define (< . lst) (let ((x72526 (apply-prim < lst))) x72526))
  (define (<= . lst) (let ((x72527 (apply-prim <= lst))) x72527))
  (define (>= . lst) (let ((x72528 (apply-prim >= lst))) x72528))
  (define (null? x) (let ((x72529 (prim null? x))) x72529))
  (define (equal? x y) (let ((x72530 (prim equal? x y))) x72530))
  (define (eq? x y) (let ((x72531 (prim eq? x y))) x72531))
  (define (cons a b) (let ((x72532 (prim cons a b))) x72532))
  (define (car lst) (let ((x72533 (prim car lst))) x72533))
  (define (cdr lst) (let ((x72534 (prim cdr lst))) x72534))
  (define (even? x)
    (let ((a72535 '0))
      (let ((a72536 '2))
        (let ((a72537 (modulo x a72536))) (equal? a72535 a72537)))))
  (define (odd? x)
    (let ((a72538 '1))
      (let ((a72539 '2))
        (let ((a72540 (modulo x a72539))) (equal? a72538 a72540)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a72541 (null? lst)))
      (if a72541
        (let ((x72542 '#f)) x72542)
        (let ((a72543 (car lst)))
          (let ((a72544 (equal? a72543 x)))
            (if a72544
              (let ((x72545 '#t)) x72545)
              (let ((a72546 (cdr lst))) (member? x a72546))))))))
  (define (foldl fun acc lst)
    (let ((a72547 (null? lst)))
      (if a72547
        acc
        (let ((a72548 (car lst)))
          (let ((a72549 (fun a72548 acc)))
            (let ((a72550 (cdr lst))) (foldl fun a72549 a72550)))))))
  (define (reverse-helper lst lst2)
    (let ((a72551 (null? lst)))
      (if a72551
        lst2
        (let ((a72552 (cdr lst)))
          (let ((a72553 (car lst)))
            (let ((a72554 (cons a72553 lst2)))
              (reverse-helper a72552 a72554)))))))
  (define (reverse lst) (let ((a72555 (list))) (reverse-helper lst a72555)))
  (define (take-helper lst n lst2)
    (let ((a72556 '0))
      (let ((a72557 (= n a72556)))
        (if a72557
          (let ((x72558 (reverse lst2))) x72558)
          (let ((a72559 (cdr lst)))
            (let ((a72560 '1))
              (let ((a72561 (- n a72560)))
                (let ((a72562 (car lst)))
                  (let ((a72563 (cons a72562 lst2)))
                    (take-helper a72559 a72561 a72563))))))))))
  (define (take lst n) (let ((a72564 (list))) (take-helper lst n a72564)))
  (define (length lst)
    (let ((a72565 (null? lst)))
      (if a72565
        (let ((x72566 '0)) x72566)
        (let ((a72567 '1))
          (let ((a72568 (cdr lst)))
            (let ((a72569 (length a72568))) (+ a72567 a72569)))))))
  (define (map proc lst)
    (let ((a72570 (null? lst)))
      (if a72570
        (let ((x72571 (list))) x72571)
        (let ((a72572 (car lst)))
          (let ((a72573 (proc a72572)))
            (let ((a72574 (cdr lst)))
              (let ((a72575 (map proc a72574))) (cons a72573 a72575))))))))
  (define (filter op lst)
    (let ((a72576 (null? lst)))
      (if a72576
        (let ((x72577 (list))) x72577)
        (let ((a72578 (car lst)))
          (let ((a72579 (op a72578)))
            (if a72579
              (let ((a72580 (car lst)))
                (let ((a72581 (cdr lst)))
                  (let ((a72582 (filter op a72581))) (cons a72580 a72582))))
              (let ((a72583 (cdr lst))) (filter op a72583))))))))
  (define (drop lst n)
    (let ((a72584 '0))
      (let ((a72585 (= n a72584)))
        (if a72585
          lst
          (let ((a72586 (cdr lst)))
            (let ((a72587 '1))
              (let ((a72588 (- n a72587))) (drop a72586 a72588))))))))
  (define (foldr proc acc lst)
    (let ((a72589 (null? lst)))
      (if a72589
        acc
        (let ((a72590 (car lst)))
          (let ((a72591 (cdr lst)))
            (let ((a72592 (foldr proc acc a72591))) (proc a72590 a72592)))))))
  (define (append lst1 lst2)
    (let ((a72593 (null? lst1)))
      (if a72593
        lst2
        (let ((a72594 (car lst1)))
          (let ((a72595 (cdr lst1)))
            (let ((a72596 (append a72595 lst2))) (cons a72594 a72596)))))))
  (define (hash . lst) (let ((x72597 (apply-prim hash lst))) x72597))
  (define (hash-ref h k) (let ((x72598 (prim hash-ref h k))) x72598))
  (define (hash-set h k v) (let ((x72599 (prim hash-set h k v))) x72599))
  (define (hash-has-key? h k) (let ((x72600 (prim hash-has-key? h k))) x72600))
  (define (hash-count h) (let ((x72601 (prim hash-count h))) x72601))
  (define (lam x y)
    (let ((a72602 (lambda (a72517 b72518) b72518))) (a72602 x y)))
  (define (brouhaha_main)
    (let ((a72603 '5)) (let ((a72604 '6)) (lam a72603 a72604)))))
