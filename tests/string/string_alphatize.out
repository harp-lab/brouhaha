'((define (+ . lst) (let ((x116813 (apply-prim + lst))) x116813))
  (define (- . lst) (let ((x116814 (apply-prim - lst))) x116814))
  (define (* . lst) (let ((x116815 (apply-prim * lst))) x116815))
  (define (modulo a b) (let ((x116816 (prim modulo a b))) x116816))
  (define (/ . lst) (let ((x116817 (apply-prim / lst))) x116817))
  (define (= . lst) (let ((x116818 (apply-prim = lst))) x116818))
  (define (> . lst) (let ((x116819 (apply-prim > lst))) x116819))
  (define (< . lst) (let ((x116820 (apply-prim < lst))) x116820))
  (define (<= . lst) (let ((x116821 (apply-prim <= lst))) x116821))
  (define (>= . lst) (let ((x116822 (apply-prim >= lst))) x116822))
  (define (null? x) (let ((x116823 (prim null? x))) x116823))
  (define (equal? x y) (let ((x116824 (prim equal? x y))) x116824))
  (define (eq? x y) (let ((x116825 (prim eq? x y))) x116825))
  (define (cons a b) (let ((x116826 (prim cons a b))) x116826))
  (define (car lst) (let ((x116827 (prim car lst))) x116827))
  (define (cdr lst) (let ((x116828 (prim cdr lst))) x116828))
  (define (even? x)
    (let ((a116829 '0))
      (let ((a116830 '2))
        (let ((a116831 (modulo x a116830))) (equal? a116829 a116831)))))
  (define (odd? x)
    (let ((a116832 '1))
      (let ((a116833 '2))
        (let ((a116834 (modulo x a116833))) (equal? a116832 a116834)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a116835 (null? lst)))
      (if a116835
        (let ((x116836 '#f)) x116836)
        (let ((a116837 (car lst)))
          (let ((a116838 (equal? a116837 x)))
            (if a116838
              (let ((x116839 '#t)) x116839)
              (let ((a116840 (cdr lst))) (member? x a116840))))))))
  (define (foldl fun acc lst)
    (let ((a116841 (null? lst)))
      (if a116841
        acc
        (let ((a116842 (car lst)))
          (let ((a116843 (fun a116842 acc)))
            (let ((a116844 (cdr lst))) (foldl fun a116843 a116844)))))))
  (define (reverse-helper lst lst2)
    (let ((a116845 (null? lst)))
      (if a116845
        lst2
        (let ((a116846 (cdr lst)))
          (let ((a116847 (car lst)))
            (let ((a116848 (cons a116847 lst2)))
              (reverse-helper a116846 a116848)))))))
  (define (reverse lst) (let ((a116849 (list))) (reverse-helper lst a116849)))
  (define (take-helper lst n lst2)
    (let ((a116850 '0))
      (let ((a116851 (= n a116850)))
        (if a116851
          (let ((x116852 (reverse lst2))) x116852)
          (let ((a116853 (cdr lst)))
            (let ((a116854 '1))
              (let ((a116855 (- n a116854)))
                (let ((a116856 (car lst)))
                  (let ((a116857 (cons a116856 lst2)))
                    (take-helper a116853 a116855 a116857))))))))))
  (define (take lst n) (let ((a116858 (list))) (take-helper lst n a116858)))
  (define (length lst)
    (let ((a116859 (null? lst)))
      (if a116859
        (let ((x116860 '0)) x116860)
        (let ((a116861 '1))
          (let ((a116862 (cdr lst)))
            (let ((a116863 (length a116862))) (+ a116861 a116863)))))))
  (define (map proc lst)
    (let ((a116864 (null? lst)))
      (if a116864
        (let ((x116865 (list))) x116865)
        (let ((a116866 (car lst)))
          (let ((a116867 (proc a116866)))
            (let ((a116868 (cdr lst)))
              (let ((a116869 (map proc a116868))) (cons a116867 a116869))))))))
  (define (filter op lst)
    (let ((a116870 (null? lst)))
      (if a116870
        (let ((x116871 (list))) x116871)
        (let ((a116872 (car lst)))
          (let ((a116873 (op a116872)))
            (if a116873
              (let ((a116874 (car lst)))
                (let ((a116875 (cdr lst)))
                  (let ((a116876 (filter op a116875)))
                    (cons a116874 a116876))))
              (let ((a116877 (cdr lst))) (filter op a116877))))))))
  (define (drop lst n)
    (let ((a116878 '0))
      (let ((a116879 (= n a116878)))
        (if a116879
          lst
          (let ((a116880 (cdr lst)))
            (let ((a116881 '1))
              (let ((a116882 (- n a116881))) (drop a116880 a116882))))))))
  (define (foldr proc acc lst)
    (let ((a116883 (null? lst)))
      (if a116883
        acc
        (let ((a116884 (car lst)))
          (let ((a116885 (cdr lst)))
            (let ((a116886 (foldr proc acc a116885)))
              (proc a116884 a116886)))))))
  (define (append lst1 lst2)
    (let ((a116887 (null? lst1)))
      (if a116887
        lst2
        (let ((a116888 (car lst1)))
          (let ((a116889 (cdr lst1)))
            (let ((a116890 (append a116889 lst2))) (cons a116888 a116890)))))))
  (define (hash . lst) (let ((x116891 (apply-prim hash lst))) x116891))
  (define (hash-ref h k) (let ((x116892 (prim hash-ref h k))) x116892))
  (define (hash-set h k v) (let ((x116893 (prim hash-set h k v))) x116893))
  (define (hash-has-key? h k)
    (let ((x116894 (prim hash-has-key? h k))) x116894))
  (define (hash-count h) (let ((x116895 (prim hash-count h))) x116895))
  (define (call) (let ((x116896 "random")) x116896))
  (define (brouhaha_main) (let ((x116897 (call))) x116897)))
