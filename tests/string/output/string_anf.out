'((define (+ . lst)
    (let ((kont111139 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111054 (apply-prim + lst))) (kont111139 x111054)))))
  (define (- . lst)
    (let ((kont111141 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111055 (apply-prim - lst))) (kont111141 x111055)))))
  (define (* . lst)
    (let ((kont111143 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111056 (apply-prim * lst))) (kont111143 x111056)))))
  (define (modulo kont111145 a b)
    (let ((x111057 (prim modulo a b))) (kont111145 x111057)))
  (define (/ . lst)
    (let ((kont111146 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111058 (apply-prim / lst))) (kont111146 x111058)))))
  (define (= . lst)
    (let ((kont111148 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111059 (apply-prim = lst))) (kont111148 x111059)))))
  (define (> . lst)
    (let ((kont111150 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111060 (apply-prim > lst))) (kont111150 x111060)))))
  (define (< . lst)
    (let ((kont111152 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111061 (apply-prim < lst))) (kont111152 x111061)))))
  (define (<= . lst)
    (let ((kont111154 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111062 (apply-prim <= lst))) (kont111154 x111062)))))
  (define (>= . lst)
    (let ((kont111156 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111063 (apply-prim >= lst))) (kont111156 x111063)))))
  (define (null? kont111158 x)
    (let ((x111064 (prim null? x))) (kont111158 x111064)))
  (define (equal? kont111159 x y)
    (let ((x111065 (prim equal? x y))) (kont111159 x111065)))
  (define (eq? kont111160 x y)
    (let ((x111066 (prim eq? x y))) (kont111160 x111066)))
  (define (cons kont111161 a b)
    (let ((x111067 (prim cons a b))) (kont111161 x111067)))
  (define (car kont111162 lst)
    (let ((x111068 (prim car lst))) (kont111162 x111068)))
  (define (cdr kont111163 lst)
    (let ((x111069 (prim cdr lst))) (kont111163 x111069)))
  (define (even? kont111164 x)
    (let ((a111070 '0))
      (let ((a111071 '2))
        (let ((f111165 (lambda (a111072) (equal? kont111164 a111070 a111072))))
          (modulo f111165 x a111071)))))
  (define (odd? kont111166 x)
    (let ((a111073 '1))
      (let ((a111074 '2))
        (let ((f111167 (lambda (a111075) (equal? kont111166 a111073 a111075))))
          (modulo f111167 x a111074)))))
  (define (list . x)
    (let ((kont111168 (prim car x))) (let ((x (prim cdr x))) (kont111168 x))))
  (define (member? kont111170 x lst)
    (let ((f111174
           (lambda (a111076)
             (if a111076
               (let ((x111077 '#f)) (kont111170 x111077))
               (let ((f111173
                      (lambda (a111078)
                        (let ((f111172
                               (lambda (a111079)
                                 (if a111079
                                   (let ((x111080 '#t)) (kont111170 x111080))
                                   (let ((f111171
                                          (lambda (a111081)
                                            (member? kont111170 x a111081))))
                                     (cdr f111171 lst))))))
                          (equal? f111172 a111078 x)))))
                 (car f111173 lst))))))
      (null? f111174 lst)))
  (define (foldl kont111175 fun acc lst)
    (let ((f111179
           (lambda (a111082)
             (if a111082
               (kont111175 acc)
               (let ((f111178
                      (lambda (a111083)
                        (let ((f111177
                               (lambda (a111084)
                                 (let ((f111176
                                        (lambda (a111085)
                                          (foldl
                                           kont111175
                                           fun
                                           a111084
                                           a111085))))
                                   (cdr f111176 lst)))))
                          (fun f111177 a111083 acc)))))
                 (car f111178 lst))))))
      (null? f111179 lst)))
  (define (reverse-helper kont111180 lst lst2)
    (let ((f111184
           (lambda (a111086)
             (if a111086
               (kont111180 lst2)
               (let ((f111183
                      (lambda (a111087)
                        (let ((f111182
                               (lambda (a111088)
                                 (let ((f111181
                                        (lambda (a111089)
                                          (reverse-helper
                                           kont111180
                                           a111087
                                           a111089))))
                                   (cons f111181 a111088 lst2)))))
                          (car f111182 lst)))))
                 (cdr f111183 lst))))))
      (null? f111184 lst)))
  (define (reverse kont111185 lst)
    (let ((f111186 (lambda (a111090) (reverse-helper kont111185 lst a111090))))
      (list f111186)))
  (define (take-helper kont111187 lst n lst2)
    (let ((a111091 '0))
      (let ((f111193
             (lambda (a111092)
               (if a111092
                 (let ((f111188 (lambda (x111093) (kont111187 x111093))))
                   (reverse f111188 lst2))
                 (let ((f111192
                        (lambda (a111094)
                          (let ((a111095 '1))
                            (let ((f111191
                                   (lambda (a111096)
                                     (let ((f111190
                                            (lambda (a111097)
                                              (let ((f111189
                                                     (lambda (a111098)
                                                       (take-helper
                                                        kont111187
                                                        a111094
                                                        a111096
                                                        a111098))))
                                                (cons f111189 a111097 lst2)))))
                                       (car f111190 lst)))))
                              (- f111191 n a111095))))))
                   (cdr f111192 lst))))))
        (= f111193 n a111091))))
  (define (take kont111194 lst n)
    (let ((f111195 (lambda (a111099) (take-helper kont111194 lst n a111099))))
      (list f111195)))
  (define (length kont111196 lst)
    (let ((f111199
           (lambda (a111100)
             (if a111100
               (let ((x111101 '0)) (kont111196 x111101))
               (let ((a111102 '1))
                 (let ((f111198
                        (lambda (a111103)
                          (let ((f111197
                                 (lambda (a111104)
                                   (+ kont111196 a111102 a111104))))
                            (length f111197 a111103)))))
                   (cdr f111198 lst)))))))
      (null? f111199 lst)))
  (define (map kont111200 proc lst)
    (let ((f111206
           (lambda (a111105)
             (if a111105
               (let ((f111201 (lambda (x111106) (kont111200 x111106))))
                 (list f111201))
               (let ((f111205
                      (lambda (a111107)
                        (let ((f111204
                               (lambda (a111108)
                                 (let ((f111203
                                        (lambda (a111109)
                                          (let ((f111202
                                                 (lambda (a111110)
                                                   (cons
                                                    kont111200
                                                    a111108
                                                    a111110))))
                                            (map f111202 proc a111109)))))
                                   (cdr f111203 lst)))))
                          (proc f111204 a111107)))))
                 (car f111205 lst))))))
      (null? f111206 lst)))
  (define (filter kont111207 op lst)
    (let ((f111215
           (lambda (a111111)
             (if a111111
               (let ((f111208 (lambda (x111112) (kont111207 x111112))))
                 (list f111208))
               (let ((f111214
                      (lambda (a111113)
                        (let ((f111213
                               (lambda (a111114)
                                 (if a111114
                                   (let ((f111211
                                          (lambda (a111115)
                                            (let ((f111210
                                                   (lambda (a111116)
                                                     (let ((f111209
                                                            (lambda (a111117)
                                                              (cons
                                                               kont111207
                                                               a111115
                                                               a111117))))
                                                       (filter
                                                        f111209
                                                        op
                                                        a111116)))))
                                              (cdr f111210 lst)))))
                                     (car f111211 lst))
                                   (let ((f111212
                                          (lambda (a111118)
                                            (filter kont111207 op a111118))))
                                     (cdr f111212 lst))))))
                          (op f111213 a111113)))))
                 (car f111214 lst))))))
      (null? f111215 lst)))
  (define (drop kont111216 lst n)
    (let ((a111119 '0))
      (let ((f111219
             (lambda (a111120)
               (if a111120
                 (kont111216 lst)
                 (let ((f111218
                        (lambda (a111121)
                          (let ((a111122 '1))
                            (let ((f111217
                                   (lambda (a111123)
                                     (drop kont111216 a111121 a111123))))
                              (- f111217 n a111122))))))
                   (cdr f111218 lst))))))
        (= f111219 n a111119))))
  (define (foldr kont111220 proc acc lst)
    (let ((f111224
           (lambda (a111124)
             (if a111124
               (kont111220 acc)
               (let ((f111223
                      (lambda (a111125)
                        (let ((f111222
                               (lambda (a111126)
                                 (let ((f111221
                                        (lambda (a111127)
                                          (proc kont111220 a111125 a111127))))
                                   (foldr f111221 proc acc a111126)))))
                          (cdr f111222 lst)))))
                 (car f111223 lst))))))
      (null? f111224 lst)))
  (define (append kont111225 lst1 lst2)
    (let ((f111229
           (lambda (a111128)
             (if a111128
               (kont111225 lst2)
               (let ((f111228
                      (lambda (a111129)
                        (let ((f111227
                               (lambda (a111130)
                                 (let ((f111226
                                        (lambda (a111131)
                                          (cons kont111225 a111129 a111131))))
                                   (append f111226 a111130 lst2)))))
                          (cdr f111227 lst1)))))
                 (car f111228 lst1))))))
      (null? f111229 lst1)))
  (define (hash . lst)
    (let ((kont111230 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x111132 (apply-prim hash lst))) (kont111230 x111132)))))
  (define (hash-ref kont111232 h k)
    (let ((x111133 (prim hash-ref h k))) (kont111232 x111133)))
  (define (hash-set kont111233 h k v)
    (let ((x111134 (prim hash-set h k v))) (kont111233 x111134)))
  (define (hash-has-key? kont111234 h k)
    (let ((x111135 (prim hash-has-key? h k))) (kont111234 x111135)))
  (define (hash-count kont111235 h)
    (let ((x111136 (prim hash-count h))) (kont111235 x111136)))
  (define (call kont111236) (let ((x111137 "random")) (kont111236 x111137)))
  (define (brouhaha_main kont111237)
    (let ((f111238 (lambda (x111138) (kont111237 x111138)))) (call f111238))))
