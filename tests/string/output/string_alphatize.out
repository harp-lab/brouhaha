'((define (+ . lst) (let ((x111054 (apply-prim + lst))) x111054))
  (define (- . lst) (let ((x111055 (apply-prim - lst))) x111055))
  (define (* . lst) (let ((x111056 (apply-prim * lst))) x111056))
  (define (modulo a b) (let ((x111057 (prim modulo a b))) x111057))
  (define (/ . lst) (let ((x111058 (apply-prim / lst))) x111058))
  (define (= . lst) (let ((x111059 (apply-prim = lst))) x111059))
  (define (> . lst) (let ((x111060 (apply-prim > lst))) x111060))
  (define (< . lst) (let ((x111061 (apply-prim < lst))) x111061))
  (define (<= . lst) (let ((x111062 (apply-prim <= lst))) x111062))
  (define (>= . lst) (let ((x111063 (apply-prim >= lst))) x111063))
  (define (null? x) (let ((x111064 (prim null? x))) x111064))
  (define (equal? x y) (let ((x111065 (prim equal? x y))) x111065))
  (define (eq? x y) (let ((x111066 (prim eq? x y))) x111066))
  (define (cons a b) (let ((x111067 (prim cons a b))) x111067))
  (define (car lst) (let ((x111068 (prim car lst))) x111068))
  (define (cdr lst) (let ((x111069 (prim cdr lst))) x111069))
  (define (even? x)
    (let ((a111070 '0))
      (let ((a111071 '2))
        (let ((a111072 (modulo x a111071))) (equal? a111070 a111072)))))
  (define (odd? x)
    (let ((a111073 '1))
      (let ((a111074 '2))
        (let ((a111075 (modulo x a111074))) (equal? a111073 a111075)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a111076 (null? lst)))
      (if a111076
        (let ((x111077 '#f)) x111077)
        (let ((a111078 (car lst)))
          (let ((a111079 (equal? a111078 x)))
            (if a111079
              (let ((x111080 '#t)) x111080)
              (let ((a111081 (cdr lst))) (member? x a111081))))))))
  (define (foldl fun acc lst)
    (let ((a111082 (null? lst)))
      (if a111082
        acc
        (let ((a111083 (car lst)))
          (let ((a111084 (fun a111083 acc)))
            (let ((a111085 (cdr lst))) (foldl fun a111084 a111085)))))))
  (define (reverse-helper lst lst2)
    (let ((a111086 (null? lst)))
      (if a111086
        lst2
        (let ((a111087 (cdr lst)))
          (let ((a111088 (car lst)))
            (let ((a111089 (cons a111088 lst2)))
              (reverse-helper a111087 a111089)))))))
  (define (reverse lst) (let ((a111090 (list))) (reverse-helper lst a111090)))
  (define (take-helper lst n lst2)
    (let ((a111091 '0))
      (let ((a111092 (= n a111091)))
        (if a111092
          (let ((x111093 (reverse lst2))) x111093)
          (let ((a111094 (cdr lst)))
            (let ((a111095 '1))
              (let ((a111096 (- n a111095)))
                (let ((a111097 (car lst)))
                  (let ((a111098 (cons a111097 lst2)))
                    (take-helper a111094 a111096 a111098))))))))))
  (define (take lst n) (let ((a111099 (list))) (take-helper lst n a111099)))
  (define (length lst)
    (let ((a111100 (null? lst)))
      (if a111100
        (let ((x111101 '0)) x111101)
        (let ((a111102 '1))
          (let ((a111103 (cdr lst)))
            (let ((a111104 (length a111103))) (+ a111102 a111104)))))))
  (define (map proc lst)
    (let ((a111105 (null? lst)))
      (if a111105
        (let ((x111106 (list))) x111106)
        (let ((a111107 (car lst)))
          (let ((a111108 (proc a111107)))
            (let ((a111109 (cdr lst)))
              (let ((a111110 (map proc a111109))) (cons a111108 a111110))))))))
  (define (filter op lst)
    (let ((a111111 (null? lst)))
      (if a111111
        (let ((x111112 (list))) x111112)
        (let ((a111113 (car lst)))
          (let ((a111114 (op a111113)))
            (if a111114
              (let ((a111115 (car lst)))
                (let ((a111116 (cdr lst)))
                  (let ((a111117 (filter op a111116)))
                    (cons a111115 a111117))))
              (let ((a111118 (cdr lst))) (filter op a111118))))))))
  (define (drop lst n)
    (let ((a111119 '0))
      (let ((a111120 (= n a111119)))
        (if a111120
          lst
          (let ((a111121 (cdr lst)))
            (let ((a111122 '1))
              (let ((a111123 (- n a111122))) (drop a111121 a111123))))))))
  (define (foldr proc acc lst)
    (let ((a111124 (null? lst)))
      (if a111124
        acc
        (let ((a111125 (car lst)))
          (let ((a111126 (cdr lst)))
            (let ((a111127 (foldr proc acc a111126)))
              (proc a111125 a111127)))))))
  (define (append lst1 lst2)
    (let ((a111128 (null? lst1)))
      (if a111128
        lst2
        (let ((a111129 (car lst1)))
          (let ((a111130 (cdr lst1)))
            (let ((a111131 (append a111130 lst2))) (cons a111129 a111131)))))))
  (define (hash . lst) (let ((x111132 (apply-prim hash lst))) x111132))
  (define (hash-ref h k) (let ((x111133 (prim hash-ref h k))) x111133))
  (define (hash-set h k v) (let ((x111134 (prim hash-set h k v))) x111134))
  (define (hash-has-key? h k)
    (let ((x111135 (prim hash-has-key? h k))) x111135))
  (define (hash-count h) (let ((x111136 (prim hash-count h))) x111136))
  (define (call) (let ((x111137 "random")) x111137))
  (define (brouhaha_main) (let ((x111138 (call))) x111138)))
