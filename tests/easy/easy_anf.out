'((define (+ . lst)
    (let ((kont29572 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29486 (apply-prim + lst))) (kont29572 x29486)))))
  (define (- . lst)
    (let ((kont29574 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29487 (apply-prim - lst))) (kont29574 x29487)))))
  (define (* . lst)
    (let ((kont29576 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29488 (apply-prim * lst))) (kont29576 x29488)))))
  (define (modulo kont29578 a b)
    (let ((x29489 (prim modulo a b))) (kont29578 x29489)))
  (define (/ . lst)
    (let ((kont29579 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29490 (apply-prim / lst))) (kont29579 x29490)))))
  (define (= . lst)
    (let ((kont29581 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29491 (apply-prim = lst))) (kont29581 x29491)))))
  (define (> . lst)
    (let ((kont29583 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29492 (apply-prim > lst))) (kont29583 x29492)))))
  (define (< . lst)
    (let ((kont29585 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29493 (apply-prim < lst))) (kont29585 x29493)))))
  (define (<= . lst)
    (let ((kont29587 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29494 (apply-prim <= lst))) (kont29587 x29494)))))
  (define (>= . lst)
    (let ((kont29589 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29495 (apply-prim >= lst))) (kont29589 x29495)))))
  (define (null? kont29591 x)
    (let ((x29496 (prim null? x))) (kont29591 x29496)))
  (define (equal? kont29592 x y)
    (let ((x29497 (prim equal? x y))) (kont29592 x29497)))
  (define (eq? kont29593 x y)
    (let ((x29498 (prim eq? x y))) (kont29593 x29498)))
  (define (cons kont29594 a b)
    (let ((x29499 (prim cons a b))) (kont29594 x29499)))
  (define (car kont29595 lst)
    (let ((x29500 (prim car lst))) (kont29595 x29500)))
  (define (cdr kont29596 lst)
    (let ((x29501 (prim cdr lst))) (kont29596 x29501)))
  (define (even? kont29597 x)
    (let ((a29502 '0))
      (let ((a29503 '2))
        (let ((f29598 (lambda (a29504) (equal? kont29597 a29502 a29504))))
          (modulo f29598 x a29503)))))
  (define (odd? kont29599 x)
    (let ((a29505 '1))
      (let ((a29506 '2))
        (let ((f29600 (lambda (a29507) (equal? kont29599 a29505 a29507))))
          (modulo f29600 x a29506)))))
  (define (list . x)
    (let ((kont29601 (prim car x))) (let ((x (prim cdr x))) (kont29601 x))))
  (define (member? kont29603 x lst)
    (let ((f29607
           (lambda (a29508)
             (if a29508
               (let ((x29509 '#f)) (kont29603 x29509))
               (let ((f29606
                      (lambda (a29510)
                        (let ((f29605
                               (lambda (a29511)
                                 (if a29511
                                   (let ((x29512 '#t)) (kont29603 x29512))
                                   (let ((f29604
                                          (lambda (a29513)
                                            (member? kont29603 x a29513))))
                                     (cdr f29604 lst))))))
                          (equal? f29605 a29510 x)))))
                 (car f29606 lst))))))
      (null? f29607 lst)))
  (define (foldl kont29608 fun acc lst)
    (let ((f29612
           (lambda (a29514)
             (if a29514
               (kont29608 acc)
               (let ((f29611
                      (lambda (a29515)
                        (let ((f29610
                               (lambda (a29516)
                                 (let ((f29609
                                        (lambda (a29517)
                                          (foldl
                                           kont29608
                                           fun
                                           a29516
                                           a29517))))
                                   (cdr f29609 lst)))))
                          (fun f29610 a29515 acc)))))
                 (car f29611 lst))))))
      (null? f29612 lst)))
  (define (reverse-helper kont29613 lst lst2)
    (let ((f29617
           (lambda (a29518)
             (if a29518
               (kont29613 lst2)
               (let ((f29616
                      (lambda (a29519)
                        (let ((f29615
                               (lambda (a29520)
                                 (let ((f29614
                                        (lambda (a29521)
                                          (reverse-helper
                                           kont29613
                                           a29519
                                           a29521))))
                                   (cons f29614 a29520 lst2)))))
                          (car f29615 lst)))))
                 (cdr f29616 lst))))))
      (null? f29617 lst)))
  (define (reverse kont29618 lst)
    (let ((f29619 (lambda (a29522) (reverse-helper kont29618 lst a29522))))
      (list f29619)))
  (define (take-helper kont29620 lst n lst2)
    (let ((a29523 '0))
      (let ((f29626
             (lambda (a29524)
               (if a29524
                 (let ((f29621 (lambda (x29525) (kont29620 x29525))))
                   (reverse f29621 lst2))
                 (let ((f29625
                        (lambda (a29526)
                          (let ((a29527 '1))
                            (let ((f29624
                                   (lambda (a29528)
                                     (let ((f29623
                                            (lambda (a29529)
                                              (let ((f29622
                                                     (lambda (a29530)
                                                       (take-helper
                                                        kont29620
                                                        a29526
                                                        a29528
                                                        a29530))))
                                                (cons f29622 a29529 lst2)))))
                                       (car f29623 lst)))))
                              (- f29624 n a29527))))))
                   (cdr f29625 lst))))))
        (= f29626 n a29523))))
  (define (take kont29627 lst n)
    (let ((f29628 (lambda (a29531) (take-helper kont29627 lst n a29531))))
      (list f29628)))
  (define (length kont29629 lst)
    (let ((f29632
           (lambda (a29532)
             (if a29532
               (let ((x29533 '0)) (kont29629 x29533))
               (let ((a29534 '1))
                 (let ((f29631
                        (lambda (a29535)
                          (let ((f29630
                                 (lambda (a29536)
                                   (+ kont29629 a29534 a29536))))
                            (length f29630 a29535)))))
                   (cdr f29631 lst)))))))
      (null? f29632 lst)))
  (define (map kont29633 proc lst)
    (let ((f29639
           (lambda (a29537)
             (if a29537
               (let ((f29634 (lambda (x29538) (kont29633 x29538))))
                 (list f29634))
               (let ((f29638
                      (lambda (a29539)
                        (let ((f29637
                               (lambda (a29540)
                                 (let ((f29636
                                        (lambda (a29541)
                                          (let ((f29635
                                                 (lambda (a29542)
                                                   (cons
                                                    kont29633
                                                    a29540
                                                    a29542))))
                                            (map f29635 proc a29541)))))
                                   (cdr f29636 lst)))))
                          (proc f29637 a29539)))))
                 (car f29638 lst))))))
      (null? f29639 lst)))
  (define (filter kont29640 op lst)
    (let ((f29648
           (lambda (a29543)
             (if a29543
               (let ((f29641 (lambda (x29544) (kont29640 x29544))))
                 (list f29641))
               (let ((f29647
                      (lambda (a29545)
                        (let ((f29646
                               (lambda (a29546)
                                 (if a29546
                                   (let ((f29644
                                          (lambda (a29547)
                                            (let ((f29643
                                                   (lambda (a29548)
                                                     (let ((f29642
                                                            (lambda (a29549)
                                                              (cons
                                                               kont29640
                                                               a29547
                                                               a29549))))
                                                       (filter
                                                        f29642
                                                        op
                                                        a29548)))))
                                              (cdr f29643 lst)))))
                                     (car f29644 lst))
                                   (let ((f29645
                                          (lambda (a29550)
                                            (filter kont29640 op a29550))))
                                     (cdr f29645 lst))))))
                          (op f29646 a29545)))))
                 (car f29647 lst))))))
      (null? f29648 lst)))
  (define (drop kont29649 lst n)
    (let ((a29551 '0))
      (let ((f29652
             (lambda (a29552)
               (if a29552
                 (kont29649 lst)
                 (let ((f29651
                        (lambda (a29553)
                          (let ((a29554 '1))
                            (let ((f29650
                                   (lambda (a29555)
                                     (drop kont29649 a29553 a29555))))
                              (- f29650 n a29554))))))
                   (cdr f29651 lst))))))
        (= f29652 n a29551))))
  (define (foldr kont29653 proc acc lst)
    (let ((f29657
           (lambda (a29556)
             (if a29556
               (kont29653 acc)
               (let ((f29656
                      (lambda (a29557)
                        (let ((f29655
                               (lambda (a29558)
                                 (let ((f29654
                                        (lambda (a29559)
                                          (proc kont29653 a29557 a29559))))
                                   (foldr f29654 proc acc a29558)))))
                          (cdr f29655 lst)))))
                 (car f29656 lst))))))
      (null? f29657 lst)))
  (define (append kont29658 lst1 lst2)
    (let ((f29662
           (lambda (a29560)
             (if a29560
               (kont29658 lst2)
               (let ((f29661
                      (lambda (a29561)
                        (let ((f29660
                               (lambda (a29562)
                                 (let ((f29659
                                        (lambda (a29563)
                                          (cons kont29658 a29561 a29563))))
                                   (append f29659 a29562 lst2)))))
                          (cdr f29660 lst1)))))
                 (car f29661 lst1))))))
      (null? f29662 lst1)))
  (define (hash . lst)
    (let ((kont29663 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29564 (apply-prim hash lst))) (kont29663 x29564)))))
  (define (hash-ref kont29665 h k)
    (let ((x29565 (prim hash-ref h k))) (kont29665 x29565)))
  (define (hash-set kont29666 h k v)
    (let ((x29566 (prim hash-set h k v))) (kont29666 x29566)))
  (define (hash-has-key? kont29667 h k)
    (let ((x29567 (prim hash-has-key? h k))) (kont29667 x29567)))
  (define (hash-count kont29668 h)
    (let ((x29568 (prim hash-count h))) (kont29668 x29568)))
  (define (call kont29669)
    (let ((a29569 '1)) (let ((a29570 '2)) (+ kont29669 a29569 a29570))))
  (define (brouhaha_main kont29670)
    (let ((f29671 (lambda (x29571) (kont29670 x29571)))) (call f29671))))
