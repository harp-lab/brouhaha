(define "+" (varparam "lst") (apply-prim "+" (ref "lst")))
(define "-" (varparam "lst") (apply-prim "-" (ref "lst")))
(define "*" (varparam "lst") (apply-prim "*" (ref "lst")))
(define "modulo" (fixedparam ["a""b"]) (prim "modulo" [(ref "a")(ref "b")]))
(define "=" (varparam "lst") (apply-prim "=" (ref "lst")))
(define ">" (varparam "lst") (apply-prim ">" (ref "lst")))
(define "<" (varparam "lst") (apply-prim "<" (ref "lst")))
(define "<=" (varparam "lst") (apply-prim "<=" (ref "lst")))
(define ">=" (varparam "lst") (apply-prim ">=" (ref "lst")))
(define "null?" (fixedparam ["x"]) (prim "null?" [(ref "x")]))
(define "equal?" (fixedparam ["x""y"]) (prim "equal?" [(ref "x")(ref "y")]))
(define "eq?" (fixedparam ["x""y"]) (prim "eq?" [(ref "x")(ref "y")]))
(define "cons" (fixedparam ["a""b"]) (prim "cons" [(ref "a")(ref "b")]))
(define "car" (fixedparam ["lst"]) (prim "car" [(ref "lst")]))
(define "cdr" (fixedparam ["lst"]) (prim "cdr" [(ref "lst")]))
(define "even?" (fixedparam ["x"]) (app (ref "equal?") [(quote (const "0"))(app (ref "modulo") [(ref "x")(quote (const "2"))])]))
(define "odd?" (fixedparam ["x"]) (app (ref "equal?") [(quote (const "1"))(app (ref "modulo") [(ref "x")(quote (const "2"))])]))
(define "list" (varparam "x") (ref "x"))
(define "member?" (fixedparam ["x""lst"]) (if (app (ref "null?") [(ref "lst")]) (quote (bool "f")) (if (app (ref "equal?") [(app (ref "car") [(ref "lst")])(ref "x")]) (quote (bool "t")) (app (ref "member?") [(ref "x")(app (ref "cdr") [(ref "lst")])]))))
(define "foldl" (fixedparam ["fun""acc""lst"]) (if (app (ref "null?") [(ref "lst")]) (ref "acc") (app (ref "foldl") [(ref "fun")(app (ref "fun") [(app (ref "car") [(ref "lst")])(ref "acc")])(app (ref "cdr") [(ref "lst")])])))
(define "reverse" (fixedparam ["lst""lst2"]) (if (app (ref "null?") [(ref "lst")]) (ref "lst2") (app (ref "reverse") [(app (ref "cdr") [(ref "lst")])(app (ref "cons") [(app (ref "car") [(ref "lst")])(ref "lst2")])])))
(define "take" (fixedparam ["lst""n""lst2"]) (if (app (ref "=") [(ref "n")(quote (const "0"))]) (ref "lst2") (app (ref "cons") [(app (ref "car") [(ref "lst")])(app (ref "take") [(app (ref "cdr") [(ref "lst")])(app (ref "-") [(ref "n")(quote (const "1"))])(ref "lst2")])])))
(define "length" (fixedparam ["lst"]) (if (app (ref "null?") [(ref "lst")]) (quote (const "0")) (app (ref "+") [(quote (const "1"))(app (ref "length") [(app (ref "cdr") [(ref "lst")])])])))
(define "map" (fixedparam ["proc""lst"]) (if (app (ref "null?") [(ref "lst")]) (app (ref "list") []) (app (ref "cons") [(app (ref "proc") [(app (ref "car") [(ref "lst")])])(app (ref "map") [(ref "proc")(app (ref "cdr") [(ref "lst")])])])))
(define "filter" (fixedparam ["op""lst"]) (if (app (ref "null?") [(ref "lst")]) (app (ref "list") []) (if (app (ref "op") [(app (ref "car") [(ref "lst")])]) (app (ref "cons") [(app (ref "car") [(ref "lst")])(app (ref "filter") [(ref "op")(app (ref "cdr") [(ref "lst")])])]) (app (ref "filter") [(ref "op")(app (ref "cdr") [(ref "lst")])]))))
(define "drop" (fixedparam ["lst""n"]) (if (app (ref "=") [(ref "n")(quote (const "0"))]) (ref "lst") (app (ref "drop") [(app (ref "cdr") [(ref "lst")])(app (ref "-") [(ref "n")(quote (const "1"))])])))
(define "foldr" (fixedparam ["proc""acc""lst"]) (if (app (ref "null?") [(ref "lst")]) (ref "acc") (app (ref "proc") [(app (ref "car") [(ref "lst")])(app (ref "foldr") [(ref "proc")(ref "acc")(app (ref "cdr") [(ref "lst")])])])))
(define "append" (fixedparam ["lst1""lst2"]) (if (app (ref "null?") [(ref "lst1")]) (ref "lst2") (app (ref "cons") [(app (ref "car") [(ref "lst1")])(app (ref "append") [(app (ref "cdr") [(ref "lst1")])(ref "lst2")])])))
(define "hash" (varparam "lst") (apply-prim "hash" (ref "lst")))
(define "hash-ref" (fixedparam ["h""k"]) (prim "hash-ref" [(ref "h")(ref "k")]))
(define "call" (fixedparam []) (app (ref "+") [(quote (const "10"))(quote (const "2"))(quote (const "3"))(quote (const "4"))(quote (const "5"))(quote (const "6"))]))
(define "brouhaha_main" (fixedparam []) (app (ref "call") []))
#<void>
