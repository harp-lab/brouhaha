'((define (+ . lst) (let ((x28855 (apply-prim + lst))) x28855))
  (define (- . lst) (let ((x28856 (apply-prim - lst))) x28856))
  (define (* . lst) (let ((x28857 (apply-prim * lst))) x28857))
  (define (modulo a b) (let ((x28858 (prim modulo a b))) x28858))
  (define (/ . lst) (let ((x28859 (apply-prim / lst))) x28859))
  (define (= . lst) (let ((x28860 (apply-prim = lst))) x28860))
  (define (> . lst) (let ((x28861 (apply-prim > lst))) x28861))
  (define (< . lst) (let ((x28862 (apply-prim < lst))) x28862))
  (define (<= . lst) (let ((x28863 (apply-prim <= lst))) x28863))
  (define (>= . lst) (let ((x28864 (apply-prim >= lst))) x28864))
  (define (null? x) (let ((x28865 (prim null? x))) x28865))
  (define (equal? x y) (let ((x28866 (prim equal? x y))) x28866))
  (define (eq? x y) (let ((x28867 (prim eq? x y))) x28867))
  (define (cons a b) (let ((x28868 (prim cons a b))) x28868))
  (define (car lst) (let ((x28869 (prim car lst))) x28869))
  (define (cdr lst) (let ((x28870 (prim cdr lst))) x28870))
  (define (even? x)
    (let ((a28871 '0))
      (let ((a28872 '2))
        (let ((a28873 (modulo x a28872))) (equal? a28871 a28873)))))
  (define (odd? x)
    (let ((a28874 '1))
      (let ((a28875 '2))
        (let ((a28876 (modulo x a28875))) (equal? a28874 a28876)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a28877 (null? lst)))
      (if a28877
        (let ((x28878 '#f)) x28878)
        (let ((a28879 (car lst)))
          (let ((a28880 (equal? a28879 x)))
            (if a28880
              (let ((x28881 '#t)) x28881)
              (let ((a28882 (cdr lst))) (member? x a28882))))))))
  (define (foldl fun acc lst)
    (let ((a28883 (null? lst)))
      (if a28883
        acc
        (let ((a28884 (car lst)))
          (let ((a28885 (fun a28884 acc)))
            (let ((a28886 (cdr lst))) (foldl fun a28885 a28886)))))))
  (define (reverse-helper lst lst2)
    (let ((a28887 (null? lst)))
      (if a28887
        lst2
        (let ((a28888 (cdr lst)))
          (let ((a28889 (car lst)))
            (let ((a28890 (cons a28889 lst2)))
              (reverse-helper a28888 a28890)))))))
  (define (reverse lst) (let ((a28891 (list))) (reverse-helper lst a28891)))
  (define (take-helper lst n lst2)
    (let ((a28892 '0))
      (let ((a28893 (= n a28892)))
        (if a28893
          (let ((x28894 (reverse lst2))) x28894)
          (let ((a28895 (cdr lst)))
            (let ((a28896 '1))
              (let ((a28897 (- n a28896)))
                (let ((a28898 (car lst)))
                  (let ((a28899 (cons a28898 lst2)))
                    (take-helper a28895 a28897 a28899))))))))))
  (define (take lst n) (let ((a28900 (list))) (take-helper lst n a28900)))
  (define (length lst)
    (let ((a28901 (null? lst)))
      (if a28901
        (let ((x28902 '0)) x28902)
        (let ((a28903 '1))
          (let ((a28904 (cdr lst)))
            (let ((a28905 (length a28904))) (+ a28903 a28905)))))))
  (define (map proc lst)
    (let ((a28906 (null? lst)))
      (if a28906
        (let ((x28907 (list))) x28907)
        (let ((a28908 (car lst)))
          (let ((a28909 (proc a28908)))
            (let ((a28910 (cdr lst)))
              (let ((a28911 (map proc a28910))) (cons a28909 a28911))))))))
  (define (filter op lst)
    (let ((a28912 (null? lst)))
      (if a28912
        (let ((x28913 (list))) x28913)
        (let ((a28914 (car lst)))
          (let ((a28915 (op a28914)))
            (if a28915
              (let ((a28916 (car lst)))
                (let ((a28917 (cdr lst)))
                  (let ((a28918 (filter op a28917))) (cons a28916 a28918))))
              (let ((a28919 (cdr lst))) (filter op a28919))))))))
  (define (drop lst n)
    (let ((a28920 '0))
      (let ((a28921 (= n a28920)))
        (if a28921
          lst
          (let ((a28922 (cdr lst)))
            (let ((a28923 '1))
              (let ((a28924 (- n a28923))) (drop a28922 a28924))))))))
  (define (foldr proc acc lst)
    (let ((a28925 (null? lst)))
      (if a28925
        acc
        (let ((a28926 (car lst)))
          (let ((a28927 (cdr lst)))
            (let ((a28928 (foldr proc acc a28927))) (proc a28926 a28928)))))))
  (define (append lst1 lst2)
    (let ((a28929 (null? lst1)))
      (if a28929
        lst2
        (let ((a28930 (car lst1)))
          (let ((a28931 (cdr lst1)))
            (let ((a28932 (append a28931 lst2))) (cons a28930 a28932)))))))
  (define (hash . lst) (let ((x28933 (apply-prim hash lst))) x28933))
  (define (hash-ref h k) (let ((x28934 (prim hash-ref h k))) x28934))
  (define (hash-set h k v) (let ((x28935 (prim hash-set h k v))) x28935))
  (define (hash-has-key? h k) (let ((x28936 (prim hash-has-key? h k))) x28936))
  (define (hash-count h) (let ((x28937 (prim hash-count h))) x28937))
  (define (call) (let ((x28938 '42)) x28938))
  (define (brouhaha_main) (let ((x28939 (call))) x28939)))
