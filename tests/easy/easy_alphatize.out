'((define (+ . lst) (let ((x29486 (apply-prim + lst))) x29486))
  (define (- . lst) (let ((x29487 (apply-prim - lst))) x29487))
  (define (* . lst) (let ((x29488 (apply-prim * lst))) x29488))
  (define (modulo a b) (let ((x29489 (prim modulo a b))) x29489))
  (define (/ . lst) (let ((x29490 (apply-prim / lst))) x29490))
  (define (= . lst) (let ((x29491 (apply-prim = lst))) x29491))
  (define (> . lst) (let ((x29492 (apply-prim > lst))) x29492))
  (define (< . lst) (let ((x29493 (apply-prim < lst))) x29493))
  (define (<= . lst) (let ((x29494 (apply-prim <= lst))) x29494))
  (define (>= . lst) (let ((x29495 (apply-prim >= lst))) x29495))
  (define (null? x) (let ((x29496 (prim null? x))) x29496))
  (define (equal? x y) (let ((x29497 (prim equal? x y))) x29497))
  (define (eq? x y) (let ((x29498 (prim eq? x y))) x29498))
  (define (cons a b) (let ((x29499 (prim cons a b))) x29499))
  (define (car lst) (let ((x29500 (prim car lst))) x29500))
  (define (cdr lst) (let ((x29501 (prim cdr lst))) x29501))
  (define (even? x)
    (let ((a29502 '0))
      (let ((a29503 '2))
        (let ((a29504 (modulo x a29503))) (equal? a29502 a29504)))))
  (define (odd? x)
    (let ((a29505 '1))
      (let ((a29506 '2))
        (let ((a29507 (modulo x a29506))) (equal? a29505 a29507)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a29508 (null? lst)))
      (if a29508
        (let ((x29509 '#f)) x29509)
        (let ((a29510 (car lst)))
          (let ((a29511 (equal? a29510 x)))
            (if a29511
              (let ((x29512 '#t)) x29512)
              (let ((a29513 (cdr lst))) (member? x a29513))))))))
  (define (foldl fun acc lst)
    (let ((a29514 (null? lst)))
      (if a29514
        acc
        (let ((a29515 (car lst)))
          (let ((a29516 (fun a29515 acc)))
            (let ((a29517 (cdr lst))) (foldl fun a29516 a29517)))))))
  (define (reverse-helper lst lst2)
    (let ((a29518 (null? lst)))
      (if a29518
        lst2
        (let ((a29519 (cdr lst)))
          (let ((a29520 (car lst)))
            (let ((a29521 (cons a29520 lst2)))
              (reverse-helper a29519 a29521)))))))
  (define (reverse lst) (let ((a29522 (list))) (reverse-helper lst a29522)))
  (define (take-helper lst n lst2)
    (let ((a29523 '0))
      (let ((a29524 (= n a29523)))
        (if a29524
          (let ((x29525 (reverse lst2))) x29525)
          (let ((a29526 (cdr lst)))
            (let ((a29527 '1))
              (let ((a29528 (- n a29527)))
                (let ((a29529 (car lst)))
                  (let ((a29530 (cons a29529 lst2)))
                    (take-helper a29526 a29528 a29530))))))))))
  (define (take lst n) (let ((a29531 (list))) (take-helper lst n a29531)))
  (define (length lst)
    (let ((a29532 (null? lst)))
      (if a29532
        (let ((x29533 '0)) x29533)
        (let ((a29534 '1))
          (let ((a29535 (cdr lst)))
            (let ((a29536 (length a29535))) (+ a29534 a29536)))))))
  (define (map proc lst)
    (let ((a29537 (null? lst)))
      (if a29537
        (let ((x29538 (list))) x29538)
        (let ((a29539 (car lst)))
          (let ((a29540 (proc a29539)))
            (let ((a29541 (cdr lst)))
              (let ((a29542 (map proc a29541))) (cons a29540 a29542))))))))
  (define (filter op lst)
    (let ((a29543 (null? lst)))
      (if a29543
        (let ((x29544 (list))) x29544)
        (let ((a29545 (car lst)))
          (let ((a29546 (op a29545)))
            (if a29546
              (let ((a29547 (car lst)))
                (let ((a29548 (cdr lst)))
                  (let ((a29549 (filter op a29548))) (cons a29547 a29549))))
              (let ((a29550 (cdr lst))) (filter op a29550))))))))
  (define (drop lst n)
    (let ((a29551 '0))
      (let ((a29552 (= n a29551)))
        (if a29552
          lst
          (let ((a29553 (cdr lst)))
            (let ((a29554 '1))
              (let ((a29555 (- n a29554))) (drop a29553 a29555))))))))
  (define (foldr proc acc lst)
    (let ((a29556 (null? lst)))
      (if a29556
        acc
        (let ((a29557 (car lst)))
          (let ((a29558 (cdr lst)))
            (let ((a29559 (foldr proc acc a29558))) (proc a29557 a29559)))))))
  (define (append lst1 lst2)
    (let ((a29560 (null? lst1)))
      (if a29560
        lst2
        (let ((a29561 (car lst1)))
          (let ((a29562 (cdr lst1)))
            (let ((a29563 (append a29562 lst2))) (cons a29561 a29563)))))))
  (define (hash . lst) (let ((x29564 (apply-prim hash lst))) x29564))
  (define (hash-ref h k) (let ((x29565 (prim hash-ref h k))) x29565))
  (define (hash-set h k v) (let ((x29566 (prim hash-set h k v))) x29566))
  (define (hash-has-key? h k) (let ((x29567 (prim hash-has-key? h k))) x29567))
  (define (hash-count h) (let ((x29568 (prim hash-count h))) x29568))
  (define (call) (let ((a29569 '1)) (let ((a29570 '2)) (+ a29569 a29570))))
  (define (brouhaha_main) (let ((x29571 (call))) x29571)))
