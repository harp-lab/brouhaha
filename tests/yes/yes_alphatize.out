'((define (+ . lst) (let ((x133086 (apply-prim + lst))) x133086))
  (define (- . lst) (let ((x133087 (apply-prim - lst))) x133087))
  (define (* . lst) (let ((x133088 (apply-prim * lst))) x133088))
  (define (modulo a b) (let ((x133089 (prim modulo a b))) x133089))
  (define (/ . lst) (let ((x133090 (apply-prim / lst))) x133090))
  (define (= . lst) (let ((x133091 (apply-prim = lst))) x133091))
  (define (> . lst) (let ((x133092 (apply-prim > lst))) x133092))
  (define (< . lst) (let ((x133093 (apply-prim < lst))) x133093))
  (define (<= . lst) (let ((x133094 (apply-prim <= lst))) x133094))
  (define (>= . lst) (let ((x133095 (apply-prim >= lst))) x133095))
  (define (null? x) (let ((x133096 (prim null? x))) x133096))
  (define (equal? x y) (let ((x133097 (prim equal? x y))) x133097))
  (define (eq? x y) (let ((x133098 (prim eq? x y))) x133098))
  (define (cons a b) (let ((x133099 (prim cons a b))) x133099))
  (define (car lst) (let ((x133100 (prim car lst))) x133100))
  (define (cdr lst) (let ((x133101 (prim cdr lst))) x133101))
  (define (even? x)
    (let ((a133102 '0))
      (let ((a133103 '2))
        (let ((a133104 (modulo x a133103))) (equal? a133102 a133104)))))
  (define (odd? x)
    (let ((a133105 '1))
      (let ((a133106 '2))
        (let ((a133107 (modulo x a133106))) (equal? a133105 a133107)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a133108 (null? lst)))
      (if a133108
        (let ((x133109 '#f)) x133109)
        (let ((a133110 (car lst)))
          (let ((a133111 (equal? a133110 x)))
            (if a133111
              (let ((x133112 '#t)) x133112)
              (let ((a133113 (cdr lst))) (member? x a133113))))))))
  (define (foldl fun acc lst)
    (let ((a133114 (null? lst)))
      (if a133114
        acc
        (let ((a133115 (car lst)))
          (let ((a133116 (fun a133115 acc)))
            (let ((a133117 (cdr lst))) (foldl fun a133116 a133117)))))))
  (define (reverse-helper lst lst2)
    (let ((a133118 (null? lst)))
      (if a133118
        lst2
        (let ((a133119 (cdr lst)))
          (let ((a133120 (car lst)))
            (let ((a133121 (cons a133120 lst2)))
              (reverse-helper a133119 a133121)))))))
  (define (reverse lst) (let ((a133122 (list))) (reverse-helper lst a133122)))
  (define (take-helper lst n lst2)
    (let ((a133123 '0))
      (let ((a133124 (= n a133123)))
        (if a133124
          (let ((x133125 (reverse lst2))) x133125)
          (let ((a133126 (cdr lst)))
            (let ((a133127 '1))
              (let ((a133128 (- n a133127)))
                (let ((a133129 (car lst)))
                  (let ((a133130 (cons a133129 lst2)))
                    (take-helper a133126 a133128 a133130))))))))))
  (define (take lst n) (let ((a133131 (list))) (take-helper lst n a133131)))
  (define (length lst)
    (let ((a133132 (null? lst)))
      (if a133132
        (let ((x133133 '0)) x133133)
        (let ((a133134 '1))
          (let ((a133135 (cdr lst)))
            (let ((a133136 (length a133135))) (+ a133134 a133136)))))))
  (define (map proc lst)
    (let ((a133137 (null? lst)))
      (if a133137
        (let ((x133138 (list))) x133138)
        (let ((a133139 (car lst)))
          (let ((a133140 (proc a133139)))
            (let ((a133141 (cdr lst)))
              (let ((a133142 (map proc a133141))) (cons a133140 a133142))))))))
  (define (filter op lst)
    (let ((a133143 (null? lst)))
      (if a133143
        (let ((x133144 (list))) x133144)
        (let ((a133145 (car lst)))
          (let ((a133146 (op a133145)))
            (if a133146
              (let ((a133147 (car lst)))
                (let ((a133148 (cdr lst)))
                  (let ((a133149 (filter op a133148)))
                    (cons a133147 a133149))))
              (let ((a133150 (cdr lst))) (filter op a133150))))))))
  (define (drop lst n)
    (let ((a133151 '0))
      (let ((a133152 (= n a133151)))
        (if a133152
          lst
          (let ((a133153 (cdr lst)))
            (let ((a133154 '1))
              (let ((a133155 (- n a133154))) (drop a133153 a133155))))))))
  (define (foldr proc acc lst)
    (let ((a133156 (null? lst)))
      (if a133156
        acc
        (let ((a133157 (car lst)))
          (let ((a133158 (cdr lst)))
            (let ((a133159 (foldr proc acc a133158)))
              (proc a133157 a133159)))))))
  (define (append lst1 lst2)
    (let ((a133160 (null? lst1)))
      (if a133160
        lst2
        (let ((a133161 (car lst1)))
          (let ((a133162 (cdr lst1)))
            (let ((a133163 (append a133162 lst2))) (cons a133161 a133163)))))))
  (define (hash . lst) (let ((x133164 (apply-prim hash lst))) x133164))
  (define (hash-ref h k) (let ((x133165 (prim hash-ref h k))) x133165))
  (define (hash-set h k v) (let ((x133166 (prim hash-set h k v))) x133166))
  (define (hash-has-key? h k)
    (let ((x133167 (prim hash-has-key? h k))) x133167))
  (define (hash-count h) (let ((x133168 (prim hash-count h))) x133168))
  (define (yes) (let ((x133084 '5)) (let ((y133085 '6)) x133084)))
  (define (brouhaha_main) (let ((x133169 (yes))) x133169)))
