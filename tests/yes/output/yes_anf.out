'((define (+ . lst)
    (let ((kont126667 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126583 (apply-prim + lst))) (kont126667 x126583)))))
  (define (- . lst)
    (let ((kont126669 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126584 (apply-prim - lst))) (kont126669 x126584)))))
  (define (* . lst)
    (let ((kont126671 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126585 (apply-prim * lst))) (kont126671 x126585)))))
  (define (modulo kont126673 a b)
    (let ((x126586 (prim modulo a b))) (kont126673 x126586)))
  (define (/ . lst)
    (let ((kont126674 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126587 (apply-prim / lst))) (kont126674 x126587)))))
  (define (= . lst)
    (let ((kont126676 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126588 (apply-prim = lst))) (kont126676 x126588)))))
  (define (> . lst)
    (let ((kont126678 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126589 (apply-prim > lst))) (kont126678 x126589)))))
  (define (< . lst)
    (let ((kont126680 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126590 (apply-prim < lst))) (kont126680 x126590)))))
  (define (<= . lst)
    (let ((kont126682 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126591 (apply-prim <= lst))) (kont126682 x126591)))))
  (define (>= . lst)
    (let ((kont126684 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126592 (apply-prim >= lst))) (kont126684 x126592)))))
  (define (null? kont126686 x)
    (let ((x126593 (prim null? x))) (kont126686 x126593)))
  (define (equal? kont126687 x y)
    (let ((x126594 (prim equal? x y))) (kont126687 x126594)))
  (define (eq? kont126688 x y)
    (let ((x126595 (prim eq? x y))) (kont126688 x126595)))
  (define (cons kont126689 a b)
    (let ((x126596 (prim cons a b))) (kont126689 x126596)))
  (define (car kont126690 lst)
    (let ((x126597 (prim car lst))) (kont126690 x126597)))
  (define (cdr kont126691 lst)
    (let ((x126598 (prim cdr lst))) (kont126691 x126598)))
  (define (even? kont126692 x)
    (let ((a126599 '0))
      (let ((a126600 '2))
        (let ((f126693 (lambda (a126601) (equal? kont126692 a126599 a126601))))
          (modulo f126693 x a126600)))))
  (define (odd? kont126694 x)
    (let ((a126602 '1))
      (let ((a126603 '2))
        (let ((f126695 (lambda (a126604) (equal? kont126694 a126602 a126604))))
          (modulo f126695 x a126603)))))
  (define (list . x)
    (let ((kont126696 (prim car x))) (let ((x (prim cdr x))) (kont126696 x))))
  (define (member? kont126698 x lst)
    (let ((f126702
           (lambda (a126605)
             (if a126605
               (let ((x126606 '#f)) (kont126698 x126606))
               (let ((f126701
                      (lambda (a126607)
                        (let ((f126700
                               (lambda (a126608)
                                 (if a126608
                                   (let ((x126609 '#t)) (kont126698 x126609))
                                   (let ((f126699
                                          (lambda (a126610)
                                            (member? kont126698 x a126610))))
                                     (cdr f126699 lst))))))
                          (equal? f126700 a126607 x)))))
                 (car f126701 lst))))))
      (null? f126702 lst)))
  (define (foldl kont126703 fun acc lst)
    (let ((f126707
           (lambda (a126611)
             (if a126611
               (kont126703 acc)
               (let ((f126706
                      (lambda (a126612)
                        (let ((f126705
                               (lambda (a126613)
                                 (let ((f126704
                                        (lambda (a126614)
                                          (foldl
                                           kont126703
                                           fun
                                           a126613
                                           a126614))))
                                   (cdr f126704 lst)))))
                          (fun f126705 a126612 acc)))))
                 (car f126706 lst))))))
      (null? f126707 lst)))
  (define (reverse-helper kont126708 lst lst2)
    (let ((f126712
           (lambda (a126615)
             (if a126615
               (kont126708 lst2)
               (let ((f126711
                      (lambda (a126616)
                        (let ((f126710
                               (lambda (a126617)
                                 (let ((f126709
                                        (lambda (a126618)
                                          (reverse-helper
                                           kont126708
                                           a126616
                                           a126618))))
                                   (cons f126709 a126617 lst2)))))
                          (car f126710 lst)))))
                 (cdr f126711 lst))))))
      (null? f126712 lst)))
  (define (reverse kont126713 lst)
    (let ((f126714 (lambda (a126619) (reverse-helper kont126713 lst a126619))))
      (list f126714)))
  (define (take-helper kont126715 lst n lst2)
    (let ((a126620 '0))
      (let ((f126721
             (lambda (a126621)
               (if a126621
                 (let ((f126716 (lambda (x126622) (kont126715 x126622))))
                   (reverse f126716 lst2))
                 (let ((f126720
                        (lambda (a126623)
                          (let ((a126624 '1))
                            (let ((f126719
                                   (lambda (a126625)
                                     (let ((f126718
                                            (lambda (a126626)
                                              (let ((f126717
                                                     (lambda (a126627)
                                                       (take-helper
                                                        kont126715
                                                        a126623
                                                        a126625
                                                        a126627))))
                                                (cons f126717 a126626 lst2)))))
                                       (car f126718 lst)))))
                              (- f126719 n a126624))))))
                   (cdr f126720 lst))))))
        (= f126721 n a126620))))
  (define (take kont126722 lst n)
    (let ((f126723 (lambda (a126628) (take-helper kont126722 lst n a126628))))
      (list f126723)))
  (define (length kont126724 lst)
    (let ((f126727
           (lambda (a126629)
             (if a126629
               (let ((x126630 '0)) (kont126724 x126630))
               (let ((a126631 '1))
                 (let ((f126726
                        (lambda (a126632)
                          (let ((f126725
                                 (lambda (a126633)
                                   (+ kont126724 a126631 a126633))))
                            (length f126725 a126632)))))
                   (cdr f126726 lst)))))))
      (null? f126727 lst)))
  (define (map kont126728 proc lst)
    (let ((f126734
           (lambda (a126634)
             (if a126634
               (let ((f126729 (lambda (x126635) (kont126728 x126635))))
                 (list f126729))
               (let ((f126733
                      (lambda (a126636)
                        (let ((f126732
                               (lambda (a126637)
                                 (let ((f126731
                                        (lambda (a126638)
                                          (let ((f126730
                                                 (lambda (a126639)
                                                   (cons
                                                    kont126728
                                                    a126637
                                                    a126639))))
                                            (map f126730 proc a126638)))))
                                   (cdr f126731 lst)))))
                          (proc f126732 a126636)))))
                 (car f126733 lst))))))
      (null? f126734 lst)))
  (define (filter kont126735 op lst)
    (let ((f126743
           (lambda (a126640)
             (if a126640
               (let ((f126736 (lambda (x126641) (kont126735 x126641))))
                 (list f126736))
               (let ((f126742
                      (lambda (a126642)
                        (let ((f126741
                               (lambda (a126643)
                                 (if a126643
                                   (let ((f126739
                                          (lambda (a126644)
                                            (let ((f126738
                                                   (lambda (a126645)
                                                     (let ((f126737
                                                            (lambda (a126646)
                                                              (cons
                                                               kont126735
                                                               a126644
                                                               a126646))))
                                                       (filter
                                                        f126737
                                                        op
                                                        a126645)))))
                                              (cdr f126738 lst)))))
                                     (car f126739 lst))
                                   (let ((f126740
                                          (lambda (a126647)
                                            (filter kont126735 op a126647))))
                                     (cdr f126740 lst))))))
                          (op f126741 a126642)))))
                 (car f126742 lst))))))
      (null? f126743 lst)))
  (define (drop kont126744 lst n)
    (let ((a126648 '0))
      (let ((f126747
             (lambda (a126649)
               (if a126649
                 (kont126744 lst)
                 (let ((f126746
                        (lambda (a126650)
                          (let ((a126651 '1))
                            (let ((f126745
                                   (lambda (a126652)
                                     (drop kont126744 a126650 a126652))))
                              (- f126745 n a126651))))))
                   (cdr f126746 lst))))))
        (= f126747 n a126648))))
  (define (foldr kont126748 proc acc lst)
    (let ((f126752
           (lambda (a126653)
             (if a126653
               (kont126748 acc)
               (let ((f126751
                      (lambda (a126654)
                        (let ((f126750
                               (lambda (a126655)
                                 (let ((f126749
                                        (lambda (a126656)
                                          (proc kont126748 a126654 a126656))))
                                   (foldr f126749 proc acc a126655)))))
                          (cdr f126750 lst)))))
                 (car f126751 lst))))))
      (null? f126752 lst)))
  (define (append kont126753 lst1 lst2)
    (let ((f126757
           (lambda (a126657)
             (if a126657
               (kont126753 lst2)
               (let ((f126756
                      (lambda (a126658)
                        (let ((f126755
                               (lambda (a126659)
                                 (let ((f126754
                                        (lambda (a126660)
                                          (cons kont126753 a126658 a126660))))
                                   (append f126754 a126659 lst2)))))
                          (cdr f126755 lst1)))))
                 (car f126756 lst1))))))
      (null? f126757 lst1)))
  (define (hash . lst)
    (let ((kont126758 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x126661 (apply-prim hash lst))) (kont126758 x126661)))))
  (define (hash-ref kont126760 h k)
    (let ((x126662 (prim hash-ref h k))) (kont126760 x126662)))
  (define (hash-set kont126761 h k v)
    (let ((x126663 (prim hash-set h k v))) (kont126761 x126663)))
  (define (hash-has-key? kont126762 h k)
    (let ((x126664 (prim hash-has-key? h k))) (kont126762 x126664)))
  (define (hash-count kont126763 h)
    (let ((x126665 (prim hash-count h))) (kont126763 x126665)))
  (define (yes kont126764)
    (let ((x126581 '5)) (let ((y126582 '6)) (kont126764 x126581))))
  (define (brouhaha_main kont126765)
    (let ((f126766 (lambda (x126666) (kont126765 x126666)))) (yes f126766))))
