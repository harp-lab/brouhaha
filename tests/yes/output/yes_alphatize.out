'((define (+ . lst) (let ((x126583 (apply-prim + lst))) x126583))
  (define (- . lst) (let ((x126584 (apply-prim - lst))) x126584))
  (define (* . lst) (let ((x126585 (apply-prim * lst))) x126585))
  (define (modulo a b) (let ((x126586 (prim modulo a b))) x126586))
  (define (/ . lst) (let ((x126587 (apply-prim / lst))) x126587))
  (define (= . lst) (let ((x126588 (apply-prim = lst))) x126588))
  (define (> . lst) (let ((x126589 (apply-prim > lst))) x126589))
  (define (< . lst) (let ((x126590 (apply-prim < lst))) x126590))
  (define (<= . lst) (let ((x126591 (apply-prim <= lst))) x126591))
  (define (>= . lst) (let ((x126592 (apply-prim >= lst))) x126592))
  (define (null? x) (let ((x126593 (prim null? x))) x126593))
  (define (equal? x y) (let ((x126594 (prim equal? x y))) x126594))
  (define (eq? x y) (let ((x126595 (prim eq? x y))) x126595))
  (define (cons a b) (let ((x126596 (prim cons a b))) x126596))
  (define (car lst) (let ((x126597 (prim car lst))) x126597))
  (define (cdr lst) (let ((x126598 (prim cdr lst))) x126598))
  (define (even? x)
    (let ((a126599 '0))
      (let ((a126600 '2))
        (let ((a126601 (modulo x a126600))) (equal? a126599 a126601)))))
  (define (odd? x)
    (let ((a126602 '1))
      (let ((a126603 '2))
        (let ((a126604 (modulo x a126603))) (equal? a126602 a126604)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a126605 (null? lst)))
      (if a126605
        (let ((x126606 '#f)) x126606)
        (let ((a126607 (car lst)))
          (let ((a126608 (equal? a126607 x)))
            (if a126608
              (let ((x126609 '#t)) x126609)
              (let ((a126610 (cdr lst))) (member? x a126610))))))))
  (define (foldl fun acc lst)
    (let ((a126611 (null? lst)))
      (if a126611
        acc
        (let ((a126612 (car lst)))
          (let ((a126613 (fun a126612 acc)))
            (let ((a126614 (cdr lst))) (foldl fun a126613 a126614)))))))
  (define (reverse-helper lst lst2)
    (let ((a126615 (null? lst)))
      (if a126615
        lst2
        (let ((a126616 (cdr lst)))
          (let ((a126617 (car lst)))
            (let ((a126618 (cons a126617 lst2)))
              (reverse-helper a126616 a126618)))))))
  (define (reverse lst) (let ((a126619 (list))) (reverse-helper lst a126619)))
  (define (take-helper lst n lst2)
    (let ((a126620 '0))
      (let ((a126621 (= n a126620)))
        (if a126621
          (let ((x126622 (reverse lst2))) x126622)
          (let ((a126623 (cdr lst)))
            (let ((a126624 '1))
              (let ((a126625 (- n a126624)))
                (let ((a126626 (car lst)))
                  (let ((a126627 (cons a126626 lst2)))
                    (take-helper a126623 a126625 a126627))))))))))
  (define (take lst n) (let ((a126628 (list))) (take-helper lst n a126628)))
  (define (length lst)
    (let ((a126629 (null? lst)))
      (if a126629
        (let ((x126630 '0)) x126630)
        (let ((a126631 '1))
          (let ((a126632 (cdr lst)))
            (let ((a126633 (length a126632))) (+ a126631 a126633)))))))
  (define (map proc lst)
    (let ((a126634 (null? lst)))
      (if a126634
        (let ((x126635 (list))) x126635)
        (let ((a126636 (car lst)))
          (let ((a126637 (proc a126636)))
            (let ((a126638 (cdr lst)))
              (let ((a126639 (map proc a126638))) (cons a126637 a126639))))))))
  (define (filter op lst)
    (let ((a126640 (null? lst)))
      (if a126640
        (let ((x126641 (list))) x126641)
        (let ((a126642 (car lst)))
          (let ((a126643 (op a126642)))
            (if a126643
              (let ((a126644 (car lst)))
                (let ((a126645 (cdr lst)))
                  (let ((a126646 (filter op a126645)))
                    (cons a126644 a126646))))
              (let ((a126647 (cdr lst))) (filter op a126647))))))))
  (define (drop lst n)
    (let ((a126648 '0))
      (let ((a126649 (= n a126648)))
        (if a126649
          lst
          (let ((a126650 (cdr lst)))
            (let ((a126651 '1))
              (let ((a126652 (- n a126651))) (drop a126650 a126652))))))))
  (define (foldr proc acc lst)
    (let ((a126653 (null? lst)))
      (if a126653
        acc
        (let ((a126654 (car lst)))
          (let ((a126655 (cdr lst)))
            (let ((a126656 (foldr proc acc a126655)))
              (proc a126654 a126656)))))))
  (define (append lst1 lst2)
    (let ((a126657 (null? lst1)))
      (if a126657
        lst2
        (let ((a126658 (car lst1)))
          (let ((a126659 (cdr lst1)))
            (let ((a126660 (append a126659 lst2))) (cons a126658 a126660)))))))
  (define (hash . lst) (let ((x126661 (apply-prim hash lst))) x126661))
  (define (hash-ref h k) (let ((x126662 (prim hash-ref h k))) x126662))
  (define (hash-set h k v) (let ((x126663 (prim hash-set h k v))) x126663))
  (define (hash-has-key? h k)
    (let ((x126664 (prim hash-has-key? h k))) x126664))
  (define (hash-count h) (let ((x126665 (prim hash-count h))) x126665))
  (define (yes) (let ((x126581 '5)) (let ((y126582 '6)) x126581)))
  (define (brouhaha_main) (let ((x126666 (yes))) x126666)))
