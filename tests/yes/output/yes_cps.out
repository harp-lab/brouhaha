'((define (+ . lst)
    (let ((kont126667126767 (prim car lst)))
      (let ((lst126768 (prim cdr lst)))
        (let ((x126583126769 (apply-prim + lst126768)))
          (kont126667126767 x126583126769)))))
  (define (- . lst)
    (let ((kont126669126770 (prim car lst)))
      (let ((lst126771 (prim cdr lst)))
        (let ((x126584126772 (apply-prim - lst126771)))
          (kont126669126770 x126584126772)))))
  (define (* . lst)
    (let ((kont126671126773 (prim car lst)))
      (let ((lst126774 (prim cdr lst)))
        (let ((x126585126775 (apply-prim * lst126774)))
          (kont126671126773 x126585126775)))))
  (define (modulo kont126673 a b)
    (let ((x126586126776 (prim modulo a b))) (kont126673 x126586126776)))
  (define (/ . lst)
    (let ((kont126674126777 (prim car lst)))
      (let ((lst126778 (prim cdr lst)))
        (let ((x126587126779 (apply-prim / lst126778)))
          (kont126674126777 x126587126779)))))
  (define (= . lst)
    (let ((kont126676126780 (prim car lst)))
      (let ((lst126781 (prim cdr lst)))
        (let ((x126588126782 (apply-prim = lst126781)))
          (kont126676126780 x126588126782)))))
  (define (> . lst)
    (let ((kont126678126783 (prim car lst)))
      (let ((lst126784 (prim cdr lst)))
        (let ((x126589126785 (apply-prim > lst126784)))
          (kont126678126783 x126589126785)))))
  (define (< . lst)
    (let ((kont126680126786 (prim car lst)))
      (let ((lst126787 (prim cdr lst)))
        (let ((x126590126788 (apply-prim < lst126787)))
          (kont126680126786 x126590126788)))))
  (define (<= . lst)
    (let ((kont126682126789 (prim car lst)))
      (let ((lst126790 (prim cdr lst)))
        (let ((x126591126791 (apply-prim <= lst126790)))
          (kont126682126789 x126591126791)))))
  (define (>= . lst)
    (let ((kont126684126792 (prim car lst)))
      (let ((lst126793 (prim cdr lst)))
        (let ((x126592126794 (apply-prim >= lst126793)))
          (kont126684126792 x126592126794)))))
  (define (null? kont126686 x)
    (let ((x126593126795 (prim null? x))) (kont126686 x126593126795)))
  (define (equal? kont126687 x y)
    (let ((x126594126796 (prim equal? x y))) (kont126687 x126594126796)))
  (define (eq? kont126688 x y)
    (let ((x126595126797 (prim eq? x y))) (kont126688 x126595126797)))
  (define (cons kont126689 a b)
    (let ((x126596126798 (prim cons a b))) (kont126689 x126596126798)))
  (define (car kont126690 lst)
    (let ((x126597126799 (prim car lst))) (kont126690 x126597126799)))
  (define (cdr kont126691 lst)
    (let ((x126598126800 (prim cdr lst))) (kont126691 x126598126800)))
  (define (even? kont126692 x)
    (let ((a126599126801 '0))
      (let ((a126600126802 '2))
        (let ((f126693126803
               (lambda (a126601126804)
                 (equal? kont126692 a126599126801 a126601126804))))
          (modulo f126693126803 x a126600126802)))))
  (define (odd? kont126694 x)
    (let ((a126602126805 '1))
      (let ((a126603126806 '2))
        (let ((f126695126807
               (lambda (a126604126808)
                 (equal? kont126694 a126602126805 a126604126808))))
          (modulo f126695126807 x a126603126806)))))
  (define (list . x)
    (let ((kont126696126809 (prim car x)))
      (let ((x126810 (prim cdr x))) (kont126696126809 x126810))))
  (define (member? kont126698 x lst)
    (let ((f126702126811
           (lambda (a126605126812)
             (if a126605126812
               (let ((x126606126813 '#f)) (kont126698 x126606126813))
               (let ((f126701126814
                      (lambda (a126607126815)
                        (let ((f126700126816
                               (lambda (a126608126817)
                                 (if a126608126817
                                   (let ((x126609126818 '#t))
                                     (kont126698 x126609126818))
                                   (let ((f126699126819
                                          (lambda (a126610126820)
                                            (member?
                                             kont126698
                                             x
                                             a126610126820))))
                                     (cdr f126699126819 lst))))))
                          (equal? f126700126816 a126607126815 x)))))
                 (car f126701126814 lst))))))
      (null? f126702126811 lst)))
  (define (foldl kont126703 fun acc lst)
    (let ((f126707126821
           (lambda (a126611126822)
             (if a126611126822
               (kont126703 acc)
               (let ((f126706126823
                      (lambda (a126612126824)
                        (let ((f126705126825
                               (lambda (a126613126826)
                                 (let ((f126704126827
                                        (lambda (a126614126828)
                                          (foldl
                                           kont126703
                                           fun
                                           a126613126826
                                           a126614126828))))
                                   (cdr f126704126827 lst)))))
                          (fun f126705126825 a126612126824 acc)))))
                 (car f126706126823 lst))))))
      (null? f126707126821 lst)))
  (define (reverse-helper kont126708 lst lst2)
    (let ((f126712126829
           (lambda (a126615126830)
             (if a126615126830
               (kont126708 lst2)
               (let ((f126711126831
                      (lambda (a126616126832)
                        (let ((f126710126833
                               (lambda (a126617126834)
                                 (let ((f126709126835
                                        (lambda (a126618126836)
                                          (reverse-helper
                                           kont126708
                                           a126616126832
                                           a126618126836))))
                                   (cons f126709126835 a126617126834 lst2)))))
                          (car f126710126833 lst)))))
                 (cdr f126711126831 lst))))))
      (null? f126712126829 lst)))
  (define (reverse kont126713 lst)
    (let ((f126714126837
           (lambda (a126619126838)
             (reverse-helper kont126713 lst a126619126838))))
      (list f126714126837)))
  (define (take-helper kont126715 lst n lst2)
    (let ((a126620126839 '0))
      (let ((f126721126840
             (lambda (a126621126841)
               (if a126621126841
                 (let ((f126716126842
                        (lambda (x126622126843) (kont126715 x126622126843))))
                   (reverse f126716126842 lst2))
                 (let ((f126720126844
                        (lambda (a126623126845)
                          (let ((a126624126846 '1))
                            (let ((f126719126847
                                   (lambda (a126625126848)
                                     (let ((f126718126849
                                            (lambda (a126626126850)
                                              (let ((f126717126851
                                                     (lambda (a126627126852)
                                                       (take-helper
                                                        kont126715
                                                        a126623126845
                                                        a126625126848
                                                        a126627126852))))
                                                (cons
                                                 f126717126851
                                                 a126626126850
                                                 lst2)))))
                                       (car f126718126849 lst)))))
                              (- f126719126847 n a126624126846))))))
                   (cdr f126720126844 lst))))))
        (= f126721126840 n a126620126839))))
  (define (take kont126722 lst n)
    (let ((f126723126853
           (lambda (a126628126854)
             (take-helper kont126722 lst n a126628126854))))
      (list f126723126853)))
  (define (length kont126724 lst)
    (let ((f126727126855
           (lambda (a126629126856)
             (if a126629126856
               (let ((x126630126857 '0)) (kont126724 x126630126857))
               (let ((a126631126858 '1))
                 (let ((f126726126859
                        (lambda (a126632126860)
                          (let ((f126725126861
                                 (lambda (a126633126862)
                                   (+
                                    kont126724
                                    a126631126858
                                    a126633126862))))
                            (length f126725126861 a126632126860)))))
                   (cdr f126726126859 lst)))))))
      (null? f126727126855 lst)))
  (define (map kont126728 proc lst)
    (let ((f126734126863
           (lambda (a126634126864)
             (if a126634126864
               (let ((f126729126865
                      (lambda (x126635126866) (kont126728 x126635126866))))
                 (list f126729126865))
               (let ((f126733126867
                      (lambda (a126636126868)
                        (let ((f126732126869
                               (lambda (a126637126870)
                                 (let ((f126731126871
                                        (lambda (a126638126872)
                                          (let ((f126730126873
                                                 (lambda (a126639126874)
                                                   (cons
                                                    kont126728
                                                    a126637126870
                                                    a126639126874))))
                                            (map
                                             f126730126873
                                             proc
                                             a126638126872)))))
                                   (cdr f126731126871 lst)))))
                          (proc f126732126869 a126636126868)))))
                 (car f126733126867 lst))))))
      (null? f126734126863 lst)))
  (define (filter kont126735 op lst)
    (let ((f126743126875
           (lambda (a126640126876)
             (if a126640126876
               (let ((f126736126877
                      (lambda (x126641126878) (kont126735 x126641126878))))
                 (list f126736126877))
               (let ((f126742126879
                      (lambda (a126642126880)
                        (let ((f126741126881
                               (lambda (a126643126882)
                                 (if a126643126882
                                   (let ((f126739126883
                                          (lambda (a126644126884)
                                            (let ((f126738126885
                                                   (lambda (a126645126886)
                                                     (let ((f126737126887
                                                            (lambda (a126646126888)
                                                              (cons
                                                               kont126735
                                                               a126644126884
                                                               a126646126888))))
                                                       (filter
                                                        f126737126887
                                                        op
                                                        a126645126886)))))
                                              (cdr f126738126885 lst)))))
                                     (car f126739126883 lst))
                                   (let ((f126740126889
                                          (lambda (a126647126890)
                                            (filter
                                             kont126735
                                             op
                                             a126647126890))))
                                     (cdr f126740126889 lst))))))
                          (op f126741126881 a126642126880)))))
                 (car f126742126879 lst))))))
      (null? f126743126875 lst)))
  (define (drop kont126744 lst n)
    (let ((a126648126891 '0))
      (let ((f126747126892
             (lambda (a126649126893)
               (if a126649126893
                 (kont126744 lst)
                 (let ((f126746126894
                        (lambda (a126650126895)
                          (let ((a126651126896 '1))
                            (let ((f126745126897
                                   (lambda (a126652126898)
                                     (drop
                                      kont126744
                                      a126650126895
                                      a126652126898))))
                              (- f126745126897 n a126651126896))))))
                   (cdr f126746126894 lst))))))
        (= f126747126892 n a126648126891))))
  (define (foldr kont126748 proc acc lst)
    (let ((f126752126899
           (lambda (a126653126900)
             (if a126653126900
               (kont126748 acc)
               (let ((f126751126901
                      (lambda (a126654126902)
                        (let ((f126750126903
                               (lambda (a126655126904)
                                 (let ((f126749126905
                                        (lambda (a126656126906)
                                          (proc
                                           kont126748
                                           a126654126902
                                           a126656126906))))
                                   (foldr
                                    f126749126905
                                    proc
                                    acc
                                    a126655126904)))))
                          (cdr f126750126903 lst)))))
                 (car f126751126901 lst))))))
      (null? f126752126899 lst)))
  (define (append kont126753 lst1 lst2)
    (let ((f126757126907
           (lambda (a126657126908)
             (if a126657126908
               (kont126753 lst2)
               (let ((f126756126909
                      (lambda (a126658126910)
                        (let ((f126755126911
                               (lambda (a126659126912)
                                 (let ((f126754126913
                                        (lambda (a126660126914)
                                          (cons
                                           kont126753
                                           a126658126910
                                           a126660126914))))
                                   (append
                                    f126754126913
                                    a126659126912
                                    lst2)))))
                          (cdr f126755126911 lst1)))))
                 (car f126756126909 lst1))))))
      (null? f126757126907 lst1)))
  (define (hash . lst)
    (let ((kont126758126915 (prim car lst)))
      (let ((lst126916 (prim cdr lst)))
        (let ((x126661126917 (apply-prim hash lst126916)))
          (kont126758126915 x126661126917)))))
  (define (hash-ref kont126760 h k)
    (let ((x126662126918 (prim hash-ref h k))) (kont126760 x126662126918)))
  (define (hash-set kont126761 h k v)
    (let ((x126663126919 (prim hash-set h k v))) (kont126761 x126663126919)))
  (define (hash-has-key? kont126762 h k)
    (let ((x126664126920 (prim hash-has-key? h k)))
      (kont126762 x126664126920)))
  (define (hash-count kont126763 h)
    (let ((x126665126921 (prim hash-count h))) (kont126763 x126665126921)))
  (define (yes kont126764)
    (let ((x126581126922 '5))
      (let ((y126582126923 '6)) (kont126764 x126581126922))))
  (define (brouhaha_main kont126765)
    (let ((f126766126924 (lambda (x126666126925) (kont126765 x126666126925))))
      (yes f126766126924))))
