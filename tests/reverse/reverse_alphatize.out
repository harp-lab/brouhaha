'((define (+ . lst) (let ((x110589 (apply-prim + lst))) x110589))
  (define (- . lst) (let ((x110590 (apply-prim - lst))) x110590))
  (define (* . lst) (let ((x110591 (apply-prim * lst))) x110591))
  (define (modulo a b) (let ((x110592 (prim modulo a b))) x110592))
  (define (/ . lst) (let ((x110593 (apply-prim / lst))) x110593))
  (define (= . lst) (let ((x110594 (apply-prim = lst))) x110594))
  (define (> . lst) (let ((x110595 (apply-prim > lst))) x110595))
  (define (< . lst) (let ((x110596 (apply-prim < lst))) x110596))
  (define (<= . lst) (let ((x110597 (apply-prim <= lst))) x110597))
  (define (>= . lst) (let ((x110598 (apply-prim >= lst))) x110598))
  (define (null? x) (let ((x110599 (prim null? x))) x110599))
  (define (equal? x y) (let ((x110600 (prim equal? x y))) x110600))
  (define (eq? x y) (let ((x110601 (prim eq? x y))) x110601))
  (define (cons a b) (let ((x110602 (prim cons a b))) x110602))
  (define (car lst) (let ((x110603 (prim car lst))) x110603))
  (define (cdr lst) (let ((x110604 (prim cdr lst))) x110604))
  (define (even? x)
    (let ((a110605 '0))
      (let ((a110606 '2))
        (let ((a110607 (modulo x a110606))) (equal? a110605 a110607)))))
  (define (odd? x)
    (let ((a110608 '1))
      (let ((a110609 '2))
        (let ((a110610 (modulo x a110609))) (equal? a110608 a110610)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a110611 (null? lst)))
      (if a110611
        (let ((x110612 '#f)) x110612)
        (let ((a110613 (car lst)))
          (let ((a110614 (equal? a110613 x)))
            (if a110614
              (let ((x110615 '#t)) x110615)
              (let ((a110616 (cdr lst))) (member? x a110616))))))))
  (define (foldl fun acc lst)
    (let ((a110617 (null? lst)))
      (if a110617
        acc
        (let ((a110618 (car lst)))
          (let ((a110619 (fun a110618 acc)))
            (let ((a110620 (cdr lst))) (foldl fun a110619 a110620)))))))
  (define (reverse-helper lst lst2)
    (let ((a110621 (null? lst)))
      (if a110621
        lst2
        (let ((a110622 (cdr lst)))
          (let ((a110623 (car lst)))
            (let ((a110624 (cons a110623 lst2)))
              (reverse-helper a110622 a110624)))))))
  (define (reverse lst) (let ((a110625 (list))) (reverse-helper lst a110625)))
  (define (take-helper lst n lst2)
    (let ((a110626 '0))
      (let ((a110627 (= n a110626)))
        (if a110627
          (let ((x110628 (reverse lst2))) x110628)
          (let ((a110629 (cdr lst)))
            (let ((a110630 '1))
              (let ((a110631 (- n a110630)))
                (let ((a110632 (car lst)))
                  (let ((a110633 (cons a110632 lst2)))
                    (take-helper a110629 a110631 a110633))))))))))
  (define (take lst n) (let ((a110634 (list))) (take-helper lst n a110634)))
  (define (length lst)
    (let ((a110635 (null? lst)))
      (if a110635
        (let ((x110636 '0)) x110636)
        (let ((a110637 '1))
          (let ((a110638 (cdr lst)))
            (let ((a110639 (length a110638))) (+ a110637 a110639)))))))
  (define (map proc lst)
    (let ((a110640 (null? lst)))
      (if a110640
        (let ((x110641 (list))) x110641)
        (let ((a110642 (car lst)))
          (let ((a110643 (proc a110642)))
            (let ((a110644 (cdr lst)))
              (let ((a110645 (map proc a110644))) (cons a110643 a110645))))))))
  (define (filter op lst)
    (let ((a110646 (null? lst)))
      (if a110646
        (let ((x110647 (list))) x110647)
        (let ((a110648 (car lst)))
          (let ((a110649 (op a110648)))
            (if a110649
              (let ((a110650 (car lst)))
                (let ((a110651 (cdr lst)))
                  (let ((a110652 (filter op a110651)))
                    (cons a110650 a110652))))
              (let ((a110653 (cdr lst))) (filter op a110653))))))))
  (define (drop lst n)
    (let ((a110654 '0))
      (let ((a110655 (= n a110654)))
        (if a110655
          lst
          (let ((a110656 (cdr lst)))
            (let ((a110657 '1))
              (let ((a110658 (- n a110657))) (drop a110656 a110658))))))))
  (define (foldr proc acc lst)
    (let ((a110659 (null? lst)))
      (if a110659
        acc
        (let ((a110660 (car lst)))
          (let ((a110661 (cdr lst)))
            (let ((a110662 (foldr proc acc a110661)))
              (proc a110660 a110662)))))))
  (define (append lst1 lst2)
    (let ((a110663 (null? lst1)))
      (if a110663
        lst2
        (let ((a110664 (car lst1)))
          (let ((a110665 (cdr lst1)))
            (let ((a110666 (append a110665 lst2))) (cons a110664 a110666)))))))
  (define (hash . lst) (let ((x110667 (apply-prim hash lst))) x110667))
  (define (hash-ref h k) (let ((x110668 (prim hash-ref h k))) x110668))
  (define (hash-set h k v) (let ((x110669 (prim hash-set h k v))) x110669))
  (define (hash-has-key? h k)
    (let ((x110670 (prim hash-has-key? h k))) x110670))
  (define (hash-count h) (let ((x110671 (prim hash-count h))) x110671))
  (define (call lst) (let ((x110672 (reverse lst))) x110672))
  (define (brouhaha_main)
    (let ((a110673 '1))
      (let ((a110674 '2))
        (let ((a110675 '3))
          (let ((a110676 '4))
            (let ((a110677 (list a110673 a110674 a110675 a110676)))
              (call a110677))))))))
