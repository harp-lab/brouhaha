'((define (+ . lst)
    (let ((kont110678 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110589 (apply-prim + lst))) (kont110678 x110589)))))
  (define (- . lst)
    (let ((kont110680 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110590 (apply-prim - lst))) (kont110680 x110590)))))
  (define (* . lst)
    (let ((kont110682 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110591 (apply-prim * lst))) (kont110682 x110591)))))
  (define (modulo kont110684 a b)
    (let ((x110592 (prim modulo a b))) (kont110684 x110592)))
  (define (/ . lst)
    (let ((kont110685 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110593 (apply-prim / lst))) (kont110685 x110593)))))
  (define (= . lst)
    (let ((kont110687 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110594 (apply-prim = lst))) (kont110687 x110594)))))
  (define (> . lst)
    (let ((kont110689 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110595 (apply-prim > lst))) (kont110689 x110595)))))
  (define (< . lst)
    (let ((kont110691 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110596 (apply-prim < lst))) (kont110691 x110596)))))
  (define (<= . lst)
    (let ((kont110693 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110597 (apply-prim <= lst))) (kont110693 x110597)))))
  (define (>= . lst)
    (let ((kont110695 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110598 (apply-prim >= lst))) (kont110695 x110598)))))
  (define (null? kont110697 x)
    (let ((x110599 (prim null? x))) (kont110697 x110599)))
  (define (equal? kont110698 x y)
    (let ((x110600 (prim equal? x y))) (kont110698 x110600)))
  (define (eq? kont110699 x y)
    (let ((x110601 (prim eq? x y))) (kont110699 x110601)))
  (define (cons kont110700 a b)
    (let ((x110602 (prim cons a b))) (kont110700 x110602)))
  (define (car kont110701 lst)
    (let ((x110603 (prim car lst))) (kont110701 x110603)))
  (define (cdr kont110702 lst)
    (let ((x110604 (prim cdr lst))) (kont110702 x110604)))
  (define (even? kont110703 x)
    (let ((a110605 '0))
      (let ((a110606 '2))
        (let ((f110704 (lambda (a110607) (equal? kont110703 a110605 a110607))))
          (modulo f110704 x a110606)))))
  (define (odd? kont110705 x)
    (let ((a110608 '1))
      (let ((a110609 '2))
        (let ((f110706 (lambda (a110610) (equal? kont110705 a110608 a110610))))
          (modulo f110706 x a110609)))))
  (define (list . x)
    (let ((kont110707 (prim car x))) (let ((x (prim cdr x))) (kont110707 x))))
  (define (member? kont110709 x lst)
    (let ((f110713
           (lambda (a110611)
             (if a110611
               (let ((x110612 '#f)) (kont110709 x110612))
               (let ((f110712
                      (lambda (a110613)
                        (let ((f110711
                               (lambda (a110614)
                                 (if a110614
                                   (let ((x110615 '#t)) (kont110709 x110615))
                                   (let ((f110710
                                          (lambda (a110616)
                                            (member? kont110709 x a110616))))
                                     (cdr f110710 lst))))))
                          (equal? f110711 a110613 x)))))
                 (car f110712 lst))))))
      (null? f110713 lst)))
  (define (foldl kont110714 fun acc lst)
    (let ((f110718
           (lambda (a110617)
             (if a110617
               (kont110714 acc)
               (let ((f110717
                      (lambda (a110618)
                        (let ((f110716
                               (lambda (a110619)
                                 (let ((f110715
                                        (lambda (a110620)
                                          (foldl
                                           kont110714
                                           fun
                                           a110619
                                           a110620))))
                                   (cdr f110715 lst)))))
                          (fun f110716 a110618 acc)))))
                 (car f110717 lst))))))
      (null? f110718 lst)))
  (define (reverse-helper kont110719 lst lst2)
    (let ((f110723
           (lambda (a110621)
             (if a110621
               (kont110719 lst2)
               (let ((f110722
                      (lambda (a110622)
                        (let ((f110721
                               (lambda (a110623)
                                 (let ((f110720
                                        (lambda (a110624)
                                          (reverse-helper
                                           kont110719
                                           a110622
                                           a110624))))
                                   (cons f110720 a110623 lst2)))))
                          (car f110721 lst)))))
                 (cdr f110722 lst))))))
      (null? f110723 lst)))
  (define (reverse kont110724 lst)
    (let ((f110725 (lambda (a110625) (reverse-helper kont110724 lst a110625))))
      (list f110725)))
  (define (take-helper kont110726 lst n lst2)
    (let ((a110626 '0))
      (let ((f110732
             (lambda (a110627)
               (if a110627
                 (let ((f110727 (lambda (x110628) (kont110726 x110628))))
                   (reverse f110727 lst2))
                 (let ((f110731
                        (lambda (a110629)
                          (let ((a110630 '1))
                            (let ((f110730
                                   (lambda (a110631)
                                     (let ((f110729
                                            (lambda (a110632)
                                              (let ((f110728
                                                     (lambda (a110633)
                                                       (take-helper
                                                        kont110726
                                                        a110629
                                                        a110631
                                                        a110633))))
                                                (cons f110728 a110632 lst2)))))
                                       (car f110729 lst)))))
                              (- f110730 n a110630))))))
                   (cdr f110731 lst))))))
        (= f110732 n a110626))))
  (define (take kont110733 lst n)
    (let ((f110734 (lambda (a110634) (take-helper kont110733 lst n a110634))))
      (list f110734)))
  (define (length kont110735 lst)
    (let ((f110738
           (lambda (a110635)
             (if a110635
               (let ((x110636 '0)) (kont110735 x110636))
               (let ((a110637 '1))
                 (let ((f110737
                        (lambda (a110638)
                          (let ((f110736
                                 (lambda (a110639)
                                   (+ kont110735 a110637 a110639))))
                            (length f110736 a110638)))))
                   (cdr f110737 lst)))))))
      (null? f110738 lst)))
  (define (map kont110739 proc lst)
    (let ((f110745
           (lambda (a110640)
             (if a110640
               (let ((f110740 (lambda (x110641) (kont110739 x110641))))
                 (list f110740))
               (let ((f110744
                      (lambda (a110642)
                        (let ((f110743
                               (lambda (a110643)
                                 (let ((f110742
                                        (lambda (a110644)
                                          (let ((f110741
                                                 (lambda (a110645)
                                                   (cons
                                                    kont110739
                                                    a110643
                                                    a110645))))
                                            (map f110741 proc a110644)))))
                                   (cdr f110742 lst)))))
                          (proc f110743 a110642)))))
                 (car f110744 lst))))))
      (null? f110745 lst)))
  (define (filter kont110746 op lst)
    (let ((f110754
           (lambda (a110646)
             (if a110646
               (let ((f110747 (lambda (x110647) (kont110746 x110647))))
                 (list f110747))
               (let ((f110753
                      (lambda (a110648)
                        (let ((f110752
                               (lambda (a110649)
                                 (if a110649
                                   (let ((f110750
                                          (lambda (a110650)
                                            (let ((f110749
                                                   (lambda (a110651)
                                                     (let ((f110748
                                                            (lambda (a110652)
                                                              (cons
                                                               kont110746
                                                               a110650
                                                               a110652))))
                                                       (filter
                                                        f110748
                                                        op
                                                        a110651)))))
                                              (cdr f110749 lst)))))
                                     (car f110750 lst))
                                   (let ((f110751
                                          (lambda (a110653)
                                            (filter kont110746 op a110653))))
                                     (cdr f110751 lst))))))
                          (op f110752 a110648)))))
                 (car f110753 lst))))))
      (null? f110754 lst)))
  (define (drop kont110755 lst n)
    (let ((a110654 '0))
      (let ((f110758
             (lambda (a110655)
               (if a110655
                 (kont110755 lst)
                 (let ((f110757
                        (lambda (a110656)
                          (let ((a110657 '1))
                            (let ((f110756
                                   (lambda (a110658)
                                     (drop kont110755 a110656 a110658))))
                              (- f110756 n a110657))))))
                   (cdr f110757 lst))))))
        (= f110758 n a110654))))
  (define (foldr kont110759 proc acc lst)
    (let ((f110763
           (lambda (a110659)
             (if a110659
               (kont110759 acc)
               (let ((f110762
                      (lambda (a110660)
                        (let ((f110761
                               (lambda (a110661)
                                 (let ((f110760
                                        (lambda (a110662)
                                          (proc kont110759 a110660 a110662))))
                                   (foldr f110760 proc acc a110661)))))
                          (cdr f110761 lst)))))
                 (car f110762 lst))))))
      (null? f110763 lst)))
  (define (append kont110764 lst1 lst2)
    (let ((f110768
           (lambda (a110663)
             (if a110663
               (kont110764 lst2)
               (let ((f110767
                      (lambda (a110664)
                        (let ((f110766
                               (lambda (a110665)
                                 (let ((f110765
                                        (lambda (a110666)
                                          (cons kont110764 a110664 a110666))))
                                   (append f110765 a110665 lst2)))))
                          (cdr f110766 lst1)))))
                 (car f110767 lst1))))))
      (null? f110768 lst1)))
  (define (hash . lst)
    (let ((kont110769 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x110667 (apply-prim hash lst))) (kont110769 x110667)))))
  (define (hash-ref kont110771 h k)
    (let ((x110668 (prim hash-ref h k))) (kont110771 x110668)))
  (define (hash-set kont110772 h k v)
    (let ((x110669 (prim hash-set h k v))) (kont110772 x110669)))
  (define (hash-has-key? kont110773 h k)
    (let ((x110670 (prim hash-has-key? h k))) (kont110773 x110670)))
  (define (hash-count kont110774 h)
    (let ((x110671 (prim hash-count h))) (kont110774 x110671)))
  (define (call kont110775 lst)
    (let ((f110776 (lambda (x110672) (kont110775 x110672))))
      (reverse f110776 lst)))
  (define (brouhaha_main kont110777)
    (let ((a110673 '1))
      (let ((a110674 '2))
        (let ((a110675 '3))
          (let ((a110676 '4))
            (let ((f110778 (lambda (a110677) (call kont110777 a110677))))
              (list f110778 a110673 a110674 a110675 a110676))))))))
