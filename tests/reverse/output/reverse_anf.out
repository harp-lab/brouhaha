'((define (+ . lst)
    (let ((kont105291 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105202 (apply-prim + lst))) (kont105291 x105202)))))
  (define (- . lst)
    (let ((kont105293 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105203 (apply-prim - lst))) (kont105293 x105203)))))
  (define (* . lst)
    (let ((kont105295 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105204 (apply-prim * lst))) (kont105295 x105204)))))
  (define (modulo kont105297 a b)
    (let ((x105205 (prim modulo a b))) (kont105297 x105205)))
  (define (/ . lst)
    (let ((kont105298 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105206 (apply-prim / lst))) (kont105298 x105206)))))
  (define (= . lst)
    (let ((kont105300 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105207 (apply-prim = lst))) (kont105300 x105207)))))
  (define (> . lst)
    (let ((kont105302 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105208 (apply-prim > lst))) (kont105302 x105208)))))
  (define (< . lst)
    (let ((kont105304 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105209 (apply-prim < lst))) (kont105304 x105209)))))
  (define (<= . lst)
    (let ((kont105306 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105210 (apply-prim <= lst))) (kont105306 x105210)))))
  (define (>= . lst)
    (let ((kont105308 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105211 (apply-prim >= lst))) (kont105308 x105211)))))
  (define (null? kont105310 x)
    (let ((x105212 (prim null? x))) (kont105310 x105212)))
  (define (equal? kont105311 x y)
    (let ((x105213 (prim equal? x y))) (kont105311 x105213)))
  (define (eq? kont105312 x y)
    (let ((x105214 (prim eq? x y))) (kont105312 x105214)))
  (define (cons kont105313 a b)
    (let ((x105215 (prim cons a b))) (kont105313 x105215)))
  (define (car kont105314 lst)
    (let ((x105216 (prim car lst))) (kont105314 x105216)))
  (define (cdr kont105315 lst)
    (let ((x105217 (prim cdr lst))) (kont105315 x105217)))
  (define (even? kont105316 x)
    (let ((a105218 '0))
      (let ((a105219 '2))
        (let ((f105317 (lambda (a105220) (equal? kont105316 a105218 a105220))))
          (modulo f105317 x a105219)))))
  (define (odd? kont105318 x)
    (let ((a105221 '1))
      (let ((a105222 '2))
        (let ((f105319 (lambda (a105223) (equal? kont105318 a105221 a105223))))
          (modulo f105319 x a105222)))))
  (define (list . x)
    (let ((kont105320 (prim car x))) (let ((x (prim cdr x))) (kont105320 x))))
  (define (member? kont105322 x lst)
    (let ((f105326
           (lambda (a105224)
             (if a105224
               (let ((x105225 '#f)) (kont105322 x105225))
               (let ((f105325
                      (lambda (a105226)
                        (let ((f105324
                               (lambda (a105227)
                                 (if a105227
                                   (let ((x105228 '#t)) (kont105322 x105228))
                                   (let ((f105323
                                          (lambda (a105229)
                                            (member? kont105322 x a105229))))
                                     (cdr f105323 lst))))))
                          (equal? f105324 a105226 x)))))
                 (car f105325 lst))))))
      (null? f105326 lst)))
  (define (foldl kont105327 fun acc lst)
    (let ((f105331
           (lambda (a105230)
             (if a105230
               (kont105327 acc)
               (let ((f105330
                      (lambda (a105231)
                        (let ((f105329
                               (lambda (a105232)
                                 (let ((f105328
                                        (lambda (a105233)
                                          (foldl
                                           kont105327
                                           fun
                                           a105232
                                           a105233))))
                                   (cdr f105328 lst)))))
                          (fun f105329 a105231 acc)))))
                 (car f105330 lst))))))
      (null? f105331 lst)))
  (define (reverse-helper kont105332 lst lst2)
    (let ((f105336
           (lambda (a105234)
             (if a105234
               (kont105332 lst2)
               (let ((f105335
                      (lambda (a105235)
                        (let ((f105334
                               (lambda (a105236)
                                 (let ((f105333
                                        (lambda (a105237)
                                          (reverse-helper
                                           kont105332
                                           a105235
                                           a105237))))
                                   (cons f105333 a105236 lst2)))))
                          (car f105334 lst)))))
                 (cdr f105335 lst))))))
      (null? f105336 lst)))
  (define (reverse kont105337 lst)
    (let ((f105338 (lambda (a105238) (reverse-helper kont105337 lst a105238))))
      (list f105338)))
  (define (take-helper kont105339 lst n lst2)
    (let ((a105239 '0))
      (let ((f105345
             (lambda (a105240)
               (if a105240
                 (let ((f105340 (lambda (x105241) (kont105339 x105241))))
                   (reverse f105340 lst2))
                 (let ((f105344
                        (lambda (a105242)
                          (let ((a105243 '1))
                            (let ((f105343
                                   (lambda (a105244)
                                     (let ((f105342
                                            (lambda (a105245)
                                              (let ((f105341
                                                     (lambda (a105246)
                                                       (take-helper
                                                        kont105339
                                                        a105242
                                                        a105244
                                                        a105246))))
                                                (cons f105341 a105245 lst2)))))
                                       (car f105342 lst)))))
                              (- f105343 n a105243))))))
                   (cdr f105344 lst))))))
        (= f105345 n a105239))))
  (define (take kont105346 lst n)
    (let ((f105347 (lambda (a105247) (take-helper kont105346 lst n a105247))))
      (list f105347)))
  (define (length kont105348 lst)
    (let ((f105351
           (lambda (a105248)
             (if a105248
               (let ((x105249 '0)) (kont105348 x105249))
               (let ((a105250 '1))
                 (let ((f105350
                        (lambda (a105251)
                          (let ((f105349
                                 (lambda (a105252)
                                   (+ kont105348 a105250 a105252))))
                            (length f105349 a105251)))))
                   (cdr f105350 lst)))))))
      (null? f105351 lst)))
  (define (map kont105352 proc lst)
    (let ((f105358
           (lambda (a105253)
             (if a105253
               (let ((f105353 (lambda (x105254) (kont105352 x105254))))
                 (list f105353))
               (let ((f105357
                      (lambda (a105255)
                        (let ((f105356
                               (lambda (a105256)
                                 (let ((f105355
                                        (lambda (a105257)
                                          (let ((f105354
                                                 (lambda (a105258)
                                                   (cons
                                                    kont105352
                                                    a105256
                                                    a105258))))
                                            (map f105354 proc a105257)))))
                                   (cdr f105355 lst)))))
                          (proc f105356 a105255)))))
                 (car f105357 lst))))))
      (null? f105358 lst)))
  (define (filter kont105359 op lst)
    (let ((f105367
           (lambda (a105259)
             (if a105259
               (let ((f105360 (lambda (x105260) (kont105359 x105260))))
                 (list f105360))
               (let ((f105366
                      (lambda (a105261)
                        (let ((f105365
                               (lambda (a105262)
                                 (if a105262
                                   (let ((f105363
                                          (lambda (a105263)
                                            (let ((f105362
                                                   (lambda (a105264)
                                                     (let ((f105361
                                                            (lambda (a105265)
                                                              (cons
                                                               kont105359
                                                               a105263
                                                               a105265))))
                                                       (filter
                                                        f105361
                                                        op
                                                        a105264)))))
                                              (cdr f105362 lst)))))
                                     (car f105363 lst))
                                   (let ((f105364
                                          (lambda (a105266)
                                            (filter kont105359 op a105266))))
                                     (cdr f105364 lst))))))
                          (op f105365 a105261)))))
                 (car f105366 lst))))))
      (null? f105367 lst)))
  (define (drop kont105368 lst n)
    (let ((a105267 '0))
      (let ((f105371
             (lambda (a105268)
               (if a105268
                 (kont105368 lst)
                 (let ((f105370
                        (lambda (a105269)
                          (let ((a105270 '1))
                            (let ((f105369
                                   (lambda (a105271)
                                     (drop kont105368 a105269 a105271))))
                              (- f105369 n a105270))))))
                   (cdr f105370 lst))))))
        (= f105371 n a105267))))
  (define (foldr kont105372 proc acc lst)
    (let ((f105376
           (lambda (a105272)
             (if a105272
               (kont105372 acc)
               (let ((f105375
                      (lambda (a105273)
                        (let ((f105374
                               (lambda (a105274)
                                 (let ((f105373
                                        (lambda (a105275)
                                          (proc kont105372 a105273 a105275))))
                                   (foldr f105373 proc acc a105274)))))
                          (cdr f105374 lst)))))
                 (car f105375 lst))))))
      (null? f105376 lst)))
  (define (append kont105377 lst1 lst2)
    (let ((f105381
           (lambda (a105276)
             (if a105276
               (kont105377 lst2)
               (let ((f105380
                      (lambda (a105277)
                        (let ((f105379
                               (lambda (a105278)
                                 (let ((f105378
                                        (lambda (a105279)
                                          (cons kont105377 a105277 a105279))))
                                   (append f105378 a105278 lst2)))))
                          (cdr f105379 lst1)))))
                 (car f105380 lst1))))))
      (null? f105381 lst1)))
  (define (hash . lst)
    (let ((kont105382 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x105280 (apply-prim hash lst))) (kont105382 x105280)))))
  (define (hash-ref kont105384 h k)
    (let ((x105281 (prim hash-ref h k))) (kont105384 x105281)))
  (define (hash-set kont105385 h k v)
    (let ((x105282 (prim hash-set h k v))) (kont105385 x105282)))
  (define (hash-has-key? kont105386 h k)
    (let ((x105283 (prim hash-has-key? h k))) (kont105386 x105283)))
  (define (hash-count kont105387 h)
    (let ((x105284 (prim hash-count h))) (kont105387 x105284)))
  (define (call kont105388 lst)
    (let ((f105389 (lambda (x105285) (kont105388 x105285))))
      (reverse f105389 lst)))
  (define (brouhaha_main kont105390)
    (let ((a105286 '1))
      (let ((a105287 '2))
        (let ((a105288 '3))
          (let ((a105289 '4))
            (let ((f105391 (lambda (a105290) (call kont105390 a105290))))
              (list f105391 a105286 a105287 a105288 a105289))))))))
