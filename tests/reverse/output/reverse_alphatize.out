'((define (+ . lst) (let ((x105202 (apply-prim + lst))) x105202))
  (define (- . lst) (let ((x105203 (apply-prim - lst))) x105203))
  (define (* . lst) (let ((x105204 (apply-prim * lst))) x105204))
  (define (modulo a b) (let ((x105205 (prim modulo a b))) x105205))
  (define (/ . lst) (let ((x105206 (apply-prim / lst))) x105206))
  (define (= . lst) (let ((x105207 (apply-prim = lst))) x105207))
  (define (> . lst) (let ((x105208 (apply-prim > lst))) x105208))
  (define (< . lst) (let ((x105209 (apply-prim < lst))) x105209))
  (define (<= . lst) (let ((x105210 (apply-prim <= lst))) x105210))
  (define (>= . lst) (let ((x105211 (apply-prim >= lst))) x105211))
  (define (null? x) (let ((x105212 (prim null? x))) x105212))
  (define (equal? x y) (let ((x105213 (prim equal? x y))) x105213))
  (define (eq? x y) (let ((x105214 (prim eq? x y))) x105214))
  (define (cons a b) (let ((x105215 (prim cons a b))) x105215))
  (define (car lst) (let ((x105216 (prim car lst))) x105216))
  (define (cdr lst) (let ((x105217 (prim cdr lst))) x105217))
  (define (even? x)
    (let ((a105218 '0))
      (let ((a105219 '2))
        (let ((a105220 (modulo x a105219))) (equal? a105218 a105220)))))
  (define (odd? x)
    (let ((a105221 '1))
      (let ((a105222 '2))
        (let ((a105223 (modulo x a105222))) (equal? a105221 a105223)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a105224 (null? lst)))
      (if a105224
        (let ((x105225 '#f)) x105225)
        (let ((a105226 (car lst)))
          (let ((a105227 (equal? a105226 x)))
            (if a105227
              (let ((x105228 '#t)) x105228)
              (let ((a105229 (cdr lst))) (member? x a105229))))))))
  (define (foldl fun acc lst)
    (let ((a105230 (null? lst)))
      (if a105230
        acc
        (let ((a105231 (car lst)))
          (let ((a105232 (fun a105231 acc)))
            (let ((a105233 (cdr lst))) (foldl fun a105232 a105233)))))))
  (define (reverse-helper lst lst2)
    (let ((a105234 (null? lst)))
      (if a105234
        lst2
        (let ((a105235 (cdr lst)))
          (let ((a105236 (car lst)))
            (let ((a105237 (cons a105236 lst2)))
              (reverse-helper a105235 a105237)))))))
  (define (reverse lst) (let ((a105238 (list))) (reverse-helper lst a105238)))
  (define (take-helper lst n lst2)
    (let ((a105239 '0))
      (let ((a105240 (= n a105239)))
        (if a105240
          (let ((x105241 (reverse lst2))) x105241)
          (let ((a105242 (cdr lst)))
            (let ((a105243 '1))
              (let ((a105244 (- n a105243)))
                (let ((a105245 (car lst)))
                  (let ((a105246 (cons a105245 lst2)))
                    (take-helper a105242 a105244 a105246))))))))))
  (define (take lst n) (let ((a105247 (list))) (take-helper lst n a105247)))
  (define (length lst)
    (let ((a105248 (null? lst)))
      (if a105248
        (let ((x105249 '0)) x105249)
        (let ((a105250 '1))
          (let ((a105251 (cdr lst)))
            (let ((a105252 (length a105251))) (+ a105250 a105252)))))))
  (define (map proc lst)
    (let ((a105253 (null? lst)))
      (if a105253
        (let ((x105254 (list))) x105254)
        (let ((a105255 (car lst)))
          (let ((a105256 (proc a105255)))
            (let ((a105257 (cdr lst)))
              (let ((a105258 (map proc a105257))) (cons a105256 a105258))))))))
  (define (filter op lst)
    (let ((a105259 (null? lst)))
      (if a105259
        (let ((x105260 (list))) x105260)
        (let ((a105261 (car lst)))
          (let ((a105262 (op a105261)))
            (if a105262
              (let ((a105263 (car lst)))
                (let ((a105264 (cdr lst)))
                  (let ((a105265 (filter op a105264)))
                    (cons a105263 a105265))))
              (let ((a105266 (cdr lst))) (filter op a105266))))))))
  (define (drop lst n)
    (let ((a105267 '0))
      (let ((a105268 (= n a105267)))
        (if a105268
          lst
          (let ((a105269 (cdr lst)))
            (let ((a105270 '1))
              (let ((a105271 (- n a105270))) (drop a105269 a105271))))))))
  (define (foldr proc acc lst)
    (let ((a105272 (null? lst)))
      (if a105272
        acc
        (let ((a105273 (car lst)))
          (let ((a105274 (cdr lst)))
            (let ((a105275 (foldr proc acc a105274)))
              (proc a105273 a105275)))))))
  (define (append lst1 lst2)
    (let ((a105276 (null? lst1)))
      (if a105276
        lst2
        (let ((a105277 (car lst1)))
          (let ((a105278 (cdr lst1)))
            (let ((a105279 (append a105278 lst2))) (cons a105277 a105279)))))))
  (define (hash . lst) (let ((x105280 (apply-prim hash lst))) x105280))
  (define (hash-ref h k) (let ((x105281 (prim hash-ref h k))) x105281))
  (define (hash-set h k v) (let ((x105282 (prim hash-set h k v))) x105282))
  (define (hash-has-key? h k)
    (let ((x105283 (prim hash-has-key? h k))) x105283))
  (define (hash-count h) (let ((x105284 (prim hash-count h))) x105284))
  (define (call lst) (let ((x105285 (reverse lst))) x105285))
  (define (brouhaha_main)
    (let ((a105286 '1))
      (let ((a105287 '2))
        (let ((a105288 '3))
          (let ((a105289 '4))
            (let ((a105290 (list a105286 a105287 a105288 a105289)))
              (call a105290))))))))
