'((define (+ . lst) (let ((x118616 (apply-prim + lst))) x118616))
  (define (- . lst) (let ((x118617 (apply-prim - lst))) x118617))
  (define (* . lst) (let ((x118618 (apply-prim * lst))) x118618))
  (define (modulo a b) (let ((x118619 (prim modulo a b))) x118619))
  (define (/ . lst) (let ((x118620 (apply-prim / lst))) x118620))
  (define (= . lst) (let ((x118621 (apply-prim = lst))) x118621))
  (define (> . lst) (let ((x118622 (apply-prim > lst))) x118622))
  (define (< . lst) (let ((x118623 (apply-prim < lst))) x118623))
  (define (<= . lst) (let ((x118624 (apply-prim <= lst))) x118624))
  (define (>= . lst) (let ((x118625 (apply-prim >= lst))) x118625))
  (define (null? x) (let ((x118626 (prim null? x))) x118626))
  (define (equal? x y) (let ((x118627 (prim equal? x y))) x118627))
  (define (eq? x y) (let ((x118628 (prim eq? x y))) x118628))
  (define (cons a b) (let ((x118629 (prim cons a b))) x118629))
  (define (car lst) (let ((x118630 (prim car lst))) x118630))
  (define (cdr lst) (let ((x118631 (prim cdr lst))) x118631))
  (define (even? x)
    (let ((a118632 '0))
      (let ((a118633 '2))
        (let ((a118634 (modulo x a118633))) (equal? a118632 a118634)))))
  (define (odd? x)
    (let ((a118635 '1))
      (let ((a118636 '2))
        (let ((a118637 (modulo x a118636))) (equal? a118635 a118637)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a118638 (null? lst)))
      (if a118638
        (let ((x118639 '#f)) x118639)
        (let ((a118640 (car lst)))
          (let ((a118641 (equal? a118640 x)))
            (if a118641
              (let ((x118642 '#t)) x118642)
              (let ((a118643 (cdr lst))) (member? x a118643))))))))
  (define (foldl fun acc lst)
    (let ((a118644 (null? lst)))
      (if a118644
        acc
        (let ((a118645 (car lst)))
          (let ((a118646 (fun a118645 acc)))
            (let ((a118647 (cdr lst))) (foldl fun a118646 a118647)))))))
  (define (reverse-helper lst lst2)
    (let ((a118648 (null? lst)))
      (if a118648
        lst2
        (let ((a118649 (cdr lst)))
          (let ((a118650 (car lst)))
            (let ((a118651 (cons a118650 lst2)))
              (reverse-helper a118649 a118651)))))))
  (define (reverse lst) (let ((a118652 (list))) (reverse-helper lst a118652)))
  (define (take-helper lst n lst2)
    (let ((a118653 '0))
      (let ((a118654 (= n a118653)))
        (if a118654
          (let ((x118655 (reverse lst2))) x118655)
          (let ((a118656 (cdr lst)))
            (let ((a118657 '1))
              (let ((a118658 (- n a118657)))
                (let ((a118659 (car lst)))
                  (let ((a118660 (cons a118659 lst2)))
                    (take-helper a118656 a118658 a118660))))))))))
  (define (take lst n) (let ((a118661 (list))) (take-helper lst n a118661)))
  (define (length lst)
    (let ((a118662 (null? lst)))
      (if a118662
        (let ((x118663 '0)) x118663)
        (let ((a118664 '1))
          (let ((a118665 (cdr lst)))
            (let ((a118666 (length a118665))) (+ a118664 a118666)))))))
  (define (map proc lst)
    (let ((a118667 (null? lst)))
      (if a118667
        (let ((x118668 (list))) x118668)
        (let ((a118669 (car lst)))
          (let ((a118670 (proc a118669)))
            (let ((a118671 (cdr lst)))
              (let ((a118672 (map proc a118671))) (cons a118670 a118672))))))))
  (define (filter op lst)
    (let ((a118673 (null? lst)))
      (if a118673
        (let ((x118674 (list))) x118674)
        (let ((a118675 (car lst)))
          (let ((a118676 (op a118675)))
            (if a118676
              (let ((a118677 (car lst)))
                (let ((a118678 (cdr lst)))
                  (let ((a118679 (filter op a118678)))
                    (cons a118677 a118679))))
              (let ((a118680 (cdr lst))) (filter op a118680))))))))
  (define (drop lst n)
    (let ((a118681 '0))
      (let ((a118682 (= n a118681)))
        (if a118682
          lst
          (let ((a118683 (cdr lst)))
            (let ((a118684 '1))
              (let ((a118685 (- n a118684))) (drop a118683 a118685))))))))
  (define (foldr proc acc lst)
    (let ((a118686 (null? lst)))
      (if a118686
        acc
        (let ((a118687 (car lst)))
          (let ((a118688 (cdr lst)))
            (let ((a118689 (foldr proc acc a118688)))
              (proc a118687 a118689)))))))
  (define (append lst1 lst2)
    (let ((a118690 (null? lst1)))
      (if a118690
        lst2
        (let ((a118691 (car lst1)))
          (let ((a118692 (cdr lst1)))
            (let ((a118693 (append a118692 lst2))) (cons a118691 a118693)))))))
  (define (hash . lst) (let ((x118694 (apply-prim hash lst))) x118694))
  (define (hash-ref h k) (let ((x118695 (prim hash-ref h k))) x118695))
  (define (hash-set h k v) (let ((x118696 (prim hash-set h k v))) x118696))
  (define (hash-has-key? h k)
    (let ((x118697 (prim hash-has-key? h k))) x118697))
  (define (hash-count h) (let ((x118698 (prim hash-count h))) x118698))
  (define (call)
    (let ((a118699 '100))
      (let ((a118700 '20))
        (let ((a118701 '10))
          (let ((a118702 '5))
            (let ((a118703 '1))
              (> a118699 a118700 a118701 a118702 a118703)))))))
  (define (brouhaha_main) (let ((x118704 (call))) x118704)))
