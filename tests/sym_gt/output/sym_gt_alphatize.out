'((define (+ . lst) (let ((x112821 (apply-prim + lst))) x112821))
  (define (- . lst) (let ((x112822 (apply-prim - lst))) x112822))
  (define (* . lst) (let ((x112823 (apply-prim * lst))) x112823))
  (define (modulo a b) (let ((x112824 (prim modulo a b))) x112824))
  (define (/ . lst) (let ((x112825 (apply-prim / lst))) x112825))
  (define (= . lst) (let ((x112826 (apply-prim = lst))) x112826))
  (define (> . lst) (let ((x112827 (apply-prim > lst))) x112827))
  (define (< . lst) (let ((x112828 (apply-prim < lst))) x112828))
  (define (<= . lst) (let ((x112829 (apply-prim <= lst))) x112829))
  (define (>= . lst) (let ((x112830 (apply-prim >= lst))) x112830))
  (define (null? x) (let ((x112831 (prim null? x))) x112831))
  (define (equal? x y) (let ((x112832 (prim equal? x y))) x112832))
  (define (eq? x y) (let ((x112833 (prim eq? x y))) x112833))
  (define (cons a b) (let ((x112834 (prim cons a b))) x112834))
  (define (car lst) (let ((x112835 (prim car lst))) x112835))
  (define (cdr lst) (let ((x112836 (prim cdr lst))) x112836))
  (define (even? x)
    (let ((a112837 '0))
      (let ((a112838 '2))
        (let ((a112839 (modulo x a112838))) (equal? a112837 a112839)))))
  (define (odd? x)
    (let ((a112840 '1))
      (let ((a112841 '2))
        (let ((a112842 (modulo x a112841))) (equal? a112840 a112842)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a112843 (null? lst)))
      (if a112843
        (let ((x112844 '#f)) x112844)
        (let ((a112845 (car lst)))
          (let ((a112846 (equal? a112845 x)))
            (if a112846
              (let ((x112847 '#t)) x112847)
              (let ((a112848 (cdr lst))) (member? x a112848))))))))
  (define (foldl fun acc lst)
    (let ((a112849 (null? lst)))
      (if a112849
        acc
        (let ((a112850 (car lst)))
          (let ((a112851 (fun a112850 acc)))
            (let ((a112852 (cdr lst))) (foldl fun a112851 a112852)))))))
  (define (reverse-helper lst lst2)
    (let ((a112853 (null? lst)))
      (if a112853
        lst2
        (let ((a112854 (cdr lst)))
          (let ((a112855 (car lst)))
            (let ((a112856 (cons a112855 lst2)))
              (reverse-helper a112854 a112856)))))))
  (define (reverse lst) (let ((a112857 (list))) (reverse-helper lst a112857)))
  (define (take-helper lst n lst2)
    (let ((a112858 '0))
      (let ((a112859 (= n a112858)))
        (if a112859
          (let ((x112860 (reverse lst2))) x112860)
          (let ((a112861 (cdr lst)))
            (let ((a112862 '1))
              (let ((a112863 (- n a112862)))
                (let ((a112864 (car lst)))
                  (let ((a112865 (cons a112864 lst2)))
                    (take-helper a112861 a112863 a112865))))))))))
  (define (take lst n) (let ((a112866 (list))) (take-helper lst n a112866)))
  (define (length lst)
    (let ((a112867 (null? lst)))
      (if a112867
        (let ((x112868 '0)) x112868)
        (let ((a112869 '1))
          (let ((a112870 (cdr lst)))
            (let ((a112871 (length a112870))) (+ a112869 a112871)))))))
  (define (map proc lst)
    (let ((a112872 (null? lst)))
      (if a112872
        (let ((x112873 (list))) x112873)
        (let ((a112874 (car lst)))
          (let ((a112875 (proc a112874)))
            (let ((a112876 (cdr lst)))
              (let ((a112877 (map proc a112876))) (cons a112875 a112877))))))))
  (define (filter op lst)
    (let ((a112878 (null? lst)))
      (if a112878
        (let ((x112879 (list))) x112879)
        (let ((a112880 (car lst)))
          (let ((a112881 (op a112880)))
            (if a112881
              (let ((a112882 (car lst)))
                (let ((a112883 (cdr lst)))
                  (let ((a112884 (filter op a112883)))
                    (cons a112882 a112884))))
              (let ((a112885 (cdr lst))) (filter op a112885))))))))
  (define (drop lst n)
    (let ((a112886 '0))
      (let ((a112887 (= n a112886)))
        (if a112887
          lst
          (let ((a112888 (cdr lst)))
            (let ((a112889 '1))
              (let ((a112890 (- n a112889))) (drop a112888 a112890))))))))
  (define (foldr proc acc lst)
    (let ((a112891 (null? lst)))
      (if a112891
        acc
        (let ((a112892 (car lst)))
          (let ((a112893 (cdr lst)))
            (let ((a112894 (foldr proc acc a112893)))
              (proc a112892 a112894)))))))
  (define (append lst1 lst2)
    (let ((a112895 (null? lst1)))
      (if a112895
        lst2
        (let ((a112896 (car lst1)))
          (let ((a112897 (cdr lst1)))
            (let ((a112898 (append a112897 lst2))) (cons a112896 a112898)))))))
  (define (hash . lst) (let ((x112899 (apply-prim hash lst))) x112899))
  (define (hash-ref h k) (let ((x112900 (prim hash-ref h k))) x112900))
  (define (hash-set h k v) (let ((x112901 (prim hash-set h k v))) x112901))
  (define (hash-has-key? h k)
    (let ((x112902 (prim hash-has-key? h k))) x112902))
  (define (hash-count h) (let ((x112903 (prim hash-count h))) x112903))
  (define (call)
    (let ((a112904 '100))
      (let ((a112905 '20))
        (let ((a112906 '10))
          (let ((a112907 '5))
            (let ((a112908 '1))
              (> a112904 a112905 a112906 a112907 a112908)))))))
  (define (brouhaha_main) (let ((x112909 (call))) x112909)))
