'((define (+ . lst) (let ((x57229 (apply-prim + lst))) x57229))
  (define (- . lst) (let ((x57230 (apply-prim - lst))) x57230))
  (define (* . lst) (let ((x57231 (apply-prim * lst))) x57231))
  (define (modulo a b) (let ((x57232 (prim modulo a b))) x57232))
  (define (/ . lst) (let ((x57233 (apply-prim / lst))) x57233))
  (define (= . lst) (let ((x57234 (apply-prim = lst))) x57234))
  (define (> . lst) (let ((x57235 (apply-prim > lst))) x57235))
  (define (< . lst) (let ((x57236 (apply-prim < lst))) x57236))
  (define (<= . lst) (let ((x57237 (apply-prim <= lst))) x57237))
  (define (>= . lst) (let ((x57238 (apply-prim >= lst))) x57238))
  (define (null? x) (let ((x57239 (prim null? x))) x57239))
  (define (equal? x y) (let ((x57240 (prim equal? x y))) x57240))
  (define (eq? x y) (let ((x57241 (prim eq? x y))) x57241))
  (define (cons a b) (let ((x57242 (prim cons a b))) x57242))
  (define (car lst) (let ((x57243 (prim car lst))) x57243))
  (define (cdr lst) (let ((x57244 (prim cdr lst))) x57244))
  (define (even? x)
    (let ((a57245 '0))
      (let ((a57246 '2))
        (let ((a57247 (modulo x a57246))) (equal? a57245 a57247)))))
  (define (odd? x)
    (let ((a57248 '1))
      (let ((a57249 '2))
        (let ((a57250 (modulo x a57249))) (equal? a57248 a57250)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a57251 (null? lst)))
      (if a57251
        (let ((x57252 '#f)) x57252)
        (let ((a57253 (car lst)))
          (let ((a57254 (equal? a57253 x)))
            (if a57254
              (let ((x57255 '#t)) x57255)
              (let ((a57256 (cdr lst))) (member? x a57256))))))))
  (define (foldl fun acc lst)
    (let ((a57257 (null? lst)))
      (if a57257
        acc
        (let ((a57258 (car lst)))
          (let ((a57259 (fun a57258 acc)))
            (let ((a57260 (cdr lst))) (foldl fun a57259 a57260)))))))
  (define (reverse-helper lst lst2)
    (let ((a57261 (null? lst)))
      (if a57261
        lst2
        (let ((a57262 (cdr lst)))
          (let ((a57263 (car lst)))
            (let ((a57264 (cons a57263 lst2)))
              (reverse-helper a57262 a57264)))))))
  (define (reverse lst) (let ((a57265 (list))) (reverse-helper lst a57265)))
  (define (take-helper lst n lst2)
    (let ((a57266 '0))
      (let ((a57267 (= n a57266)))
        (if a57267
          (let ((x57268 (reverse lst2))) x57268)
          (let ((a57269 (cdr lst)))
            (let ((a57270 '1))
              (let ((a57271 (- n a57270)))
                (let ((a57272 (car lst)))
                  (let ((a57273 (cons a57272 lst2)))
                    (take-helper a57269 a57271 a57273))))))))))
  (define (take lst n) (let ((a57274 (list))) (take-helper lst n a57274)))
  (define (length lst)
    (let ((a57275 (null? lst)))
      (if a57275
        (let ((x57276 '0)) x57276)
        (let ((a57277 '1))
          (let ((a57278 (cdr lst)))
            (let ((a57279 (length a57278))) (+ a57277 a57279)))))))
  (define (map proc lst)
    (let ((a57280 (null? lst)))
      (if a57280
        (let ((x57281 (list))) x57281)
        (let ((a57282 (car lst)))
          (let ((a57283 (proc a57282)))
            (let ((a57284 (cdr lst)))
              (let ((a57285 (map proc a57284))) (cons a57283 a57285))))))))
  (define (filter op lst)
    (let ((a57286 (null? lst)))
      (if a57286
        (let ((x57287 (list))) x57287)
        (let ((a57288 (car lst)))
          (let ((a57289 (op a57288)))
            (if a57289
              (let ((a57290 (car lst)))
                (let ((a57291 (cdr lst)))
                  (let ((a57292 (filter op a57291))) (cons a57290 a57292))))
              (let ((a57293 (cdr lst))) (filter op a57293))))))))
  (define (drop lst n)
    (let ((a57294 '0))
      (let ((a57295 (= n a57294)))
        (if a57295
          lst
          (let ((a57296 (cdr lst)))
            (let ((a57297 '1))
              (let ((a57298 (- n a57297))) (drop a57296 a57298))))))))
  (define (foldr proc acc lst)
    (let ((a57299 (null? lst)))
      (if a57299
        acc
        (let ((a57300 (car lst)))
          (let ((a57301 (cdr lst)))
            (let ((a57302 (foldr proc acc a57301))) (proc a57300 a57302)))))))
  (define (append lst1 lst2)
    (let ((a57303 (null? lst1)))
      (if a57303
        lst2
        (let ((a57304 (car lst1)))
          (let ((a57305 (cdr lst1)))
            (let ((a57306 (append a57305 lst2))) (cons a57304 a57306)))))))
  (define (hash . lst) (let ((x57307 (apply-prim hash lst))) x57307))
  (define (hash-ref h k) (let ((x57308 (prim hash-ref h k))) x57308))
  (define (hash-set h k v) (let ((x57309 (prim hash-set h k v))) x57309))
  (define (hash-has-key? h k) (let ((x57310 (prim hash-has-key? h k))) x57310))
  (define (hash-count h) (let ((x57311 (prim hash-count h))) x57311))
  (define (call)
    (let ((a57312 '100))
      (let ((a57313 '80))
        (let ((a57314 '10))
          (let ((a57315 '2))
            (let ((a57316 (hash a57312 a57313 a57314 a57315)))
              (let ((a57317 '5)) (hash-has-key? a57316 a57317))))))))
  (define (brouhaha_main) (let ((x57318 (call))) x57318)))
