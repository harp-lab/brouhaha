'((define (+ . lst)
    (let ((kont57319 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57229 (apply-prim + lst))) (kont57319 x57229)))))
  (define (- . lst)
    (let ((kont57321 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57230 (apply-prim - lst))) (kont57321 x57230)))))
  (define (* . lst)
    (let ((kont57323 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57231 (apply-prim * lst))) (kont57323 x57231)))))
  (define (modulo kont57325 a b)
    (let ((x57232 (prim modulo a b))) (kont57325 x57232)))
  (define (/ . lst)
    (let ((kont57326 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57233 (apply-prim / lst))) (kont57326 x57233)))))
  (define (= . lst)
    (let ((kont57328 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57234 (apply-prim = lst))) (kont57328 x57234)))))
  (define (> . lst)
    (let ((kont57330 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57235 (apply-prim > lst))) (kont57330 x57235)))))
  (define (< . lst)
    (let ((kont57332 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57236 (apply-prim < lst))) (kont57332 x57236)))))
  (define (<= . lst)
    (let ((kont57334 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57237 (apply-prim <= lst))) (kont57334 x57237)))))
  (define (>= . lst)
    (let ((kont57336 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57238 (apply-prim >= lst))) (kont57336 x57238)))))
  (define (null? kont57338 x)
    (let ((x57239 (prim null? x))) (kont57338 x57239)))
  (define (equal? kont57339 x y)
    (let ((x57240 (prim equal? x y))) (kont57339 x57240)))
  (define (eq? kont57340 x y)
    (let ((x57241 (prim eq? x y))) (kont57340 x57241)))
  (define (cons kont57341 a b)
    (let ((x57242 (prim cons a b))) (kont57341 x57242)))
  (define (car kont57342 lst)
    (let ((x57243 (prim car lst))) (kont57342 x57243)))
  (define (cdr kont57343 lst)
    (let ((x57244 (prim cdr lst))) (kont57343 x57244)))
  (define (even? kont57344 x)
    (let ((a57245 '0))
      (let ((a57246 '2))
        (let ((f57345 (lambda (a57247) (equal? kont57344 a57245 a57247))))
          (modulo f57345 x a57246)))))
  (define (odd? kont57346 x)
    (let ((a57248 '1))
      (let ((a57249 '2))
        (let ((f57347 (lambda (a57250) (equal? kont57346 a57248 a57250))))
          (modulo f57347 x a57249)))))
  (define (list . x)
    (let ((kont57348 (prim car x))) (let ((x (prim cdr x))) (kont57348 x))))
  (define (member? kont57350 x lst)
    (let ((f57354
           (lambda (a57251)
             (if a57251
               (let ((x57252 '#f)) (kont57350 x57252))
               (let ((f57353
                      (lambda (a57253)
                        (let ((f57352
                               (lambda (a57254)
                                 (if a57254
                                   (let ((x57255 '#t)) (kont57350 x57255))
                                   (let ((f57351
                                          (lambda (a57256)
                                            (member? kont57350 x a57256))))
                                     (cdr f57351 lst))))))
                          (equal? f57352 a57253 x)))))
                 (car f57353 lst))))))
      (null? f57354 lst)))
  (define (foldl kont57355 fun acc lst)
    (let ((f57359
           (lambda (a57257)
             (if a57257
               (kont57355 acc)
               (let ((f57358
                      (lambda (a57258)
                        (let ((f57357
                               (lambda (a57259)
                                 (let ((f57356
                                        (lambda (a57260)
                                          (foldl
                                           kont57355
                                           fun
                                           a57259
                                           a57260))))
                                   (cdr f57356 lst)))))
                          (fun f57357 a57258 acc)))))
                 (car f57358 lst))))))
      (null? f57359 lst)))
  (define (reverse-helper kont57360 lst lst2)
    (let ((f57364
           (lambda (a57261)
             (if a57261
               (kont57360 lst2)
               (let ((f57363
                      (lambda (a57262)
                        (let ((f57362
                               (lambda (a57263)
                                 (let ((f57361
                                        (lambda (a57264)
                                          (reverse-helper
                                           kont57360
                                           a57262
                                           a57264))))
                                   (cons f57361 a57263 lst2)))))
                          (car f57362 lst)))))
                 (cdr f57363 lst))))))
      (null? f57364 lst)))
  (define (reverse kont57365 lst)
    (let ((f57366 (lambda (a57265) (reverse-helper kont57365 lst a57265))))
      (list f57366)))
  (define (take-helper kont57367 lst n lst2)
    (let ((a57266 '0))
      (let ((f57373
             (lambda (a57267)
               (if a57267
                 (let ((f57368 (lambda (x57268) (kont57367 x57268))))
                   (reverse f57368 lst2))
                 (let ((f57372
                        (lambda (a57269)
                          (let ((a57270 '1))
                            (let ((f57371
                                   (lambda (a57271)
                                     (let ((f57370
                                            (lambda (a57272)
                                              (let ((f57369
                                                     (lambda (a57273)
                                                       (take-helper
                                                        kont57367
                                                        a57269
                                                        a57271
                                                        a57273))))
                                                (cons f57369 a57272 lst2)))))
                                       (car f57370 lst)))))
                              (- f57371 n a57270))))))
                   (cdr f57372 lst))))))
        (= f57373 n a57266))))
  (define (take kont57374 lst n)
    (let ((f57375 (lambda (a57274) (take-helper kont57374 lst n a57274))))
      (list f57375)))
  (define (length kont57376 lst)
    (let ((f57379
           (lambda (a57275)
             (if a57275
               (let ((x57276 '0)) (kont57376 x57276))
               (let ((a57277 '1))
                 (let ((f57378
                        (lambda (a57278)
                          (let ((f57377
                                 (lambda (a57279)
                                   (+ kont57376 a57277 a57279))))
                            (length f57377 a57278)))))
                   (cdr f57378 lst)))))))
      (null? f57379 lst)))
  (define (map kont57380 proc lst)
    (let ((f57386
           (lambda (a57280)
             (if a57280
               (let ((f57381 (lambda (x57281) (kont57380 x57281))))
                 (list f57381))
               (let ((f57385
                      (lambda (a57282)
                        (let ((f57384
                               (lambda (a57283)
                                 (let ((f57383
                                        (lambda (a57284)
                                          (let ((f57382
                                                 (lambda (a57285)
                                                   (cons
                                                    kont57380
                                                    a57283
                                                    a57285))))
                                            (map f57382 proc a57284)))))
                                   (cdr f57383 lst)))))
                          (proc f57384 a57282)))))
                 (car f57385 lst))))))
      (null? f57386 lst)))
  (define (filter kont57387 op lst)
    (let ((f57395
           (lambda (a57286)
             (if a57286
               (let ((f57388 (lambda (x57287) (kont57387 x57287))))
                 (list f57388))
               (let ((f57394
                      (lambda (a57288)
                        (let ((f57393
                               (lambda (a57289)
                                 (if a57289
                                   (let ((f57391
                                          (lambda (a57290)
                                            (let ((f57390
                                                   (lambda (a57291)
                                                     (let ((f57389
                                                            (lambda (a57292)
                                                              (cons
                                                               kont57387
                                                               a57290
                                                               a57292))))
                                                       (filter
                                                        f57389
                                                        op
                                                        a57291)))))
                                              (cdr f57390 lst)))))
                                     (car f57391 lst))
                                   (let ((f57392
                                          (lambda (a57293)
                                            (filter kont57387 op a57293))))
                                     (cdr f57392 lst))))))
                          (op f57393 a57288)))))
                 (car f57394 lst))))))
      (null? f57395 lst)))
  (define (drop kont57396 lst n)
    (let ((a57294 '0))
      (let ((f57399
             (lambda (a57295)
               (if a57295
                 (kont57396 lst)
                 (let ((f57398
                        (lambda (a57296)
                          (let ((a57297 '1))
                            (let ((f57397
                                   (lambda (a57298)
                                     (drop kont57396 a57296 a57298))))
                              (- f57397 n a57297))))))
                   (cdr f57398 lst))))))
        (= f57399 n a57294))))
  (define (foldr kont57400 proc acc lst)
    (let ((f57404
           (lambda (a57299)
             (if a57299
               (kont57400 acc)
               (let ((f57403
                      (lambda (a57300)
                        (let ((f57402
                               (lambda (a57301)
                                 (let ((f57401
                                        (lambda (a57302)
                                          (proc kont57400 a57300 a57302))))
                                   (foldr f57401 proc acc a57301)))))
                          (cdr f57402 lst)))))
                 (car f57403 lst))))))
      (null? f57404 lst)))
  (define (append kont57405 lst1 lst2)
    (let ((f57409
           (lambda (a57303)
             (if a57303
               (kont57405 lst2)
               (let ((f57408
                      (lambda (a57304)
                        (let ((f57407
                               (lambda (a57305)
                                 (let ((f57406
                                        (lambda (a57306)
                                          (cons kont57405 a57304 a57306))))
                                   (append f57406 a57305 lst2)))))
                          (cdr f57407 lst1)))))
                 (car f57408 lst1))))))
      (null? f57409 lst1)))
  (define (hash . lst)
    (let ((kont57410 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57307 (apply-prim hash lst))) (kont57410 x57307)))))
  (define (hash-ref kont57412 h k)
    (let ((x57308 (prim hash-ref h k))) (kont57412 x57308)))
  (define (hash-set kont57413 h k v)
    (let ((x57309 (prim hash-set h k v))) (kont57413 x57309)))
  (define (hash-has-key? kont57414 h k)
    (let ((x57310 (prim hash-has-key? h k))) (kont57414 x57310)))
  (define (hash-count kont57415 h)
    (let ((x57311 (prim hash-count h))) (kont57415 x57311)))
  (define (call kont57416)
    (let ((a57312 '100))
      (let ((a57313 '80))
        (let ((a57314 '10))
          (let ((a57315 '2))
            (let ((f57417
                   (lambda (a57316)
                     (let ((a57317 '5))
                       (hash-has-key? kont57416 a57316 a57317)))))
              (hash f57417 a57312 a57313 a57314 a57315)))))))
  (define (brouhaha_main kont57418)
    (let ((f57419 (lambda (x57318) (kont57418 x57318)))) (call f57419))))
