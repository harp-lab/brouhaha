'((define (+ . lst) (let ((x86733 (apply-prim + lst))) x86733))
  (define (- . lst) (let ((x86734 (apply-prim - lst))) x86734))
  (define (* . lst) (let ((x86735 (apply-prim * lst))) x86735))
  (define (modulo a b) (let ((x86736 (prim modulo a b))) x86736))
  (define (/ . lst) (let ((x86737 (apply-prim / lst))) x86737))
  (define (= . lst) (let ((x86738 (apply-prim = lst))) x86738))
  (define (> . lst) (let ((x86739 (apply-prim > lst))) x86739))
  (define (< . lst) (let ((x86740 (apply-prim < lst))) x86740))
  (define (<= . lst) (let ((x86741 (apply-prim <= lst))) x86741))
  (define (>= . lst) (let ((x86742 (apply-prim >= lst))) x86742))
  (define (null? x) (let ((x86743 (prim null? x))) x86743))
  (define (equal? x y) (let ((x86744 (prim equal? x y))) x86744))
  (define (eq? x y) (let ((x86745 (prim eq? x y))) x86745))
  (define (cons a b) (let ((x86746 (prim cons a b))) x86746))
  (define (car lst) (let ((x86747 (prim car lst))) x86747))
  (define (cdr lst) (let ((x86748 (prim cdr lst))) x86748))
  (define (even? x)
    (let ((a86749 '0))
      (let ((a86750 '2))
        (let ((a86751 (modulo x a86750))) (equal? a86749 a86751)))))
  (define (odd? x)
    (let ((a86752 '1))
      (let ((a86753 '2))
        (let ((a86754 (modulo x a86753))) (equal? a86752 a86754)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a86755 (null? lst)))
      (if a86755
        (let ((x86756 '#f)) x86756)
        (let ((a86757 (car lst)))
          (let ((a86758 (equal? a86757 x)))
            (if a86758
              (let ((x86759 '#t)) x86759)
              (let ((a86760 (cdr lst))) (member? x a86760))))))))
  (define (foldl fun acc lst)
    (let ((a86761 (null? lst)))
      (if a86761
        acc
        (let ((a86762 (car lst)))
          (let ((a86763 (fun a86762 acc)))
            (let ((a86764 (cdr lst))) (foldl fun a86763 a86764)))))))
  (define (reverse-helper lst lst2)
    (let ((a86765 (null? lst)))
      (if a86765
        lst2
        (let ((a86766 (cdr lst)))
          (let ((a86767 (car lst)))
            (let ((a86768 (cons a86767 lst2)))
              (reverse-helper a86766 a86768)))))))
  (define (reverse lst) (let ((a86769 (list))) (reverse-helper lst a86769)))
  (define (take-helper lst n lst2)
    (let ((a86770 '0))
      (let ((a86771 (= n a86770)))
        (if a86771
          (let ((x86772 (reverse lst2))) x86772)
          (let ((a86773 (cdr lst)))
            (let ((a86774 '1))
              (let ((a86775 (- n a86774)))
                (let ((a86776 (car lst)))
                  (let ((a86777 (cons a86776 lst2)))
                    (take-helper a86773 a86775 a86777))))))))))
  (define (take lst n) (let ((a86778 (list))) (take-helper lst n a86778)))
  (define (length lst)
    (let ((a86779 (null? lst)))
      (if a86779
        (let ((x86780 '0)) x86780)
        (let ((a86781 '1))
          (let ((a86782 (cdr lst)))
            (let ((a86783 (length a86782))) (+ a86781 a86783)))))))
  (define (map proc lst)
    (let ((a86784 (null? lst)))
      (if a86784
        (let ((x86785 (list))) x86785)
        (let ((a86786 (car lst)))
          (let ((a86787 (proc a86786)))
            (let ((a86788 (cdr lst)))
              (let ((a86789 (map proc a86788))) (cons a86787 a86789))))))))
  (define (filter op lst)
    (let ((a86790 (null? lst)))
      (if a86790
        (let ((x86791 (list))) x86791)
        (let ((a86792 (car lst)))
          (let ((a86793 (op a86792)))
            (if a86793
              (let ((a86794 (car lst)))
                (let ((a86795 (cdr lst)))
                  (let ((a86796 (filter op a86795))) (cons a86794 a86796))))
              (let ((a86797 (cdr lst))) (filter op a86797))))))))
  (define (drop lst n)
    (let ((a86798 '0))
      (let ((a86799 (= n a86798)))
        (if a86799
          lst
          (let ((a86800 (cdr lst)))
            (let ((a86801 '1))
              (let ((a86802 (- n a86801))) (drop a86800 a86802))))))))
  (define (foldr proc acc lst)
    (let ((a86803 (null? lst)))
      (if a86803
        acc
        (let ((a86804 (car lst)))
          (let ((a86805 (cdr lst)))
            (let ((a86806 (foldr proc acc a86805))) (proc a86804 a86806)))))))
  (define (append lst1 lst2)
    (let ((a86807 (null? lst1)))
      (if a86807
        lst2
        (let ((a86808 (car lst1)))
          (let ((a86809 (cdr lst1)))
            (let ((a86810 (append a86809 lst2))) (cons a86808 a86810)))))))
  (define (hash . lst) (let ((x86811 (apply-prim hash lst))) x86811))
  (define (hash-ref h k) (let ((x86812 (prim hash-ref h k))) x86812))
  (define (hash-set h k v) (let ((x86813 (prim hash-set h k v))) x86813))
  (define (hash-has-key? h k) (let ((x86814 (prim hash-has-key? h k))) x86814))
  (define (hash-count h) (let ((x86815 (prim hash-count h))) x86815))
  (define (call)
    (let ((a86816 '28)) (let ((a86817 '8)) (modulo a86816 a86817))))
  (define (brouhaha_main) (let ((x86818 (call))) x86818)))
