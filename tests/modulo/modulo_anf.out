'((define (+ . lst)
    (let ((kont86819 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86733 (apply-prim + lst))) (kont86819 x86733)))))
  (define (- . lst)
    (let ((kont86821 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86734 (apply-prim - lst))) (kont86821 x86734)))))
  (define (* . lst)
    (let ((kont86823 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86735 (apply-prim * lst))) (kont86823 x86735)))))
  (define (modulo kont86825 a b)
    (let ((x86736 (prim modulo a b))) (kont86825 x86736)))
  (define (/ . lst)
    (let ((kont86826 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86737 (apply-prim / lst))) (kont86826 x86737)))))
  (define (= . lst)
    (let ((kont86828 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86738 (apply-prim = lst))) (kont86828 x86738)))))
  (define (> . lst)
    (let ((kont86830 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86739 (apply-prim > lst))) (kont86830 x86739)))))
  (define (< . lst)
    (let ((kont86832 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86740 (apply-prim < lst))) (kont86832 x86740)))))
  (define (<= . lst)
    (let ((kont86834 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86741 (apply-prim <= lst))) (kont86834 x86741)))))
  (define (>= . lst)
    (let ((kont86836 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86742 (apply-prim >= lst))) (kont86836 x86742)))))
  (define (null? kont86838 x)
    (let ((x86743 (prim null? x))) (kont86838 x86743)))
  (define (equal? kont86839 x y)
    (let ((x86744 (prim equal? x y))) (kont86839 x86744)))
  (define (eq? kont86840 x y)
    (let ((x86745 (prim eq? x y))) (kont86840 x86745)))
  (define (cons kont86841 a b)
    (let ((x86746 (prim cons a b))) (kont86841 x86746)))
  (define (car kont86842 lst)
    (let ((x86747 (prim car lst))) (kont86842 x86747)))
  (define (cdr kont86843 lst)
    (let ((x86748 (prim cdr lst))) (kont86843 x86748)))
  (define (even? kont86844 x)
    (let ((a86749 '0))
      (let ((a86750 '2))
        (let ((f86845 (lambda (a86751) (equal? kont86844 a86749 a86751))))
          (modulo f86845 x a86750)))))
  (define (odd? kont86846 x)
    (let ((a86752 '1))
      (let ((a86753 '2))
        (let ((f86847 (lambda (a86754) (equal? kont86846 a86752 a86754))))
          (modulo f86847 x a86753)))))
  (define (list . x)
    (let ((kont86848 (prim car x))) (let ((x (prim cdr x))) (kont86848 x))))
  (define (member? kont86850 x lst)
    (let ((f86854
           (lambda (a86755)
             (if a86755
               (let ((x86756 '#f)) (kont86850 x86756))
               (let ((f86853
                      (lambda (a86757)
                        (let ((f86852
                               (lambda (a86758)
                                 (if a86758
                                   (let ((x86759 '#t)) (kont86850 x86759))
                                   (let ((f86851
                                          (lambda (a86760)
                                            (member? kont86850 x a86760))))
                                     (cdr f86851 lst))))))
                          (equal? f86852 a86757 x)))))
                 (car f86853 lst))))))
      (null? f86854 lst)))
  (define (foldl kont86855 fun acc lst)
    (let ((f86859
           (lambda (a86761)
             (if a86761
               (kont86855 acc)
               (let ((f86858
                      (lambda (a86762)
                        (let ((f86857
                               (lambda (a86763)
                                 (let ((f86856
                                        (lambda (a86764)
                                          (foldl
                                           kont86855
                                           fun
                                           a86763
                                           a86764))))
                                   (cdr f86856 lst)))))
                          (fun f86857 a86762 acc)))))
                 (car f86858 lst))))))
      (null? f86859 lst)))
  (define (reverse-helper kont86860 lst lst2)
    (let ((f86864
           (lambda (a86765)
             (if a86765
               (kont86860 lst2)
               (let ((f86863
                      (lambda (a86766)
                        (let ((f86862
                               (lambda (a86767)
                                 (let ((f86861
                                        (lambda (a86768)
                                          (reverse-helper
                                           kont86860
                                           a86766
                                           a86768))))
                                   (cons f86861 a86767 lst2)))))
                          (car f86862 lst)))))
                 (cdr f86863 lst))))))
      (null? f86864 lst)))
  (define (reverse kont86865 lst)
    (let ((f86866 (lambda (a86769) (reverse-helper kont86865 lst a86769))))
      (list f86866)))
  (define (take-helper kont86867 lst n lst2)
    (let ((a86770 '0))
      (let ((f86873
             (lambda (a86771)
               (if a86771
                 (let ((f86868 (lambda (x86772) (kont86867 x86772))))
                   (reverse f86868 lst2))
                 (let ((f86872
                        (lambda (a86773)
                          (let ((a86774 '1))
                            (let ((f86871
                                   (lambda (a86775)
                                     (let ((f86870
                                            (lambda (a86776)
                                              (let ((f86869
                                                     (lambda (a86777)
                                                       (take-helper
                                                        kont86867
                                                        a86773
                                                        a86775
                                                        a86777))))
                                                (cons f86869 a86776 lst2)))))
                                       (car f86870 lst)))))
                              (- f86871 n a86774))))))
                   (cdr f86872 lst))))))
        (= f86873 n a86770))))
  (define (take kont86874 lst n)
    (let ((f86875 (lambda (a86778) (take-helper kont86874 lst n a86778))))
      (list f86875)))
  (define (length kont86876 lst)
    (let ((f86879
           (lambda (a86779)
             (if a86779
               (let ((x86780 '0)) (kont86876 x86780))
               (let ((a86781 '1))
                 (let ((f86878
                        (lambda (a86782)
                          (let ((f86877
                                 (lambda (a86783)
                                   (+ kont86876 a86781 a86783))))
                            (length f86877 a86782)))))
                   (cdr f86878 lst)))))))
      (null? f86879 lst)))
  (define (map kont86880 proc lst)
    (let ((f86886
           (lambda (a86784)
             (if a86784
               (let ((f86881 (lambda (x86785) (kont86880 x86785))))
                 (list f86881))
               (let ((f86885
                      (lambda (a86786)
                        (let ((f86884
                               (lambda (a86787)
                                 (let ((f86883
                                        (lambda (a86788)
                                          (let ((f86882
                                                 (lambda (a86789)
                                                   (cons
                                                    kont86880
                                                    a86787
                                                    a86789))))
                                            (map f86882 proc a86788)))))
                                   (cdr f86883 lst)))))
                          (proc f86884 a86786)))))
                 (car f86885 lst))))))
      (null? f86886 lst)))
  (define (filter kont86887 op lst)
    (let ((f86895
           (lambda (a86790)
             (if a86790
               (let ((f86888 (lambda (x86791) (kont86887 x86791))))
                 (list f86888))
               (let ((f86894
                      (lambda (a86792)
                        (let ((f86893
                               (lambda (a86793)
                                 (if a86793
                                   (let ((f86891
                                          (lambda (a86794)
                                            (let ((f86890
                                                   (lambda (a86795)
                                                     (let ((f86889
                                                            (lambda (a86796)
                                                              (cons
                                                               kont86887
                                                               a86794
                                                               a86796))))
                                                       (filter
                                                        f86889
                                                        op
                                                        a86795)))))
                                              (cdr f86890 lst)))))
                                     (car f86891 lst))
                                   (let ((f86892
                                          (lambda (a86797)
                                            (filter kont86887 op a86797))))
                                     (cdr f86892 lst))))))
                          (op f86893 a86792)))))
                 (car f86894 lst))))))
      (null? f86895 lst)))
  (define (drop kont86896 lst n)
    (let ((a86798 '0))
      (let ((f86899
             (lambda (a86799)
               (if a86799
                 (kont86896 lst)
                 (let ((f86898
                        (lambda (a86800)
                          (let ((a86801 '1))
                            (let ((f86897
                                   (lambda (a86802)
                                     (drop kont86896 a86800 a86802))))
                              (- f86897 n a86801))))))
                   (cdr f86898 lst))))))
        (= f86899 n a86798))))
  (define (foldr kont86900 proc acc lst)
    (let ((f86904
           (lambda (a86803)
             (if a86803
               (kont86900 acc)
               (let ((f86903
                      (lambda (a86804)
                        (let ((f86902
                               (lambda (a86805)
                                 (let ((f86901
                                        (lambda (a86806)
                                          (proc kont86900 a86804 a86806))))
                                   (foldr f86901 proc acc a86805)))))
                          (cdr f86902 lst)))))
                 (car f86903 lst))))))
      (null? f86904 lst)))
  (define (append kont86905 lst1 lst2)
    (let ((f86909
           (lambda (a86807)
             (if a86807
               (kont86905 lst2)
               (let ((f86908
                      (lambda (a86808)
                        (let ((f86907
                               (lambda (a86809)
                                 (let ((f86906
                                        (lambda (a86810)
                                          (cons kont86905 a86808 a86810))))
                                   (append f86906 a86809 lst2)))))
                          (cdr f86907 lst1)))))
                 (car f86908 lst1))))))
      (null? f86909 lst1)))
  (define (hash . lst)
    (let ((kont86910 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x86811 (apply-prim hash lst))) (kont86910 x86811)))))
  (define (hash-ref kont86912 h k)
    (let ((x86812 (prim hash-ref h k))) (kont86912 x86812)))
  (define (hash-set kont86913 h k v)
    (let ((x86813 (prim hash-set h k v))) (kont86913 x86813)))
  (define (hash-has-key? kont86914 h k)
    (let ((x86814 (prim hash-has-key? h k))) (kont86914 x86814)))
  (define (hash-count kont86915 h)
    (let ((x86815 (prim hash-count h))) (kont86915 x86815)))
  (define (call kont86916)
    (let ((a86816 '28)) (let ((a86817 '8)) (modulo kont86916 a86816 a86817))))
  (define (brouhaha_main kont86917)
    (let ((f86918 (lambda (x86818) (kont86917 x86818)))) (call f86918))))
