'((define (+ . lst)
    (let ((kont8681986919 (prim car lst)))
      (let ((lst86920 (prim cdr lst)))
        (let ((x8673386921 (apply-prim + lst86920)))
          (kont8681986919 x8673386921)))))
  (define (- . lst)
    (let ((kont8682186922 (prim car lst)))
      (let ((lst86923 (prim cdr lst)))
        (let ((x8673486924 (apply-prim - lst86923)))
          (kont8682186922 x8673486924)))))
  (define (* . lst)
    (let ((kont8682386925 (prim car lst)))
      (let ((lst86926 (prim cdr lst)))
        (let ((x8673586927 (apply-prim * lst86926)))
          (kont8682386925 x8673586927)))))
  (define (modulo kont86825 a b)
    (let ((x8673686928 (prim modulo a b))) (kont86825 x8673686928)))
  (define (/ . lst)
    (let ((kont8682686929 (prim car lst)))
      (let ((lst86930 (prim cdr lst)))
        (let ((x8673786931 (apply-prim / lst86930)))
          (kont8682686929 x8673786931)))))
  (define (= . lst)
    (let ((kont8682886932 (prim car lst)))
      (let ((lst86933 (prim cdr lst)))
        (let ((x8673886934 (apply-prim = lst86933)))
          (kont8682886932 x8673886934)))))
  (define (> . lst)
    (let ((kont8683086935 (prim car lst)))
      (let ((lst86936 (prim cdr lst)))
        (let ((x8673986937 (apply-prim > lst86936)))
          (kont8683086935 x8673986937)))))
  (define (< . lst)
    (let ((kont8683286938 (prim car lst)))
      (let ((lst86939 (prim cdr lst)))
        (let ((x8674086940 (apply-prim < lst86939)))
          (kont8683286938 x8674086940)))))
  (define (<= . lst)
    (let ((kont8683486941 (prim car lst)))
      (let ((lst86942 (prim cdr lst)))
        (let ((x8674186943 (apply-prim <= lst86942)))
          (kont8683486941 x8674186943)))))
  (define (>= . lst)
    (let ((kont8683686944 (prim car lst)))
      (let ((lst86945 (prim cdr lst)))
        (let ((x8674286946 (apply-prim >= lst86945)))
          (kont8683686944 x8674286946)))))
  (define (null? kont86838 x)
    (let ((x8674386947 (prim null? x))) (kont86838 x8674386947)))
  (define (equal? kont86839 x y)
    (let ((x8674486948 (prim equal? x y))) (kont86839 x8674486948)))
  (define (eq? kont86840 x y)
    (let ((x8674586949 (prim eq? x y))) (kont86840 x8674586949)))
  (define (cons kont86841 a b)
    (let ((x8674686950 (prim cons a b))) (kont86841 x8674686950)))
  (define (car kont86842 lst)
    (let ((x8674786951 (prim car lst))) (kont86842 x8674786951)))
  (define (cdr kont86843 lst)
    (let ((x8674886952 (prim cdr lst))) (kont86843 x8674886952)))
  (define (even? kont86844 x)
    (let ((a8674986953 '0))
      (let ((a8675086954 '2))
        (let ((f8684586955
               (lambda (a8675186956)
                 (equal? kont86844 a8674986953 a8675186956))))
          (modulo f8684586955 x a8675086954)))))
  (define (odd? kont86846 x)
    (let ((a8675286957 '1))
      (let ((a8675386958 '2))
        (let ((f8684786959
               (lambda (a8675486960)
                 (equal? kont86846 a8675286957 a8675486960))))
          (modulo f8684786959 x a8675386958)))))
  (define (list . x)
    (let ((kont8684886961 (prim car x)))
      (let ((x86962 (prim cdr x))) (kont8684886961 x86962))))
  (define (member? kont86850 x lst)
    (let ((f8685486963
           (lambda (a8675586964)
             (if a8675586964
               (let ((x8675686965 '#f)) (kont86850 x8675686965))
               (let ((f8685386966
                      (lambda (a8675786967)
                        (let ((f8685286968
                               (lambda (a8675886969)
                                 (if a8675886969
                                   (let ((x8675986970 '#t))
                                     (kont86850 x8675986970))
                                   (let ((f8685186971
                                          (lambda (a8676086972)
                                            (member?
                                             kont86850
                                             x
                                             a8676086972))))
                                     (cdr f8685186971 lst))))))
                          (equal? f8685286968 a8675786967 x)))))
                 (car f8685386966 lst))))))
      (null? f8685486963 lst)))
  (define (foldl kont86855 fun acc lst)
    (let ((f8685986973
           (lambda (a8676186974)
             (if a8676186974
               (kont86855 acc)
               (let ((f8685886975
                      (lambda (a8676286976)
                        (let ((f8685786977
                               (lambda (a8676386978)
                                 (let ((f8685686979
                                        (lambda (a8676486980)
                                          (foldl
                                           kont86855
                                           fun
                                           a8676386978
                                           a8676486980))))
                                   (cdr f8685686979 lst)))))
                          (fun f8685786977 a8676286976 acc)))))
                 (car f8685886975 lst))))))
      (null? f8685986973 lst)))
  (define (reverse-helper kont86860 lst lst2)
    (let ((f8686486981
           (lambda (a8676586982)
             (if a8676586982
               (kont86860 lst2)
               (let ((f8686386983
                      (lambda (a8676686984)
                        (let ((f8686286985
                               (lambda (a8676786986)
                                 (let ((f8686186987
                                        (lambda (a8676886988)
                                          (reverse-helper
                                           kont86860
                                           a8676686984
                                           a8676886988))))
                                   (cons f8686186987 a8676786986 lst2)))))
                          (car f8686286985 lst)))))
                 (cdr f8686386983 lst))))))
      (null? f8686486981 lst)))
  (define (reverse kont86865 lst)
    (let ((f8686686989
           (lambda (a8676986990) (reverse-helper kont86865 lst a8676986990))))
      (list f8686686989)))
  (define (take-helper kont86867 lst n lst2)
    (let ((a8677086991 '0))
      (let ((f8687386992
             (lambda (a8677186993)
               (if a8677186993
                 (let ((f8686886994
                        (lambda (x8677286995) (kont86867 x8677286995))))
                   (reverse f8686886994 lst2))
                 (let ((f8687286996
                        (lambda (a8677386997)
                          (let ((a8677486998 '1))
                            (let ((f8687186999
                                   (lambda (a8677587000)
                                     (let ((f8687087001
                                            (lambda (a8677687002)
                                              (let ((f8686987003
                                                     (lambda (a8677787004)
                                                       (take-helper
                                                        kont86867
                                                        a8677386997
                                                        a8677587000
                                                        a8677787004))))
                                                (cons
                                                 f8686987003
                                                 a8677687002
                                                 lst2)))))
                                       (car f8687087001 lst)))))
                              (- f8687186999 n a8677486998))))))
                   (cdr f8687286996 lst))))))
        (= f8687386992 n a8677086991))))
  (define (take kont86874 lst n)
    (let ((f8687587005
           (lambda (a8677887006) (take-helper kont86874 lst n a8677887006))))
      (list f8687587005)))
  (define (length kont86876 lst)
    (let ((f8687987007
           (lambda (a8677987008)
             (if a8677987008
               (let ((x8678087009 '0)) (kont86876 x8678087009))
               (let ((a8678187010 '1))
                 (let ((f8687887011
                        (lambda (a8678287012)
                          (let ((f8687787013
                                 (lambda (a8678387014)
                                   (+ kont86876 a8678187010 a8678387014))))
                            (length f8687787013 a8678287012)))))
                   (cdr f8687887011 lst)))))))
      (null? f8687987007 lst)))
  (define (map kont86880 proc lst)
    (let ((f8688687015
           (lambda (a8678487016)
             (if a8678487016
               (let ((f8688187017
                      (lambda (x8678587018) (kont86880 x8678587018))))
                 (list f8688187017))
               (let ((f8688587019
                      (lambda (a8678687020)
                        (let ((f8688487021
                               (lambda (a8678787022)
                                 (let ((f8688387023
                                        (lambda (a8678887024)
                                          (let ((f8688287025
                                                 (lambda (a8678987026)
                                                   (cons
                                                    kont86880
                                                    a8678787022
                                                    a8678987026))))
                                            (map
                                             f8688287025
                                             proc
                                             a8678887024)))))
                                   (cdr f8688387023 lst)))))
                          (proc f8688487021 a8678687020)))))
                 (car f8688587019 lst))))))
      (null? f8688687015 lst)))
  (define (filter kont86887 op lst)
    (let ((f8689587027
           (lambda (a8679087028)
             (if a8679087028
               (let ((f8688887029
                      (lambda (x8679187030) (kont86887 x8679187030))))
                 (list f8688887029))
               (let ((f8689487031
                      (lambda (a8679287032)
                        (let ((f8689387033
                               (lambda (a8679387034)
                                 (if a8679387034
                                   (let ((f8689187035
                                          (lambda (a8679487036)
                                            (let ((f8689087037
                                                   (lambda (a8679587038)
                                                     (let ((f8688987039
                                                            (lambda (a8679687040)
                                                              (cons
                                                               kont86887
                                                               a8679487036
                                                               a8679687040))))
                                                       (filter
                                                        f8688987039
                                                        op
                                                        a8679587038)))))
                                              (cdr f8689087037 lst)))))
                                     (car f8689187035 lst))
                                   (let ((f8689287041
                                          (lambda (a8679787042)
                                            (filter
                                             kont86887
                                             op
                                             a8679787042))))
                                     (cdr f8689287041 lst))))))
                          (op f8689387033 a8679287032)))))
                 (car f8689487031 lst))))))
      (null? f8689587027 lst)))
  (define (drop kont86896 lst n)
    (let ((a8679887043 '0))
      (let ((f8689987044
             (lambda (a8679987045)
               (if a8679987045
                 (kont86896 lst)
                 (let ((f8689887046
                        (lambda (a8680087047)
                          (let ((a8680187048 '1))
                            (let ((f8689787049
                                   (lambda (a8680287050)
                                     (drop
                                      kont86896
                                      a8680087047
                                      a8680287050))))
                              (- f8689787049 n a8680187048))))))
                   (cdr f8689887046 lst))))))
        (= f8689987044 n a8679887043))))
  (define (foldr kont86900 proc acc lst)
    (let ((f8690487051
           (lambda (a8680387052)
             (if a8680387052
               (kont86900 acc)
               (let ((f8690387053
                      (lambda (a8680487054)
                        (let ((f8690287055
                               (lambda (a8680587056)
                                 (let ((f8690187057
                                        (lambda (a8680687058)
                                          (proc
                                           kont86900
                                           a8680487054
                                           a8680687058))))
                                   (foldr f8690187057 proc acc a8680587056)))))
                          (cdr f8690287055 lst)))))
                 (car f8690387053 lst))))))
      (null? f8690487051 lst)))
  (define (append kont86905 lst1 lst2)
    (let ((f8690987059
           (lambda (a8680787060)
             (if a8680787060
               (kont86905 lst2)
               (let ((f8690887061
                      (lambda (a8680887062)
                        (let ((f8690787063
                               (lambda (a8680987064)
                                 (let ((f8690687065
                                        (lambda (a8681087066)
                                          (cons
                                           kont86905
                                           a8680887062
                                           a8681087066))))
                                   (append f8690687065 a8680987064 lst2)))))
                          (cdr f8690787063 lst1)))))
                 (car f8690887061 lst1))))))
      (null? f8690987059 lst1)))
  (define (hash . lst)
    (let ((kont8691087067 (prim car lst)))
      (let ((lst87068 (prim cdr lst)))
        (let ((x8681187069 (apply-prim hash lst87068)))
          (kont8691087067 x8681187069)))))
  (define (hash-ref kont86912 h k)
    (let ((x8681287070 (prim hash-ref h k))) (kont86912 x8681287070)))
  (define (hash-set kont86913 h k v)
    (let ((x8681387071 (prim hash-set h k v))) (kont86913 x8681387071)))
  (define (hash-has-key? kont86914 h k)
    (let ((x8681487072 (prim hash-has-key? h k))) (kont86914 x8681487072)))
  (define (hash-count kont86915 h)
    (let ((x8681587073 (prim hash-count h))) (kont86915 x8681587073)))
  (define (call kont86916)
    (let ((a8681687074 '28))
      (let ((a8681787075 '8)) (modulo kont86916 a8681687074 a8681787075))))
  (define (brouhaha_main kont86917)
    (let ((f8691887076 (lambda (x8681887077) (kont86917 x8681887077))))
      (call f8691887076))))
