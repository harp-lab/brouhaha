'((define (+ . lst)
    (let ((kont82640 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82554 (apply-prim + lst))) (kont82640 x82554)))))
  (define (- . lst)
    (let ((kont82642 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82555 (apply-prim - lst))) (kont82642 x82555)))))
  (define (* . lst)
    (let ((kont82644 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82556 (apply-prim * lst))) (kont82644 x82556)))))
  (define (modulo kont82646 a b)
    (let ((x82557 (prim modulo a b))) (kont82646 x82557)))
  (define (/ . lst)
    (let ((kont82647 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82558 (apply-prim / lst))) (kont82647 x82558)))))
  (define (= . lst)
    (let ((kont82649 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82559 (apply-prim = lst))) (kont82649 x82559)))))
  (define (> . lst)
    (let ((kont82651 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82560 (apply-prim > lst))) (kont82651 x82560)))))
  (define (< . lst)
    (let ((kont82653 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82561 (apply-prim < lst))) (kont82653 x82561)))))
  (define (<= . lst)
    (let ((kont82655 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82562 (apply-prim <= lst))) (kont82655 x82562)))))
  (define (>= . lst)
    (let ((kont82657 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82563 (apply-prim >= lst))) (kont82657 x82563)))))
  (define (null? kont82659 x)
    (let ((x82564 (prim null? x))) (kont82659 x82564)))
  (define (equal? kont82660 x y)
    (let ((x82565 (prim equal? x y))) (kont82660 x82565)))
  (define (eq? kont82661 x y)
    (let ((x82566 (prim eq? x y))) (kont82661 x82566)))
  (define (cons kont82662 a b)
    (let ((x82567 (prim cons a b))) (kont82662 x82567)))
  (define (car kont82663 lst)
    (let ((x82568 (prim car lst))) (kont82663 x82568)))
  (define (cdr kont82664 lst)
    (let ((x82569 (prim cdr lst))) (kont82664 x82569)))
  (define (even? kont82665 x)
    (let ((a82570 '0))
      (let ((a82571 '2))
        (let ((f82666 (lambda (a82572) (equal? kont82665 a82570 a82572))))
          (modulo f82666 x a82571)))))
  (define (odd? kont82667 x)
    (let ((a82573 '1))
      (let ((a82574 '2))
        (let ((f82668 (lambda (a82575) (equal? kont82667 a82573 a82575))))
          (modulo f82668 x a82574)))))
  (define (list . x)
    (let ((kont82669 (prim car x))) (let ((x (prim cdr x))) (kont82669 x))))
  (define (member? kont82671 x lst)
    (let ((f82675
           (lambda (a82576)
             (if a82576
               (let ((x82577 '#f)) (kont82671 x82577))
               (let ((f82674
                      (lambda (a82578)
                        (let ((f82673
                               (lambda (a82579)
                                 (if a82579
                                   (let ((x82580 '#t)) (kont82671 x82580))
                                   (let ((f82672
                                          (lambda (a82581)
                                            (member? kont82671 x a82581))))
                                     (cdr f82672 lst))))))
                          (equal? f82673 a82578 x)))))
                 (car f82674 lst))))))
      (null? f82675 lst)))
  (define (foldl kont82676 fun acc lst)
    (let ((f82680
           (lambda (a82582)
             (if a82582
               (kont82676 acc)
               (let ((f82679
                      (lambda (a82583)
                        (let ((f82678
                               (lambda (a82584)
                                 (let ((f82677
                                        (lambda (a82585)
                                          (foldl
                                           kont82676
                                           fun
                                           a82584
                                           a82585))))
                                   (cdr f82677 lst)))))
                          (fun f82678 a82583 acc)))))
                 (car f82679 lst))))))
      (null? f82680 lst)))
  (define (reverse-helper kont82681 lst lst2)
    (let ((f82685
           (lambda (a82586)
             (if a82586
               (kont82681 lst2)
               (let ((f82684
                      (lambda (a82587)
                        (let ((f82683
                               (lambda (a82588)
                                 (let ((f82682
                                        (lambda (a82589)
                                          (reverse-helper
                                           kont82681
                                           a82587
                                           a82589))))
                                   (cons f82682 a82588 lst2)))))
                          (car f82683 lst)))))
                 (cdr f82684 lst))))))
      (null? f82685 lst)))
  (define (reverse kont82686 lst)
    (let ((f82687 (lambda (a82590) (reverse-helper kont82686 lst a82590))))
      (list f82687)))
  (define (take-helper kont82688 lst n lst2)
    (let ((a82591 '0))
      (let ((f82694
             (lambda (a82592)
               (if a82592
                 (let ((f82689 (lambda (x82593) (kont82688 x82593))))
                   (reverse f82689 lst2))
                 (let ((f82693
                        (lambda (a82594)
                          (let ((a82595 '1))
                            (let ((f82692
                                   (lambda (a82596)
                                     (let ((f82691
                                            (lambda (a82597)
                                              (let ((f82690
                                                     (lambda (a82598)
                                                       (take-helper
                                                        kont82688
                                                        a82594
                                                        a82596
                                                        a82598))))
                                                (cons f82690 a82597 lst2)))))
                                       (car f82691 lst)))))
                              (- f82692 n a82595))))))
                   (cdr f82693 lst))))))
        (= f82694 n a82591))))
  (define (take kont82695 lst n)
    (let ((f82696 (lambda (a82599) (take-helper kont82695 lst n a82599))))
      (list f82696)))
  (define (length kont82697 lst)
    (let ((f82700
           (lambda (a82600)
             (if a82600
               (let ((x82601 '0)) (kont82697 x82601))
               (let ((a82602 '1))
                 (let ((f82699
                        (lambda (a82603)
                          (let ((f82698
                                 (lambda (a82604)
                                   (+ kont82697 a82602 a82604))))
                            (length f82698 a82603)))))
                   (cdr f82699 lst)))))))
      (null? f82700 lst)))
  (define (map kont82701 proc lst)
    (let ((f82707
           (lambda (a82605)
             (if a82605
               (let ((f82702 (lambda (x82606) (kont82701 x82606))))
                 (list f82702))
               (let ((f82706
                      (lambda (a82607)
                        (let ((f82705
                               (lambda (a82608)
                                 (let ((f82704
                                        (lambda (a82609)
                                          (let ((f82703
                                                 (lambda (a82610)
                                                   (cons
                                                    kont82701
                                                    a82608
                                                    a82610))))
                                            (map f82703 proc a82609)))))
                                   (cdr f82704 lst)))))
                          (proc f82705 a82607)))))
                 (car f82706 lst))))))
      (null? f82707 lst)))
  (define (filter kont82708 op lst)
    (let ((f82716
           (lambda (a82611)
             (if a82611
               (let ((f82709 (lambda (x82612) (kont82708 x82612))))
                 (list f82709))
               (let ((f82715
                      (lambda (a82613)
                        (let ((f82714
                               (lambda (a82614)
                                 (if a82614
                                   (let ((f82712
                                          (lambda (a82615)
                                            (let ((f82711
                                                   (lambda (a82616)
                                                     (let ((f82710
                                                            (lambda (a82617)
                                                              (cons
                                                               kont82708
                                                               a82615
                                                               a82617))))
                                                       (filter
                                                        f82710
                                                        op
                                                        a82616)))))
                                              (cdr f82711 lst)))))
                                     (car f82712 lst))
                                   (let ((f82713
                                          (lambda (a82618)
                                            (filter kont82708 op a82618))))
                                     (cdr f82713 lst))))))
                          (op f82714 a82613)))))
                 (car f82715 lst))))))
      (null? f82716 lst)))
  (define (drop kont82717 lst n)
    (let ((a82619 '0))
      (let ((f82720
             (lambda (a82620)
               (if a82620
                 (kont82717 lst)
                 (let ((f82719
                        (lambda (a82621)
                          (let ((a82622 '1))
                            (let ((f82718
                                   (lambda (a82623)
                                     (drop kont82717 a82621 a82623))))
                              (- f82718 n a82622))))))
                   (cdr f82719 lst))))))
        (= f82720 n a82619))))
  (define (foldr kont82721 proc acc lst)
    (let ((f82725
           (lambda (a82624)
             (if a82624
               (kont82721 acc)
               (let ((f82724
                      (lambda (a82625)
                        (let ((f82723
                               (lambda (a82626)
                                 (let ((f82722
                                        (lambda (a82627)
                                          (proc kont82721 a82625 a82627))))
                                   (foldr f82722 proc acc a82626)))))
                          (cdr f82723 lst)))))
                 (car f82724 lst))))))
      (null? f82725 lst)))
  (define (append kont82726 lst1 lst2)
    (let ((f82730
           (lambda (a82628)
             (if a82628
               (kont82726 lst2)
               (let ((f82729
                      (lambda (a82629)
                        (let ((f82728
                               (lambda (a82630)
                                 (let ((f82727
                                        (lambda (a82631)
                                          (cons kont82726 a82629 a82631))))
                                   (append f82727 a82630 lst2)))))
                          (cdr f82728 lst1)))))
                 (car f82729 lst1))))))
      (null? f82730 lst1)))
  (define (hash . lst)
    (let ((kont82731 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82632 (apply-prim hash lst))) (kont82731 x82632)))))
  (define (hash-ref kont82733 h k)
    (let ((x82633 (prim hash-ref h k))) (kont82733 x82633)))
  (define (hash-set kont82734 h k v)
    (let ((x82634 (prim hash-set h k v))) (kont82734 x82634)))
  (define (hash-has-key? kont82735 h k)
    (let ((x82635 (prim hash-has-key? h k))) (kont82735 x82635)))
  (define (hash-count kont82736 h)
    (let ((x82636 (prim hash-count h))) (kont82736 x82636)))
  (define (call kont82737)
    (let ((a82637 '28)) (let ((a82638 '8)) (modulo kont82737 a82637 a82638))))
  (define (brouhaha_main kont82738)
    (let ((f82739 (lambda (x82639) (kont82738 x82639)))) (call f82739))))
