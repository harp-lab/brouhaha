'((define (+ . lst) (let ((x82554 (apply-prim + lst))) x82554))
  (define (- . lst) (let ((x82555 (apply-prim - lst))) x82555))
  (define (* . lst) (let ((x82556 (apply-prim * lst))) x82556))
  (define (modulo a b) (let ((x82557 (prim modulo a b))) x82557))
  (define (/ . lst) (let ((x82558 (apply-prim / lst))) x82558))
  (define (= . lst) (let ((x82559 (apply-prim = lst))) x82559))
  (define (> . lst) (let ((x82560 (apply-prim > lst))) x82560))
  (define (< . lst) (let ((x82561 (apply-prim < lst))) x82561))
  (define (<= . lst) (let ((x82562 (apply-prim <= lst))) x82562))
  (define (>= . lst) (let ((x82563 (apply-prim >= lst))) x82563))
  (define (null? x) (let ((x82564 (prim null? x))) x82564))
  (define (equal? x y) (let ((x82565 (prim equal? x y))) x82565))
  (define (eq? x y) (let ((x82566 (prim eq? x y))) x82566))
  (define (cons a b) (let ((x82567 (prim cons a b))) x82567))
  (define (car lst) (let ((x82568 (prim car lst))) x82568))
  (define (cdr lst) (let ((x82569 (prim cdr lst))) x82569))
  (define (even? x)
    (let ((a82570 '0))
      (let ((a82571 '2))
        (let ((a82572 (modulo x a82571))) (equal? a82570 a82572)))))
  (define (odd? x)
    (let ((a82573 '1))
      (let ((a82574 '2))
        (let ((a82575 (modulo x a82574))) (equal? a82573 a82575)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a82576 (null? lst)))
      (if a82576
        (let ((x82577 '#f)) x82577)
        (let ((a82578 (car lst)))
          (let ((a82579 (equal? a82578 x)))
            (if a82579
              (let ((x82580 '#t)) x82580)
              (let ((a82581 (cdr lst))) (member? x a82581))))))))
  (define (foldl fun acc lst)
    (let ((a82582 (null? lst)))
      (if a82582
        acc
        (let ((a82583 (car lst)))
          (let ((a82584 (fun a82583 acc)))
            (let ((a82585 (cdr lst))) (foldl fun a82584 a82585)))))))
  (define (reverse-helper lst lst2)
    (let ((a82586 (null? lst)))
      (if a82586
        lst2
        (let ((a82587 (cdr lst)))
          (let ((a82588 (car lst)))
            (let ((a82589 (cons a82588 lst2)))
              (reverse-helper a82587 a82589)))))))
  (define (reverse lst) (let ((a82590 (list))) (reverse-helper lst a82590)))
  (define (take-helper lst n lst2)
    (let ((a82591 '0))
      (let ((a82592 (= n a82591)))
        (if a82592
          (let ((x82593 (reverse lst2))) x82593)
          (let ((a82594 (cdr lst)))
            (let ((a82595 '1))
              (let ((a82596 (- n a82595)))
                (let ((a82597 (car lst)))
                  (let ((a82598 (cons a82597 lst2)))
                    (take-helper a82594 a82596 a82598))))))))))
  (define (take lst n) (let ((a82599 (list))) (take-helper lst n a82599)))
  (define (length lst)
    (let ((a82600 (null? lst)))
      (if a82600
        (let ((x82601 '0)) x82601)
        (let ((a82602 '1))
          (let ((a82603 (cdr lst)))
            (let ((a82604 (length a82603))) (+ a82602 a82604)))))))
  (define (map proc lst)
    (let ((a82605 (null? lst)))
      (if a82605
        (let ((x82606 (list))) x82606)
        (let ((a82607 (car lst)))
          (let ((a82608 (proc a82607)))
            (let ((a82609 (cdr lst)))
              (let ((a82610 (map proc a82609))) (cons a82608 a82610))))))))
  (define (filter op lst)
    (let ((a82611 (null? lst)))
      (if a82611
        (let ((x82612 (list))) x82612)
        (let ((a82613 (car lst)))
          (let ((a82614 (op a82613)))
            (if a82614
              (let ((a82615 (car lst)))
                (let ((a82616 (cdr lst)))
                  (let ((a82617 (filter op a82616))) (cons a82615 a82617))))
              (let ((a82618 (cdr lst))) (filter op a82618))))))))
  (define (drop lst n)
    (let ((a82619 '0))
      (let ((a82620 (= n a82619)))
        (if a82620
          lst
          (let ((a82621 (cdr lst)))
            (let ((a82622 '1))
              (let ((a82623 (- n a82622))) (drop a82621 a82623))))))))
  (define (foldr proc acc lst)
    (let ((a82624 (null? lst)))
      (if a82624
        acc
        (let ((a82625 (car lst)))
          (let ((a82626 (cdr lst)))
            (let ((a82627 (foldr proc acc a82626))) (proc a82625 a82627)))))))
  (define (append lst1 lst2)
    (let ((a82628 (null? lst1)))
      (if a82628
        lst2
        (let ((a82629 (car lst1)))
          (let ((a82630 (cdr lst1)))
            (let ((a82631 (append a82630 lst2))) (cons a82629 a82631)))))))
  (define (hash . lst) (let ((x82632 (apply-prim hash lst))) x82632))
  (define (hash-ref h k) (let ((x82633 (prim hash-ref h k))) x82633))
  (define (hash-set h k v) (let ((x82634 (prim hash-set h k v))) x82634))
  (define (hash-has-key? h k) (let ((x82635 (prim hash-has-key? h k))) x82635))
  (define (hash-count h) (let ((x82636 (prim hash-count h))) x82636))
  (define (call)
    (let ((a82637 '28)) (let ((a82638 '8)) (modulo a82637 a82638))))
  (define (brouhaha_main) (let ((x82639 (call))) x82639)))
