'((define (+ . lst) (let ((x85557 (apply-prim + lst))) x85557))
  (define (- . lst) (let ((x85558 (apply-prim - lst))) x85558))
  (define (* . lst) (let ((x85559 (apply-prim * lst))) x85559))
  (define (modulo a b) (let ((x85560 (prim modulo a b))) x85560))
  (define (/ . lst) (let ((x85561 (apply-prim / lst))) x85561))
  (define (= . lst) (let ((x85562 (apply-prim = lst))) x85562))
  (define (> . lst) (let ((x85563 (apply-prim > lst))) x85563))
  (define (< . lst) (let ((x85564 (apply-prim < lst))) x85564))
  (define (<= . lst) (let ((x85565 (apply-prim <= lst))) x85565))
  (define (>= . lst) (let ((x85566 (apply-prim >= lst))) x85566))
  (define (null? x) (let ((x85567 (prim null? x))) x85567))
  (define (equal? x y) (let ((x85568 (prim equal? x y))) x85568))
  (define (eq? x y) (let ((x85569 (prim eq? x y))) x85569))
  (define (cons a b) (let ((x85570 (prim cons a b))) x85570))
  (define (car lst) (let ((x85571 (prim car lst))) x85571))
  (define (cdr lst) (let ((x85572 (prim cdr lst))) x85572))
  (define (even? x)
    (let ((a85573 '0))
      (let ((a85574 '2))
        (let ((a85575 (modulo x a85574))) (equal? a85573 a85575)))))
  (define (odd? x)
    (let ((a85576 '1))
      (let ((a85577 '2))
        (let ((a85578 (modulo x a85577))) (equal? a85576 a85578)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a85579 (null? lst)))
      (if a85579
        (let ((x85580 '#f)) x85580)
        (let ((a85581 (car lst)))
          (let ((a85582 (equal? a85581 x)))
            (if a85582
              (let ((x85583 '#t)) x85583)
              (let ((a85584 (cdr lst))) (member? x a85584))))))))
  (define (foldl fun acc lst)
    (let ((a85585 (null? lst)))
      (if a85585
        acc
        (let ((a85586 (car lst)))
          (let ((a85587 (fun a85586 acc)))
            (let ((a85588 (cdr lst))) (foldl fun a85587 a85588)))))))
  (define (reverse-helper lst lst2)
    (let ((a85589 (null? lst)))
      (if a85589
        lst2
        (let ((a85590 (cdr lst)))
          (let ((a85591 (car lst)))
            (let ((a85592 (cons a85591 lst2)))
              (reverse-helper a85590 a85592)))))))
  (define (reverse lst) (let ((a85593 (list))) (reverse-helper lst a85593)))
  (define (take-helper lst n lst2)
    (let ((a85594 '0))
      (let ((a85595 (= n a85594)))
        (if a85595
          (let ((x85596 (reverse lst2))) x85596)
          (let ((a85597 (cdr lst)))
            (let ((a85598 '1))
              (let ((a85599 (- n a85598)))
                (let ((a85600 (car lst)))
                  (let ((a85601 (cons a85600 lst2)))
                    (take-helper a85597 a85599 a85601))))))))))
  (define (take lst n) (let ((a85602 (list))) (take-helper lst n a85602)))
  (define (length lst)
    (let ((a85603 (null? lst)))
      (if a85603
        (let ((x85604 '0)) x85604)
        (let ((a85605 '1))
          (let ((a85606 (cdr lst)))
            (let ((a85607 (length a85606))) (+ a85605 a85607)))))))
  (define (map proc lst)
    (let ((a85608 (null? lst)))
      (if a85608
        (let ((x85609 (list))) x85609)
        (let ((a85610 (car lst)))
          (let ((a85611 (proc a85610)))
            (let ((a85612 (cdr lst)))
              (let ((a85613 (map proc a85612))) (cons a85611 a85613))))))))
  (define (filter op lst)
    (let ((a85614 (null? lst)))
      (if a85614
        (let ((x85615 (list))) x85615)
        (let ((a85616 (car lst)))
          (let ((a85617 (op a85616)))
            (if a85617
              (let ((a85618 (car lst)))
                (let ((a85619 (cdr lst)))
                  (let ((a85620 (filter op a85619))) (cons a85618 a85620))))
              (let ((a85621 (cdr lst))) (filter op a85621))))))))
  (define (drop lst n)
    (let ((a85622 '0))
      (let ((a85623 (= n a85622)))
        (if a85623
          lst
          (let ((a85624 (cdr lst)))
            (let ((a85625 '1))
              (let ((a85626 (- n a85625))) (drop a85624 a85626))))))))
  (define (foldr proc acc lst)
    (let ((a85627 (null? lst)))
      (if a85627
        acc
        (let ((a85628 (car lst)))
          (let ((a85629 (cdr lst)))
            (let ((a85630 (foldr proc acc a85629))) (proc a85628 a85630)))))))
  (define (append lst1 lst2)
    (let ((a85631 (null? lst1)))
      (if a85631
        lst2
        (let ((a85632 (car lst1)))
          (let ((a85633 (cdr lst1)))
            (let ((a85634 (append a85633 lst2))) (cons a85632 a85634)))))))
  (define (hash . lst) (let ((x85635 (apply-prim hash lst))) x85635))
  (define (hash-ref h k) (let ((x85636 (prim hash-ref h k))) x85636))
  (define (hash-set h k v) (let ((x85637 (prim hash-set h k v))) x85637))
  (define (hash-has-key? h k) (let ((x85638 (prim hash-has-key? h k))) x85638))
  (define (hash-count h) (let ((x85639 (prim hash-count h))) x85639))
  (define (call)
    (let ((a85640 '100))
      (let ((a85641 '80))
        (let ((a85642 '10))
          (let ((a85643 '2)) (- a85640 a85641 a85642 a85643))))))
  (define (brouhaha_main) (let ((x85644 (call))) x85644)))
