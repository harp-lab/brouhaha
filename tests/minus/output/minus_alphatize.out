'((define (+ . lst) (let ((x80274 (apply-prim + lst))) x80274))
  (define (- . lst) (let ((x80275 (apply-prim - lst))) x80275))
  (define (* . lst) (let ((x80276 (apply-prim * lst))) x80276))
  (define (modulo a b) (let ((x80277 (prim modulo a b))) x80277))
  (define (/ . lst) (let ((x80278 (apply-prim / lst))) x80278))
  (define (= . lst) (let ((x80279 (apply-prim = lst))) x80279))
  (define (> . lst) (let ((x80280 (apply-prim > lst))) x80280))
  (define (< . lst) (let ((x80281 (apply-prim < lst))) x80281))
  (define (<= . lst) (let ((x80282 (apply-prim <= lst))) x80282))
  (define (>= . lst) (let ((x80283 (apply-prim >= lst))) x80283))
  (define (null? x) (let ((x80284 (prim null? x))) x80284))
  (define (equal? x y) (let ((x80285 (prim equal? x y))) x80285))
  (define (eq? x y) (let ((x80286 (prim eq? x y))) x80286))
  (define (cons a b) (let ((x80287 (prim cons a b))) x80287))
  (define (car lst) (let ((x80288 (prim car lst))) x80288))
  (define (cdr lst) (let ((x80289 (prim cdr lst))) x80289))
  (define (even? x)
    (let ((a80290 '0))
      (let ((a80291 '2))
        (let ((a80292 (modulo x a80291))) (equal? a80290 a80292)))))
  (define (odd? x)
    (let ((a80293 '1))
      (let ((a80294 '2))
        (let ((a80295 (modulo x a80294))) (equal? a80293 a80295)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a80296 (null? lst)))
      (if a80296
        (let ((x80297 '#f)) x80297)
        (let ((a80298 (car lst)))
          (let ((a80299 (equal? a80298 x)))
            (if a80299
              (let ((x80300 '#t)) x80300)
              (let ((a80301 (cdr lst))) (member? x a80301))))))))
  (define (foldl fun acc lst)
    (let ((a80302 (null? lst)))
      (if a80302
        acc
        (let ((a80303 (car lst)))
          (let ((a80304 (fun a80303 acc)))
            (let ((a80305 (cdr lst))) (foldl fun a80304 a80305)))))))
  (define (reverse-helper lst lst2)
    (let ((a80306 (null? lst)))
      (if a80306
        lst2
        (let ((a80307 (cdr lst)))
          (let ((a80308 (car lst)))
            (let ((a80309 (cons a80308 lst2)))
              (reverse-helper a80307 a80309)))))))
  (define (reverse lst) (let ((a80310 (list))) (reverse-helper lst a80310)))
  (define (take-helper lst n lst2)
    (let ((a80311 '0))
      (let ((a80312 (= n a80311)))
        (if a80312
          (let ((x80313 (reverse lst2))) x80313)
          (let ((a80314 (cdr lst)))
            (let ((a80315 '1))
              (let ((a80316 (- n a80315)))
                (let ((a80317 (car lst)))
                  (let ((a80318 (cons a80317 lst2)))
                    (take-helper a80314 a80316 a80318))))))))))
  (define (take lst n) (let ((a80319 (list))) (take-helper lst n a80319)))
  (define (length lst)
    (let ((a80320 (null? lst)))
      (if a80320
        (let ((x80321 '0)) x80321)
        (let ((a80322 '1))
          (let ((a80323 (cdr lst)))
            (let ((a80324 (length a80323))) (+ a80322 a80324)))))))
  (define (map proc lst)
    (let ((a80325 (null? lst)))
      (if a80325
        (let ((x80326 (list))) x80326)
        (let ((a80327 (car lst)))
          (let ((a80328 (proc a80327)))
            (let ((a80329 (cdr lst)))
              (let ((a80330 (map proc a80329))) (cons a80328 a80330))))))))
  (define (filter op lst)
    (let ((a80331 (null? lst)))
      (if a80331
        (let ((x80332 (list))) x80332)
        (let ((a80333 (car lst)))
          (let ((a80334 (op a80333)))
            (if a80334
              (let ((a80335 (car lst)))
                (let ((a80336 (cdr lst)))
                  (let ((a80337 (filter op a80336))) (cons a80335 a80337))))
              (let ((a80338 (cdr lst))) (filter op a80338))))))))
  (define (drop lst n)
    (let ((a80339 '0))
      (let ((a80340 (= n a80339)))
        (if a80340
          lst
          (let ((a80341 (cdr lst)))
            (let ((a80342 '1))
              (let ((a80343 (- n a80342))) (drop a80341 a80343))))))))
  (define (foldr proc acc lst)
    (let ((a80344 (null? lst)))
      (if a80344
        acc
        (let ((a80345 (car lst)))
          (let ((a80346 (cdr lst)))
            (let ((a80347 (foldr proc acc a80346))) (proc a80345 a80347)))))))
  (define (append lst1 lst2)
    (let ((a80348 (null? lst1)))
      (if a80348
        lst2
        (let ((a80349 (car lst1)))
          (let ((a80350 (cdr lst1)))
            (let ((a80351 (append a80350 lst2))) (cons a80349 a80351)))))))
  (define (hash . lst) (let ((x80352 (apply-prim hash lst))) x80352))
  (define (hash-ref h k) (let ((x80353 (prim hash-ref h k))) x80353))
  (define (hash-set h k v) (let ((x80354 (prim hash-set h k v))) x80354))
  (define (hash-has-key? h k) (let ((x80355 (prim hash-has-key? h k))) x80355))
  (define (hash-count h) (let ((x80356 (prim hash-count h))) x80356))
  (define (call)
    (let ((a80357 '100))
      (let ((a80358 '80))
        (let ((a80359 '10))
          (let ((a80360 '2)) (- a80357 a80358 a80359 a80360))))))
  (define (brouhaha_main) (let ((x80361 (call))) x80361)))
