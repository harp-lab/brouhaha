'((define (+ . lst)
    (let ((kont80362 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80274 (apply-prim + lst))) (kont80362 x80274)))))
  (define (- . lst)
    (let ((kont80364 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80275 (apply-prim - lst))) (kont80364 x80275)))))
  (define (* . lst)
    (let ((kont80366 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80276 (apply-prim * lst))) (kont80366 x80276)))))
  (define (modulo kont80368 a b)
    (let ((x80277 (prim modulo a b))) (kont80368 x80277)))
  (define (/ . lst)
    (let ((kont80369 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80278 (apply-prim / lst))) (kont80369 x80278)))))
  (define (= . lst)
    (let ((kont80371 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80279 (apply-prim = lst))) (kont80371 x80279)))))
  (define (> . lst)
    (let ((kont80373 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80280 (apply-prim > lst))) (kont80373 x80280)))))
  (define (< . lst)
    (let ((kont80375 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80281 (apply-prim < lst))) (kont80375 x80281)))))
  (define (<= . lst)
    (let ((kont80377 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80282 (apply-prim <= lst))) (kont80377 x80282)))))
  (define (>= . lst)
    (let ((kont80379 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80283 (apply-prim >= lst))) (kont80379 x80283)))))
  (define (null? kont80381 x)
    (let ((x80284 (prim null? x))) (kont80381 x80284)))
  (define (equal? kont80382 x y)
    (let ((x80285 (prim equal? x y))) (kont80382 x80285)))
  (define (eq? kont80383 x y)
    (let ((x80286 (prim eq? x y))) (kont80383 x80286)))
  (define (cons kont80384 a b)
    (let ((x80287 (prim cons a b))) (kont80384 x80287)))
  (define (car kont80385 lst)
    (let ((x80288 (prim car lst))) (kont80385 x80288)))
  (define (cdr kont80386 lst)
    (let ((x80289 (prim cdr lst))) (kont80386 x80289)))
  (define (even? kont80387 x)
    (let ((a80290 '0))
      (let ((a80291 '2))
        (let ((f80388 (lambda (a80292) (equal? kont80387 a80290 a80292))))
          (modulo f80388 x a80291)))))
  (define (odd? kont80389 x)
    (let ((a80293 '1))
      (let ((a80294 '2))
        (let ((f80390 (lambda (a80295) (equal? kont80389 a80293 a80295))))
          (modulo f80390 x a80294)))))
  (define (list . x)
    (let ((kont80391 (prim car x))) (let ((x (prim cdr x))) (kont80391 x))))
  (define (member? kont80393 x lst)
    (let ((f80397
           (lambda (a80296)
             (if a80296
               (let ((x80297 '#f)) (kont80393 x80297))
               (let ((f80396
                      (lambda (a80298)
                        (let ((f80395
                               (lambda (a80299)
                                 (if a80299
                                   (let ((x80300 '#t)) (kont80393 x80300))
                                   (let ((f80394
                                          (lambda (a80301)
                                            (member? kont80393 x a80301))))
                                     (cdr f80394 lst))))))
                          (equal? f80395 a80298 x)))))
                 (car f80396 lst))))))
      (null? f80397 lst)))
  (define (foldl kont80398 fun acc lst)
    (let ((f80402
           (lambda (a80302)
             (if a80302
               (kont80398 acc)
               (let ((f80401
                      (lambda (a80303)
                        (let ((f80400
                               (lambda (a80304)
                                 (let ((f80399
                                        (lambda (a80305)
                                          (foldl
                                           kont80398
                                           fun
                                           a80304
                                           a80305))))
                                   (cdr f80399 lst)))))
                          (fun f80400 a80303 acc)))))
                 (car f80401 lst))))))
      (null? f80402 lst)))
  (define (reverse-helper kont80403 lst lst2)
    (let ((f80407
           (lambda (a80306)
             (if a80306
               (kont80403 lst2)
               (let ((f80406
                      (lambda (a80307)
                        (let ((f80405
                               (lambda (a80308)
                                 (let ((f80404
                                        (lambda (a80309)
                                          (reverse-helper
                                           kont80403
                                           a80307
                                           a80309))))
                                   (cons f80404 a80308 lst2)))))
                          (car f80405 lst)))))
                 (cdr f80406 lst))))))
      (null? f80407 lst)))
  (define (reverse kont80408 lst)
    (let ((f80409 (lambda (a80310) (reverse-helper kont80408 lst a80310))))
      (list f80409)))
  (define (take-helper kont80410 lst n lst2)
    (let ((a80311 '0))
      (let ((f80416
             (lambda (a80312)
               (if a80312
                 (let ((f80411 (lambda (x80313) (kont80410 x80313))))
                   (reverse f80411 lst2))
                 (let ((f80415
                        (lambda (a80314)
                          (let ((a80315 '1))
                            (let ((f80414
                                   (lambda (a80316)
                                     (let ((f80413
                                            (lambda (a80317)
                                              (let ((f80412
                                                     (lambda (a80318)
                                                       (take-helper
                                                        kont80410
                                                        a80314
                                                        a80316
                                                        a80318))))
                                                (cons f80412 a80317 lst2)))))
                                       (car f80413 lst)))))
                              (- f80414 n a80315))))))
                   (cdr f80415 lst))))))
        (= f80416 n a80311))))
  (define (take kont80417 lst n)
    (let ((f80418 (lambda (a80319) (take-helper kont80417 lst n a80319))))
      (list f80418)))
  (define (length kont80419 lst)
    (let ((f80422
           (lambda (a80320)
             (if a80320
               (let ((x80321 '0)) (kont80419 x80321))
               (let ((a80322 '1))
                 (let ((f80421
                        (lambda (a80323)
                          (let ((f80420
                                 (lambda (a80324)
                                   (+ kont80419 a80322 a80324))))
                            (length f80420 a80323)))))
                   (cdr f80421 lst)))))))
      (null? f80422 lst)))
  (define (map kont80423 proc lst)
    (let ((f80429
           (lambda (a80325)
             (if a80325
               (let ((f80424 (lambda (x80326) (kont80423 x80326))))
                 (list f80424))
               (let ((f80428
                      (lambda (a80327)
                        (let ((f80427
                               (lambda (a80328)
                                 (let ((f80426
                                        (lambda (a80329)
                                          (let ((f80425
                                                 (lambda (a80330)
                                                   (cons
                                                    kont80423
                                                    a80328
                                                    a80330))))
                                            (map f80425 proc a80329)))))
                                   (cdr f80426 lst)))))
                          (proc f80427 a80327)))))
                 (car f80428 lst))))))
      (null? f80429 lst)))
  (define (filter kont80430 op lst)
    (let ((f80438
           (lambda (a80331)
             (if a80331
               (let ((f80431 (lambda (x80332) (kont80430 x80332))))
                 (list f80431))
               (let ((f80437
                      (lambda (a80333)
                        (let ((f80436
                               (lambda (a80334)
                                 (if a80334
                                   (let ((f80434
                                          (lambda (a80335)
                                            (let ((f80433
                                                   (lambda (a80336)
                                                     (let ((f80432
                                                            (lambda (a80337)
                                                              (cons
                                                               kont80430
                                                               a80335
                                                               a80337))))
                                                       (filter
                                                        f80432
                                                        op
                                                        a80336)))))
                                              (cdr f80433 lst)))))
                                     (car f80434 lst))
                                   (let ((f80435
                                          (lambda (a80338)
                                            (filter kont80430 op a80338))))
                                     (cdr f80435 lst))))))
                          (op f80436 a80333)))))
                 (car f80437 lst))))))
      (null? f80438 lst)))
  (define (drop kont80439 lst n)
    (let ((a80339 '0))
      (let ((f80442
             (lambda (a80340)
               (if a80340
                 (kont80439 lst)
                 (let ((f80441
                        (lambda (a80341)
                          (let ((a80342 '1))
                            (let ((f80440
                                   (lambda (a80343)
                                     (drop kont80439 a80341 a80343))))
                              (- f80440 n a80342))))))
                   (cdr f80441 lst))))))
        (= f80442 n a80339))))
  (define (foldr kont80443 proc acc lst)
    (let ((f80447
           (lambda (a80344)
             (if a80344
               (kont80443 acc)
               (let ((f80446
                      (lambda (a80345)
                        (let ((f80445
                               (lambda (a80346)
                                 (let ((f80444
                                        (lambda (a80347)
                                          (proc kont80443 a80345 a80347))))
                                   (foldr f80444 proc acc a80346)))))
                          (cdr f80445 lst)))))
                 (car f80446 lst))))))
      (null? f80447 lst)))
  (define (append kont80448 lst1 lst2)
    (let ((f80452
           (lambda (a80348)
             (if a80348
               (kont80448 lst2)
               (let ((f80451
                      (lambda (a80349)
                        (let ((f80450
                               (lambda (a80350)
                                 (let ((f80449
                                        (lambda (a80351)
                                          (cons kont80448 a80349 a80351))))
                                   (append f80449 a80350 lst2)))))
                          (cdr f80450 lst1)))))
                 (car f80451 lst1))))))
      (null? f80452 lst1)))
  (define (hash . lst)
    (let ((kont80453 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x80352 (apply-prim hash lst))) (kont80453 x80352)))))
  (define (hash-ref kont80455 h k)
    (let ((x80353 (prim hash-ref h k))) (kont80455 x80353)))
  (define (hash-set kont80456 h k v)
    (let ((x80354 (prim hash-set h k v))) (kont80456 x80354)))
  (define (hash-has-key? kont80457 h k)
    (let ((x80355 (prim hash-has-key? h k))) (kont80457 x80355)))
  (define (hash-count kont80458 h)
    (let ((x80356 (prim hash-count h))) (kont80458 x80356)))
  (define (call kont80459)
    (let ((a80357 '100))
      (let ((a80358 '80))
        (let ((a80359 '10))
          (let ((a80360 '2)) (- kont80459 a80357 a80358 a80359 a80360))))))
  (define (brouhaha_main kont80460)
    (let ((f80461 (lambda (x80361) (kont80460 x80361)))) (call f80461))))
