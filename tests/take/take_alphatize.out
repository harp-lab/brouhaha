'((define (+ . lst) (let ((x123344 (apply-prim + lst))) x123344))
  (define (- . lst) (let ((x123345 (apply-prim - lst))) x123345))
  (define (* . lst) (let ((x123346 (apply-prim * lst))) x123346))
  (define (modulo a b) (let ((x123347 (prim modulo a b))) x123347))
  (define (/ . lst) (let ((x123348 (apply-prim / lst))) x123348))
  (define (= . lst) (let ((x123349 (apply-prim = lst))) x123349))
  (define (> . lst) (let ((x123350 (apply-prim > lst))) x123350))
  (define (< . lst) (let ((x123351 (apply-prim < lst))) x123351))
  (define (<= . lst) (let ((x123352 (apply-prim <= lst))) x123352))
  (define (>= . lst) (let ((x123353 (apply-prim >= lst))) x123353))
  (define (null? x) (let ((x123354 (prim null? x))) x123354))
  (define (equal? x y) (let ((x123355 (prim equal? x y))) x123355))
  (define (eq? x y) (let ((x123356 (prim eq? x y))) x123356))
  (define (cons a b) (let ((x123357 (prim cons a b))) x123357))
  (define (car lst) (let ((x123358 (prim car lst))) x123358))
  (define (cdr lst) (let ((x123359 (prim cdr lst))) x123359))
  (define (even? x)
    (let ((a123360 '0))
      (let ((a123361 '2))
        (let ((a123362 (modulo x a123361))) (equal? a123360 a123362)))))
  (define (odd? x)
    (let ((a123363 '1))
      (let ((a123364 '2))
        (let ((a123365 (modulo x a123364))) (equal? a123363 a123365)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a123366 (null? lst)))
      (if a123366
        (let ((x123367 '#f)) x123367)
        (let ((a123368 (car lst)))
          (let ((a123369 (equal? a123368 x)))
            (if a123369
              (let ((x123370 '#t)) x123370)
              (let ((a123371 (cdr lst))) (member? x a123371))))))))
  (define (foldl fun acc lst)
    (let ((a123372 (null? lst)))
      (if a123372
        acc
        (let ((a123373 (car lst)))
          (let ((a123374 (fun a123373 acc)))
            (let ((a123375 (cdr lst))) (foldl fun a123374 a123375)))))))
  (define (reverse-helper lst lst2)
    (let ((a123376 (null? lst)))
      (if a123376
        lst2
        (let ((a123377 (cdr lst)))
          (let ((a123378 (car lst)))
            (let ((a123379 (cons a123378 lst2)))
              (reverse-helper a123377 a123379)))))))
  (define (reverse lst) (let ((a123380 (list))) (reverse-helper lst a123380)))
  (define (take-helper lst n lst2)
    (let ((a123381 '0))
      (let ((a123382 (= n a123381)))
        (if a123382
          (let ((x123383 (reverse lst2))) x123383)
          (let ((a123384 (cdr lst)))
            (let ((a123385 '1))
              (let ((a123386 (- n a123385)))
                (let ((a123387 (car lst)))
                  (let ((a123388 (cons a123387 lst2)))
                    (take-helper a123384 a123386 a123388))))))))))
  (define (take lst n) (let ((a123389 (list))) (take-helper lst n a123389)))
  (define (length lst)
    (let ((a123390 (null? lst)))
      (if a123390
        (let ((x123391 '0)) x123391)
        (let ((a123392 '1))
          (let ((a123393 (cdr lst)))
            (let ((a123394 (length a123393))) (+ a123392 a123394)))))))
  (define (map proc lst)
    (let ((a123395 (null? lst)))
      (if a123395
        (let ((x123396 (list))) x123396)
        (let ((a123397 (car lst)))
          (let ((a123398 (proc a123397)))
            (let ((a123399 (cdr lst)))
              (let ((a123400 (map proc a123399))) (cons a123398 a123400))))))))
  (define (filter op lst)
    (let ((a123401 (null? lst)))
      (if a123401
        (let ((x123402 (list))) x123402)
        (let ((a123403 (car lst)))
          (let ((a123404 (op a123403)))
            (if a123404
              (let ((a123405 (car lst)))
                (let ((a123406 (cdr lst)))
                  (let ((a123407 (filter op a123406)))
                    (cons a123405 a123407))))
              (let ((a123408 (cdr lst))) (filter op a123408))))))))
  (define (drop lst n)
    (let ((a123409 '0))
      (let ((a123410 (= n a123409)))
        (if a123410
          lst
          (let ((a123411 (cdr lst)))
            (let ((a123412 '1))
              (let ((a123413 (- n a123412))) (drop a123411 a123413))))))))
  (define (foldr proc acc lst)
    (let ((a123414 (null? lst)))
      (if a123414
        acc
        (let ((a123415 (car lst)))
          (let ((a123416 (cdr lst)))
            (let ((a123417 (foldr proc acc a123416)))
              (proc a123415 a123417)))))))
  (define (append lst1 lst2)
    (let ((a123418 (null? lst1)))
      (if a123418
        lst2
        (let ((a123419 (car lst1)))
          (let ((a123420 (cdr lst1)))
            (let ((a123421 (append a123420 lst2))) (cons a123419 a123421)))))))
  (define (hash . lst) (let ((x123422 (apply-prim hash lst))) x123422))
  (define (hash-ref h k) (let ((x123423 (prim hash-ref h k))) x123423))
  (define (hash-set h k v) (let ((x123424 (prim hash-set h k v))) x123424))
  (define (hash-has-key? h k)
    (let ((x123425 (prim hash-has-key? h k))) x123425))
  (define (hash-count h) (let ((x123426 (prim hash-count h))) x123426))
  (define (call)
    (let ((a123427 '1))
      (let ((a123428 '2))
        (let ((a123429 '3))
          (let ((a123430 '4))
            (let ((a123431 (list a123427 a123428 a123429 a123430)))
              (let ((a123432 '2)) (take a123431 a123432))))))))
  (define (brouhaha_main) (let ((x123433 (call))) x123433)))
