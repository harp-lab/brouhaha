'((define (+ . lst)
    (let ((kont123434 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123344 (apply-prim + lst))) (kont123434 x123344)))))
  (define (- . lst)
    (let ((kont123436 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123345 (apply-prim - lst))) (kont123436 x123345)))))
  (define (* . lst)
    (let ((kont123438 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123346 (apply-prim * lst))) (kont123438 x123346)))))
  (define (modulo kont123440 a b)
    (let ((x123347 (prim modulo a b))) (kont123440 x123347)))
  (define (/ . lst)
    (let ((kont123441 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123348 (apply-prim / lst))) (kont123441 x123348)))))
  (define (= . lst)
    (let ((kont123443 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123349 (apply-prim = lst))) (kont123443 x123349)))))
  (define (> . lst)
    (let ((kont123445 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123350 (apply-prim > lst))) (kont123445 x123350)))))
  (define (< . lst)
    (let ((kont123447 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123351 (apply-prim < lst))) (kont123447 x123351)))))
  (define (<= . lst)
    (let ((kont123449 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123352 (apply-prim <= lst))) (kont123449 x123352)))))
  (define (>= . lst)
    (let ((kont123451 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123353 (apply-prim >= lst))) (kont123451 x123353)))))
  (define (null? kont123453 x)
    (let ((x123354 (prim null? x))) (kont123453 x123354)))
  (define (equal? kont123454 x y)
    (let ((x123355 (prim equal? x y))) (kont123454 x123355)))
  (define (eq? kont123455 x y)
    (let ((x123356 (prim eq? x y))) (kont123455 x123356)))
  (define (cons kont123456 a b)
    (let ((x123357 (prim cons a b))) (kont123456 x123357)))
  (define (car kont123457 lst)
    (let ((x123358 (prim car lst))) (kont123457 x123358)))
  (define (cdr kont123458 lst)
    (let ((x123359 (prim cdr lst))) (kont123458 x123359)))
  (define (even? kont123459 x)
    (let ((a123360 '0))
      (let ((a123361 '2))
        (let ((f123460 (lambda (a123362) (equal? kont123459 a123360 a123362))))
          (modulo f123460 x a123361)))))
  (define (odd? kont123461 x)
    (let ((a123363 '1))
      (let ((a123364 '2))
        (let ((f123462 (lambda (a123365) (equal? kont123461 a123363 a123365))))
          (modulo f123462 x a123364)))))
  (define (list . x)
    (let ((kont123463 (prim car x))) (let ((x (prim cdr x))) (kont123463 x))))
  (define (member? kont123465 x lst)
    (let ((f123469
           (lambda (a123366)
             (if a123366
               (let ((x123367 '#f)) (kont123465 x123367))
               (let ((f123468
                      (lambda (a123368)
                        (let ((f123467
                               (lambda (a123369)
                                 (if a123369
                                   (let ((x123370 '#t)) (kont123465 x123370))
                                   (let ((f123466
                                          (lambda (a123371)
                                            (member? kont123465 x a123371))))
                                     (cdr f123466 lst))))))
                          (equal? f123467 a123368 x)))))
                 (car f123468 lst))))))
      (null? f123469 lst)))
  (define (foldl kont123470 fun acc lst)
    (let ((f123474
           (lambda (a123372)
             (if a123372
               (kont123470 acc)
               (let ((f123473
                      (lambda (a123373)
                        (let ((f123472
                               (lambda (a123374)
                                 (let ((f123471
                                        (lambda (a123375)
                                          (foldl
                                           kont123470
                                           fun
                                           a123374
                                           a123375))))
                                   (cdr f123471 lst)))))
                          (fun f123472 a123373 acc)))))
                 (car f123473 lst))))))
      (null? f123474 lst)))
  (define (reverse-helper kont123475 lst lst2)
    (let ((f123479
           (lambda (a123376)
             (if a123376
               (kont123475 lst2)
               (let ((f123478
                      (lambda (a123377)
                        (let ((f123477
                               (lambda (a123378)
                                 (let ((f123476
                                        (lambda (a123379)
                                          (reverse-helper
                                           kont123475
                                           a123377
                                           a123379))))
                                   (cons f123476 a123378 lst2)))))
                          (car f123477 lst)))))
                 (cdr f123478 lst))))))
      (null? f123479 lst)))
  (define (reverse kont123480 lst)
    (let ((f123481 (lambda (a123380) (reverse-helper kont123480 lst a123380))))
      (list f123481)))
  (define (take-helper kont123482 lst n lst2)
    (let ((a123381 '0))
      (let ((f123488
             (lambda (a123382)
               (if a123382
                 (let ((f123483 (lambda (x123383) (kont123482 x123383))))
                   (reverse f123483 lst2))
                 (let ((f123487
                        (lambda (a123384)
                          (let ((a123385 '1))
                            (let ((f123486
                                   (lambda (a123386)
                                     (let ((f123485
                                            (lambda (a123387)
                                              (let ((f123484
                                                     (lambda (a123388)
                                                       (take-helper
                                                        kont123482
                                                        a123384
                                                        a123386
                                                        a123388))))
                                                (cons f123484 a123387 lst2)))))
                                       (car f123485 lst)))))
                              (- f123486 n a123385))))))
                   (cdr f123487 lst))))))
        (= f123488 n a123381))))
  (define (take kont123489 lst n)
    (let ((f123490 (lambda (a123389) (take-helper kont123489 lst n a123389))))
      (list f123490)))
  (define (length kont123491 lst)
    (let ((f123494
           (lambda (a123390)
             (if a123390
               (let ((x123391 '0)) (kont123491 x123391))
               (let ((a123392 '1))
                 (let ((f123493
                        (lambda (a123393)
                          (let ((f123492
                                 (lambda (a123394)
                                   (+ kont123491 a123392 a123394))))
                            (length f123492 a123393)))))
                   (cdr f123493 lst)))))))
      (null? f123494 lst)))
  (define (map kont123495 proc lst)
    (let ((f123501
           (lambda (a123395)
             (if a123395
               (let ((f123496 (lambda (x123396) (kont123495 x123396))))
                 (list f123496))
               (let ((f123500
                      (lambda (a123397)
                        (let ((f123499
                               (lambda (a123398)
                                 (let ((f123498
                                        (lambda (a123399)
                                          (let ((f123497
                                                 (lambda (a123400)
                                                   (cons
                                                    kont123495
                                                    a123398
                                                    a123400))))
                                            (map f123497 proc a123399)))))
                                   (cdr f123498 lst)))))
                          (proc f123499 a123397)))))
                 (car f123500 lst))))))
      (null? f123501 lst)))
  (define (filter kont123502 op lst)
    (let ((f123510
           (lambda (a123401)
             (if a123401
               (let ((f123503 (lambda (x123402) (kont123502 x123402))))
                 (list f123503))
               (let ((f123509
                      (lambda (a123403)
                        (let ((f123508
                               (lambda (a123404)
                                 (if a123404
                                   (let ((f123506
                                          (lambda (a123405)
                                            (let ((f123505
                                                   (lambda (a123406)
                                                     (let ((f123504
                                                            (lambda (a123407)
                                                              (cons
                                                               kont123502
                                                               a123405
                                                               a123407))))
                                                       (filter
                                                        f123504
                                                        op
                                                        a123406)))))
                                              (cdr f123505 lst)))))
                                     (car f123506 lst))
                                   (let ((f123507
                                          (lambda (a123408)
                                            (filter kont123502 op a123408))))
                                     (cdr f123507 lst))))))
                          (op f123508 a123403)))))
                 (car f123509 lst))))))
      (null? f123510 lst)))
  (define (drop kont123511 lst n)
    (let ((a123409 '0))
      (let ((f123514
             (lambda (a123410)
               (if a123410
                 (kont123511 lst)
                 (let ((f123513
                        (lambda (a123411)
                          (let ((a123412 '1))
                            (let ((f123512
                                   (lambda (a123413)
                                     (drop kont123511 a123411 a123413))))
                              (- f123512 n a123412))))))
                   (cdr f123513 lst))))))
        (= f123514 n a123409))))
  (define (foldr kont123515 proc acc lst)
    (let ((f123519
           (lambda (a123414)
             (if a123414
               (kont123515 acc)
               (let ((f123518
                      (lambda (a123415)
                        (let ((f123517
                               (lambda (a123416)
                                 (let ((f123516
                                        (lambda (a123417)
                                          (proc kont123515 a123415 a123417))))
                                   (foldr f123516 proc acc a123416)))))
                          (cdr f123517 lst)))))
                 (car f123518 lst))))))
      (null? f123519 lst)))
  (define (append kont123520 lst1 lst2)
    (let ((f123524
           (lambda (a123418)
             (if a123418
               (kont123520 lst2)
               (let ((f123523
                      (lambda (a123419)
                        (let ((f123522
                               (lambda (a123420)
                                 (let ((f123521
                                        (lambda (a123421)
                                          (cons kont123520 a123419 a123421))))
                                   (append f123521 a123420 lst2)))))
                          (cdr f123522 lst1)))))
                 (car f123523 lst1))))))
      (null? f123524 lst1)))
  (define (hash . lst)
    (let ((kont123525 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x123422 (apply-prim hash lst))) (kont123525 x123422)))))
  (define (hash-ref kont123527 h k)
    (let ((x123423 (prim hash-ref h k))) (kont123527 x123423)))
  (define (hash-set kont123528 h k v)
    (let ((x123424 (prim hash-set h k v))) (kont123528 x123424)))
  (define (hash-has-key? kont123529 h k)
    (let ((x123425 (prim hash-has-key? h k))) (kont123529 x123425)))
  (define (hash-count kont123530 h)
    (let ((x123426 (prim hash-count h))) (kont123530 x123426)))
  (define (call kont123531)
    (let ((a123427 '1))
      (let ((a123428 '2))
        (let ((a123429 '3))
          (let ((a123430 '4))
            (let ((f123532
                   (lambda (a123431)
                     (let ((a123432 '2)) (take kont123531 a123431 a123432)))))
              (list f123532 a123427 a123428 a123429 a123430)))))))
  (define (brouhaha_main kont123533)
    (let ((f123534 (lambda (x123433) (kont123533 x123433)))) (call f123534))))
