'((define (+ . lst) (let ((x117405 (apply-prim + lst))) x117405))
  (define (- . lst) (let ((x117406 (apply-prim - lst))) x117406))
  (define (* . lst) (let ((x117407 (apply-prim * lst))) x117407))
  (define (modulo a b) (let ((x117408 (prim modulo a b))) x117408))
  (define (/ . lst) (let ((x117409 (apply-prim / lst))) x117409))
  (define (= . lst) (let ((x117410 (apply-prim = lst))) x117410))
  (define (> . lst) (let ((x117411 (apply-prim > lst))) x117411))
  (define (< . lst) (let ((x117412 (apply-prim < lst))) x117412))
  (define (<= . lst) (let ((x117413 (apply-prim <= lst))) x117413))
  (define (>= . lst) (let ((x117414 (apply-prim >= lst))) x117414))
  (define (null? x) (let ((x117415 (prim null? x))) x117415))
  (define (equal? x y) (let ((x117416 (prim equal? x y))) x117416))
  (define (eq? x y) (let ((x117417 (prim eq? x y))) x117417))
  (define (cons a b) (let ((x117418 (prim cons a b))) x117418))
  (define (car lst) (let ((x117419 (prim car lst))) x117419))
  (define (cdr lst) (let ((x117420 (prim cdr lst))) x117420))
  (define (even? x)
    (let ((a117421 '0))
      (let ((a117422 '2))
        (let ((a117423 (modulo x a117422))) (equal? a117421 a117423)))))
  (define (odd? x)
    (let ((a117424 '1))
      (let ((a117425 '2))
        (let ((a117426 (modulo x a117425))) (equal? a117424 a117426)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a117427 (null? lst)))
      (if a117427
        (let ((x117428 '#f)) x117428)
        (let ((a117429 (car lst)))
          (let ((a117430 (equal? a117429 x)))
            (if a117430
              (let ((x117431 '#t)) x117431)
              (let ((a117432 (cdr lst))) (member? x a117432))))))))
  (define (foldl fun acc lst)
    (let ((a117433 (null? lst)))
      (if a117433
        acc
        (let ((a117434 (car lst)))
          (let ((a117435 (fun a117434 acc)))
            (let ((a117436 (cdr lst))) (foldl fun a117435 a117436)))))))
  (define (reverse-helper lst lst2)
    (let ((a117437 (null? lst)))
      (if a117437
        lst2
        (let ((a117438 (cdr lst)))
          (let ((a117439 (car lst)))
            (let ((a117440 (cons a117439 lst2)))
              (reverse-helper a117438 a117440)))))))
  (define (reverse lst) (let ((a117441 (list))) (reverse-helper lst a117441)))
  (define (take-helper lst n lst2)
    (let ((a117442 '0))
      (let ((a117443 (= n a117442)))
        (if a117443
          (let ((x117444 (reverse lst2))) x117444)
          (let ((a117445 (cdr lst)))
            (let ((a117446 '1))
              (let ((a117447 (- n a117446)))
                (let ((a117448 (car lst)))
                  (let ((a117449 (cons a117448 lst2)))
                    (take-helper a117445 a117447 a117449))))))))))
  (define (take lst n) (let ((a117450 (list))) (take-helper lst n a117450)))
  (define (length lst)
    (let ((a117451 (null? lst)))
      (if a117451
        (let ((x117452 '0)) x117452)
        (let ((a117453 '1))
          (let ((a117454 (cdr lst)))
            (let ((a117455 (length a117454))) (+ a117453 a117455)))))))
  (define (map proc lst)
    (let ((a117456 (null? lst)))
      (if a117456
        (let ((x117457 (list))) x117457)
        (let ((a117458 (car lst)))
          (let ((a117459 (proc a117458)))
            (let ((a117460 (cdr lst)))
              (let ((a117461 (map proc a117460))) (cons a117459 a117461))))))))
  (define (filter op lst)
    (let ((a117462 (null? lst)))
      (if a117462
        (let ((x117463 (list))) x117463)
        (let ((a117464 (car lst)))
          (let ((a117465 (op a117464)))
            (if a117465
              (let ((a117466 (car lst)))
                (let ((a117467 (cdr lst)))
                  (let ((a117468 (filter op a117467)))
                    (cons a117466 a117468))))
              (let ((a117469 (cdr lst))) (filter op a117469))))))))
  (define (drop lst n)
    (let ((a117470 '0))
      (let ((a117471 (= n a117470)))
        (if a117471
          lst
          (let ((a117472 (cdr lst)))
            (let ((a117473 '1))
              (let ((a117474 (- n a117473))) (drop a117472 a117474))))))))
  (define (foldr proc acc lst)
    (let ((a117475 (null? lst)))
      (if a117475
        acc
        (let ((a117476 (car lst)))
          (let ((a117477 (cdr lst)))
            (let ((a117478 (foldr proc acc a117477)))
              (proc a117476 a117478)))))))
  (define (append lst1 lst2)
    (let ((a117479 (null? lst1)))
      (if a117479
        lst2
        (let ((a117480 (car lst1)))
          (let ((a117481 (cdr lst1)))
            (let ((a117482 (append a117481 lst2))) (cons a117480 a117482)))))))
  (define (hash . lst) (let ((x117483 (apply-prim hash lst))) x117483))
  (define (hash-ref h k) (let ((x117484 (prim hash-ref h k))) x117484))
  (define (hash-set h k v) (let ((x117485 (prim hash-set h k v))) x117485))
  (define (hash-has-key? h k)
    (let ((x117486 (prim hash-has-key? h k))) x117486))
  (define (hash-count h) (let ((x117487 (prim hash-count h))) x117487))
  (define (call)
    (let ((a117488 '1))
      (let ((a117489 '2))
        (let ((a117490 '3))
          (let ((a117491 '4))
            (let ((a117492 (list a117488 a117489 a117490 a117491)))
              (let ((a117493 '2)) (take a117492 a117493))))))))
  (define (brouhaha_main) (let ((x117494 (call))) x117494)))
