'((define (+ . lst) (let ((x58844 (apply-prim + lst))) x58844))
  (define (- . lst) (let ((x58845 (apply-prim - lst))) x58845))
  (define (* . lst) (let ((x58846 (apply-prim * lst))) x58846))
  (define (modulo a b) (let ((x58847 (prim modulo a b))) x58847))
  (define (/ . lst) (let ((x58848 (apply-prim / lst))) x58848))
  (define (= . lst) (let ((x58849 (apply-prim = lst))) x58849))
  (define (> . lst) (let ((x58850 (apply-prim > lst))) x58850))
  (define (< . lst) (let ((x58851 (apply-prim < lst))) x58851))
  (define (<= . lst) (let ((x58852 (apply-prim <= lst))) x58852))
  (define (>= . lst) (let ((x58853 (apply-prim >= lst))) x58853))
  (define (null? x) (let ((x58854 (prim null? x))) x58854))
  (define (equal? x y) (let ((x58855 (prim equal? x y))) x58855))
  (define (eq? x y) (let ((x58856 (prim eq? x y))) x58856))
  (define (cons a b) (let ((x58857 (prim cons a b))) x58857))
  (define (car lst) (let ((x58858 (prim car lst))) x58858))
  (define (cdr lst) (let ((x58859 (prim cdr lst))) x58859))
  (define (even? x)
    (let ((a58860 '0))
      (let ((a58861 '2))
        (let ((a58862 (modulo x a58861))) (equal? a58860 a58862)))))
  (define (odd? x)
    (let ((a58863 '1))
      (let ((a58864 '2))
        (let ((a58865 (modulo x a58864))) (equal? a58863 a58865)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a58866 (null? lst)))
      (if a58866
        (let ((x58867 '#f)) x58867)
        (let ((a58868 (car lst)))
          (let ((a58869 (equal? a58868 x)))
            (if a58869
              (let ((x58870 '#t)) x58870)
              (let ((a58871 (cdr lst))) (member? x a58871))))))))
  (define (foldl fun acc lst)
    (let ((a58872 (null? lst)))
      (if a58872
        acc
        (let ((a58873 (car lst)))
          (let ((a58874 (fun a58873 acc)))
            (let ((a58875 (cdr lst))) (foldl fun a58874 a58875)))))))
  (define (reverse-helper lst lst2)
    (let ((a58876 (null? lst)))
      (if a58876
        lst2
        (let ((a58877 (cdr lst)))
          (let ((a58878 (car lst)))
            (let ((a58879 (cons a58878 lst2)))
              (reverse-helper a58877 a58879)))))))
  (define (reverse lst) (let ((a58880 (list))) (reverse-helper lst a58880)))
  (define (take-helper lst n lst2)
    (let ((a58881 '0))
      (let ((a58882 (= n a58881)))
        (if a58882
          (let ((x58883 (reverse lst2))) x58883)
          (let ((a58884 (cdr lst)))
            (let ((a58885 '1))
              (let ((a58886 (- n a58885)))
                (let ((a58887 (car lst)))
                  (let ((a58888 (cons a58887 lst2)))
                    (take-helper a58884 a58886 a58888))))))))))
  (define (take lst n) (let ((a58889 (list))) (take-helper lst n a58889)))
  (define (length lst)
    (let ((a58890 (null? lst)))
      (if a58890
        (let ((x58891 '0)) x58891)
        (let ((a58892 '1))
          (let ((a58893 (cdr lst)))
            (let ((a58894 (length a58893))) (+ a58892 a58894)))))))
  (define (map proc lst)
    (let ((a58895 (null? lst)))
      (if a58895
        (let ((x58896 (list))) x58896)
        (let ((a58897 (car lst)))
          (let ((a58898 (proc a58897)))
            (let ((a58899 (cdr lst)))
              (let ((a58900 (map proc a58899))) (cons a58898 a58900))))))))
  (define (filter op lst)
    (let ((a58901 (null? lst)))
      (if a58901
        (let ((x58902 (list))) x58902)
        (let ((a58903 (car lst)))
          (let ((a58904 (op a58903)))
            (if a58904
              (let ((a58905 (car lst)))
                (let ((a58906 (cdr lst)))
                  (let ((a58907 (filter op a58906))) (cons a58905 a58907))))
              (let ((a58908 (cdr lst))) (filter op a58908))))))))
  (define (drop lst n)
    (let ((a58909 '0))
      (let ((a58910 (= n a58909)))
        (if a58910
          lst
          (let ((a58911 (cdr lst)))
            (let ((a58912 '1))
              (let ((a58913 (- n a58912))) (drop a58911 a58913))))))))
  (define (foldr proc acc lst)
    (let ((a58914 (null? lst)))
      (if a58914
        acc
        (let ((a58915 (car lst)))
          (let ((a58916 (cdr lst)))
            (let ((a58917 (foldr proc acc a58916))) (proc a58915 a58917)))))))
  (define (append lst1 lst2)
    (let ((a58918 (null? lst1)))
      (if a58918
        lst2
        (let ((a58919 (car lst1)))
          (let ((a58920 (cdr lst1)))
            (let ((a58921 (append a58920 lst2))) (cons a58919 a58921)))))))
  (define (hash . lst) (let ((x58922 (apply-prim hash lst))) x58922))
  (define (hash-ref h k) (let ((x58923 (prim hash-ref h k))) x58923))
  (define (hash-set h k v) (let ((x58924 (prim hash-set h k v))) x58924))
  (define (hash-has-key? h k) (let ((x58925 (prim hash-has-key? h k))) x58925))
  (define (hash-count h) (let ((x58926 (prim hash-count h))) x58926))
  (define (call)
    (let ((a58927 '100))
      (let ((a58928 '80))
        (let ((a58929 '10))
          (let ((a58930 '2))
            (let ((a58931 (hash a58927 a58928 a58929 a58930)))
              (let ((a58932 '5)) (hash-has-key? a58931 a58932))))))))
  (define (brouhaha_main) (let ((x58933 (call))) x58933)))
