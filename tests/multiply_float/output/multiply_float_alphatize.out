'((define (+ . lst) (let ((x85118 (apply-prim + lst))) x85118))
  (define (- . lst) (let ((x85119 (apply-prim - lst))) x85119))
  (define (* . lst) (let ((x85120 (apply-prim * lst))) x85120))
  (define (modulo a b) (let ((x85121 (prim modulo a b))) x85121))
  (define (/ . lst) (let ((x85122 (apply-prim / lst))) x85122))
  (define (= . lst) (let ((x85123 (apply-prim = lst))) x85123))
  (define (> . lst) (let ((x85124 (apply-prim > lst))) x85124))
  (define (< . lst) (let ((x85125 (apply-prim < lst))) x85125))
  (define (<= . lst) (let ((x85126 (apply-prim <= lst))) x85126))
  (define (>= . lst) (let ((x85127 (apply-prim >= lst))) x85127))
  (define (null? x) (let ((x85128 (prim null? x))) x85128))
  (define (equal? x y) (let ((x85129 (prim equal? x y))) x85129))
  (define (eq? x y) (let ((x85130 (prim eq? x y))) x85130))
  (define (cons a b) (let ((x85131 (prim cons a b))) x85131))
  (define (car lst) (let ((x85132 (prim car lst))) x85132))
  (define (cdr lst) (let ((x85133 (prim cdr lst))) x85133))
  (define (even? x)
    (let ((a85134 '0))
      (let ((a85135 '2))
        (let ((a85136 (modulo x a85135))) (equal? a85134 a85136)))))
  (define (odd? x)
    (let ((a85137 '1))
      (let ((a85138 '2))
        (let ((a85139 (modulo x a85138))) (equal? a85137 a85139)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a85140 (null? lst)))
      (if a85140
        (let ((x85141 '#f)) x85141)
        (let ((a85142 (car lst)))
          (let ((a85143 (equal? a85142 x)))
            (if a85143
              (let ((x85144 '#t)) x85144)
              (let ((a85145 (cdr lst))) (member? x a85145))))))))
  (define (foldl fun acc lst)
    (let ((a85146 (null? lst)))
      (if a85146
        acc
        (let ((a85147 (car lst)))
          (let ((a85148 (fun a85147 acc)))
            (let ((a85149 (cdr lst))) (foldl fun a85148 a85149)))))))
  (define (reverse-helper lst lst2)
    (let ((a85150 (null? lst)))
      (if a85150
        lst2
        (let ((a85151 (cdr lst)))
          (let ((a85152 (car lst)))
            (let ((a85153 (cons a85152 lst2)))
              (reverse-helper a85151 a85153)))))))
  (define (reverse lst) (let ((a85154 (list))) (reverse-helper lst a85154)))
  (define (take-helper lst n lst2)
    (let ((a85155 '0))
      (let ((a85156 (= n a85155)))
        (if a85156
          (let ((x85157 (reverse lst2))) x85157)
          (let ((a85158 (cdr lst)))
            (let ((a85159 '1))
              (let ((a85160 (- n a85159)))
                (let ((a85161 (car lst)))
                  (let ((a85162 (cons a85161 lst2)))
                    (take-helper a85158 a85160 a85162))))))))))
  (define (take lst n) (let ((a85163 (list))) (take-helper lst n a85163)))
  (define (length lst)
    (let ((a85164 (null? lst)))
      (if a85164
        (let ((x85165 '0)) x85165)
        (let ((a85166 '1))
          (let ((a85167 (cdr lst)))
            (let ((a85168 (length a85167))) (+ a85166 a85168)))))))
  (define (map proc lst)
    (let ((a85169 (null? lst)))
      (if a85169
        (let ((x85170 (list))) x85170)
        (let ((a85171 (car lst)))
          (let ((a85172 (proc a85171)))
            (let ((a85173 (cdr lst)))
              (let ((a85174 (map proc a85173))) (cons a85172 a85174))))))))
  (define (filter op lst)
    (let ((a85175 (null? lst)))
      (if a85175
        (let ((x85176 (list))) x85176)
        (let ((a85177 (car lst)))
          (let ((a85178 (op a85177)))
            (if a85178
              (let ((a85179 (car lst)))
                (let ((a85180 (cdr lst)))
                  (let ((a85181 (filter op a85180))) (cons a85179 a85181))))
              (let ((a85182 (cdr lst))) (filter op a85182))))))))
  (define (drop lst n)
    (let ((a85183 '0))
      (let ((a85184 (= n a85183)))
        (if a85184
          lst
          (let ((a85185 (cdr lst)))
            (let ((a85186 '1))
              (let ((a85187 (- n a85186))) (drop a85185 a85187))))))))
  (define (foldr proc acc lst)
    (let ((a85188 (null? lst)))
      (if a85188
        acc
        (let ((a85189 (car lst)))
          (let ((a85190 (cdr lst)))
            (let ((a85191 (foldr proc acc a85190))) (proc a85189 a85191)))))))
  (define (append lst1 lst2)
    (let ((a85192 (null? lst1)))
      (if a85192
        lst2
        (let ((a85193 (car lst1)))
          (let ((a85194 (cdr lst1)))
            (let ((a85195 (append a85194 lst2))) (cons a85193 a85195)))))))
  (define (hash . lst) (let ((x85196 (apply-prim hash lst))) x85196))
  (define (hash-ref h k) (let ((x85197 (prim hash-ref h k))) x85197))
  (define (hash-set h k v) (let ((x85198 (prim hash-set h k v))) x85198))
  (define (hash-has-key? h k) (let ((x85199 (prim hash-has-key? h k))) x85199))
  (define (hash-count h) (let ((x85200 (prim hash-count h))) x85200))
  (define (call)
    (let ((a85201 '1.4))
      (let ((a85202 '2.5)) (let ((a85203 '1.0)) (* a85201 a85202 a85203)))))
  (define (brouhaha_main) (let ((x85204 (call))) x85204)))
