'((define (+ . lst) (let ((x88833 (apply-prim + lst))) x88833))
  (define (- . lst) (let ((x88834 (apply-prim - lst))) x88834))
  (define (* . lst) (let ((x88835 (apply-prim * lst))) x88835))
  (define (modulo a b) (let ((x88836 (prim modulo a b))) x88836))
  (define (/ . lst) (let ((x88837 (apply-prim / lst))) x88837))
  (define (= . lst) (let ((x88838 (apply-prim = lst))) x88838))
  (define (> . lst) (let ((x88839 (apply-prim > lst))) x88839))
  (define (< . lst) (let ((x88840 (apply-prim < lst))) x88840))
  (define (<= . lst) (let ((x88841 (apply-prim <= lst))) x88841))
  (define (>= . lst) (let ((x88842 (apply-prim >= lst))) x88842))
  (define (null? x) (let ((x88843 (prim null? x))) x88843))
  (define (equal? x y) (let ((x88844 (prim equal? x y))) x88844))
  (define (eq? x y) (let ((x88845 (prim eq? x y))) x88845))
  (define (cons a b) (let ((x88846 (prim cons a b))) x88846))
  (define (car lst) (let ((x88847 (prim car lst))) x88847))
  (define (cdr lst) (let ((x88848 (prim cdr lst))) x88848))
  (define (even? x)
    (let ((a88849 '0))
      (let ((a88850 '2))
        (let ((a88851 (modulo x a88850))) (equal? a88849 a88851)))))
  (define (odd? x)
    (let ((a88852 '1))
      (let ((a88853 '2))
        (let ((a88854 (modulo x a88853))) (equal? a88852 a88854)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a88855 (null? lst)))
      (if a88855
        (let ((x88856 '#f)) x88856)
        (let ((a88857 (car lst)))
          (let ((a88858 (equal? a88857 x)))
            (if a88858
              (let ((x88859 '#t)) x88859)
              (let ((a88860 (cdr lst))) (member? x a88860))))))))
  (define (foldl fun acc lst)
    (let ((a88861 (null? lst)))
      (if a88861
        acc
        (let ((a88862 (car lst)))
          (let ((a88863 (fun a88862 acc)))
            (let ((a88864 (cdr lst))) (foldl fun a88863 a88864)))))))
  (define (reverse-helper lst lst2)
    (let ((a88865 (null? lst)))
      (if a88865
        lst2
        (let ((a88866 (cdr lst)))
          (let ((a88867 (car lst)))
            (let ((a88868 (cons a88867 lst2)))
              (reverse-helper a88866 a88868)))))))
  (define (reverse lst) (let ((a88869 (list))) (reverse-helper lst a88869)))
  (define (take-helper lst n lst2)
    (let ((a88870 '0))
      (let ((a88871 (= n a88870)))
        (if a88871
          (let ((x88872 (reverse lst2))) x88872)
          (let ((a88873 (cdr lst)))
            (let ((a88874 '1))
              (let ((a88875 (- n a88874)))
                (let ((a88876 (car lst)))
                  (let ((a88877 (cons a88876 lst2)))
                    (take-helper a88873 a88875 a88877))))))))))
  (define (take lst n) (let ((a88878 (list))) (take-helper lst n a88878)))
  (define (length lst)
    (let ((a88879 (null? lst)))
      (if a88879
        (let ((x88880 '0)) x88880)
        (let ((a88881 '1))
          (let ((a88882 (cdr lst)))
            (let ((a88883 (length a88882))) (+ a88881 a88883)))))))
  (define (map proc lst)
    (let ((a88884 (null? lst)))
      (if a88884
        (let ((x88885 (list))) x88885)
        (let ((a88886 (car lst)))
          (let ((a88887 (proc a88886)))
            (let ((a88888 (cdr lst)))
              (let ((a88889 (map proc a88888))) (cons a88887 a88889))))))))
  (define (filter op lst)
    (let ((a88890 (null? lst)))
      (if a88890
        (let ((x88891 (list))) x88891)
        (let ((a88892 (car lst)))
          (let ((a88893 (op a88892)))
            (if a88893
              (let ((a88894 (car lst)))
                (let ((a88895 (cdr lst)))
                  (let ((a88896 (filter op a88895))) (cons a88894 a88896))))
              (let ((a88897 (cdr lst))) (filter op a88897))))))))
  (define (drop lst n)
    (let ((a88898 '0))
      (let ((a88899 (= n a88898)))
        (if a88899
          lst
          (let ((a88900 (cdr lst)))
            (let ((a88901 '1))
              (let ((a88902 (- n a88901))) (drop a88900 a88902))))))))
  (define (foldr proc acc lst)
    (let ((a88903 (null? lst)))
      (if a88903
        acc
        (let ((a88904 (car lst)))
          (let ((a88905 (cdr lst)))
            (let ((a88906 (foldr proc acc a88905))) (proc a88904 a88906)))))))
  (define (append lst1 lst2)
    (let ((a88907 (null? lst1)))
      (if a88907
        lst2
        (let ((a88908 (car lst1)))
          (let ((a88909 (cdr lst1)))
            (let ((a88910 (append a88909 lst2))) (cons a88908 a88910)))))))
  (define (hash . lst) (let ((x88911 (apply-prim hash lst))) x88911))
  (define (hash-ref h k) (let ((x88912 (prim hash-ref h k))) x88912))
  (define (hash-set h k v) (let ((x88913 (prim hash-set h k v))) x88913))
  (define (hash-has-key? h k) (let ((x88914 (prim hash-has-key? h k))) x88914))
  (define (hash-count h) (let ((x88915 (prim hash-count h))) x88915))
  (define (call)
    (let ((a88916 '1))
      (let ((a88917 '2))
        (let ((a88918 '3))
          (let ((a88919 '4))
            (let ((a88920 '5))
              (let ((a88921 (* a88918 a88919 a88920)))
                (* a88916 a88917 a88921))))))))
  (define (brouhaha_main) (let ((x88922 (call))) x88922)))
