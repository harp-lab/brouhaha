'((define (+ . lst)
    (let ((kont8892389024 (prim car lst)))
      (let ((lst89025 (prim cdr lst)))
        (let ((x8883389026 (apply-prim + lst89025)))
          (kont8892389024 x8883389026)))))
  (define (- . lst)
    (let ((kont8892589027 (prim car lst)))
      (let ((lst89028 (prim cdr lst)))
        (let ((x8883489029 (apply-prim - lst89028)))
          (kont8892589027 x8883489029)))))
  (define (* . lst)
    (let ((kont8892789030 (prim car lst)))
      (let ((lst89031 (prim cdr lst)))
        (let ((x8883589032 (apply-prim * lst89031)))
          (kont8892789030 x8883589032)))))
  (define (modulo kont88929 a b)
    (let ((x8883689033 (prim modulo a b))) (kont88929 x8883689033)))
  (define (/ . lst)
    (let ((kont8893089034 (prim car lst)))
      (let ((lst89035 (prim cdr lst)))
        (let ((x8883789036 (apply-prim / lst89035)))
          (kont8893089034 x8883789036)))))
  (define (= . lst)
    (let ((kont8893289037 (prim car lst)))
      (let ((lst89038 (prim cdr lst)))
        (let ((x8883889039 (apply-prim = lst89038)))
          (kont8893289037 x8883889039)))))
  (define (> . lst)
    (let ((kont8893489040 (prim car lst)))
      (let ((lst89041 (prim cdr lst)))
        (let ((x8883989042 (apply-prim > lst89041)))
          (kont8893489040 x8883989042)))))
  (define (< . lst)
    (let ((kont8893689043 (prim car lst)))
      (let ((lst89044 (prim cdr lst)))
        (let ((x8884089045 (apply-prim < lst89044)))
          (kont8893689043 x8884089045)))))
  (define (<= . lst)
    (let ((kont8893889046 (prim car lst)))
      (let ((lst89047 (prim cdr lst)))
        (let ((x8884189048 (apply-prim <= lst89047)))
          (kont8893889046 x8884189048)))))
  (define (>= . lst)
    (let ((kont8894089049 (prim car lst)))
      (let ((lst89050 (prim cdr lst)))
        (let ((x8884289051 (apply-prim >= lst89050)))
          (kont8894089049 x8884289051)))))
  (define (null? kont88942 x)
    (let ((x8884389052 (prim null? x))) (kont88942 x8884389052)))
  (define (equal? kont88943 x y)
    (let ((x8884489053 (prim equal? x y))) (kont88943 x8884489053)))
  (define (eq? kont88944 x y)
    (let ((x8884589054 (prim eq? x y))) (kont88944 x8884589054)))
  (define (cons kont88945 a b)
    (let ((x8884689055 (prim cons a b))) (kont88945 x8884689055)))
  (define (car kont88946 lst)
    (let ((x8884789056 (prim car lst))) (kont88946 x8884789056)))
  (define (cdr kont88947 lst)
    (let ((x8884889057 (prim cdr lst))) (kont88947 x8884889057)))
  (define (even? kont88948 x)
    (let ((a8884989058 '0))
      (let ((a8885089059 '2))
        (let ((f8894989060
               (lambda (a8885189061)
                 (equal? kont88948 a8884989058 a8885189061))))
          (modulo f8894989060 x a8885089059)))))
  (define (odd? kont88950 x)
    (let ((a8885289062 '1))
      (let ((a8885389063 '2))
        (let ((f8895189064
               (lambda (a8885489065)
                 (equal? kont88950 a8885289062 a8885489065))))
          (modulo f8895189064 x a8885389063)))))
  (define (list . x)
    (let ((kont8895289066 (prim car x)))
      (let ((x89067 (prim cdr x))) (kont8895289066 x89067))))
  (define (member? kont88954 x lst)
    (let ((f8895889068
           (lambda (a8885589069)
             (if a8885589069
               (let ((x8885689070 '#f)) (kont88954 x8885689070))
               (let ((f8895789071
                      (lambda (a8885789072)
                        (let ((f8895689073
                               (lambda (a8885889074)
                                 (if a8885889074
                                   (let ((x8885989075 '#t))
                                     (kont88954 x8885989075))
                                   (let ((f8895589076
                                          (lambda (a8886089077)
                                            (member?
                                             kont88954
                                             x
                                             a8886089077))))
                                     (cdr f8895589076 lst))))))
                          (equal? f8895689073 a8885789072 x)))))
                 (car f8895789071 lst))))))
      (null? f8895889068 lst)))
  (define (foldl kont88959 fun acc lst)
    (let ((f8896389078
           (lambda (a8886189079)
             (if a8886189079
               (kont88959 acc)
               (let ((f8896289080
                      (lambda (a8886289081)
                        (let ((f8896189082
                               (lambda (a8886389083)
                                 (let ((f8896089084
                                        (lambda (a8886489085)
                                          (foldl
                                           kont88959
                                           fun
                                           a8886389083
                                           a8886489085))))
                                   (cdr f8896089084 lst)))))
                          (fun f8896189082 a8886289081 acc)))))
                 (car f8896289080 lst))))))
      (null? f8896389078 lst)))
  (define (reverse-helper kont88964 lst lst2)
    (let ((f8896889086
           (lambda (a8886589087)
             (if a8886589087
               (kont88964 lst2)
               (let ((f8896789088
                      (lambda (a8886689089)
                        (let ((f8896689090
                               (lambda (a8886789091)
                                 (let ((f8896589092
                                        (lambda (a8886889093)
                                          (reverse-helper
                                           kont88964
                                           a8886689089
                                           a8886889093))))
                                   (cons f8896589092 a8886789091 lst2)))))
                          (car f8896689090 lst)))))
                 (cdr f8896789088 lst))))))
      (null? f8896889086 lst)))
  (define (reverse kont88969 lst)
    (let ((f8897089094
           (lambda (a8886989095) (reverse-helper kont88969 lst a8886989095))))
      (list f8897089094)))
  (define (take-helper kont88971 lst n lst2)
    (let ((a8887089096 '0))
      (let ((f8897789097
             (lambda (a8887189098)
               (if a8887189098
                 (let ((f8897289099
                        (lambda (x8887289100) (kont88971 x8887289100))))
                   (reverse f8897289099 lst2))
                 (let ((f8897689101
                        (lambda (a8887389102)
                          (let ((a8887489103 '1))
                            (let ((f8897589104
                                   (lambda (a8887589105)
                                     (let ((f8897489106
                                            (lambda (a8887689107)
                                              (let ((f8897389108
                                                     (lambda (a8887789109)
                                                       (take-helper
                                                        kont88971
                                                        a8887389102
                                                        a8887589105
                                                        a8887789109))))
                                                (cons
                                                 f8897389108
                                                 a8887689107
                                                 lst2)))))
                                       (car f8897489106 lst)))))
                              (- f8897589104 n a8887489103))))))
                   (cdr f8897689101 lst))))))
        (= f8897789097 n a8887089096))))
  (define (take kont88978 lst n)
    (let ((f8897989110
           (lambda (a8887889111) (take-helper kont88978 lst n a8887889111))))
      (list f8897989110)))
  (define (length kont88980 lst)
    (let ((f8898389112
           (lambda (a8887989113)
             (if a8887989113
               (let ((x8888089114 '0)) (kont88980 x8888089114))
               (let ((a8888189115 '1))
                 (let ((f8898289116
                        (lambda (a8888289117)
                          (let ((f8898189118
                                 (lambda (a8888389119)
                                   (+ kont88980 a8888189115 a8888389119))))
                            (length f8898189118 a8888289117)))))
                   (cdr f8898289116 lst)))))))
      (null? f8898389112 lst)))
  (define (map kont88984 proc lst)
    (let ((f8899089120
           (lambda (a8888489121)
             (if a8888489121
               (let ((f8898589122
                      (lambda (x8888589123) (kont88984 x8888589123))))
                 (list f8898589122))
               (let ((f8898989124
                      (lambda (a8888689125)
                        (let ((f8898889126
                               (lambda (a8888789127)
                                 (let ((f8898789128
                                        (lambda (a8888889129)
                                          (let ((f8898689130
                                                 (lambda (a8888989131)
                                                   (cons
                                                    kont88984
                                                    a8888789127
                                                    a8888989131))))
                                            (map
                                             f8898689130
                                             proc
                                             a8888889129)))))
                                   (cdr f8898789128 lst)))))
                          (proc f8898889126 a8888689125)))))
                 (car f8898989124 lst))))))
      (null? f8899089120 lst)))
  (define (filter kont88991 op lst)
    (let ((f8899989132
           (lambda (a8889089133)
             (if a8889089133
               (let ((f8899289134
                      (lambda (x8889189135) (kont88991 x8889189135))))
                 (list f8899289134))
               (let ((f8899889136
                      (lambda (a8889289137)
                        (let ((f8899789138
                               (lambda (a8889389139)
                                 (if a8889389139
                                   (let ((f8899589140
                                          (lambda (a8889489141)
                                            (let ((f8899489142
                                                   (lambda (a8889589143)
                                                     (let ((f8899389144
                                                            (lambda (a8889689145)
                                                              (cons
                                                               kont88991
                                                               a8889489141
                                                               a8889689145))))
                                                       (filter
                                                        f8899389144
                                                        op
                                                        a8889589143)))))
                                              (cdr f8899489142 lst)))))
                                     (car f8899589140 lst))
                                   (let ((f8899689146
                                          (lambda (a8889789147)
                                            (filter
                                             kont88991
                                             op
                                             a8889789147))))
                                     (cdr f8899689146 lst))))))
                          (op f8899789138 a8889289137)))))
                 (car f8899889136 lst))))))
      (null? f8899989132 lst)))
  (define (drop kont89000 lst n)
    (let ((a8889889148 '0))
      (let ((f8900389149
             (lambda (a8889989150)
               (if a8889989150
                 (kont89000 lst)
                 (let ((f8900289151
                        (lambda (a8890089152)
                          (let ((a8890189153 '1))
                            (let ((f8900189154
                                   (lambda (a8890289155)
                                     (drop
                                      kont89000
                                      a8890089152
                                      a8890289155))))
                              (- f8900189154 n a8890189153))))))
                   (cdr f8900289151 lst))))))
        (= f8900389149 n a8889889148))))
  (define (foldr kont89004 proc acc lst)
    (let ((f8900889156
           (lambda (a8890389157)
             (if a8890389157
               (kont89004 acc)
               (let ((f8900789158
                      (lambda (a8890489159)
                        (let ((f8900689160
                               (lambda (a8890589161)
                                 (let ((f8900589162
                                        (lambda (a8890689163)
                                          (proc
                                           kont89004
                                           a8890489159
                                           a8890689163))))
                                   (foldr f8900589162 proc acc a8890589161)))))
                          (cdr f8900689160 lst)))))
                 (car f8900789158 lst))))))
      (null? f8900889156 lst)))
  (define (append kont89009 lst1 lst2)
    (let ((f8901389164
           (lambda (a8890789165)
             (if a8890789165
               (kont89009 lst2)
               (let ((f8901289166
                      (lambda (a8890889167)
                        (let ((f8901189168
                               (lambda (a8890989169)
                                 (let ((f8901089170
                                        (lambda (a8891089171)
                                          (cons
                                           kont89009
                                           a8890889167
                                           a8891089171))))
                                   (append f8901089170 a8890989169 lst2)))))
                          (cdr f8901189168 lst1)))))
                 (car f8901289166 lst1))))))
      (null? f8901389164 lst1)))
  (define (hash . lst)
    (let ((kont8901489172 (prim car lst)))
      (let ((lst89173 (prim cdr lst)))
        (let ((x8891189174 (apply-prim hash lst89173)))
          (kont8901489172 x8891189174)))))
  (define (hash-ref kont89016 h k)
    (let ((x8891289175 (prim hash-ref h k))) (kont89016 x8891289175)))
  (define (hash-set kont89017 h k v)
    (let ((x8891389176 (prim hash-set h k v))) (kont89017 x8891389176)))
  (define (hash-has-key? kont89018 h k)
    (let ((x8891489177 (prim hash-has-key? h k))) (kont89018 x8891489177)))
  (define (hash-count kont89019 h)
    (let ((x8891589178 (prim hash-count h))) (kont89019 x8891589178)))
  (define (call kont89020)
    (let ((a8891689179 '1))
      (let ((a8891789180 '2))
        (let ((a8891889181 '3))
          (let ((a8891989182 '4))
            (let ((a8892089183 '5))
              (let ((f8902189184
                     (lambda (a8892189185)
                       (* kont89020 a8891689179 a8891789180 a8892189185))))
                (* f8902189184 a8891889181 a8891989182 a8892089183))))))))
  (define (brouhaha_main kont89022)
    (let ((f8902389186 (lambda (x8892289187) (kont89022 x8892289187))))
      (call f8902389186))))
