'((define (+ . lst) (let ((x83462 (apply-prim + lst))) x83462))
  (define (- . lst) (let ((x83463 (apply-prim - lst))) x83463))
  (define (* . lst) (let ((x83464 (apply-prim * lst))) x83464))
  (define (modulo a b) (let ((x83465 (prim modulo a b))) x83465))
  (define (/ . lst) (let ((x83466 (apply-prim / lst))) x83466))
  (define (= . lst) (let ((x83467 (apply-prim = lst))) x83467))
  (define (> . lst) (let ((x83468 (apply-prim > lst))) x83468))
  (define (< . lst) (let ((x83469 (apply-prim < lst))) x83469))
  (define (<= . lst) (let ((x83470 (apply-prim <= lst))) x83470))
  (define (>= . lst) (let ((x83471 (apply-prim >= lst))) x83471))
  (define (null? x) (let ((x83472 (prim null? x))) x83472))
  (define (equal? x y) (let ((x83473 (prim equal? x y))) x83473))
  (define (eq? x y) (let ((x83474 (prim eq? x y))) x83474))
  (define (cons a b) (let ((x83475 (prim cons a b))) x83475))
  (define (car lst) (let ((x83476 (prim car lst))) x83476))
  (define (cdr lst) (let ((x83477 (prim cdr lst))) x83477))
  (define (even? x)
    (let ((a83478 '0))
      (let ((a83479 '2))
        (let ((a83480 (modulo x a83479))) (equal? a83478 a83480)))))
  (define (odd? x)
    (let ((a83481 '1))
      (let ((a83482 '2))
        (let ((a83483 (modulo x a83482))) (equal? a83481 a83483)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a83484 (null? lst)))
      (if a83484
        (let ((x83485 '#f)) x83485)
        (let ((a83486 (car lst)))
          (let ((a83487 (equal? a83486 x)))
            (if a83487
              (let ((x83488 '#t)) x83488)
              (let ((a83489 (cdr lst))) (member? x a83489))))))))
  (define (foldl fun acc lst)
    (let ((a83490 (null? lst)))
      (if a83490
        acc
        (let ((a83491 (car lst)))
          (let ((a83492 (fun a83491 acc)))
            (let ((a83493 (cdr lst))) (foldl fun a83492 a83493)))))))
  (define (reverse-helper lst lst2)
    (let ((a83494 (null? lst)))
      (if a83494
        lst2
        (let ((a83495 (cdr lst)))
          (let ((a83496 (car lst)))
            (let ((a83497 (cons a83496 lst2)))
              (reverse-helper a83495 a83497)))))))
  (define (reverse lst) (let ((a83498 (list))) (reverse-helper lst a83498)))
  (define (take-helper lst n lst2)
    (let ((a83499 '0))
      (let ((a83500 (= n a83499)))
        (if a83500
          (let ((x83501 (reverse lst2))) x83501)
          (let ((a83502 (cdr lst)))
            (let ((a83503 '1))
              (let ((a83504 (- n a83503)))
                (let ((a83505 (car lst)))
                  (let ((a83506 (cons a83505 lst2)))
                    (take-helper a83502 a83504 a83506))))))))))
  (define (take lst n) (let ((a83507 (list))) (take-helper lst n a83507)))
  (define (length lst)
    (let ((a83508 (null? lst)))
      (if a83508
        (let ((x83509 '0)) x83509)
        (let ((a83510 '1))
          (let ((a83511 (cdr lst)))
            (let ((a83512 (length a83511))) (+ a83510 a83512)))))))
  (define (map proc lst)
    (let ((a83513 (null? lst)))
      (if a83513
        (let ((x83514 (list))) x83514)
        (let ((a83515 (car lst)))
          (let ((a83516 (proc a83515)))
            (let ((a83517 (cdr lst)))
              (let ((a83518 (map proc a83517))) (cons a83516 a83518))))))))
  (define (filter op lst)
    (let ((a83519 (null? lst)))
      (if a83519
        (let ((x83520 (list))) x83520)
        (let ((a83521 (car lst)))
          (let ((a83522 (op a83521)))
            (if a83522
              (let ((a83523 (car lst)))
                (let ((a83524 (cdr lst)))
                  (let ((a83525 (filter op a83524))) (cons a83523 a83525))))
              (let ((a83526 (cdr lst))) (filter op a83526))))))))
  (define (drop lst n)
    (let ((a83527 '0))
      (let ((a83528 (= n a83527)))
        (if a83528
          lst
          (let ((a83529 (cdr lst)))
            (let ((a83530 '1))
              (let ((a83531 (- n a83530))) (drop a83529 a83531))))))))
  (define (foldr proc acc lst)
    (let ((a83532 (null? lst)))
      (if a83532
        acc
        (let ((a83533 (car lst)))
          (let ((a83534 (cdr lst)))
            (let ((a83535 (foldr proc acc a83534))) (proc a83533 a83535)))))))
  (define (append lst1 lst2)
    (let ((a83536 (null? lst1)))
      (if a83536
        lst2
        (let ((a83537 (car lst1)))
          (let ((a83538 (cdr lst1)))
            (let ((a83539 (append a83538 lst2))) (cons a83537 a83539)))))))
  (define (hash . lst) (let ((x83540 (apply-prim hash lst))) x83540))
  (define (hash-ref h k) (let ((x83541 (prim hash-ref h k))) x83541))
  (define (hash-set h k v) (let ((x83542 (prim hash-set h k v))) x83542))
  (define (hash-has-key? h k) (let ((x83543 (prim hash-has-key? h k))) x83543))
  (define (hash-count h) (let ((x83544 (prim hash-count h))) x83544))
  (define (call)
    (let ((a83545 '1))
      (let ((a83546 '2))
        (let ((a83547 '3))
          (let ((a83548 '4))
            (let ((a83549 '5))
              (let ((a83550 (* a83547 a83548 a83549)))
                (* a83545 a83546 a83550))))))))
  (define (brouhaha_main) (let ((x83551 (call))) x83551)))
