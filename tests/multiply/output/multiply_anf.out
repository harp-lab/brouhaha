'((define (+ . lst)
    (let ((kont83552 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83462 (apply-prim + lst))) (kont83552 x83462)))))
  (define (- . lst)
    (let ((kont83554 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83463 (apply-prim - lst))) (kont83554 x83463)))))
  (define (* . lst)
    (let ((kont83556 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83464 (apply-prim * lst))) (kont83556 x83464)))))
  (define (modulo kont83558 a b)
    (let ((x83465 (prim modulo a b))) (kont83558 x83465)))
  (define (/ . lst)
    (let ((kont83559 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83466 (apply-prim / lst))) (kont83559 x83466)))))
  (define (= . lst)
    (let ((kont83561 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83467 (apply-prim = lst))) (kont83561 x83467)))))
  (define (> . lst)
    (let ((kont83563 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83468 (apply-prim > lst))) (kont83563 x83468)))))
  (define (< . lst)
    (let ((kont83565 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83469 (apply-prim < lst))) (kont83565 x83469)))))
  (define (<= . lst)
    (let ((kont83567 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83470 (apply-prim <= lst))) (kont83567 x83470)))))
  (define (>= . lst)
    (let ((kont83569 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83471 (apply-prim >= lst))) (kont83569 x83471)))))
  (define (null? kont83571 x)
    (let ((x83472 (prim null? x))) (kont83571 x83472)))
  (define (equal? kont83572 x y)
    (let ((x83473 (prim equal? x y))) (kont83572 x83473)))
  (define (eq? kont83573 x y)
    (let ((x83474 (prim eq? x y))) (kont83573 x83474)))
  (define (cons kont83574 a b)
    (let ((x83475 (prim cons a b))) (kont83574 x83475)))
  (define (car kont83575 lst)
    (let ((x83476 (prim car lst))) (kont83575 x83476)))
  (define (cdr kont83576 lst)
    (let ((x83477 (prim cdr lst))) (kont83576 x83477)))
  (define (even? kont83577 x)
    (let ((a83478 '0))
      (let ((a83479 '2))
        (let ((f83578 (lambda (a83480) (equal? kont83577 a83478 a83480))))
          (modulo f83578 x a83479)))))
  (define (odd? kont83579 x)
    (let ((a83481 '1))
      (let ((a83482 '2))
        (let ((f83580 (lambda (a83483) (equal? kont83579 a83481 a83483))))
          (modulo f83580 x a83482)))))
  (define (list . x)
    (let ((kont83581 (prim car x))) (let ((x (prim cdr x))) (kont83581 x))))
  (define (member? kont83583 x lst)
    (let ((f83587
           (lambda (a83484)
             (if a83484
               (let ((x83485 '#f)) (kont83583 x83485))
               (let ((f83586
                      (lambda (a83486)
                        (let ((f83585
                               (lambda (a83487)
                                 (if a83487
                                   (let ((x83488 '#t)) (kont83583 x83488))
                                   (let ((f83584
                                          (lambda (a83489)
                                            (member? kont83583 x a83489))))
                                     (cdr f83584 lst))))))
                          (equal? f83585 a83486 x)))))
                 (car f83586 lst))))))
      (null? f83587 lst)))
  (define (foldl kont83588 fun acc lst)
    (let ((f83592
           (lambda (a83490)
             (if a83490
               (kont83588 acc)
               (let ((f83591
                      (lambda (a83491)
                        (let ((f83590
                               (lambda (a83492)
                                 (let ((f83589
                                        (lambda (a83493)
                                          (foldl
                                           kont83588
                                           fun
                                           a83492
                                           a83493))))
                                   (cdr f83589 lst)))))
                          (fun f83590 a83491 acc)))))
                 (car f83591 lst))))))
      (null? f83592 lst)))
  (define (reverse-helper kont83593 lst lst2)
    (let ((f83597
           (lambda (a83494)
             (if a83494
               (kont83593 lst2)
               (let ((f83596
                      (lambda (a83495)
                        (let ((f83595
                               (lambda (a83496)
                                 (let ((f83594
                                        (lambda (a83497)
                                          (reverse-helper
                                           kont83593
                                           a83495
                                           a83497))))
                                   (cons f83594 a83496 lst2)))))
                          (car f83595 lst)))))
                 (cdr f83596 lst))))))
      (null? f83597 lst)))
  (define (reverse kont83598 lst)
    (let ((f83599 (lambda (a83498) (reverse-helper kont83598 lst a83498))))
      (list f83599)))
  (define (take-helper kont83600 lst n lst2)
    (let ((a83499 '0))
      (let ((f83606
             (lambda (a83500)
               (if a83500
                 (let ((f83601 (lambda (x83501) (kont83600 x83501))))
                   (reverse f83601 lst2))
                 (let ((f83605
                        (lambda (a83502)
                          (let ((a83503 '1))
                            (let ((f83604
                                   (lambda (a83504)
                                     (let ((f83603
                                            (lambda (a83505)
                                              (let ((f83602
                                                     (lambda (a83506)
                                                       (take-helper
                                                        kont83600
                                                        a83502
                                                        a83504
                                                        a83506))))
                                                (cons f83602 a83505 lst2)))))
                                       (car f83603 lst)))))
                              (- f83604 n a83503))))))
                   (cdr f83605 lst))))))
        (= f83606 n a83499))))
  (define (take kont83607 lst n)
    (let ((f83608 (lambda (a83507) (take-helper kont83607 lst n a83507))))
      (list f83608)))
  (define (length kont83609 lst)
    (let ((f83612
           (lambda (a83508)
             (if a83508
               (let ((x83509 '0)) (kont83609 x83509))
               (let ((a83510 '1))
                 (let ((f83611
                        (lambda (a83511)
                          (let ((f83610
                                 (lambda (a83512)
                                   (+ kont83609 a83510 a83512))))
                            (length f83610 a83511)))))
                   (cdr f83611 lst)))))))
      (null? f83612 lst)))
  (define (map kont83613 proc lst)
    (let ((f83619
           (lambda (a83513)
             (if a83513
               (let ((f83614 (lambda (x83514) (kont83613 x83514))))
                 (list f83614))
               (let ((f83618
                      (lambda (a83515)
                        (let ((f83617
                               (lambda (a83516)
                                 (let ((f83616
                                        (lambda (a83517)
                                          (let ((f83615
                                                 (lambda (a83518)
                                                   (cons
                                                    kont83613
                                                    a83516
                                                    a83518))))
                                            (map f83615 proc a83517)))))
                                   (cdr f83616 lst)))))
                          (proc f83617 a83515)))))
                 (car f83618 lst))))))
      (null? f83619 lst)))
  (define (filter kont83620 op lst)
    (let ((f83628
           (lambda (a83519)
             (if a83519
               (let ((f83621 (lambda (x83520) (kont83620 x83520))))
                 (list f83621))
               (let ((f83627
                      (lambda (a83521)
                        (let ((f83626
                               (lambda (a83522)
                                 (if a83522
                                   (let ((f83624
                                          (lambda (a83523)
                                            (let ((f83623
                                                   (lambda (a83524)
                                                     (let ((f83622
                                                            (lambda (a83525)
                                                              (cons
                                                               kont83620
                                                               a83523
                                                               a83525))))
                                                       (filter
                                                        f83622
                                                        op
                                                        a83524)))))
                                              (cdr f83623 lst)))))
                                     (car f83624 lst))
                                   (let ((f83625
                                          (lambda (a83526)
                                            (filter kont83620 op a83526))))
                                     (cdr f83625 lst))))))
                          (op f83626 a83521)))))
                 (car f83627 lst))))))
      (null? f83628 lst)))
  (define (drop kont83629 lst n)
    (let ((a83527 '0))
      (let ((f83632
             (lambda (a83528)
               (if a83528
                 (kont83629 lst)
                 (let ((f83631
                        (lambda (a83529)
                          (let ((a83530 '1))
                            (let ((f83630
                                   (lambda (a83531)
                                     (drop kont83629 a83529 a83531))))
                              (- f83630 n a83530))))))
                   (cdr f83631 lst))))))
        (= f83632 n a83527))))
  (define (foldr kont83633 proc acc lst)
    (let ((f83637
           (lambda (a83532)
             (if a83532
               (kont83633 acc)
               (let ((f83636
                      (lambda (a83533)
                        (let ((f83635
                               (lambda (a83534)
                                 (let ((f83634
                                        (lambda (a83535)
                                          (proc kont83633 a83533 a83535))))
                                   (foldr f83634 proc acc a83534)))))
                          (cdr f83635 lst)))))
                 (car f83636 lst))))))
      (null? f83637 lst)))
  (define (append kont83638 lst1 lst2)
    (let ((f83642
           (lambda (a83536)
             (if a83536
               (kont83638 lst2)
               (let ((f83641
                      (lambda (a83537)
                        (let ((f83640
                               (lambda (a83538)
                                 (let ((f83639
                                        (lambda (a83539)
                                          (cons kont83638 a83537 a83539))))
                                   (append f83639 a83538 lst2)))))
                          (cdr f83640 lst1)))))
                 (car f83641 lst1))))))
      (null? f83642 lst1)))
  (define (hash . lst)
    (let ((kont83643 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x83540 (apply-prim hash lst))) (kont83643 x83540)))))
  (define (hash-ref kont83645 h k)
    (let ((x83541 (prim hash-ref h k))) (kont83645 x83541)))
  (define (hash-set kont83646 h k v)
    (let ((x83542 (prim hash-set h k v))) (kont83646 x83542)))
  (define (hash-has-key? kont83647 h k)
    (let ((x83543 (prim hash-has-key? h k))) (kont83647 x83543)))
  (define (hash-count kont83648 h)
    (let ((x83544 (prim hash-count h))) (kont83648 x83544)))
  (define (call kont83649)
    (let ((a83545 '1))
      (let ((a83546 '2))
        (let ((a83547 '3))
          (let ((a83548 '4))
            (let ((a83549 '5))
              (let ((f83650
                     (lambda (a83550) (* kont83649 a83545 a83546 a83550))))
                (* f83650 a83547 a83548 a83549))))))))
  (define (brouhaha_main kont83651)
    (let ((f83652 (lambda (x83551) (kont83651 x83551)))) (call f83652))))
