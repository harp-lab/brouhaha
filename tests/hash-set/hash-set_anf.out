'((define (+ . lst)
    (let ((kont61911 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61818 (apply-prim + lst))) (kont61911 x61818)))))
  (define (- . lst)
    (let ((kont61913 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61819 (apply-prim - lst))) (kont61913 x61819)))))
  (define (* . lst)
    (let ((kont61915 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61820 (apply-prim * lst))) (kont61915 x61820)))))
  (define (modulo kont61917 a b)
    (let ((x61821 (prim modulo a b))) (kont61917 x61821)))
  (define (/ . lst)
    (let ((kont61918 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61822 (apply-prim / lst))) (kont61918 x61822)))))
  (define (= . lst)
    (let ((kont61920 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61823 (apply-prim = lst))) (kont61920 x61823)))))
  (define (> . lst)
    (let ((kont61922 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61824 (apply-prim > lst))) (kont61922 x61824)))))
  (define (< . lst)
    (let ((kont61924 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61825 (apply-prim < lst))) (kont61924 x61825)))))
  (define (<= . lst)
    (let ((kont61926 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61826 (apply-prim <= lst))) (kont61926 x61826)))))
  (define (>= . lst)
    (let ((kont61928 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61827 (apply-prim >= lst))) (kont61928 x61827)))))
  (define (null? kont61930 x)
    (let ((x61828 (prim null? x))) (kont61930 x61828)))
  (define (equal? kont61931 x y)
    (let ((x61829 (prim equal? x y))) (kont61931 x61829)))
  (define (eq? kont61932 x y)
    (let ((x61830 (prim eq? x y))) (kont61932 x61830)))
  (define (cons kont61933 a b)
    (let ((x61831 (prim cons a b))) (kont61933 x61831)))
  (define (car kont61934 lst)
    (let ((x61832 (prim car lst))) (kont61934 x61832)))
  (define (cdr kont61935 lst)
    (let ((x61833 (prim cdr lst))) (kont61935 x61833)))
  (define (even? kont61936 x)
    (let ((a61834 '0))
      (let ((a61835 '2))
        (let ((f61937 (lambda (a61836) (equal? kont61936 a61834 a61836))))
          (modulo f61937 x a61835)))))
  (define (odd? kont61938 x)
    (let ((a61837 '1))
      (let ((a61838 '2))
        (let ((f61939 (lambda (a61839) (equal? kont61938 a61837 a61839))))
          (modulo f61939 x a61838)))))
  (define (list . x)
    (let ((kont61940 (prim car x))) (let ((x (prim cdr x))) (kont61940 x))))
  (define (member? kont61942 x lst)
    (let ((f61946
           (lambda (a61840)
             (if a61840
               (let ((x61841 '#f)) (kont61942 x61841))
               (let ((f61945
                      (lambda (a61842)
                        (let ((f61944
                               (lambda (a61843)
                                 (if a61843
                                   (let ((x61844 '#t)) (kont61942 x61844))
                                   (let ((f61943
                                          (lambda (a61845)
                                            (member? kont61942 x a61845))))
                                     (cdr f61943 lst))))))
                          (equal? f61944 a61842 x)))))
                 (car f61945 lst))))))
      (null? f61946 lst)))
  (define (foldl kont61947 fun acc lst)
    (let ((f61951
           (lambda (a61846)
             (if a61846
               (kont61947 acc)
               (let ((f61950
                      (lambda (a61847)
                        (let ((f61949
                               (lambda (a61848)
                                 (let ((f61948
                                        (lambda (a61849)
                                          (foldl
                                           kont61947
                                           fun
                                           a61848
                                           a61849))))
                                   (cdr f61948 lst)))))
                          (fun f61949 a61847 acc)))))
                 (car f61950 lst))))))
      (null? f61951 lst)))
  (define (reverse-helper kont61952 lst lst2)
    (let ((f61956
           (lambda (a61850)
             (if a61850
               (kont61952 lst2)
               (let ((f61955
                      (lambda (a61851)
                        (let ((f61954
                               (lambda (a61852)
                                 (let ((f61953
                                        (lambda (a61853)
                                          (reverse-helper
                                           kont61952
                                           a61851
                                           a61853))))
                                   (cons f61953 a61852 lst2)))))
                          (car f61954 lst)))))
                 (cdr f61955 lst))))))
      (null? f61956 lst)))
  (define (reverse kont61957 lst)
    (let ((f61958 (lambda (a61854) (reverse-helper kont61957 lst a61854))))
      (list f61958)))
  (define (take-helper kont61959 lst n lst2)
    (let ((a61855 '0))
      (let ((f61965
             (lambda (a61856)
               (if a61856
                 (let ((f61960 (lambda (x61857) (kont61959 x61857))))
                   (reverse f61960 lst2))
                 (let ((f61964
                        (lambda (a61858)
                          (let ((a61859 '1))
                            (let ((f61963
                                   (lambda (a61860)
                                     (let ((f61962
                                            (lambda (a61861)
                                              (let ((f61961
                                                     (lambda (a61862)
                                                       (take-helper
                                                        kont61959
                                                        a61858
                                                        a61860
                                                        a61862))))
                                                (cons f61961 a61861 lst2)))))
                                       (car f61962 lst)))))
                              (- f61963 n a61859))))))
                   (cdr f61964 lst))))))
        (= f61965 n a61855))))
  (define (take kont61966 lst n)
    (let ((f61967 (lambda (a61863) (take-helper kont61966 lst n a61863))))
      (list f61967)))
  (define (length kont61968 lst)
    (let ((f61971
           (lambda (a61864)
             (if a61864
               (let ((x61865 '0)) (kont61968 x61865))
               (let ((a61866 '1))
                 (let ((f61970
                        (lambda (a61867)
                          (let ((f61969
                                 (lambda (a61868)
                                   (+ kont61968 a61866 a61868))))
                            (length f61969 a61867)))))
                   (cdr f61970 lst)))))))
      (null? f61971 lst)))
  (define (map kont61972 proc lst)
    (let ((f61978
           (lambda (a61869)
             (if a61869
               (let ((f61973 (lambda (x61870) (kont61972 x61870))))
                 (list f61973))
               (let ((f61977
                      (lambda (a61871)
                        (let ((f61976
                               (lambda (a61872)
                                 (let ((f61975
                                        (lambda (a61873)
                                          (let ((f61974
                                                 (lambda (a61874)
                                                   (cons
                                                    kont61972
                                                    a61872
                                                    a61874))))
                                            (map f61974 proc a61873)))))
                                   (cdr f61975 lst)))))
                          (proc f61976 a61871)))))
                 (car f61977 lst))))))
      (null? f61978 lst)))
  (define (filter kont61979 op lst)
    (let ((f61987
           (lambda (a61875)
             (if a61875
               (let ((f61980 (lambda (x61876) (kont61979 x61876))))
                 (list f61980))
               (let ((f61986
                      (lambda (a61877)
                        (let ((f61985
                               (lambda (a61878)
                                 (if a61878
                                   (let ((f61983
                                          (lambda (a61879)
                                            (let ((f61982
                                                   (lambda (a61880)
                                                     (let ((f61981
                                                            (lambda (a61881)
                                                              (cons
                                                               kont61979
                                                               a61879
                                                               a61881))))
                                                       (filter
                                                        f61981
                                                        op
                                                        a61880)))))
                                              (cdr f61982 lst)))))
                                     (car f61983 lst))
                                   (let ((f61984
                                          (lambda (a61882)
                                            (filter kont61979 op a61882))))
                                     (cdr f61984 lst))))))
                          (op f61985 a61877)))))
                 (car f61986 lst))))))
      (null? f61987 lst)))
  (define (drop kont61988 lst n)
    (let ((a61883 '0))
      (let ((f61991
             (lambda (a61884)
               (if a61884
                 (kont61988 lst)
                 (let ((f61990
                        (lambda (a61885)
                          (let ((a61886 '1))
                            (let ((f61989
                                   (lambda (a61887)
                                     (drop kont61988 a61885 a61887))))
                              (- f61989 n a61886))))))
                   (cdr f61990 lst))))))
        (= f61991 n a61883))))
  (define (foldr kont61992 proc acc lst)
    (let ((f61996
           (lambda (a61888)
             (if a61888
               (kont61992 acc)
               (let ((f61995
                      (lambda (a61889)
                        (let ((f61994
                               (lambda (a61890)
                                 (let ((f61993
                                        (lambda (a61891)
                                          (proc kont61992 a61889 a61891))))
                                   (foldr f61993 proc acc a61890)))))
                          (cdr f61994 lst)))))
                 (car f61995 lst))))))
      (null? f61996 lst)))
  (define (append kont61997 lst1 lst2)
    (let ((f62001
           (lambda (a61892)
             (if a61892
               (kont61997 lst2)
               (let ((f62000
                      (lambda (a61893)
                        (let ((f61999
                               (lambda (a61894)
                                 (let ((f61998
                                        (lambda (a61895)
                                          (cons kont61997 a61893 a61895))))
                                   (append f61998 a61894 lst2)))))
                          (cdr f61999 lst1)))))
                 (car f62000 lst1))))))
      (null? f62001 lst1)))
  (define (hash . lst)
    (let ((kont62002 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61896 (apply-prim hash lst))) (kont62002 x61896)))))
  (define (hash-ref kont62004 h k)
    (let ((x61897 (prim hash-ref h k))) (kont62004 x61897)))
  (define (hash-set kont62005 h k v)
    (let ((x61898 (prim hash-set h k v))) (kont62005 x61898)))
  (define (hash-has-key? kont62006 h k)
    (let ((x61899 (prim hash-has-key? h k))) (kont62006 x61899)))
  (define (hash-count kont62007 h)
    (let ((x61900 (prim hash-count h))) (kont62007 x61900)))
  (define (call kont62008)
    (let ((a61901 "work"))
      (let ((a61902 '80))
        (let ((a61903 '10))
          (let ((a61904 "lmao"))
            (let ((f62010
                   (lambda (a61905)
                     (let ((a61906 "work"))
                       (let ((a61907 '90))
                         (let ((f62009
                                (lambda (a61908)
                                  (let ((a61909 "work"))
                                    (hash-ref kont62008 a61908 a61909)))))
                           (hash-set f62009 a61905 a61906 a61907)))))))
              (hash f62010 a61901 a61902 a61903 a61904)))))))
  (define (brouhaha_main kont62011)
    (let ((f62012 (lambda (x61910) (kont62011 x61910)))) (call f62012))))
