'((define (+ . lst) (let ((x61818 (apply-prim + lst))) x61818))
  (define (- . lst) (let ((x61819 (apply-prim - lst))) x61819))
  (define (* . lst) (let ((x61820 (apply-prim * lst))) x61820))
  (define (modulo a b) (let ((x61821 (prim modulo a b))) x61821))
  (define (/ . lst) (let ((x61822 (apply-prim / lst))) x61822))
  (define (= . lst) (let ((x61823 (apply-prim = lst))) x61823))
  (define (> . lst) (let ((x61824 (apply-prim > lst))) x61824))
  (define (< . lst) (let ((x61825 (apply-prim < lst))) x61825))
  (define (<= . lst) (let ((x61826 (apply-prim <= lst))) x61826))
  (define (>= . lst) (let ((x61827 (apply-prim >= lst))) x61827))
  (define (null? x) (let ((x61828 (prim null? x))) x61828))
  (define (equal? x y) (let ((x61829 (prim equal? x y))) x61829))
  (define (eq? x y) (let ((x61830 (prim eq? x y))) x61830))
  (define (cons a b) (let ((x61831 (prim cons a b))) x61831))
  (define (car lst) (let ((x61832 (prim car lst))) x61832))
  (define (cdr lst) (let ((x61833 (prim cdr lst))) x61833))
  (define (even? x)
    (let ((a61834 '0))
      (let ((a61835 '2))
        (let ((a61836 (modulo x a61835))) (equal? a61834 a61836)))))
  (define (odd? x)
    (let ((a61837 '1))
      (let ((a61838 '2))
        (let ((a61839 (modulo x a61838))) (equal? a61837 a61839)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a61840 (null? lst)))
      (if a61840
        (let ((x61841 '#f)) x61841)
        (let ((a61842 (car lst)))
          (let ((a61843 (equal? a61842 x)))
            (if a61843
              (let ((x61844 '#t)) x61844)
              (let ((a61845 (cdr lst))) (member? x a61845))))))))
  (define (foldl fun acc lst)
    (let ((a61846 (null? lst)))
      (if a61846
        acc
        (let ((a61847 (car lst)))
          (let ((a61848 (fun a61847 acc)))
            (let ((a61849 (cdr lst))) (foldl fun a61848 a61849)))))))
  (define (reverse-helper lst lst2)
    (let ((a61850 (null? lst)))
      (if a61850
        lst2
        (let ((a61851 (cdr lst)))
          (let ((a61852 (car lst)))
            (let ((a61853 (cons a61852 lst2)))
              (reverse-helper a61851 a61853)))))))
  (define (reverse lst) (let ((a61854 (list))) (reverse-helper lst a61854)))
  (define (take-helper lst n lst2)
    (let ((a61855 '0))
      (let ((a61856 (= n a61855)))
        (if a61856
          (let ((x61857 (reverse lst2))) x61857)
          (let ((a61858 (cdr lst)))
            (let ((a61859 '1))
              (let ((a61860 (- n a61859)))
                (let ((a61861 (car lst)))
                  (let ((a61862 (cons a61861 lst2)))
                    (take-helper a61858 a61860 a61862))))))))))
  (define (take lst n) (let ((a61863 (list))) (take-helper lst n a61863)))
  (define (length lst)
    (let ((a61864 (null? lst)))
      (if a61864
        (let ((x61865 '0)) x61865)
        (let ((a61866 '1))
          (let ((a61867 (cdr lst)))
            (let ((a61868 (length a61867))) (+ a61866 a61868)))))))
  (define (map proc lst)
    (let ((a61869 (null? lst)))
      (if a61869
        (let ((x61870 (list))) x61870)
        (let ((a61871 (car lst)))
          (let ((a61872 (proc a61871)))
            (let ((a61873 (cdr lst)))
              (let ((a61874 (map proc a61873))) (cons a61872 a61874))))))))
  (define (filter op lst)
    (let ((a61875 (null? lst)))
      (if a61875
        (let ((x61876 (list))) x61876)
        (let ((a61877 (car lst)))
          (let ((a61878 (op a61877)))
            (if a61878
              (let ((a61879 (car lst)))
                (let ((a61880 (cdr lst)))
                  (let ((a61881 (filter op a61880))) (cons a61879 a61881))))
              (let ((a61882 (cdr lst))) (filter op a61882))))))))
  (define (drop lst n)
    (let ((a61883 '0))
      (let ((a61884 (= n a61883)))
        (if a61884
          lst
          (let ((a61885 (cdr lst)))
            (let ((a61886 '1))
              (let ((a61887 (- n a61886))) (drop a61885 a61887))))))))
  (define (foldr proc acc lst)
    (let ((a61888 (null? lst)))
      (if a61888
        acc
        (let ((a61889 (car lst)))
          (let ((a61890 (cdr lst)))
            (let ((a61891 (foldr proc acc a61890))) (proc a61889 a61891)))))))
  (define (append lst1 lst2)
    (let ((a61892 (null? lst1)))
      (if a61892
        lst2
        (let ((a61893 (car lst1)))
          (let ((a61894 (cdr lst1)))
            (let ((a61895 (append a61894 lst2))) (cons a61893 a61895)))))))
  (define (hash . lst) (let ((x61896 (apply-prim hash lst))) x61896))
  (define (hash-ref h k) (let ((x61897 (prim hash-ref h k))) x61897))
  (define (hash-set h k v) (let ((x61898 (prim hash-set h k v))) x61898))
  (define (hash-has-key? h k) (let ((x61899 (prim hash-has-key? h k))) x61899))
  (define (hash-count h) (let ((x61900 (prim hash-count h))) x61900))
  (define (call)
    (let ((a61901 "work"))
      (let ((a61902 '80))
        (let ((a61903 '10))
          (let ((a61904 "lmao"))
            (let ((a61905 (hash a61901 a61902 a61903 a61904)))
              (let ((a61906 "work"))
                (let ((a61907 '90))
                  (let ((a61908 (hash-set a61905 a61906 a61907)))
                    (let ((a61909 "work")) (hash-ref a61908 a61909)))))))))))
  (define (brouhaha_main) (let ((x61910 (call))) x61910)))
