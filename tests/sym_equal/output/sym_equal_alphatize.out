'((define (+ . lst) (let ((x111677 (apply-prim + lst))) x111677))
  (define (- . lst) (let ((x111678 (apply-prim - lst))) x111678))
  (define (* . lst) (let ((x111679 (apply-prim * lst))) x111679))
  (define (modulo a b) (let ((x111680 (prim modulo a b))) x111680))
  (define (/ . lst) (let ((x111681 (apply-prim / lst))) x111681))
  (define (= . lst) (let ((x111682 (apply-prim = lst))) x111682))
  (define (> . lst) (let ((x111683 (apply-prim > lst))) x111683))
  (define (< . lst) (let ((x111684 (apply-prim < lst))) x111684))
  (define (<= . lst) (let ((x111685 (apply-prim <= lst))) x111685))
  (define (>= . lst) (let ((x111686 (apply-prim >= lst))) x111686))
  (define (null? x) (let ((x111687 (prim null? x))) x111687))
  (define (equal? x y) (let ((x111688 (prim equal? x y))) x111688))
  (define (eq? x y) (let ((x111689 (prim eq? x y))) x111689))
  (define (cons a b) (let ((x111690 (prim cons a b))) x111690))
  (define (car lst) (let ((x111691 (prim car lst))) x111691))
  (define (cdr lst) (let ((x111692 (prim cdr lst))) x111692))
  (define (even? x)
    (let ((a111693 '0))
      (let ((a111694 '2))
        (let ((a111695 (modulo x a111694))) (equal? a111693 a111695)))))
  (define (odd? x)
    (let ((a111696 '1))
      (let ((a111697 '2))
        (let ((a111698 (modulo x a111697))) (equal? a111696 a111698)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a111699 (null? lst)))
      (if a111699
        (let ((x111700 '#f)) x111700)
        (let ((a111701 (car lst)))
          (let ((a111702 (equal? a111701 x)))
            (if a111702
              (let ((x111703 '#t)) x111703)
              (let ((a111704 (cdr lst))) (member? x a111704))))))))
  (define (foldl fun acc lst)
    (let ((a111705 (null? lst)))
      (if a111705
        acc
        (let ((a111706 (car lst)))
          (let ((a111707 (fun a111706 acc)))
            (let ((a111708 (cdr lst))) (foldl fun a111707 a111708)))))))
  (define (reverse-helper lst lst2)
    (let ((a111709 (null? lst)))
      (if a111709
        lst2
        (let ((a111710 (cdr lst)))
          (let ((a111711 (car lst)))
            (let ((a111712 (cons a111711 lst2)))
              (reverse-helper a111710 a111712)))))))
  (define (reverse lst) (let ((a111713 (list))) (reverse-helper lst a111713)))
  (define (take-helper lst n lst2)
    (let ((a111714 '0))
      (let ((a111715 (= n a111714)))
        (if a111715
          (let ((x111716 (reverse lst2))) x111716)
          (let ((a111717 (cdr lst)))
            (let ((a111718 '1))
              (let ((a111719 (- n a111718)))
                (let ((a111720 (car lst)))
                  (let ((a111721 (cons a111720 lst2)))
                    (take-helper a111717 a111719 a111721))))))))))
  (define (take lst n) (let ((a111722 (list))) (take-helper lst n a111722)))
  (define (length lst)
    (let ((a111723 (null? lst)))
      (if a111723
        (let ((x111724 '0)) x111724)
        (let ((a111725 '1))
          (let ((a111726 (cdr lst)))
            (let ((a111727 (length a111726))) (+ a111725 a111727)))))))
  (define (map proc lst)
    (let ((a111728 (null? lst)))
      (if a111728
        (let ((x111729 (list))) x111729)
        (let ((a111730 (car lst)))
          (let ((a111731 (proc a111730)))
            (let ((a111732 (cdr lst)))
              (let ((a111733 (map proc a111732))) (cons a111731 a111733))))))))
  (define (filter op lst)
    (let ((a111734 (null? lst)))
      (if a111734
        (let ((x111735 (list))) x111735)
        (let ((a111736 (car lst)))
          (let ((a111737 (op a111736)))
            (if a111737
              (let ((a111738 (car lst)))
                (let ((a111739 (cdr lst)))
                  (let ((a111740 (filter op a111739)))
                    (cons a111738 a111740))))
              (let ((a111741 (cdr lst))) (filter op a111741))))))))
  (define (drop lst n)
    (let ((a111742 '0))
      (let ((a111743 (= n a111742)))
        (if a111743
          lst
          (let ((a111744 (cdr lst)))
            (let ((a111745 '1))
              (let ((a111746 (- n a111745))) (drop a111744 a111746))))))))
  (define (foldr proc acc lst)
    (let ((a111747 (null? lst)))
      (if a111747
        acc
        (let ((a111748 (car lst)))
          (let ((a111749 (cdr lst)))
            (let ((a111750 (foldr proc acc a111749)))
              (proc a111748 a111750)))))))
  (define (append lst1 lst2)
    (let ((a111751 (null? lst1)))
      (if a111751
        lst2
        (let ((a111752 (car lst1)))
          (let ((a111753 (cdr lst1)))
            (let ((a111754 (append a111753 lst2))) (cons a111752 a111754)))))))
  (define (hash . lst) (let ((x111755 (apply-prim hash lst))) x111755))
  (define (hash-ref h k) (let ((x111756 (prim hash-ref h k))) x111756))
  (define (hash-set h k v) (let ((x111757 (prim hash-set h k v))) x111757))
  (define (hash-has-key? h k)
    (let ((x111758 (prim hash-has-key? h k))) x111758))
  (define (hash-count h) (let ((x111759 (prim hash-count h))) x111759))
  (define (call)
    (let ((a111760 '100))
      (let ((a111761 '100))
        (let ((a111762 '100))
          (let ((a111763 '100))
            (let ((a111764 '100))
              (= a111760 a111761 a111762 a111763 a111764)))))))
  (define (brouhaha_main) (let ((x111765 (call))) x111765)))
