'((define (+ . lst) (let ((x117436 (apply-prim + lst))) x117436))
  (define (- . lst) (let ((x117437 (apply-prim - lst))) x117437))
  (define (* . lst) (let ((x117438 (apply-prim * lst))) x117438))
  (define (modulo a b) (let ((x117439 (prim modulo a b))) x117439))
  (define (/ . lst) (let ((x117440 (apply-prim / lst))) x117440))
  (define (= . lst) (let ((x117441 (apply-prim = lst))) x117441))
  (define (> . lst) (let ((x117442 (apply-prim > lst))) x117442))
  (define (< . lst) (let ((x117443 (apply-prim < lst))) x117443))
  (define (<= . lst) (let ((x117444 (apply-prim <= lst))) x117444))
  (define (>= . lst) (let ((x117445 (apply-prim >= lst))) x117445))
  (define (null? x) (let ((x117446 (prim null? x))) x117446))
  (define (equal? x y) (let ((x117447 (prim equal? x y))) x117447))
  (define (eq? x y) (let ((x117448 (prim eq? x y))) x117448))
  (define (cons a b) (let ((x117449 (prim cons a b))) x117449))
  (define (car lst) (let ((x117450 (prim car lst))) x117450))
  (define (cdr lst) (let ((x117451 (prim cdr lst))) x117451))
  (define (even? x)
    (let ((a117452 '0))
      (let ((a117453 '2))
        (let ((a117454 (modulo x a117453))) (equal? a117452 a117454)))))
  (define (odd? x)
    (let ((a117455 '1))
      (let ((a117456 '2))
        (let ((a117457 (modulo x a117456))) (equal? a117455 a117457)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a117458 (null? lst)))
      (if a117458
        (let ((x117459 '#f)) x117459)
        (let ((a117460 (car lst)))
          (let ((a117461 (equal? a117460 x)))
            (if a117461
              (let ((x117462 '#t)) x117462)
              (let ((a117463 (cdr lst))) (member? x a117463))))))))
  (define (foldl fun acc lst)
    (let ((a117464 (null? lst)))
      (if a117464
        acc
        (let ((a117465 (car lst)))
          (let ((a117466 (fun a117465 acc)))
            (let ((a117467 (cdr lst))) (foldl fun a117466 a117467)))))))
  (define (reverse-helper lst lst2)
    (let ((a117468 (null? lst)))
      (if a117468
        lst2
        (let ((a117469 (cdr lst)))
          (let ((a117470 (car lst)))
            (let ((a117471 (cons a117470 lst2)))
              (reverse-helper a117469 a117471)))))))
  (define (reverse lst) (let ((a117472 (list))) (reverse-helper lst a117472)))
  (define (take-helper lst n lst2)
    (let ((a117473 '0))
      (let ((a117474 (= n a117473)))
        (if a117474
          (let ((x117475 (reverse lst2))) x117475)
          (let ((a117476 (cdr lst)))
            (let ((a117477 '1))
              (let ((a117478 (- n a117477)))
                (let ((a117479 (car lst)))
                  (let ((a117480 (cons a117479 lst2)))
                    (take-helper a117476 a117478 a117480))))))))))
  (define (take lst n) (let ((a117481 (list))) (take-helper lst n a117481)))
  (define (length lst)
    (let ((a117482 (null? lst)))
      (if a117482
        (let ((x117483 '0)) x117483)
        (let ((a117484 '1))
          (let ((a117485 (cdr lst)))
            (let ((a117486 (length a117485))) (+ a117484 a117486)))))))
  (define (map proc lst)
    (let ((a117487 (null? lst)))
      (if a117487
        (let ((x117488 (list))) x117488)
        (let ((a117489 (car lst)))
          (let ((a117490 (proc a117489)))
            (let ((a117491 (cdr lst)))
              (let ((a117492 (map proc a117491))) (cons a117490 a117492))))))))
  (define (filter op lst)
    (let ((a117493 (null? lst)))
      (if a117493
        (let ((x117494 (list))) x117494)
        (let ((a117495 (car lst)))
          (let ((a117496 (op a117495)))
            (if a117496
              (let ((a117497 (car lst)))
                (let ((a117498 (cdr lst)))
                  (let ((a117499 (filter op a117498)))
                    (cons a117497 a117499))))
              (let ((a117500 (cdr lst))) (filter op a117500))))))))
  (define (drop lst n)
    (let ((a117501 '0))
      (let ((a117502 (= n a117501)))
        (if a117502
          lst
          (let ((a117503 (cdr lst)))
            (let ((a117504 '1))
              (let ((a117505 (- n a117504))) (drop a117503 a117505))))))))
  (define (foldr proc acc lst)
    (let ((a117506 (null? lst)))
      (if a117506
        acc
        (let ((a117507 (car lst)))
          (let ((a117508 (cdr lst)))
            (let ((a117509 (foldr proc acc a117508)))
              (proc a117507 a117509)))))))
  (define (append lst1 lst2)
    (let ((a117510 (null? lst1)))
      (if a117510
        lst2
        (let ((a117511 (car lst1)))
          (let ((a117512 (cdr lst1)))
            (let ((a117513 (append a117512 lst2))) (cons a117511 a117513)))))))
  (define (hash . lst) (let ((x117514 (apply-prim hash lst))) x117514))
  (define (hash-ref h k) (let ((x117515 (prim hash-ref h k))) x117515))
  (define (hash-set h k v) (let ((x117516 (prim hash-set h k v))) x117516))
  (define (hash-has-key? h k)
    (let ((x117517 (prim hash-has-key? h k))) x117517))
  (define (hash-count h) (let ((x117518 (prim hash-count h))) x117518))
  (define (call)
    (let ((a117519 '100))
      (let ((a117520 '100))
        (let ((a117521 '100))
          (let ((a117522 '100))
            (let ((a117523 '100))
              (= a117519 a117520 a117521 a117522 a117523)))))))
  (define (brouhaha_main) (let ((x117524 (call))) x117524)))
