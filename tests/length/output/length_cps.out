'((define (+ . lst)
    (let ((kont7323873339 (prim car lst)))
      (let ((lst73340 (prim cdr lst)))
        (let ((x7314973341 (apply-prim + lst73340)))
          (kont7323873339 x7314973341)))))
  (define (- . lst)
    (let ((kont7324073342 (prim car lst)))
      (let ((lst73343 (prim cdr lst)))
        (let ((x7315073344 (apply-prim - lst73343)))
          (kont7324073342 x7315073344)))))
  (define (* . lst)
    (let ((kont7324273345 (prim car lst)))
      (let ((lst73346 (prim cdr lst)))
        (let ((x7315173347 (apply-prim * lst73346)))
          (kont7324273345 x7315173347)))))
  (define (modulo kont73244 a b)
    (let ((x7315273348 (prim modulo a b))) (kont73244 x7315273348)))
  (define (/ . lst)
    (let ((kont7324573349 (prim car lst)))
      (let ((lst73350 (prim cdr lst)))
        (let ((x7315373351 (apply-prim / lst73350)))
          (kont7324573349 x7315373351)))))
  (define (= . lst)
    (let ((kont7324773352 (prim car lst)))
      (let ((lst73353 (prim cdr lst)))
        (let ((x7315473354 (apply-prim = lst73353)))
          (kont7324773352 x7315473354)))))
  (define (> . lst)
    (let ((kont7324973355 (prim car lst)))
      (let ((lst73356 (prim cdr lst)))
        (let ((x7315573357 (apply-prim > lst73356)))
          (kont7324973355 x7315573357)))))
  (define (< . lst)
    (let ((kont7325173358 (prim car lst)))
      (let ((lst73359 (prim cdr lst)))
        (let ((x7315673360 (apply-prim < lst73359)))
          (kont7325173358 x7315673360)))))
  (define (<= . lst)
    (let ((kont7325373361 (prim car lst)))
      (let ((lst73362 (prim cdr lst)))
        (let ((x7315773363 (apply-prim <= lst73362)))
          (kont7325373361 x7315773363)))))
  (define (>= . lst)
    (let ((kont7325573364 (prim car lst)))
      (let ((lst73365 (prim cdr lst)))
        (let ((x7315873366 (apply-prim >= lst73365)))
          (kont7325573364 x7315873366)))))
  (define (null? kont73257 x)
    (let ((x7315973367 (prim null? x))) (kont73257 x7315973367)))
  (define (equal? kont73258 x y)
    (let ((x7316073368 (prim equal? x y))) (kont73258 x7316073368)))
  (define (eq? kont73259 x y)
    (let ((x7316173369 (prim eq? x y))) (kont73259 x7316173369)))
  (define (cons kont73260 a b)
    (let ((x7316273370 (prim cons a b))) (kont73260 x7316273370)))
  (define (car kont73261 lst)
    (let ((x7316373371 (prim car lst))) (kont73261 x7316373371)))
  (define (cdr kont73262 lst)
    (let ((x7316473372 (prim cdr lst))) (kont73262 x7316473372)))
  (define (even? kont73263 x)
    (let ((a7316573373 '0))
      (let ((a7316673374 '2))
        (let ((f7326473375
               (lambda (a7316773376)
                 (equal? kont73263 a7316573373 a7316773376))))
          (modulo f7326473375 x a7316673374)))))
  (define (odd? kont73265 x)
    (let ((a7316873377 '1))
      (let ((a7316973378 '2))
        (let ((f7326673379
               (lambda (a7317073380)
                 (equal? kont73265 a7316873377 a7317073380))))
          (modulo f7326673379 x a7316973378)))))
  (define (list . x)
    (let ((kont7326773381 (prim car x)))
      (let ((x73382 (prim cdr x))) (kont7326773381 x73382))))
  (define (member? kont73269 x lst)
    (let ((f7327373383
           (lambda (a7317173384)
             (if a7317173384
               (let ((x7317273385 '#f)) (kont73269 x7317273385))
               (let ((f7327273386
                      (lambda (a7317373387)
                        (let ((f7327173388
                               (lambda (a7317473389)
                                 (if a7317473389
                                   (let ((x7317573390 '#t))
                                     (kont73269 x7317573390))
                                   (let ((f7327073391
                                          (lambda (a7317673392)
                                            (member?
                                             kont73269
                                             x
                                             a7317673392))))
                                     (cdr f7327073391 lst))))))
                          (equal? f7327173388 a7317373387 x)))))
                 (car f7327273386 lst))))))
      (null? f7327373383 lst)))
  (define (foldl kont73274 fun acc lst)
    (let ((f7327873393
           (lambda (a7317773394)
             (if a7317773394
               (kont73274 acc)
               (let ((f7327773395
                      (lambda (a7317873396)
                        (let ((f7327673397
                               (lambda (a7317973398)
                                 (let ((f7327573399
                                        (lambda (a7318073400)
                                          (foldl
                                           kont73274
                                           fun
                                           a7317973398
                                           a7318073400))))
                                   (cdr f7327573399 lst)))))
                          (fun f7327673397 a7317873396 acc)))))
                 (car f7327773395 lst))))))
      (null? f7327873393 lst)))
  (define (reverse-helper kont73279 lst lst2)
    (let ((f7328373401
           (lambda (a7318173402)
             (if a7318173402
               (kont73279 lst2)
               (let ((f7328273403
                      (lambda (a7318273404)
                        (let ((f7328173405
                               (lambda (a7318373406)
                                 (let ((f7328073407
                                        (lambda (a7318473408)
                                          (reverse-helper
                                           kont73279
                                           a7318273404
                                           a7318473408))))
                                   (cons f7328073407 a7318373406 lst2)))))
                          (car f7328173405 lst)))))
                 (cdr f7328273403 lst))))))
      (null? f7328373401 lst)))
  (define (reverse kont73284 lst)
    (let ((f7328573409
           (lambda (a7318573410) (reverse-helper kont73284 lst a7318573410))))
      (list f7328573409)))
  (define (take-helper kont73286 lst n lst2)
    (let ((a7318673411 '0))
      (let ((f7329273412
             (lambda (a7318773413)
               (if a7318773413
                 (let ((f7328773414
                        (lambda (x7318873415) (kont73286 x7318873415))))
                   (reverse f7328773414 lst2))
                 (let ((f7329173416
                        (lambda (a7318973417)
                          (let ((a7319073418 '1))
                            (let ((f7329073419
                                   (lambda (a7319173420)
                                     (let ((f7328973421
                                            (lambda (a7319273422)
                                              (let ((f7328873423
                                                     (lambda (a7319373424)
                                                       (take-helper
                                                        kont73286
                                                        a7318973417
                                                        a7319173420
                                                        a7319373424))))
                                                (cons
                                                 f7328873423
                                                 a7319273422
                                                 lst2)))))
                                       (car f7328973421 lst)))))
                              (- f7329073419 n a7319073418))))))
                   (cdr f7329173416 lst))))))
        (= f7329273412 n a7318673411))))
  (define (take kont73293 lst n)
    (let ((f7329473425
           (lambda (a7319473426) (take-helper kont73293 lst n a7319473426))))
      (list f7329473425)))
  (define (length kont73295 lst)
    (let ((f7329873427
           (lambda (a7319573428)
             (if a7319573428
               (let ((x7319673429 '0)) (kont73295 x7319673429))
               (let ((a7319773430 '1))
                 (let ((f7329773431
                        (lambda (a7319873432)
                          (let ((f7329673433
                                 (lambda (a7319973434)
                                   (+ kont73295 a7319773430 a7319973434))))
                            (length f7329673433 a7319873432)))))
                   (cdr f7329773431 lst)))))))
      (null? f7329873427 lst)))
  (define (map kont73299 proc lst)
    (let ((f7330573435
           (lambda (a7320073436)
             (if a7320073436
               (let ((f7330073437
                      (lambda (x7320173438) (kont73299 x7320173438))))
                 (list f7330073437))
               (let ((f7330473439
                      (lambda (a7320273440)
                        (let ((f7330373441
                               (lambda (a7320373442)
                                 (let ((f7330273443
                                        (lambda (a7320473444)
                                          (let ((f7330173445
                                                 (lambda (a7320573446)
                                                   (cons
                                                    kont73299
                                                    a7320373442
                                                    a7320573446))))
                                            (map
                                             f7330173445
                                             proc
                                             a7320473444)))))
                                   (cdr f7330273443 lst)))))
                          (proc f7330373441 a7320273440)))))
                 (car f7330473439 lst))))))
      (null? f7330573435 lst)))
  (define (filter kont73306 op lst)
    (let ((f7331473447
           (lambda (a7320673448)
             (if a7320673448
               (let ((f7330773449
                      (lambda (x7320773450) (kont73306 x7320773450))))
                 (list f7330773449))
               (let ((f7331373451
                      (lambda (a7320873452)
                        (let ((f7331273453
                               (lambda (a7320973454)
                                 (if a7320973454
                                   (let ((f7331073455
                                          (lambda (a7321073456)
                                            (let ((f7330973457
                                                   (lambda (a7321173458)
                                                     (let ((f7330873459
                                                            (lambda (a7321273460)
                                                              (cons
                                                               kont73306
                                                               a7321073456
                                                               a7321273460))))
                                                       (filter
                                                        f7330873459
                                                        op
                                                        a7321173458)))))
                                              (cdr f7330973457 lst)))))
                                     (car f7331073455 lst))
                                   (let ((f7331173461
                                          (lambda (a7321373462)
                                            (filter
                                             kont73306
                                             op
                                             a7321373462))))
                                     (cdr f7331173461 lst))))))
                          (op f7331273453 a7320873452)))))
                 (car f7331373451 lst))))))
      (null? f7331473447 lst)))
  (define (drop kont73315 lst n)
    (let ((a7321473463 '0))
      (let ((f7331873464
             (lambda (a7321573465)
               (if a7321573465
                 (kont73315 lst)
                 (let ((f7331773466
                        (lambda (a7321673467)
                          (let ((a7321773468 '1))
                            (let ((f7331673469
                                   (lambda (a7321873470)
                                     (drop
                                      kont73315
                                      a7321673467
                                      a7321873470))))
                              (- f7331673469 n a7321773468))))))
                   (cdr f7331773466 lst))))))
        (= f7331873464 n a7321473463))))
  (define (foldr kont73319 proc acc lst)
    (let ((f7332373471
           (lambda (a7321973472)
             (if a7321973472
               (kont73319 acc)
               (let ((f7332273473
                      (lambda (a7322073474)
                        (let ((f7332173475
                               (lambda (a7322173476)
                                 (let ((f7332073477
                                        (lambda (a7322273478)
                                          (proc
                                           kont73319
                                           a7322073474
                                           a7322273478))))
                                   (foldr f7332073477 proc acc a7322173476)))))
                          (cdr f7332173475 lst)))))
                 (car f7332273473 lst))))))
      (null? f7332373471 lst)))
  (define (append kont73324 lst1 lst2)
    (let ((f7332873479
           (lambda (a7322373480)
             (if a7322373480
               (kont73324 lst2)
               (let ((f7332773481
                      (lambda (a7322473482)
                        (let ((f7332673483
                               (lambda (a7322573484)
                                 (let ((f7332573485
                                        (lambda (a7322673486)
                                          (cons
                                           kont73324
                                           a7322473482
                                           a7322673486))))
                                   (append f7332573485 a7322573484 lst2)))))
                          (cdr f7332673483 lst1)))))
                 (car f7332773481 lst1))))))
      (null? f7332873479 lst1)))
  (define (hash . lst)
    (let ((kont7332973487 (prim car lst)))
      (let ((lst73488 (prim cdr lst)))
        (let ((x7322773489 (apply-prim hash lst73488)))
          (kont7332973487 x7322773489)))))
  (define (hash-ref kont73331 h k)
    (let ((x7322873490 (prim hash-ref h k))) (kont73331 x7322873490)))
  (define (hash-set kont73332 h k v)
    (let ((x7322973491 (prim hash-set h k v))) (kont73332 x7322973491)))
  (define (hash-has-key? kont73333 h k)
    (let ((x7323073492 (prim hash-has-key? h k))) (kont73333 x7323073492)))
  (define (hash-count kont73334 h)
    (let ((x7323173493 (prim hash-count h))) (kont73334 x7323173493)))
  (define (call kont73335)
    (let ((a7323273494 '1))
      (let ((a7323373495 '2))
        (let ((a7323473496 '3))
          (let ((a7323573497 '4))
            (let ((f7333673498
                   (lambda (a7323673499) (length kont73335 a7323673499))))
              (list
               f7333673498
               a7323273494
               a7323373495
               a7323473496
               a7323573497)))))))
  (define (brouhaha_main kont73337)
    (let ((f7333873500 (lambda (x7323773501) (kont73337 x7323773501))))
      (call f7333873500))))
