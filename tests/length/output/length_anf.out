'((define (+ . lst)
    (let ((kont73238 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73149 (apply-prim + lst))) (kont73238 x73149)))))
  (define (- . lst)
    (let ((kont73240 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73150 (apply-prim - lst))) (kont73240 x73150)))))
  (define (* . lst)
    (let ((kont73242 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73151 (apply-prim * lst))) (kont73242 x73151)))))
  (define (modulo kont73244 a b)
    (let ((x73152 (prim modulo a b))) (kont73244 x73152)))
  (define (/ . lst)
    (let ((kont73245 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73153 (apply-prim / lst))) (kont73245 x73153)))))
  (define (= . lst)
    (let ((kont73247 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73154 (apply-prim = lst))) (kont73247 x73154)))))
  (define (> . lst)
    (let ((kont73249 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73155 (apply-prim > lst))) (kont73249 x73155)))))
  (define (< . lst)
    (let ((kont73251 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73156 (apply-prim < lst))) (kont73251 x73156)))))
  (define (<= . lst)
    (let ((kont73253 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73157 (apply-prim <= lst))) (kont73253 x73157)))))
  (define (>= . lst)
    (let ((kont73255 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73158 (apply-prim >= lst))) (kont73255 x73158)))))
  (define (null? kont73257 x)
    (let ((x73159 (prim null? x))) (kont73257 x73159)))
  (define (equal? kont73258 x y)
    (let ((x73160 (prim equal? x y))) (kont73258 x73160)))
  (define (eq? kont73259 x y)
    (let ((x73161 (prim eq? x y))) (kont73259 x73161)))
  (define (cons kont73260 a b)
    (let ((x73162 (prim cons a b))) (kont73260 x73162)))
  (define (car kont73261 lst)
    (let ((x73163 (prim car lst))) (kont73261 x73163)))
  (define (cdr kont73262 lst)
    (let ((x73164 (prim cdr lst))) (kont73262 x73164)))
  (define (even? kont73263 x)
    (let ((a73165 '0))
      (let ((a73166 '2))
        (let ((f73264 (lambda (a73167) (equal? kont73263 a73165 a73167))))
          (modulo f73264 x a73166)))))
  (define (odd? kont73265 x)
    (let ((a73168 '1))
      (let ((a73169 '2))
        (let ((f73266 (lambda (a73170) (equal? kont73265 a73168 a73170))))
          (modulo f73266 x a73169)))))
  (define (list . x)
    (let ((kont73267 (prim car x))) (let ((x (prim cdr x))) (kont73267 x))))
  (define (member? kont73269 x lst)
    (let ((f73273
           (lambda (a73171)
             (if a73171
               (let ((x73172 '#f)) (kont73269 x73172))
               (let ((f73272
                      (lambda (a73173)
                        (let ((f73271
                               (lambda (a73174)
                                 (if a73174
                                   (let ((x73175 '#t)) (kont73269 x73175))
                                   (let ((f73270
                                          (lambda (a73176)
                                            (member? kont73269 x a73176))))
                                     (cdr f73270 lst))))))
                          (equal? f73271 a73173 x)))))
                 (car f73272 lst))))))
      (null? f73273 lst)))
  (define (foldl kont73274 fun acc lst)
    (let ((f73278
           (lambda (a73177)
             (if a73177
               (kont73274 acc)
               (let ((f73277
                      (lambda (a73178)
                        (let ((f73276
                               (lambda (a73179)
                                 (let ((f73275
                                        (lambda (a73180)
                                          (foldl
                                           kont73274
                                           fun
                                           a73179
                                           a73180))))
                                   (cdr f73275 lst)))))
                          (fun f73276 a73178 acc)))))
                 (car f73277 lst))))))
      (null? f73278 lst)))
  (define (reverse-helper kont73279 lst lst2)
    (let ((f73283
           (lambda (a73181)
             (if a73181
               (kont73279 lst2)
               (let ((f73282
                      (lambda (a73182)
                        (let ((f73281
                               (lambda (a73183)
                                 (let ((f73280
                                        (lambda (a73184)
                                          (reverse-helper
                                           kont73279
                                           a73182
                                           a73184))))
                                   (cons f73280 a73183 lst2)))))
                          (car f73281 lst)))))
                 (cdr f73282 lst))))))
      (null? f73283 lst)))
  (define (reverse kont73284 lst)
    (let ((f73285 (lambda (a73185) (reverse-helper kont73284 lst a73185))))
      (list f73285)))
  (define (take-helper kont73286 lst n lst2)
    (let ((a73186 '0))
      (let ((f73292
             (lambda (a73187)
               (if a73187
                 (let ((f73287 (lambda (x73188) (kont73286 x73188))))
                   (reverse f73287 lst2))
                 (let ((f73291
                        (lambda (a73189)
                          (let ((a73190 '1))
                            (let ((f73290
                                   (lambda (a73191)
                                     (let ((f73289
                                            (lambda (a73192)
                                              (let ((f73288
                                                     (lambda (a73193)
                                                       (take-helper
                                                        kont73286
                                                        a73189
                                                        a73191
                                                        a73193))))
                                                (cons f73288 a73192 lst2)))))
                                       (car f73289 lst)))))
                              (- f73290 n a73190))))))
                   (cdr f73291 lst))))))
        (= f73292 n a73186))))
  (define (take kont73293 lst n)
    (let ((f73294 (lambda (a73194) (take-helper kont73293 lst n a73194))))
      (list f73294)))
  (define (length kont73295 lst)
    (let ((f73298
           (lambda (a73195)
             (if a73195
               (let ((x73196 '0)) (kont73295 x73196))
               (let ((a73197 '1))
                 (let ((f73297
                        (lambda (a73198)
                          (let ((f73296
                                 (lambda (a73199)
                                   (+ kont73295 a73197 a73199))))
                            (length f73296 a73198)))))
                   (cdr f73297 lst)))))))
      (null? f73298 lst)))
  (define (map kont73299 proc lst)
    (let ((f73305
           (lambda (a73200)
             (if a73200
               (let ((f73300 (lambda (x73201) (kont73299 x73201))))
                 (list f73300))
               (let ((f73304
                      (lambda (a73202)
                        (let ((f73303
                               (lambda (a73203)
                                 (let ((f73302
                                        (lambda (a73204)
                                          (let ((f73301
                                                 (lambda (a73205)
                                                   (cons
                                                    kont73299
                                                    a73203
                                                    a73205))))
                                            (map f73301 proc a73204)))))
                                   (cdr f73302 lst)))))
                          (proc f73303 a73202)))))
                 (car f73304 lst))))))
      (null? f73305 lst)))
  (define (filter kont73306 op lst)
    (let ((f73314
           (lambda (a73206)
             (if a73206
               (let ((f73307 (lambda (x73207) (kont73306 x73207))))
                 (list f73307))
               (let ((f73313
                      (lambda (a73208)
                        (let ((f73312
                               (lambda (a73209)
                                 (if a73209
                                   (let ((f73310
                                          (lambda (a73210)
                                            (let ((f73309
                                                   (lambda (a73211)
                                                     (let ((f73308
                                                            (lambda (a73212)
                                                              (cons
                                                               kont73306
                                                               a73210
                                                               a73212))))
                                                       (filter
                                                        f73308
                                                        op
                                                        a73211)))))
                                              (cdr f73309 lst)))))
                                     (car f73310 lst))
                                   (let ((f73311
                                          (lambda (a73213)
                                            (filter kont73306 op a73213))))
                                     (cdr f73311 lst))))))
                          (op f73312 a73208)))))
                 (car f73313 lst))))))
      (null? f73314 lst)))
  (define (drop kont73315 lst n)
    (let ((a73214 '0))
      (let ((f73318
             (lambda (a73215)
               (if a73215
                 (kont73315 lst)
                 (let ((f73317
                        (lambda (a73216)
                          (let ((a73217 '1))
                            (let ((f73316
                                   (lambda (a73218)
                                     (drop kont73315 a73216 a73218))))
                              (- f73316 n a73217))))))
                   (cdr f73317 lst))))))
        (= f73318 n a73214))))
  (define (foldr kont73319 proc acc lst)
    (let ((f73323
           (lambda (a73219)
             (if a73219
               (kont73319 acc)
               (let ((f73322
                      (lambda (a73220)
                        (let ((f73321
                               (lambda (a73221)
                                 (let ((f73320
                                        (lambda (a73222)
                                          (proc kont73319 a73220 a73222))))
                                   (foldr f73320 proc acc a73221)))))
                          (cdr f73321 lst)))))
                 (car f73322 lst))))))
      (null? f73323 lst)))
  (define (append kont73324 lst1 lst2)
    (let ((f73328
           (lambda (a73223)
             (if a73223
               (kont73324 lst2)
               (let ((f73327
                      (lambda (a73224)
                        (let ((f73326
                               (lambda (a73225)
                                 (let ((f73325
                                        (lambda (a73226)
                                          (cons kont73324 a73224 a73226))))
                                   (append f73325 a73225 lst2)))))
                          (cdr f73326 lst1)))))
                 (car f73327 lst1))))))
      (null? f73328 lst1)))
  (define (hash . lst)
    (let ((kont73329 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x73227 (apply-prim hash lst))) (kont73329 x73227)))))
  (define (hash-ref kont73331 h k)
    (let ((x73228 (prim hash-ref h k))) (kont73331 x73228)))
  (define (hash-set kont73332 h k v)
    (let ((x73229 (prim hash-set h k v))) (kont73332 x73229)))
  (define (hash-has-key? kont73333 h k)
    (let ((x73230 (prim hash-has-key? h k))) (kont73333 x73230)))
  (define (hash-count kont73334 h)
    (let ((x73231 (prim hash-count h))) (kont73334 x73231)))
  (define (call kont73335)
    (let ((a73232 '1))
      (let ((a73233 '2))
        (let ((a73234 '3))
          (let ((a73235 '4))
            (let ((f73336 (lambda (a73236) (length kont73335 a73236))))
              (list f73336 a73232 a73233 a73234 a73235)))))))
  (define (brouhaha_main kont73337)
    (let ((f73338 (lambda (x73237) (kont73337 x73237)))) (call f73338))))
