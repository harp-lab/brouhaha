'((define (+ . lst) (let ((x73149 (apply-prim + lst))) x73149))
  (define (- . lst) (let ((x73150 (apply-prim - lst))) x73150))
  (define (* . lst) (let ((x73151 (apply-prim * lst))) x73151))
  (define (modulo a b) (let ((x73152 (prim modulo a b))) x73152))
  (define (/ . lst) (let ((x73153 (apply-prim / lst))) x73153))
  (define (= . lst) (let ((x73154 (apply-prim = lst))) x73154))
  (define (> . lst) (let ((x73155 (apply-prim > lst))) x73155))
  (define (< . lst) (let ((x73156 (apply-prim < lst))) x73156))
  (define (<= . lst) (let ((x73157 (apply-prim <= lst))) x73157))
  (define (>= . lst) (let ((x73158 (apply-prim >= lst))) x73158))
  (define (null? x) (let ((x73159 (prim null? x))) x73159))
  (define (equal? x y) (let ((x73160 (prim equal? x y))) x73160))
  (define (eq? x y) (let ((x73161 (prim eq? x y))) x73161))
  (define (cons a b) (let ((x73162 (prim cons a b))) x73162))
  (define (car lst) (let ((x73163 (prim car lst))) x73163))
  (define (cdr lst) (let ((x73164 (prim cdr lst))) x73164))
  (define (even? x)
    (let ((a73165 '0))
      (let ((a73166 '2))
        (let ((a73167 (modulo x a73166))) (equal? a73165 a73167)))))
  (define (odd? x)
    (let ((a73168 '1))
      (let ((a73169 '2))
        (let ((a73170 (modulo x a73169))) (equal? a73168 a73170)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a73171 (null? lst)))
      (if a73171
        (let ((x73172 '#f)) x73172)
        (let ((a73173 (car lst)))
          (let ((a73174 (equal? a73173 x)))
            (if a73174
              (let ((x73175 '#t)) x73175)
              (let ((a73176 (cdr lst))) (member? x a73176))))))))
  (define (foldl fun acc lst)
    (let ((a73177 (null? lst)))
      (if a73177
        acc
        (let ((a73178 (car lst)))
          (let ((a73179 (fun a73178 acc)))
            (let ((a73180 (cdr lst))) (foldl fun a73179 a73180)))))))
  (define (reverse-helper lst lst2)
    (let ((a73181 (null? lst)))
      (if a73181
        lst2
        (let ((a73182 (cdr lst)))
          (let ((a73183 (car lst)))
            (let ((a73184 (cons a73183 lst2)))
              (reverse-helper a73182 a73184)))))))
  (define (reverse lst) (let ((a73185 (list))) (reverse-helper lst a73185)))
  (define (take-helper lst n lst2)
    (let ((a73186 '0))
      (let ((a73187 (= n a73186)))
        (if a73187
          (let ((x73188 (reverse lst2))) x73188)
          (let ((a73189 (cdr lst)))
            (let ((a73190 '1))
              (let ((a73191 (- n a73190)))
                (let ((a73192 (car lst)))
                  (let ((a73193 (cons a73192 lst2)))
                    (take-helper a73189 a73191 a73193))))))))))
  (define (take lst n) (let ((a73194 (list))) (take-helper lst n a73194)))
  (define (length lst)
    (let ((a73195 (null? lst)))
      (if a73195
        (let ((x73196 '0)) x73196)
        (let ((a73197 '1))
          (let ((a73198 (cdr lst)))
            (let ((a73199 (length a73198))) (+ a73197 a73199)))))))
  (define (map proc lst)
    (let ((a73200 (null? lst)))
      (if a73200
        (let ((x73201 (list))) x73201)
        (let ((a73202 (car lst)))
          (let ((a73203 (proc a73202)))
            (let ((a73204 (cdr lst)))
              (let ((a73205 (map proc a73204))) (cons a73203 a73205))))))))
  (define (filter op lst)
    (let ((a73206 (null? lst)))
      (if a73206
        (let ((x73207 (list))) x73207)
        (let ((a73208 (car lst)))
          (let ((a73209 (op a73208)))
            (if a73209
              (let ((a73210 (car lst)))
                (let ((a73211 (cdr lst)))
                  (let ((a73212 (filter op a73211))) (cons a73210 a73212))))
              (let ((a73213 (cdr lst))) (filter op a73213))))))))
  (define (drop lst n)
    (let ((a73214 '0))
      (let ((a73215 (= n a73214)))
        (if a73215
          lst
          (let ((a73216 (cdr lst)))
            (let ((a73217 '1))
              (let ((a73218 (- n a73217))) (drop a73216 a73218))))))))
  (define (foldr proc acc lst)
    (let ((a73219 (null? lst)))
      (if a73219
        acc
        (let ((a73220 (car lst)))
          (let ((a73221 (cdr lst)))
            (let ((a73222 (foldr proc acc a73221))) (proc a73220 a73222)))))))
  (define (append lst1 lst2)
    (let ((a73223 (null? lst1)))
      (if a73223
        lst2
        (let ((a73224 (car lst1)))
          (let ((a73225 (cdr lst1)))
            (let ((a73226 (append a73225 lst2))) (cons a73224 a73226)))))))
  (define (hash . lst) (let ((x73227 (apply-prim hash lst))) x73227))
  (define (hash-ref h k) (let ((x73228 (prim hash-ref h k))) x73228))
  (define (hash-set h k v) (let ((x73229 (prim hash-set h k v))) x73229))
  (define (hash-has-key? h k) (let ((x73230 (prim hash-has-key? h k))) x73230))
  (define (hash-count h) (let ((x73231 (prim hash-count h))) x73231))
  (define (call)
    (let ((a73232 '1))
      (let ((a73233 '2))
        (let ((a73234 '3))
          (let ((a73235 '4))
            (let ((a73236 (list a73232 a73233 a73234 a73235)))
              (length a73236)))))))
  (define (brouhaha_main) (let ((x73237 (call))) x73237)))
