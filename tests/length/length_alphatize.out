'((define (+ . lst) (let ((x76840 (apply-prim + lst))) x76840))
  (define (- . lst) (let ((x76841 (apply-prim - lst))) x76841))
  (define (* . lst) (let ((x76842 (apply-prim * lst))) x76842))
  (define (modulo a b) (let ((x76843 (prim modulo a b))) x76843))
  (define (/ . lst) (let ((x76844 (apply-prim / lst))) x76844))
  (define (= . lst) (let ((x76845 (apply-prim = lst))) x76845))
  (define (> . lst) (let ((x76846 (apply-prim > lst))) x76846))
  (define (< . lst) (let ((x76847 (apply-prim < lst))) x76847))
  (define (<= . lst) (let ((x76848 (apply-prim <= lst))) x76848))
  (define (>= . lst) (let ((x76849 (apply-prim >= lst))) x76849))
  (define (null? x) (let ((x76850 (prim null? x))) x76850))
  (define (equal? x y) (let ((x76851 (prim equal? x y))) x76851))
  (define (eq? x y) (let ((x76852 (prim eq? x y))) x76852))
  (define (cons a b) (let ((x76853 (prim cons a b))) x76853))
  (define (car lst) (let ((x76854 (prim car lst))) x76854))
  (define (cdr lst) (let ((x76855 (prim cdr lst))) x76855))
  (define (even? x)
    (let ((a76856 '0))
      (let ((a76857 '2))
        (let ((a76858 (modulo x a76857))) (equal? a76856 a76858)))))
  (define (odd? x)
    (let ((a76859 '1))
      (let ((a76860 '2))
        (let ((a76861 (modulo x a76860))) (equal? a76859 a76861)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a76862 (null? lst)))
      (if a76862
        (let ((x76863 '#f)) x76863)
        (let ((a76864 (car lst)))
          (let ((a76865 (equal? a76864 x)))
            (if a76865
              (let ((x76866 '#t)) x76866)
              (let ((a76867 (cdr lst))) (member? x a76867))))))))
  (define (foldl fun acc lst)
    (let ((a76868 (null? lst)))
      (if a76868
        acc
        (let ((a76869 (car lst)))
          (let ((a76870 (fun a76869 acc)))
            (let ((a76871 (cdr lst))) (foldl fun a76870 a76871)))))))
  (define (reverse-helper lst lst2)
    (let ((a76872 (null? lst)))
      (if a76872
        lst2
        (let ((a76873 (cdr lst)))
          (let ((a76874 (car lst)))
            (let ((a76875 (cons a76874 lst2)))
              (reverse-helper a76873 a76875)))))))
  (define (reverse lst) (let ((a76876 (list))) (reverse-helper lst a76876)))
  (define (take-helper lst n lst2)
    (let ((a76877 '0))
      (let ((a76878 (= n a76877)))
        (if a76878
          (let ((x76879 (reverse lst2))) x76879)
          (let ((a76880 (cdr lst)))
            (let ((a76881 '1))
              (let ((a76882 (- n a76881)))
                (let ((a76883 (car lst)))
                  (let ((a76884 (cons a76883 lst2)))
                    (take-helper a76880 a76882 a76884))))))))))
  (define (take lst n) (let ((a76885 (list))) (take-helper lst n a76885)))
  (define (length lst)
    (let ((a76886 (null? lst)))
      (if a76886
        (let ((x76887 '0)) x76887)
        (let ((a76888 '1))
          (let ((a76889 (cdr lst)))
            (let ((a76890 (length a76889))) (+ a76888 a76890)))))))
  (define (map proc lst)
    (let ((a76891 (null? lst)))
      (if a76891
        (let ((x76892 (list))) x76892)
        (let ((a76893 (car lst)))
          (let ((a76894 (proc a76893)))
            (let ((a76895 (cdr lst)))
              (let ((a76896 (map proc a76895))) (cons a76894 a76896))))))))
  (define (filter op lst)
    (let ((a76897 (null? lst)))
      (if a76897
        (let ((x76898 (list))) x76898)
        (let ((a76899 (car lst)))
          (let ((a76900 (op a76899)))
            (if a76900
              (let ((a76901 (car lst)))
                (let ((a76902 (cdr lst)))
                  (let ((a76903 (filter op a76902))) (cons a76901 a76903))))
              (let ((a76904 (cdr lst))) (filter op a76904))))))))
  (define (drop lst n)
    (let ((a76905 '0))
      (let ((a76906 (= n a76905)))
        (if a76906
          lst
          (let ((a76907 (cdr lst)))
            (let ((a76908 '1))
              (let ((a76909 (- n a76908))) (drop a76907 a76909))))))))
  (define (foldr proc acc lst)
    (let ((a76910 (null? lst)))
      (if a76910
        acc
        (let ((a76911 (car lst)))
          (let ((a76912 (cdr lst)))
            (let ((a76913 (foldr proc acc a76912))) (proc a76911 a76913)))))))
  (define (append lst1 lst2)
    (let ((a76914 (null? lst1)))
      (if a76914
        lst2
        (let ((a76915 (car lst1)))
          (let ((a76916 (cdr lst1)))
            (let ((a76917 (append a76916 lst2))) (cons a76915 a76917)))))))
  (define (hash . lst) (let ((x76918 (apply-prim hash lst))) x76918))
  (define (hash-ref h k) (let ((x76919 (prim hash-ref h k))) x76919))
  (define (hash-set h k v) (let ((x76920 (prim hash-set h k v))) x76920))
  (define (hash-has-key? h k) (let ((x76921 (prim hash-has-key? h k))) x76921))
  (define (hash-count h) (let ((x76922 (prim hash-count h))) x76922))
  (define (call)
    (let ((a76923 '1))
      (let ((a76924 '2))
        (let ((a76925 '3))
          (let ((a76926 '4))
            (let ((a76927 (list a76923 a76924 a76925 a76926)))
              (length a76927)))))))
  (define (brouhaha_main) (let ((x76928 (call))) x76928)))
