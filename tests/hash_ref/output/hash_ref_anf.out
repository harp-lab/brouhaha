'((define (+ . lst)
    (let ((kont58751 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58661 (apply-prim + lst))) (kont58751 x58661)))))
  (define (- . lst)
    (let ((kont58753 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58662 (apply-prim - lst))) (kont58753 x58662)))))
  (define (* . lst)
    (let ((kont58755 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58663 (apply-prim * lst))) (kont58755 x58663)))))
  (define (modulo kont58757 a b)
    (let ((x58664 (prim modulo a b))) (kont58757 x58664)))
  (define (/ . lst)
    (let ((kont58758 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58665 (apply-prim / lst))) (kont58758 x58665)))))
  (define (= . lst)
    (let ((kont58760 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58666 (apply-prim = lst))) (kont58760 x58666)))))
  (define (> . lst)
    (let ((kont58762 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58667 (apply-prim > lst))) (kont58762 x58667)))))
  (define (< . lst)
    (let ((kont58764 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58668 (apply-prim < lst))) (kont58764 x58668)))))
  (define (<= . lst)
    (let ((kont58766 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58669 (apply-prim <= lst))) (kont58766 x58669)))))
  (define (>= . lst)
    (let ((kont58768 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58670 (apply-prim >= lst))) (kont58768 x58670)))))
  (define (null? kont58770 x)
    (let ((x58671 (prim null? x))) (kont58770 x58671)))
  (define (equal? kont58771 x y)
    (let ((x58672 (prim equal? x y))) (kont58771 x58672)))
  (define (eq? kont58772 x y)
    (let ((x58673 (prim eq? x y))) (kont58772 x58673)))
  (define (cons kont58773 a b)
    (let ((x58674 (prim cons a b))) (kont58773 x58674)))
  (define (car kont58774 lst)
    (let ((x58675 (prim car lst))) (kont58774 x58675)))
  (define (cdr kont58775 lst)
    (let ((x58676 (prim cdr lst))) (kont58775 x58676)))
  (define (even? kont58776 x)
    (let ((a58677 '0))
      (let ((a58678 '2))
        (let ((f58777 (lambda (a58679) (equal? kont58776 a58677 a58679))))
          (modulo f58777 x a58678)))))
  (define (odd? kont58778 x)
    (let ((a58680 '1))
      (let ((a58681 '2))
        (let ((f58779 (lambda (a58682) (equal? kont58778 a58680 a58682))))
          (modulo f58779 x a58681)))))
  (define (list . x)
    (let ((kont58780 (prim car x))) (let ((x (prim cdr x))) (kont58780 x))))
  (define (member? kont58782 x lst)
    (let ((f58786
           (lambda (a58683)
             (if a58683
               (let ((x58684 '#f)) (kont58782 x58684))
               (let ((f58785
                      (lambda (a58685)
                        (let ((f58784
                               (lambda (a58686)
                                 (if a58686
                                   (let ((x58687 '#t)) (kont58782 x58687))
                                   (let ((f58783
                                          (lambda (a58688)
                                            (member? kont58782 x a58688))))
                                     (cdr f58783 lst))))))
                          (equal? f58784 a58685 x)))))
                 (car f58785 lst))))))
      (null? f58786 lst)))
  (define (foldl kont58787 fun acc lst)
    (let ((f58791
           (lambda (a58689)
             (if a58689
               (kont58787 acc)
               (let ((f58790
                      (lambda (a58690)
                        (let ((f58789
                               (lambda (a58691)
                                 (let ((f58788
                                        (lambda (a58692)
                                          (foldl
                                           kont58787
                                           fun
                                           a58691
                                           a58692))))
                                   (cdr f58788 lst)))))
                          (fun f58789 a58690 acc)))))
                 (car f58790 lst))))))
      (null? f58791 lst)))
  (define (reverse-helper kont58792 lst lst2)
    (let ((f58796
           (lambda (a58693)
             (if a58693
               (kont58792 lst2)
               (let ((f58795
                      (lambda (a58694)
                        (let ((f58794
                               (lambda (a58695)
                                 (let ((f58793
                                        (lambda (a58696)
                                          (reverse-helper
                                           kont58792
                                           a58694
                                           a58696))))
                                   (cons f58793 a58695 lst2)))))
                          (car f58794 lst)))))
                 (cdr f58795 lst))))))
      (null? f58796 lst)))
  (define (reverse kont58797 lst)
    (let ((f58798 (lambda (a58697) (reverse-helper kont58797 lst a58697))))
      (list f58798)))
  (define (take-helper kont58799 lst n lst2)
    (let ((a58698 '0))
      (let ((f58805
             (lambda (a58699)
               (if a58699
                 (let ((f58800 (lambda (x58700) (kont58799 x58700))))
                   (reverse f58800 lst2))
                 (let ((f58804
                        (lambda (a58701)
                          (let ((a58702 '1))
                            (let ((f58803
                                   (lambda (a58703)
                                     (let ((f58802
                                            (lambda (a58704)
                                              (let ((f58801
                                                     (lambda (a58705)
                                                       (take-helper
                                                        kont58799
                                                        a58701
                                                        a58703
                                                        a58705))))
                                                (cons f58801 a58704 lst2)))))
                                       (car f58802 lst)))))
                              (- f58803 n a58702))))))
                   (cdr f58804 lst))))))
        (= f58805 n a58698))))
  (define (take kont58806 lst n)
    (let ((f58807 (lambda (a58706) (take-helper kont58806 lst n a58706))))
      (list f58807)))
  (define (length kont58808 lst)
    (let ((f58811
           (lambda (a58707)
             (if a58707
               (let ((x58708 '0)) (kont58808 x58708))
               (let ((a58709 '1))
                 (let ((f58810
                        (lambda (a58710)
                          (let ((f58809
                                 (lambda (a58711)
                                   (+ kont58808 a58709 a58711))))
                            (length f58809 a58710)))))
                   (cdr f58810 lst)))))))
      (null? f58811 lst)))
  (define (map kont58812 proc lst)
    (let ((f58818
           (lambda (a58712)
             (if a58712
               (let ((f58813 (lambda (x58713) (kont58812 x58713))))
                 (list f58813))
               (let ((f58817
                      (lambda (a58714)
                        (let ((f58816
                               (lambda (a58715)
                                 (let ((f58815
                                        (lambda (a58716)
                                          (let ((f58814
                                                 (lambda (a58717)
                                                   (cons
                                                    kont58812
                                                    a58715
                                                    a58717))))
                                            (map f58814 proc a58716)))))
                                   (cdr f58815 lst)))))
                          (proc f58816 a58714)))))
                 (car f58817 lst))))))
      (null? f58818 lst)))
  (define (filter kont58819 op lst)
    (let ((f58827
           (lambda (a58718)
             (if a58718
               (let ((f58820 (lambda (x58719) (kont58819 x58719))))
                 (list f58820))
               (let ((f58826
                      (lambda (a58720)
                        (let ((f58825
                               (lambda (a58721)
                                 (if a58721
                                   (let ((f58823
                                          (lambda (a58722)
                                            (let ((f58822
                                                   (lambda (a58723)
                                                     (let ((f58821
                                                            (lambda (a58724)
                                                              (cons
                                                               kont58819
                                                               a58722
                                                               a58724))))
                                                       (filter
                                                        f58821
                                                        op
                                                        a58723)))))
                                              (cdr f58822 lst)))))
                                     (car f58823 lst))
                                   (let ((f58824
                                          (lambda (a58725)
                                            (filter kont58819 op a58725))))
                                     (cdr f58824 lst))))))
                          (op f58825 a58720)))))
                 (car f58826 lst))))))
      (null? f58827 lst)))
  (define (drop kont58828 lst n)
    (let ((a58726 '0))
      (let ((f58831
             (lambda (a58727)
               (if a58727
                 (kont58828 lst)
                 (let ((f58830
                        (lambda (a58728)
                          (let ((a58729 '1))
                            (let ((f58829
                                   (lambda (a58730)
                                     (drop kont58828 a58728 a58730))))
                              (- f58829 n a58729))))))
                   (cdr f58830 lst))))))
        (= f58831 n a58726))))
  (define (foldr kont58832 proc acc lst)
    (let ((f58836
           (lambda (a58731)
             (if a58731
               (kont58832 acc)
               (let ((f58835
                      (lambda (a58732)
                        (let ((f58834
                               (lambda (a58733)
                                 (let ((f58833
                                        (lambda (a58734)
                                          (proc kont58832 a58732 a58734))))
                                   (foldr f58833 proc acc a58733)))))
                          (cdr f58834 lst)))))
                 (car f58835 lst))))))
      (null? f58836 lst)))
  (define (append kont58837 lst1 lst2)
    (let ((f58841
           (lambda (a58735)
             (if a58735
               (kont58837 lst2)
               (let ((f58840
                      (lambda (a58736)
                        (let ((f58839
                               (lambda (a58737)
                                 (let ((f58838
                                        (lambda (a58738)
                                          (cons kont58837 a58736 a58738))))
                                   (append f58838 a58737 lst2)))))
                          (cdr f58839 lst1)))))
                 (car f58840 lst1))))))
      (null? f58841 lst1)))
  (define (hash . lst)
    (let ((kont58842 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58739 (apply-prim hash lst))) (kont58842 x58739)))))
  (define (hash-ref kont58844 h k)
    (let ((x58740 (prim hash-ref h k))) (kont58844 x58740)))
  (define (hash-set kont58845 h k v)
    (let ((x58741 (prim hash-set h k v))) (kont58845 x58741)))
  (define (hash-has-key? kont58846 h k)
    (let ((x58742 (prim hash-has-key? h k))) (kont58846 x58742)))
  (define (hash-count kont58847 h)
    (let ((x58743 (prim hash-count h))) (kont58847 x58743)))
  (define (call kont58848)
    (let ((a58744 "work"))
      (let ((a58745 '80))
        (let ((a58746 '10))
          (let ((a58747 "lmao"))
            (let ((f58849
                   (lambda (a58748)
                     (let ((a58749 '10)) (hash-ref kont58848 a58748 a58749)))))
              (hash f58849 a58744 a58745 a58746 a58747)))))))
  (define (brouhaha_main kont58850)
    (let ((f58851 (lambda (x58750) (kont58850 x58750)))) (call f58851))))
