'((define (+ . lst) (let ((x58661 (apply-prim + lst))) x58661))
  (define (- . lst) (let ((x58662 (apply-prim - lst))) x58662))
  (define (* . lst) (let ((x58663 (apply-prim * lst))) x58663))
  (define (modulo a b) (let ((x58664 (prim modulo a b))) x58664))
  (define (/ . lst) (let ((x58665 (apply-prim / lst))) x58665))
  (define (= . lst) (let ((x58666 (apply-prim = lst))) x58666))
  (define (> . lst) (let ((x58667 (apply-prim > lst))) x58667))
  (define (< . lst) (let ((x58668 (apply-prim < lst))) x58668))
  (define (<= . lst) (let ((x58669 (apply-prim <= lst))) x58669))
  (define (>= . lst) (let ((x58670 (apply-prim >= lst))) x58670))
  (define (null? x) (let ((x58671 (prim null? x))) x58671))
  (define (equal? x y) (let ((x58672 (prim equal? x y))) x58672))
  (define (eq? x y) (let ((x58673 (prim eq? x y))) x58673))
  (define (cons a b) (let ((x58674 (prim cons a b))) x58674))
  (define (car lst) (let ((x58675 (prim car lst))) x58675))
  (define (cdr lst) (let ((x58676 (prim cdr lst))) x58676))
  (define (even? x)
    (let ((a58677 '0))
      (let ((a58678 '2))
        (let ((a58679 (modulo x a58678))) (equal? a58677 a58679)))))
  (define (odd? x)
    (let ((a58680 '1))
      (let ((a58681 '2))
        (let ((a58682 (modulo x a58681))) (equal? a58680 a58682)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a58683 (null? lst)))
      (if a58683
        (let ((x58684 '#f)) x58684)
        (let ((a58685 (car lst)))
          (let ((a58686 (equal? a58685 x)))
            (if a58686
              (let ((x58687 '#t)) x58687)
              (let ((a58688 (cdr lst))) (member? x a58688))))))))
  (define (foldl fun acc lst)
    (let ((a58689 (null? lst)))
      (if a58689
        acc
        (let ((a58690 (car lst)))
          (let ((a58691 (fun a58690 acc)))
            (let ((a58692 (cdr lst))) (foldl fun a58691 a58692)))))))
  (define (reverse-helper lst lst2)
    (let ((a58693 (null? lst)))
      (if a58693
        lst2
        (let ((a58694 (cdr lst)))
          (let ((a58695 (car lst)))
            (let ((a58696 (cons a58695 lst2)))
              (reverse-helper a58694 a58696)))))))
  (define (reverse lst) (let ((a58697 (list))) (reverse-helper lst a58697)))
  (define (take-helper lst n lst2)
    (let ((a58698 '0))
      (let ((a58699 (= n a58698)))
        (if a58699
          (let ((x58700 (reverse lst2))) x58700)
          (let ((a58701 (cdr lst)))
            (let ((a58702 '1))
              (let ((a58703 (- n a58702)))
                (let ((a58704 (car lst)))
                  (let ((a58705 (cons a58704 lst2)))
                    (take-helper a58701 a58703 a58705))))))))))
  (define (take lst n) (let ((a58706 (list))) (take-helper lst n a58706)))
  (define (length lst)
    (let ((a58707 (null? lst)))
      (if a58707
        (let ((x58708 '0)) x58708)
        (let ((a58709 '1))
          (let ((a58710 (cdr lst)))
            (let ((a58711 (length a58710))) (+ a58709 a58711)))))))
  (define (map proc lst)
    (let ((a58712 (null? lst)))
      (if a58712
        (let ((x58713 (list))) x58713)
        (let ((a58714 (car lst)))
          (let ((a58715 (proc a58714)))
            (let ((a58716 (cdr lst)))
              (let ((a58717 (map proc a58716))) (cons a58715 a58717))))))))
  (define (filter op lst)
    (let ((a58718 (null? lst)))
      (if a58718
        (let ((x58719 (list))) x58719)
        (let ((a58720 (car lst)))
          (let ((a58721 (op a58720)))
            (if a58721
              (let ((a58722 (car lst)))
                (let ((a58723 (cdr lst)))
                  (let ((a58724 (filter op a58723))) (cons a58722 a58724))))
              (let ((a58725 (cdr lst))) (filter op a58725))))))))
  (define (drop lst n)
    (let ((a58726 '0))
      (let ((a58727 (= n a58726)))
        (if a58727
          lst
          (let ((a58728 (cdr lst)))
            (let ((a58729 '1))
              (let ((a58730 (- n a58729))) (drop a58728 a58730))))))))
  (define (foldr proc acc lst)
    (let ((a58731 (null? lst)))
      (if a58731
        acc
        (let ((a58732 (car lst)))
          (let ((a58733 (cdr lst)))
            (let ((a58734 (foldr proc acc a58733))) (proc a58732 a58734)))))))
  (define (append lst1 lst2)
    (let ((a58735 (null? lst1)))
      (if a58735
        lst2
        (let ((a58736 (car lst1)))
          (let ((a58737 (cdr lst1)))
            (let ((a58738 (append a58737 lst2))) (cons a58736 a58738)))))))
  (define (hash . lst) (let ((x58739 (apply-prim hash lst))) x58739))
  (define (hash-ref h k) (let ((x58740 (prim hash-ref h k))) x58740))
  (define (hash-set h k v) (let ((x58741 (prim hash-set h k v))) x58741))
  (define (hash-has-key? h k) (let ((x58742 (prim hash-has-key? h k))) x58742))
  (define (hash-count h) (let ((x58743 (prim hash-count h))) x58743))
  (define (call)
    (let ((a58744 "work"))
      (let ((a58745 '80))
        (let ((a58746 '10))
          (let ((a58747 "lmao"))
            (let ((a58748 (hash a58744 a58745 a58746 a58747)))
              (let ((a58749 '10)) (hash-ref a58748 a58749))))))))
  (define (brouhaha_main) (let ((x58750 (call))) x58750)))
