'((define (+ . lst) (let ((x57352 (apply-prim + lst))) x57352))
  (define (- . lst) (let ((x57353 (apply-prim - lst))) x57353))
  (define (* . lst) (let ((x57354 (apply-prim * lst))) x57354))
  (define (modulo a b) (let ((x57355 (prim modulo a b))) x57355))
  (define (/ . lst) (let ((x57356 (apply-prim / lst))) x57356))
  (define (= . lst) (let ((x57357 (apply-prim = lst))) x57357))
  (define (> . lst) (let ((x57358 (apply-prim > lst))) x57358))
  (define (< . lst) (let ((x57359 (apply-prim < lst))) x57359))
  (define (<= . lst) (let ((x57360 (apply-prim <= lst))) x57360))
  (define (>= . lst) (let ((x57361 (apply-prim >= lst))) x57361))
  (define (null? x) (let ((x57362 (prim null? x))) x57362))
  (define (equal? x y) (let ((x57363 (prim equal? x y))) x57363))
  (define (eq? x y) (let ((x57364 (prim eq? x y))) x57364))
  (define (cons a b) (let ((x57365 (prim cons a b))) x57365))
  (define (car lst) (let ((x57366 (prim car lst))) x57366))
  (define (cdr lst) (let ((x57367 (prim cdr lst))) x57367))
  (define (even? x)
    (let ((a57368 '0))
      (let ((a57369 '2))
        (let ((a57370 (modulo x a57369))) (equal? a57368 a57370)))))
  (define (odd? x)
    (let ((a57371 '1))
      (let ((a57372 '2))
        (let ((a57373 (modulo x a57372))) (equal? a57371 a57373)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a57374 (null? lst)))
      (if a57374
        (let ((x57375 '#f)) x57375)
        (let ((a57376 (car lst)))
          (let ((a57377 (equal? a57376 x)))
            (if a57377
              (let ((x57378 '#t)) x57378)
              (let ((a57379 (cdr lst))) (member? x a57379))))))))
  (define (foldl fun acc lst)
    (let ((a57380 (null? lst)))
      (if a57380
        acc
        (let ((a57381 (car lst)))
          (let ((a57382 (fun a57381 acc)))
            (let ((a57383 (cdr lst))) (foldl fun a57382 a57383)))))))
  (define (reverse-helper lst lst2)
    (let ((a57384 (null? lst)))
      (if a57384
        lst2
        (let ((a57385 (cdr lst)))
          (let ((a57386 (car lst)))
            (let ((a57387 (cons a57386 lst2)))
              (reverse-helper a57385 a57387)))))))
  (define (reverse lst) (let ((a57388 (list))) (reverse-helper lst a57388)))
  (define (take-helper lst n lst2)
    (let ((a57389 '0))
      (let ((a57390 (= n a57389)))
        (if a57390
          (let ((x57391 (reverse lst2))) x57391)
          (let ((a57392 (cdr lst)))
            (let ((a57393 '1))
              (let ((a57394 (- n a57393)))
                (let ((a57395 (car lst)))
                  (let ((a57396 (cons a57395 lst2)))
                    (take-helper a57392 a57394 a57396))))))))))
  (define (take lst n) (let ((a57397 (list))) (take-helper lst n a57397)))
  (define (length lst)
    (let ((a57398 (null? lst)))
      (if a57398
        (let ((x57399 '0)) x57399)
        (let ((a57400 '1))
          (let ((a57401 (cdr lst)))
            (let ((a57402 (length a57401))) (+ a57400 a57402)))))))
  (define (map proc lst)
    (let ((a57403 (null? lst)))
      (if a57403
        (let ((x57404 (list))) x57404)
        (let ((a57405 (car lst)))
          (let ((a57406 (proc a57405)))
            (let ((a57407 (cdr lst)))
              (let ((a57408 (map proc a57407))) (cons a57406 a57408))))))))
  (define (filter op lst)
    (let ((a57409 (null? lst)))
      (if a57409
        (let ((x57410 (list))) x57410)
        (let ((a57411 (car lst)))
          (let ((a57412 (op a57411)))
            (if a57412
              (let ((a57413 (car lst)))
                (let ((a57414 (cdr lst)))
                  (let ((a57415 (filter op a57414))) (cons a57413 a57415))))
              (let ((a57416 (cdr lst))) (filter op a57416))))))))
  (define (drop lst n)
    (let ((a57417 '0))
      (let ((a57418 (= n a57417)))
        (if a57418
          lst
          (let ((a57419 (cdr lst)))
            (let ((a57420 '1))
              (let ((a57421 (- n a57420))) (drop a57419 a57421))))))))
  (define (foldr proc acc lst)
    (let ((a57422 (null? lst)))
      (if a57422
        acc
        (let ((a57423 (car lst)))
          (let ((a57424 (cdr lst)))
            (let ((a57425 (foldr proc acc a57424))) (proc a57423 a57425)))))))
  (define (append lst1 lst2)
    (let ((a57426 (null? lst1)))
      (if a57426
        lst2
        (let ((a57427 (car lst1)))
          (let ((a57428 (cdr lst1)))
            (let ((a57429 (append a57428 lst2))) (cons a57427 a57429)))))))
  (define (hash . lst) (let ((x57430 (apply-prim hash lst))) x57430))
  (define (hash-ref h k) (let ((x57431 (prim hash-ref h k))) x57431))
  (define (hash-set h k v) (let ((x57432 (prim hash-set h k v))) x57432))
  (define (hash-has-key? h k) (let ((x57433 (prim hash-has-key? h k))) x57433))
  (define (hash-count h) (let ((x57434 (prim hash-count h))) x57434))
  (define (call)
    (let ((a57435 '100))
      (let ((a57436 '80))
        (let ((a57437 '10))
          (let ((a57438 '2))
            (let ((a57439 '25))
              (let ((a57440 '30))
                (let ((a57441
                       (hash a57435 a57436 a57437 a57438 a57439 a57440)))
                  (hash-count a57441)))))))))
  (define (brouhaha_main) (let ((x57442 (call))) x57442)))
