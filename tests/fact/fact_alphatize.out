'((define (+ . lst) (let ((x32815 (apply-prim + lst))) x32815))
  (define (- . lst) (let ((x32816 (apply-prim - lst))) x32816))
  (define (* . lst) (let ((x32817 (apply-prim * lst))) x32817))
  (define (modulo a b) (let ((x32818 (prim modulo a b))) x32818))
  (define (/ . lst) (let ((x32819 (apply-prim / lst))) x32819))
  (define (= . lst) (let ((x32820 (apply-prim = lst))) x32820))
  (define (> . lst) (let ((x32821 (apply-prim > lst))) x32821))
  (define (< . lst) (let ((x32822 (apply-prim < lst))) x32822))
  (define (<= . lst) (let ((x32823 (apply-prim <= lst))) x32823))
  (define (>= . lst) (let ((x32824 (apply-prim >= lst))) x32824))
  (define (null? x) (let ((x32825 (prim null? x))) x32825))
  (define (equal? x y) (let ((x32826 (prim equal? x y))) x32826))
  (define (eq? x y) (let ((x32827 (prim eq? x y))) x32827))
  (define (cons a b) (let ((x32828 (prim cons a b))) x32828))
  (define (car lst) (let ((x32829 (prim car lst))) x32829))
  (define (cdr lst) (let ((x32830 (prim cdr lst))) x32830))
  (define (even? x)
    (let ((a32831 '0))
      (let ((a32832 '2))
        (let ((a32833 (modulo x a32832))) (equal? a32831 a32833)))))
  (define (odd? x)
    (let ((a32834 '1))
      (let ((a32835 '2))
        (let ((a32836 (modulo x a32835))) (equal? a32834 a32836)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a32837 (null? lst)))
      (if a32837
        (let ((x32838 '#f)) x32838)
        (let ((a32839 (car lst)))
          (let ((a32840 (equal? a32839 x)))
            (if a32840
              (let ((x32841 '#t)) x32841)
              (let ((a32842 (cdr lst))) (member? x a32842))))))))
  (define (foldl fun acc lst)
    (let ((a32843 (null? lst)))
      (if a32843
        acc
        (let ((a32844 (car lst)))
          (let ((a32845 (fun a32844 acc)))
            (let ((a32846 (cdr lst))) (foldl fun a32845 a32846)))))))
  (define (reverse-helper lst lst2)
    (let ((a32847 (null? lst)))
      (if a32847
        lst2
        (let ((a32848 (cdr lst)))
          (let ((a32849 (car lst)))
            (let ((a32850 (cons a32849 lst2)))
              (reverse-helper a32848 a32850)))))))
  (define (reverse lst) (let ((a32851 (list))) (reverse-helper lst a32851)))
  (define (take-helper lst n lst2)
    (let ((a32852 '0))
      (let ((a32853 (= n a32852)))
        (if a32853
          (let ((x32854 (reverse lst2))) x32854)
          (let ((a32855 (cdr lst)))
            (let ((a32856 '1))
              (let ((a32857 (- n a32856)))
                (let ((a32858 (car lst)))
                  (let ((a32859 (cons a32858 lst2)))
                    (take-helper a32855 a32857 a32859))))))))))
  (define (take lst n) (let ((a32860 (list))) (take-helper lst n a32860)))
  (define (length lst)
    (let ((a32861 (null? lst)))
      (if a32861
        (let ((x32862 '0)) x32862)
        (let ((a32863 '1))
          (let ((a32864 (cdr lst)))
            (let ((a32865 (length a32864))) (+ a32863 a32865)))))))
  (define (map proc lst)
    (let ((a32866 (null? lst)))
      (if a32866
        (let ((x32867 (list))) x32867)
        (let ((a32868 (car lst)))
          (let ((a32869 (proc a32868)))
            (let ((a32870 (cdr lst)))
              (let ((a32871 (map proc a32870))) (cons a32869 a32871))))))))
  (define (filter op lst)
    (let ((a32872 (null? lst)))
      (if a32872
        (let ((x32873 (list))) x32873)
        (let ((a32874 (car lst)))
          (let ((a32875 (op a32874)))
            (if a32875
              (let ((a32876 (car lst)))
                (let ((a32877 (cdr lst)))
                  (let ((a32878 (filter op a32877))) (cons a32876 a32878))))
              (let ((a32879 (cdr lst))) (filter op a32879))))))))
  (define (drop lst n)
    (let ((a32880 '0))
      (let ((a32881 (= n a32880)))
        (if a32881
          lst
          (let ((a32882 (cdr lst)))
            (let ((a32883 '1))
              (let ((a32884 (- n a32883))) (drop a32882 a32884))))))))
  (define (foldr proc acc lst)
    (let ((a32885 (null? lst)))
      (if a32885
        acc
        (let ((a32886 (car lst)))
          (let ((a32887 (cdr lst)))
            (let ((a32888 (foldr proc acc a32887))) (proc a32886 a32888)))))))
  (define (append lst1 lst2)
    (let ((a32889 (null? lst1)))
      (if a32889
        lst2
        (let ((a32890 (car lst1)))
          (let ((a32891 (cdr lst1)))
            (let ((a32892 (append a32891 lst2))) (cons a32890 a32892)))))))
  (define (hash . lst) (let ((x32893 (apply-prim hash lst))) x32893))
  (define (hash-ref h k) (let ((x32894 (prim hash-ref h k))) x32894))
  (define (hash-set h k v) (let ((x32895 (prim hash-set h k v))) x32895))
  (define (hash-has-key? h k) (let ((x32896 (prim hash-has-key? h k))) x32896))
  (define (hash-count h) (let ((x32897 (prim hash-count h))) x32897))
  (define (fact n)
    (let ((a32898 '0))
      (let ((a32899 (= a32898 n)))
        (if a32899
          (let ((x32900 '1)) x32900)
          (let ((a32901 '1))
            (let ((a32902 (- n a32901)))
              (let ((a32903 (fact a32902))) (* n a32903))))))))
  (define (brouhaha_main) (let ((a32904 '5)) (fact a32904))))
