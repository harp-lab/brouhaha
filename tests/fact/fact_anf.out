'((define (+ . lst)
    (let ((kont32905 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32815 (apply-prim + lst))) (kont32905 x32815)))))
  (define (- . lst)
    (let ((kont32907 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32816 (apply-prim - lst))) (kont32907 x32816)))))
  (define (* . lst)
    (let ((kont32909 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32817 (apply-prim * lst))) (kont32909 x32817)))))
  (define (modulo kont32911 a b)
    (let ((x32818 (prim modulo a b))) (kont32911 x32818)))
  (define (/ . lst)
    (let ((kont32912 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32819 (apply-prim / lst))) (kont32912 x32819)))))
  (define (= . lst)
    (let ((kont32914 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32820 (apply-prim = lst))) (kont32914 x32820)))))
  (define (> . lst)
    (let ((kont32916 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32821 (apply-prim > lst))) (kont32916 x32821)))))
  (define (< . lst)
    (let ((kont32918 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32822 (apply-prim < lst))) (kont32918 x32822)))))
  (define (<= . lst)
    (let ((kont32920 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32823 (apply-prim <= lst))) (kont32920 x32823)))))
  (define (>= . lst)
    (let ((kont32922 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32824 (apply-prim >= lst))) (kont32922 x32824)))))
  (define (null? kont32924 x)
    (let ((x32825 (prim null? x))) (kont32924 x32825)))
  (define (equal? kont32925 x y)
    (let ((x32826 (prim equal? x y))) (kont32925 x32826)))
  (define (eq? kont32926 x y)
    (let ((x32827 (prim eq? x y))) (kont32926 x32827)))
  (define (cons kont32927 a b)
    (let ((x32828 (prim cons a b))) (kont32927 x32828)))
  (define (car kont32928 lst)
    (let ((x32829 (prim car lst))) (kont32928 x32829)))
  (define (cdr kont32929 lst)
    (let ((x32830 (prim cdr lst))) (kont32929 x32830)))
  (define (even? kont32930 x)
    (let ((a32831 '0))
      (let ((a32832 '2))
        (let ((f32931 (lambda (a32833) (equal? kont32930 a32831 a32833))))
          (modulo f32931 x a32832)))))
  (define (odd? kont32932 x)
    (let ((a32834 '1))
      (let ((a32835 '2))
        (let ((f32933 (lambda (a32836) (equal? kont32932 a32834 a32836))))
          (modulo f32933 x a32835)))))
  (define (list . x)
    (let ((kont32934 (prim car x))) (let ((x (prim cdr x))) (kont32934 x))))
  (define (member? kont32936 x lst)
    (let ((f32940
           (lambda (a32837)
             (if a32837
               (let ((x32838 '#f)) (kont32936 x32838))
               (let ((f32939
                      (lambda (a32839)
                        (let ((f32938
                               (lambda (a32840)
                                 (if a32840
                                   (let ((x32841 '#t)) (kont32936 x32841))
                                   (let ((f32937
                                          (lambda (a32842)
                                            (member? kont32936 x a32842))))
                                     (cdr f32937 lst))))))
                          (equal? f32938 a32839 x)))))
                 (car f32939 lst))))))
      (null? f32940 lst)))
  (define (foldl kont32941 fun acc lst)
    (let ((f32945
           (lambda (a32843)
             (if a32843
               (kont32941 acc)
               (let ((f32944
                      (lambda (a32844)
                        (let ((f32943
                               (lambda (a32845)
                                 (let ((f32942
                                        (lambda (a32846)
                                          (foldl
                                           kont32941
                                           fun
                                           a32845
                                           a32846))))
                                   (cdr f32942 lst)))))
                          (fun f32943 a32844 acc)))))
                 (car f32944 lst))))))
      (null? f32945 lst)))
  (define (reverse-helper kont32946 lst lst2)
    (let ((f32950
           (lambda (a32847)
             (if a32847
               (kont32946 lst2)
               (let ((f32949
                      (lambda (a32848)
                        (let ((f32948
                               (lambda (a32849)
                                 (let ((f32947
                                        (lambda (a32850)
                                          (reverse-helper
                                           kont32946
                                           a32848
                                           a32850))))
                                   (cons f32947 a32849 lst2)))))
                          (car f32948 lst)))))
                 (cdr f32949 lst))))))
      (null? f32950 lst)))
  (define (reverse kont32951 lst)
    (let ((f32952 (lambda (a32851) (reverse-helper kont32951 lst a32851))))
      (list f32952)))
  (define (take-helper kont32953 lst n lst2)
    (let ((a32852 '0))
      (let ((f32959
             (lambda (a32853)
               (if a32853
                 (let ((f32954 (lambda (x32854) (kont32953 x32854))))
                   (reverse f32954 lst2))
                 (let ((f32958
                        (lambda (a32855)
                          (let ((a32856 '1))
                            (let ((f32957
                                   (lambda (a32857)
                                     (let ((f32956
                                            (lambda (a32858)
                                              (let ((f32955
                                                     (lambda (a32859)
                                                       (take-helper
                                                        kont32953
                                                        a32855
                                                        a32857
                                                        a32859))))
                                                (cons f32955 a32858 lst2)))))
                                       (car f32956 lst)))))
                              (- f32957 n a32856))))))
                   (cdr f32958 lst))))))
        (= f32959 n a32852))))
  (define (take kont32960 lst n)
    (let ((f32961 (lambda (a32860) (take-helper kont32960 lst n a32860))))
      (list f32961)))
  (define (length kont32962 lst)
    (let ((f32965
           (lambda (a32861)
             (if a32861
               (let ((x32862 '0)) (kont32962 x32862))
               (let ((a32863 '1))
                 (let ((f32964
                        (lambda (a32864)
                          (let ((f32963
                                 (lambda (a32865)
                                   (+ kont32962 a32863 a32865))))
                            (length f32963 a32864)))))
                   (cdr f32964 lst)))))))
      (null? f32965 lst)))
  (define (map kont32966 proc lst)
    (let ((f32972
           (lambda (a32866)
             (if a32866
               (let ((f32967 (lambda (x32867) (kont32966 x32867))))
                 (list f32967))
               (let ((f32971
                      (lambda (a32868)
                        (let ((f32970
                               (lambda (a32869)
                                 (let ((f32969
                                        (lambda (a32870)
                                          (let ((f32968
                                                 (lambda (a32871)
                                                   (cons
                                                    kont32966
                                                    a32869
                                                    a32871))))
                                            (map f32968 proc a32870)))))
                                   (cdr f32969 lst)))))
                          (proc f32970 a32868)))))
                 (car f32971 lst))))))
      (null? f32972 lst)))
  (define (filter kont32973 op lst)
    (let ((f32981
           (lambda (a32872)
             (if a32872
               (let ((f32974 (lambda (x32873) (kont32973 x32873))))
                 (list f32974))
               (let ((f32980
                      (lambda (a32874)
                        (let ((f32979
                               (lambda (a32875)
                                 (if a32875
                                   (let ((f32977
                                          (lambda (a32876)
                                            (let ((f32976
                                                   (lambda (a32877)
                                                     (let ((f32975
                                                            (lambda (a32878)
                                                              (cons
                                                               kont32973
                                                               a32876
                                                               a32878))))
                                                       (filter
                                                        f32975
                                                        op
                                                        a32877)))))
                                              (cdr f32976 lst)))))
                                     (car f32977 lst))
                                   (let ((f32978
                                          (lambda (a32879)
                                            (filter kont32973 op a32879))))
                                     (cdr f32978 lst))))))
                          (op f32979 a32874)))))
                 (car f32980 lst))))))
      (null? f32981 lst)))
  (define (drop kont32982 lst n)
    (let ((a32880 '0))
      (let ((f32985
             (lambda (a32881)
               (if a32881
                 (kont32982 lst)
                 (let ((f32984
                        (lambda (a32882)
                          (let ((a32883 '1))
                            (let ((f32983
                                   (lambda (a32884)
                                     (drop kont32982 a32882 a32884))))
                              (- f32983 n a32883))))))
                   (cdr f32984 lst))))))
        (= f32985 n a32880))))
  (define (foldr kont32986 proc acc lst)
    (let ((f32990
           (lambda (a32885)
             (if a32885
               (kont32986 acc)
               (let ((f32989
                      (lambda (a32886)
                        (let ((f32988
                               (lambda (a32887)
                                 (let ((f32987
                                        (lambda (a32888)
                                          (proc kont32986 a32886 a32888))))
                                   (foldr f32987 proc acc a32887)))))
                          (cdr f32988 lst)))))
                 (car f32989 lst))))))
      (null? f32990 lst)))
  (define (append kont32991 lst1 lst2)
    (let ((f32995
           (lambda (a32889)
             (if a32889
               (kont32991 lst2)
               (let ((f32994
                      (lambda (a32890)
                        (let ((f32993
                               (lambda (a32891)
                                 (let ((f32992
                                        (lambda (a32892)
                                          (cons kont32991 a32890 a32892))))
                                   (append f32992 a32891 lst2)))))
                          (cdr f32993 lst1)))))
                 (car f32994 lst1))))))
      (null? f32995 lst1)))
  (define (hash . lst)
    (let ((kont32996 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x32893 (apply-prim hash lst))) (kont32996 x32893)))))
  (define (hash-ref kont32998 h k)
    (let ((x32894 (prim hash-ref h k))) (kont32998 x32894)))
  (define (hash-set kont32999 h k v)
    (let ((x32895 (prim hash-set h k v))) (kont32999 x32895)))
  (define (hash-has-key? kont33000 h k)
    (let ((x32896 (prim hash-has-key? h k))) (kont33000 x32896)))
  (define (hash-count kont33001 h)
    (let ((x32897 (prim hash-count h))) (kont33001 x32897)))
  (define (fact kont33002 n)
    (let ((a32898 '0))
      (let ((f33005
             (lambda (a32899)
               (if a32899
                 (let ((x32900 '1)) (kont33002 x32900))
                 (let ((a32901 '1))
                   (let ((f33004
                          (lambda (a32902)
                            (let ((f33003
                                   (lambda (a32903) (* kont33002 n a32903))))
                              (fact f33003 a32902)))))
                     (- f33004 n a32901)))))))
        (= f33005 a32898 n))))
  (define (brouhaha_main kont33006)
    (let ((a32904 '5)) (fact kont33006 a32904))))
