'((define (+ . lst) (let ((x31580 (apply-prim + lst))) x31580))
  (define (- . lst) (let ((x31581 (apply-prim - lst))) x31581))
  (define (* . lst) (let ((x31582 (apply-prim * lst))) x31582))
  (define (modulo a b) (let ((x31583 (prim modulo a b))) x31583))
  (define (/ . lst) (let ((x31584 (apply-prim / lst))) x31584))
  (define (= . lst) (let ((x31585 (apply-prim = lst))) x31585))
  (define (> . lst) (let ((x31586 (apply-prim > lst))) x31586))
  (define (< . lst) (let ((x31587 (apply-prim < lst))) x31587))
  (define (<= . lst) (let ((x31588 (apply-prim <= lst))) x31588))
  (define (>= . lst) (let ((x31589 (apply-prim >= lst))) x31589))
  (define (null? x) (let ((x31590 (prim null? x))) x31590))
  (define (equal? x y) (let ((x31591 (prim equal? x y))) x31591))
  (define (eq? x y) (let ((x31592 (prim eq? x y))) x31592))
  (define (cons a b) (let ((x31593 (prim cons a b))) x31593))
  (define (car lst) (let ((x31594 (prim car lst))) x31594))
  (define (cdr lst) (let ((x31595 (prim cdr lst))) x31595))
  (define (even? x)
    (let ((a31596 '0))
      (let ((a31597 '2))
        (let ((a31598 (modulo x a31597))) (equal? a31596 a31598)))))
  (define (odd? x)
    (let ((a31599 '1))
      (let ((a31600 '2))
        (let ((a31601 (modulo x a31600))) (equal? a31599 a31601)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a31602 (null? lst)))
      (if a31602
        (let ((x31603 '#f)) x31603)
        (let ((a31604 (car lst)))
          (let ((a31605 (equal? a31604 x)))
            (if a31605
              (let ((x31606 '#t)) x31606)
              (let ((a31607 (cdr lst))) (member? x a31607))))))))
  (define (foldl fun acc lst)
    (let ((a31608 (null? lst)))
      (if a31608
        acc
        (let ((a31609 (car lst)))
          (let ((a31610 (fun a31609 acc)))
            (let ((a31611 (cdr lst))) (foldl fun a31610 a31611)))))))
  (define (reverse-helper lst lst2)
    (let ((a31612 (null? lst)))
      (if a31612
        lst2
        (let ((a31613 (cdr lst)))
          (let ((a31614 (car lst)))
            (let ((a31615 (cons a31614 lst2)))
              (reverse-helper a31613 a31615)))))))
  (define (reverse lst) (let ((a31616 (list))) (reverse-helper lst a31616)))
  (define (take-helper lst n lst2)
    (let ((a31617 '0))
      (let ((a31618 (= n a31617)))
        (if a31618
          (let ((x31619 (reverse lst2))) x31619)
          (let ((a31620 (cdr lst)))
            (let ((a31621 '1))
              (let ((a31622 (- n a31621)))
                (let ((a31623 (car lst)))
                  (let ((a31624 (cons a31623 lst2)))
                    (take-helper a31620 a31622 a31624))))))))))
  (define (take lst n) (let ((a31625 (list))) (take-helper lst n a31625)))
  (define (length lst)
    (let ((a31626 (null? lst)))
      (if a31626
        (let ((x31627 '0)) x31627)
        (let ((a31628 '1))
          (let ((a31629 (cdr lst)))
            (let ((a31630 (length a31629))) (+ a31628 a31630)))))))
  (define (map proc lst)
    (let ((a31631 (null? lst)))
      (if a31631
        (let ((x31632 (list))) x31632)
        (let ((a31633 (car lst)))
          (let ((a31634 (proc a31633)))
            (let ((a31635 (cdr lst)))
              (let ((a31636 (map proc a31635))) (cons a31634 a31636))))))))
  (define (filter op lst)
    (let ((a31637 (null? lst)))
      (if a31637
        (let ((x31638 (list))) x31638)
        (let ((a31639 (car lst)))
          (let ((a31640 (op a31639)))
            (if a31640
              (let ((a31641 (car lst)))
                (let ((a31642 (cdr lst)))
                  (let ((a31643 (filter op a31642))) (cons a31641 a31643))))
              (let ((a31644 (cdr lst))) (filter op a31644))))))))
  (define (drop lst n)
    (let ((a31645 '0))
      (let ((a31646 (= n a31645)))
        (if a31646
          lst
          (let ((a31647 (cdr lst)))
            (let ((a31648 '1))
              (let ((a31649 (- n a31648))) (drop a31647 a31649))))))))
  (define (foldr proc acc lst)
    (let ((a31650 (null? lst)))
      (if a31650
        acc
        (let ((a31651 (car lst)))
          (let ((a31652 (cdr lst)))
            (let ((a31653 (foldr proc acc a31652))) (proc a31651 a31653)))))))
  (define (append lst1 lst2)
    (let ((a31654 (null? lst1)))
      (if a31654
        lst2
        (let ((a31655 (car lst1)))
          (let ((a31656 (cdr lst1)))
            (let ((a31657 (append a31656 lst2))) (cons a31655 a31657)))))))
  (define (hash . lst) (let ((x31658 (apply-prim hash lst))) x31658))
  (define (hash-ref h k) (let ((x31659 (prim hash-ref h k))) x31659))
  (define (hash-set h k v) (let ((x31660 (prim hash-set h k v))) x31660))
  (define (hash-has-key? h k) (let ((x31661 (prim hash-has-key? h k))) x31661))
  (define (hash-count h) (let ((x31662 (prim hash-count h))) x31662))
  (define (fact n)
    (let ((a31663 '0))
      (let ((a31664 (= a31663 n)))
        (if a31664
          (let ((x31665 '1)) x31665)
          (let ((a31666 '1))
            (let ((a31667 (- n a31666)))
              (let ((a31668 (fact a31667))) (* n a31668))))))))
  (define (brouhaha_main) (let ((a31669 '5)) (fact a31669))))
