'((define (+ . lst) (apply-prim + lst))
  (define (- . lst) (apply-prim - lst))
  (define (* . lst) (apply-prim * lst))
  (define (modulo a b) (prim modulo a b))
  (define (/ . lst) (apply-prim / lst))
  (define (= . lst) (apply-prim = lst))
  (define (> . lst) (apply-prim > lst))
  (define (< . lst) (apply-prim < lst))
  (define (<= . lst) (apply-prim <= lst))
  (define (>= . lst) (apply-prim >= lst))
  (define (null? x) (prim null? x))
  (define (equal? x y) (prim equal? x y))
  (define (eq? x y) (prim eq? x y))
  (define (cons a b) (prim cons a b))
  (define (car lst) (prim car lst))
  (define (cdr lst) (prim cdr lst))
  (define (even? x) (equal? '0 (modulo x '2)))
  (define (odd? x) (equal? '1 (modulo x '2)))
  (define (list . x) x)
  (define (member? x lst)
    (if (null? lst) '#f (if (equal? (car lst) x) '#t (member? x (cdr lst)))))
  (define (foldl fun acc lst)
    (if (null? lst) acc (foldl fun (fun (car lst) acc) (cdr lst))))
  (define (reverse-helper lst lst2)
    (if (null? lst) lst2 (reverse-helper (cdr lst) (cons (car lst) lst2))))
  (define (reverse lst) (reverse-helper lst (list)))
  (define (take-helper lst n lst2)
    (if (= n '0)
      (reverse lst2)
      (take-helper (cdr lst) (- n '1) (cons (car lst) lst2))))
  (define (take lst n) (take-helper lst n (list)))
  (define (length lst) (if (null? lst) '0 (+ '1 (length (cdr lst)))))
  (define (map proc lst)
    (if (null? lst) (list) (cons (proc (car lst)) (map proc (cdr lst)))))
  (define (filter op lst)
    (if (null? lst)
      (list)
      (if (op (car lst))
        (cons (car lst) (filter op (cdr lst)))
        (filter op (cdr lst)))))
  (define (drop lst n) (if (= n '0) lst (drop (cdr lst) (- n '1))))
  (define (foldr proc acc lst)
    (if (null? lst) acc (proc (car lst) (foldr proc acc (cdr lst)))))
  (define (append lst1 lst2)
    (if (null? lst1) lst2 (cons (car lst1) (append (cdr lst1) lst2))))
  (define (hash . lst) (apply-prim hash lst))
  (define (hash-ref h k) (prim hash-ref h k))
  (define (hash-set h k v) (prim hash-set h k v))
  (define (hash-has-key? h k) (prim hash-has-key? h k))
  (define (hash-count h) (prim hash-count h))
  (define (fact n) (if (= '0 n) '1 (* n (fact (- n '1)))))
  (define (brouhaha_main) (fact '5)))
