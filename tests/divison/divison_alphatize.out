'((define (+ . lst) (let ((x28314 (apply-prim + lst))) x28314))
  (define (- . lst) (let ((x28315 (apply-prim - lst))) x28315))
  (define (* . lst) (let ((x28316 (apply-prim * lst))) x28316))
  (define (modulo a b) (let ((x28317 (prim modulo a b))) x28317))
  (define (/ . lst) (let ((x28318 (apply-prim / lst))) x28318))
  (define (= . lst) (let ((x28319 (apply-prim = lst))) x28319))
  (define (> . lst) (let ((x28320 (apply-prim > lst))) x28320))
  (define (< . lst) (let ((x28321 (apply-prim < lst))) x28321))
  (define (<= . lst) (let ((x28322 (apply-prim <= lst))) x28322))
  (define (>= . lst) (let ((x28323 (apply-prim >= lst))) x28323))
  (define (null? x) (let ((x28324 (prim null? x))) x28324))
  (define (equal? x y) (let ((x28325 (prim equal? x y))) x28325))
  (define (eq? x y) (let ((x28326 (prim eq? x y))) x28326))
  (define (cons a b) (let ((x28327 (prim cons a b))) x28327))
  (define (car lst) (let ((x28328 (prim car lst))) x28328))
  (define (cdr lst) (let ((x28329 (prim cdr lst))) x28329))
  (define (even? x)
    (let ((a28330 '0))
      (let ((a28331 '2))
        (let ((a28332 (modulo x a28331))) (equal? a28330 a28332)))))
  (define (odd? x)
    (let ((a28333 '1))
      (let ((a28334 '2))
        (let ((a28335 (modulo x a28334))) (equal? a28333 a28335)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a28336 (null? lst)))
      (if a28336
        (let ((x28337 '#f)) x28337)
        (let ((a28338 (car lst)))
          (let ((a28339 (equal? a28338 x)))
            (if a28339
              (let ((x28340 '#t)) x28340)
              (let ((a28341 (cdr lst))) (member? x a28341))))))))
  (define (foldl fun acc lst)
    (let ((a28342 (null? lst)))
      (if a28342
        acc
        (let ((a28343 (car lst)))
          (let ((a28344 (fun a28343 acc)))
            (let ((a28345 (cdr lst))) (foldl fun a28344 a28345)))))))
  (define (reverse-helper lst lst2)
    (let ((a28346 (null? lst)))
      (if a28346
        lst2
        (let ((a28347 (cdr lst)))
          (let ((a28348 (car lst)))
            (let ((a28349 (cons a28348 lst2)))
              (reverse-helper a28347 a28349)))))))
  (define (reverse lst) (let ((a28350 (list))) (reverse-helper lst a28350)))
  (define (take-helper lst n lst2)
    (let ((a28351 '0))
      (let ((a28352 (= n a28351)))
        (if a28352
          (let ((x28353 (reverse lst2))) x28353)
          (let ((a28354 (cdr lst)))
            (let ((a28355 '1))
              (let ((a28356 (- n a28355)))
                (let ((a28357 (car lst)))
                  (let ((a28358 (cons a28357 lst2)))
                    (take-helper a28354 a28356 a28358))))))))))
  (define (take lst n) (let ((a28359 (list))) (take-helper lst n a28359)))
  (define (length lst)
    (let ((a28360 (null? lst)))
      (if a28360
        (let ((x28361 '0)) x28361)
        (let ((a28362 '1))
          (let ((a28363 (cdr lst)))
            (let ((a28364 (length a28363))) (+ a28362 a28364)))))))
  (define (map proc lst)
    (let ((a28365 (null? lst)))
      (if a28365
        (let ((x28366 (list))) x28366)
        (let ((a28367 (car lst)))
          (let ((a28368 (proc a28367)))
            (let ((a28369 (cdr lst)))
              (let ((a28370 (map proc a28369))) (cons a28368 a28370))))))))
  (define (filter op lst)
    (let ((a28371 (null? lst)))
      (if a28371
        (let ((x28372 (list))) x28372)
        (let ((a28373 (car lst)))
          (let ((a28374 (op a28373)))
            (if a28374
              (let ((a28375 (car lst)))
                (let ((a28376 (cdr lst)))
                  (let ((a28377 (filter op a28376))) (cons a28375 a28377))))
              (let ((a28378 (cdr lst))) (filter op a28378))))))))
  (define (drop lst n)
    (let ((a28379 '0))
      (let ((a28380 (= n a28379)))
        (if a28380
          lst
          (let ((a28381 (cdr lst)))
            (let ((a28382 '1))
              (let ((a28383 (- n a28382))) (drop a28381 a28383))))))))
  (define (foldr proc acc lst)
    (let ((a28384 (null? lst)))
      (if a28384
        acc
        (let ((a28385 (car lst)))
          (let ((a28386 (cdr lst)))
            (let ((a28387 (foldr proc acc a28386))) (proc a28385 a28387)))))))
  (define (append lst1 lst2)
    (let ((a28388 (null? lst1)))
      (if a28388
        lst2
        (let ((a28389 (car lst1)))
          (let ((a28390 (cdr lst1)))
            (let ((a28391 (append a28390 lst2))) (cons a28389 a28391)))))))
  (define (hash . lst) (let ((x28392 (apply-prim hash lst))) x28392))
  (define (hash-ref h k) (let ((x28393 (prim hash-ref h k))) x28393))
  (define (hash-set h k v) (let ((x28394 (prim hash-set h k v))) x28394))
  (define (hash-has-key? h k) (let ((x28395 (prim hash-has-key? h k))) x28395))
  (define (hash-count h) (let ((x28396 (prim hash-count h))) x28396))
  (define (call)
    (let ((a28397 '100))
      (let ((a28398 '2)) (let ((a28399 '12)) (/ a28397 a28398 a28399)))))
  (define (brouhaha_main) (let ((x28400 (call))) x28400)))
