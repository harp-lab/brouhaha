'((define (+ . lst)
    (let ((kont27806 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27719 (apply-prim + lst))) (kont27806 x27719)))))
  (define (- . lst)
    (let ((kont27808 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27720 (apply-prim - lst))) (kont27808 x27720)))))
  (define (* . lst)
    (let ((kont27810 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27721 (apply-prim * lst))) (kont27810 x27721)))))
  (define (modulo kont27812 a b)
    (let ((x27722 (prim modulo a b))) (kont27812 x27722)))
  (define (/ . lst)
    (let ((kont27813 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27723 (apply-prim / lst))) (kont27813 x27723)))))
  (define (= . lst)
    (let ((kont27815 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27724 (apply-prim = lst))) (kont27815 x27724)))))
  (define (> . lst)
    (let ((kont27817 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27725 (apply-prim > lst))) (kont27817 x27725)))))
  (define (< . lst)
    (let ((kont27819 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27726 (apply-prim < lst))) (kont27819 x27726)))))
  (define (<= . lst)
    (let ((kont27821 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27727 (apply-prim <= lst))) (kont27821 x27727)))))
  (define (>= . lst)
    (let ((kont27823 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27728 (apply-prim >= lst))) (kont27823 x27728)))))
  (define (null? kont27825 x)
    (let ((x27729 (prim null? x))) (kont27825 x27729)))
  (define (equal? kont27826 x y)
    (let ((x27730 (prim equal? x y))) (kont27826 x27730)))
  (define (eq? kont27827 x y)
    (let ((x27731 (prim eq? x y))) (kont27827 x27731)))
  (define (cons kont27828 a b)
    (let ((x27732 (prim cons a b))) (kont27828 x27732)))
  (define (car kont27829 lst)
    (let ((x27733 (prim car lst))) (kont27829 x27733)))
  (define (cdr kont27830 lst)
    (let ((x27734 (prim cdr lst))) (kont27830 x27734)))
  (define (even? kont27831 x)
    (let ((a27735 '0))
      (let ((a27736 '2))
        (let ((f27832 (lambda (a27737) (equal? kont27831 a27735 a27737))))
          (modulo f27832 x a27736)))))
  (define (odd? kont27833 x)
    (let ((a27738 '1))
      (let ((a27739 '2))
        (let ((f27834 (lambda (a27740) (equal? kont27833 a27738 a27740))))
          (modulo f27834 x a27739)))))
  (define (list . x)
    (let ((kont27835 (prim car x))) (let ((x (prim cdr x))) (kont27835 x))))
  (define (member? kont27837 x lst)
    (let ((f27841
           (lambda (a27741)
             (if a27741
               (let ((x27742 '#f)) (kont27837 x27742))
               (let ((f27840
                      (lambda (a27743)
                        (let ((f27839
                               (lambda (a27744)
                                 (if a27744
                                   (let ((x27745 '#t)) (kont27837 x27745))
                                   (let ((f27838
                                          (lambda (a27746)
                                            (member? kont27837 x a27746))))
                                     (cdr f27838 lst))))))
                          (equal? f27839 a27743 x)))))
                 (car f27840 lst))))))
      (null? f27841 lst)))
  (define (foldl kont27842 fun acc lst)
    (let ((f27846
           (lambda (a27747)
             (if a27747
               (kont27842 acc)
               (let ((f27845
                      (lambda (a27748)
                        (let ((f27844
                               (lambda (a27749)
                                 (let ((f27843
                                        (lambda (a27750)
                                          (foldl
                                           kont27842
                                           fun
                                           a27749
                                           a27750))))
                                   (cdr f27843 lst)))))
                          (fun f27844 a27748 acc)))))
                 (car f27845 lst))))))
      (null? f27846 lst)))
  (define (reverse-helper kont27847 lst lst2)
    (let ((f27851
           (lambda (a27751)
             (if a27751
               (kont27847 lst2)
               (let ((f27850
                      (lambda (a27752)
                        (let ((f27849
                               (lambda (a27753)
                                 (let ((f27848
                                        (lambda (a27754)
                                          (reverse-helper
                                           kont27847
                                           a27752
                                           a27754))))
                                   (cons f27848 a27753 lst2)))))
                          (car f27849 lst)))))
                 (cdr f27850 lst))))))
      (null? f27851 lst)))
  (define (reverse kont27852 lst)
    (let ((f27853 (lambda (a27755) (reverse-helper kont27852 lst a27755))))
      (list f27853)))
  (define (take-helper kont27854 lst n lst2)
    (let ((a27756 '0))
      (let ((f27860
             (lambda (a27757)
               (if a27757
                 (let ((f27855 (lambda (x27758) (kont27854 x27758))))
                   (reverse f27855 lst2))
                 (let ((f27859
                        (lambda (a27759)
                          (let ((a27760 '1))
                            (let ((f27858
                                   (lambda (a27761)
                                     (let ((f27857
                                            (lambda (a27762)
                                              (let ((f27856
                                                     (lambda (a27763)
                                                       (take-helper
                                                        kont27854
                                                        a27759
                                                        a27761
                                                        a27763))))
                                                (cons f27856 a27762 lst2)))))
                                       (car f27857 lst)))))
                              (- f27858 n a27760))))))
                   (cdr f27859 lst))))))
        (= f27860 n a27756))))
  (define (take kont27861 lst n)
    (let ((f27862 (lambda (a27764) (take-helper kont27861 lst n a27764))))
      (list f27862)))
  (define (length kont27863 lst)
    (let ((f27866
           (lambda (a27765)
             (if a27765
               (let ((x27766 '0)) (kont27863 x27766))
               (let ((a27767 '1))
                 (let ((f27865
                        (lambda (a27768)
                          (let ((f27864
                                 (lambda (a27769)
                                   (+ kont27863 a27767 a27769))))
                            (length f27864 a27768)))))
                   (cdr f27865 lst)))))))
      (null? f27866 lst)))
  (define (map kont27867 proc lst)
    (let ((f27873
           (lambda (a27770)
             (if a27770
               (let ((f27868 (lambda (x27771) (kont27867 x27771))))
                 (list f27868))
               (let ((f27872
                      (lambda (a27772)
                        (let ((f27871
                               (lambda (a27773)
                                 (let ((f27870
                                        (lambda (a27774)
                                          (let ((f27869
                                                 (lambda (a27775)
                                                   (cons
                                                    kont27867
                                                    a27773
                                                    a27775))))
                                            (map f27869 proc a27774)))))
                                   (cdr f27870 lst)))))
                          (proc f27871 a27772)))))
                 (car f27872 lst))))))
      (null? f27873 lst)))
  (define (filter kont27874 op lst)
    (let ((f27882
           (lambda (a27776)
             (if a27776
               (let ((f27875 (lambda (x27777) (kont27874 x27777))))
                 (list f27875))
               (let ((f27881
                      (lambda (a27778)
                        (let ((f27880
                               (lambda (a27779)
                                 (if a27779
                                   (let ((f27878
                                          (lambda (a27780)
                                            (let ((f27877
                                                   (lambda (a27781)
                                                     (let ((f27876
                                                            (lambda (a27782)
                                                              (cons
                                                               kont27874
                                                               a27780
                                                               a27782))))
                                                       (filter
                                                        f27876
                                                        op
                                                        a27781)))))
                                              (cdr f27877 lst)))))
                                     (car f27878 lst))
                                   (let ((f27879
                                          (lambda (a27783)
                                            (filter kont27874 op a27783))))
                                     (cdr f27879 lst))))))
                          (op f27880 a27778)))))
                 (car f27881 lst))))))
      (null? f27882 lst)))
  (define (drop kont27883 lst n)
    (let ((a27784 '0))
      (let ((f27886
             (lambda (a27785)
               (if a27785
                 (kont27883 lst)
                 (let ((f27885
                        (lambda (a27786)
                          (let ((a27787 '1))
                            (let ((f27884
                                   (lambda (a27788)
                                     (drop kont27883 a27786 a27788))))
                              (- f27884 n a27787))))))
                   (cdr f27885 lst))))))
        (= f27886 n a27784))))
  (define (foldr kont27887 proc acc lst)
    (let ((f27891
           (lambda (a27789)
             (if a27789
               (kont27887 acc)
               (let ((f27890
                      (lambda (a27790)
                        (let ((f27889
                               (lambda (a27791)
                                 (let ((f27888
                                        (lambda (a27792)
                                          (proc kont27887 a27790 a27792))))
                                   (foldr f27888 proc acc a27791)))))
                          (cdr f27889 lst)))))
                 (car f27890 lst))))))
      (null? f27891 lst)))
  (define (append kont27892 lst1 lst2)
    (let ((f27896
           (lambda (a27793)
             (if a27793
               (kont27892 lst2)
               (let ((f27895
                      (lambda (a27794)
                        (let ((f27894
                               (lambda (a27795)
                                 (let ((f27893
                                        (lambda (a27796)
                                          (cons kont27892 a27794 a27796))))
                                   (append f27893 a27795 lst2)))))
                          (cdr f27894 lst1)))))
                 (car f27895 lst1))))))
      (null? f27896 lst1)))
  (define (hash . lst)
    (let ((kont27897 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x27797 (apply-prim hash lst))) (kont27897 x27797)))))
  (define (hash-ref kont27899 h k)
    (let ((x27798 (prim hash-ref h k))) (kont27899 x27798)))
  (define (hash-set kont27900 h k v)
    (let ((x27799 (prim hash-set h k v))) (kont27900 x27799)))
  (define (hash-has-key? kont27901 h k)
    (let ((x27800 (prim hash-has-key? h k))) (kont27901 x27800)))
  (define (hash-count kont27902 h)
    (let ((x27801 (prim hash-count h))) (kont27902 x27801)))
  (define (call kont27903)
    (let ((a27802 '100))
      (let ((a27803 '2))
        (let ((a27804 '12)) (/ kont27903 a27802 a27803 a27804)))))
  (define (brouhaha_main kont27904)
    (let ((f27905 (lambda (x27805) (kont27904 x27805)))) (call f27905))))
