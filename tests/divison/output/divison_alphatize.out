'((define (+ . lst) (let ((x27719 (apply-prim + lst))) x27719))
  (define (- . lst) (let ((x27720 (apply-prim - lst))) x27720))
  (define (* . lst) (let ((x27721 (apply-prim * lst))) x27721))
  (define (modulo a b) (let ((x27722 (prim modulo a b))) x27722))
  (define (/ . lst) (let ((x27723 (apply-prim / lst))) x27723))
  (define (= . lst) (let ((x27724 (apply-prim = lst))) x27724))
  (define (> . lst) (let ((x27725 (apply-prim > lst))) x27725))
  (define (< . lst) (let ((x27726 (apply-prim < lst))) x27726))
  (define (<= . lst) (let ((x27727 (apply-prim <= lst))) x27727))
  (define (>= . lst) (let ((x27728 (apply-prim >= lst))) x27728))
  (define (null? x) (let ((x27729 (prim null? x))) x27729))
  (define (equal? x y) (let ((x27730 (prim equal? x y))) x27730))
  (define (eq? x y) (let ((x27731 (prim eq? x y))) x27731))
  (define (cons a b) (let ((x27732 (prim cons a b))) x27732))
  (define (car lst) (let ((x27733 (prim car lst))) x27733))
  (define (cdr lst) (let ((x27734 (prim cdr lst))) x27734))
  (define (even? x)
    (let ((a27735 '0))
      (let ((a27736 '2))
        (let ((a27737 (modulo x a27736))) (equal? a27735 a27737)))))
  (define (odd? x)
    (let ((a27738 '1))
      (let ((a27739 '2))
        (let ((a27740 (modulo x a27739))) (equal? a27738 a27740)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a27741 (null? lst)))
      (if a27741
        (let ((x27742 '#f)) x27742)
        (let ((a27743 (car lst)))
          (let ((a27744 (equal? a27743 x)))
            (if a27744
              (let ((x27745 '#t)) x27745)
              (let ((a27746 (cdr lst))) (member? x a27746))))))))
  (define (foldl fun acc lst)
    (let ((a27747 (null? lst)))
      (if a27747
        acc
        (let ((a27748 (car lst)))
          (let ((a27749 (fun a27748 acc)))
            (let ((a27750 (cdr lst))) (foldl fun a27749 a27750)))))))
  (define (reverse-helper lst lst2)
    (let ((a27751 (null? lst)))
      (if a27751
        lst2
        (let ((a27752 (cdr lst)))
          (let ((a27753 (car lst)))
            (let ((a27754 (cons a27753 lst2)))
              (reverse-helper a27752 a27754)))))))
  (define (reverse lst) (let ((a27755 (list))) (reverse-helper lst a27755)))
  (define (take-helper lst n lst2)
    (let ((a27756 '0))
      (let ((a27757 (= n a27756)))
        (if a27757
          (let ((x27758 (reverse lst2))) x27758)
          (let ((a27759 (cdr lst)))
            (let ((a27760 '1))
              (let ((a27761 (- n a27760)))
                (let ((a27762 (car lst)))
                  (let ((a27763 (cons a27762 lst2)))
                    (take-helper a27759 a27761 a27763))))))))))
  (define (take lst n) (let ((a27764 (list))) (take-helper lst n a27764)))
  (define (length lst)
    (let ((a27765 (null? lst)))
      (if a27765
        (let ((x27766 '0)) x27766)
        (let ((a27767 '1))
          (let ((a27768 (cdr lst)))
            (let ((a27769 (length a27768))) (+ a27767 a27769)))))))
  (define (map proc lst)
    (let ((a27770 (null? lst)))
      (if a27770
        (let ((x27771 (list))) x27771)
        (let ((a27772 (car lst)))
          (let ((a27773 (proc a27772)))
            (let ((a27774 (cdr lst)))
              (let ((a27775 (map proc a27774))) (cons a27773 a27775))))))))
  (define (filter op lst)
    (let ((a27776 (null? lst)))
      (if a27776
        (let ((x27777 (list))) x27777)
        (let ((a27778 (car lst)))
          (let ((a27779 (op a27778)))
            (if a27779
              (let ((a27780 (car lst)))
                (let ((a27781 (cdr lst)))
                  (let ((a27782 (filter op a27781))) (cons a27780 a27782))))
              (let ((a27783 (cdr lst))) (filter op a27783))))))))
  (define (drop lst n)
    (let ((a27784 '0))
      (let ((a27785 (= n a27784)))
        (if a27785
          lst
          (let ((a27786 (cdr lst)))
            (let ((a27787 '1))
              (let ((a27788 (- n a27787))) (drop a27786 a27788))))))))
  (define (foldr proc acc lst)
    (let ((a27789 (null? lst)))
      (if a27789
        acc
        (let ((a27790 (car lst)))
          (let ((a27791 (cdr lst)))
            (let ((a27792 (foldr proc acc a27791))) (proc a27790 a27792)))))))
  (define (append lst1 lst2)
    (let ((a27793 (null? lst1)))
      (if a27793
        lst2
        (let ((a27794 (car lst1)))
          (let ((a27795 (cdr lst1)))
            (let ((a27796 (append a27795 lst2))) (cons a27794 a27796)))))))
  (define (hash . lst) (let ((x27797 (apply-prim hash lst))) x27797))
  (define (hash-ref h k) (let ((x27798 (prim hash-ref h k))) x27798))
  (define (hash-set h k v) (let ((x27799 (prim hash-set h k v))) x27799))
  (define (hash-has-key? h k) (let ((x27800 (prim hash-has-key? h k))) x27800))
  (define (hash-count h) (let ((x27801 (prim hash-count h))) x27801))
  (define (call)
    (let ((a27802 '100))
      (let ((a27803 '2)) (let ((a27804 '12)) (/ a27802 a27803 a27804)))))
  (define (brouhaha_main) (let ((x27805 (call))) x27805)))
