'((define (+ . lst)
    (let ((kont2780627906 (prim car lst)))
      (let ((lst27907 (prim cdr lst)))
        (let ((x2771927908 (apply-prim + lst27907)))
          (kont2780627906 x2771927908)))))
  (define (- . lst)
    (let ((kont2780827909 (prim car lst)))
      (let ((lst27910 (prim cdr lst)))
        (let ((x2772027911 (apply-prim - lst27910)))
          (kont2780827909 x2772027911)))))
  (define (* . lst)
    (let ((kont2781027912 (prim car lst)))
      (let ((lst27913 (prim cdr lst)))
        (let ((x2772127914 (apply-prim * lst27913)))
          (kont2781027912 x2772127914)))))
  (define (modulo kont27812 a b)
    (let ((x2772227915 (prim modulo a b))) (kont27812 x2772227915)))
  (define (/ . lst)
    (let ((kont2781327916 (prim car lst)))
      (let ((lst27917 (prim cdr lst)))
        (let ((x2772327918 (apply-prim / lst27917)))
          (kont2781327916 x2772327918)))))
  (define (= . lst)
    (let ((kont2781527919 (prim car lst)))
      (let ((lst27920 (prim cdr lst)))
        (let ((x2772427921 (apply-prim = lst27920)))
          (kont2781527919 x2772427921)))))
  (define (> . lst)
    (let ((kont2781727922 (prim car lst)))
      (let ((lst27923 (prim cdr lst)))
        (let ((x2772527924 (apply-prim > lst27923)))
          (kont2781727922 x2772527924)))))
  (define (< . lst)
    (let ((kont2781927925 (prim car lst)))
      (let ((lst27926 (prim cdr lst)))
        (let ((x2772627927 (apply-prim < lst27926)))
          (kont2781927925 x2772627927)))))
  (define (<= . lst)
    (let ((kont2782127928 (prim car lst)))
      (let ((lst27929 (prim cdr lst)))
        (let ((x2772727930 (apply-prim <= lst27929)))
          (kont2782127928 x2772727930)))))
  (define (>= . lst)
    (let ((kont2782327931 (prim car lst)))
      (let ((lst27932 (prim cdr lst)))
        (let ((x2772827933 (apply-prim >= lst27932)))
          (kont2782327931 x2772827933)))))
  (define (null? kont27825 x)
    (let ((x2772927934 (prim null? x))) (kont27825 x2772927934)))
  (define (equal? kont27826 x y)
    (let ((x2773027935 (prim equal? x y))) (kont27826 x2773027935)))
  (define (eq? kont27827 x y)
    (let ((x2773127936 (prim eq? x y))) (kont27827 x2773127936)))
  (define (cons kont27828 a b)
    (let ((x2773227937 (prim cons a b))) (kont27828 x2773227937)))
  (define (car kont27829 lst)
    (let ((x2773327938 (prim car lst))) (kont27829 x2773327938)))
  (define (cdr kont27830 lst)
    (let ((x2773427939 (prim cdr lst))) (kont27830 x2773427939)))
  (define (even? kont27831 x)
    (let ((a2773527940 '0))
      (let ((a2773627941 '2))
        (let ((f2783227942
               (lambda (a2773727943)
                 (equal? kont27831 a2773527940 a2773727943))))
          (modulo f2783227942 x a2773627941)))))
  (define (odd? kont27833 x)
    (let ((a2773827944 '1))
      (let ((a2773927945 '2))
        (let ((f2783427946
               (lambda (a2774027947)
                 (equal? kont27833 a2773827944 a2774027947))))
          (modulo f2783427946 x a2773927945)))))
  (define (list . x)
    (let ((kont2783527948 (prim car x)))
      (let ((x27949 (prim cdr x))) (kont2783527948 x27949))))
  (define (member? kont27837 x lst)
    (let ((f2784127950
           (lambda (a2774127951)
             (if a2774127951
               (let ((x2774227952 '#f)) (kont27837 x2774227952))
               (let ((f2784027953
                      (lambda (a2774327954)
                        (let ((f2783927955
                               (lambda (a2774427956)
                                 (if a2774427956
                                   (let ((x2774527957 '#t))
                                     (kont27837 x2774527957))
                                   (let ((f2783827958
                                          (lambda (a2774627959)
                                            (member?
                                             kont27837
                                             x
                                             a2774627959))))
                                     (cdr f2783827958 lst))))))
                          (equal? f2783927955 a2774327954 x)))))
                 (car f2784027953 lst))))))
      (null? f2784127950 lst)))
  (define (foldl kont27842 fun acc lst)
    (let ((f2784627960
           (lambda (a2774727961)
             (if a2774727961
               (kont27842 acc)
               (let ((f2784527962
                      (lambda (a2774827963)
                        (let ((f2784427964
                               (lambda (a2774927965)
                                 (let ((f2784327966
                                        (lambda (a2775027967)
                                          (foldl
                                           kont27842
                                           fun
                                           a2774927965
                                           a2775027967))))
                                   (cdr f2784327966 lst)))))
                          (fun f2784427964 a2774827963 acc)))))
                 (car f2784527962 lst))))))
      (null? f2784627960 lst)))
  (define (reverse-helper kont27847 lst lst2)
    (let ((f2785127968
           (lambda (a2775127969)
             (if a2775127969
               (kont27847 lst2)
               (let ((f2785027970
                      (lambda (a2775227971)
                        (let ((f2784927972
                               (lambda (a2775327973)
                                 (let ((f2784827974
                                        (lambda (a2775427975)
                                          (reverse-helper
                                           kont27847
                                           a2775227971
                                           a2775427975))))
                                   (cons f2784827974 a2775327973 lst2)))))
                          (car f2784927972 lst)))))
                 (cdr f2785027970 lst))))))
      (null? f2785127968 lst)))
  (define (reverse kont27852 lst)
    (let ((f2785327976
           (lambda (a2775527977) (reverse-helper kont27852 lst a2775527977))))
      (list f2785327976)))
  (define (take-helper kont27854 lst n lst2)
    (let ((a2775627978 '0))
      (let ((f2786027979
             (lambda (a2775727980)
               (if a2775727980
                 (let ((f2785527981
                        (lambda (x2775827982) (kont27854 x2775827982))))
                   (reverse f2785527981 lst2))
                 (let ((f2785927983
                        (lambda (a2775927984)
                          (let ((a2776027985 '1))
                            (let ((f2785827986
                                   (lambda (a2776127987)
                                     (let ((f2785727988
                                            (lambda (a2776227989)
                                              (let ((f2785627990
                                                     (lambda (a2776327991)
                                                       (take-helper
                                                        kont27854
                                                        a2775927984
                                                        a2776127987
                                                        a2776327991))))
                                                (cons
                                                 f2785627990
                                                 a2776227989
                                                 lst2)))))
                                       (car f2785727988 lst)))))
                              (- f2785827986 n a2776027985))))))
                   (cdr f2785927983 lst))))))
        (= f2786027979 n a2775627978))))
  (define (take kont27861 lst n)
    (let ((f2786227992
           (lambda (a2776427993) (take-helper kont27861 lst n a2776427993))))
      (list f2786227992)))
  (define (length kont27863 lst)
    (let ((f2786627994
           (lambda (a2776527995)
             (if a2776527995
               (let ((x2776627996 '0)) (kont27863 x2776627996))
               (let ((a2776727997 '1))
                 (let ((f2786527998
                        (lambda (a2776827999)
                          (let ((f2786428000
                                 (lambda (a2776928001)
                                   (+ kont27863 a2776727997 a2776928001))))
                            (length f2786428000 a2776827999)))))
                   (cdr f2786527998 lst)))))))
      (null? f2786627994 lst)))
  (define (map kont27867 proc lst)
    (let ((f2787328002
           (lambda (a2777028003)
             (if a2777028003
               (let ((f2786828004
                      (lambda (x2777128005) (kont27867 x2777128005))))
                 (list f2786828004))
               (let ((f2787228006
                      (lambda (a2777228007)
                        (let ((f2787128008
                               (lambda (a2777328009)
                                 (let ((f2787028010
                                        (lambda (a2777428011)
                                          (let ((f2786928012
                                                 (lambda (a2777528013)
                                                   (cons
                                                    kont27867
                                                    a2777328009
                                                    a2777528013))))
                                            (map
                                             f2786928012
                                             proc
                                             a2777428011)))))
                                   (cdr f2787028010 lst)))))
                          (proc f2787128008 a2777228007)))))
                 (car f2787228006 lst))))))
      (null? f2787328002 lst)))
  (define (filter kont27874 op lst)
    (let ((f2788228014
           (lambda (a2777628015)
             (if a2777628015
               (let ((f2787528016
                      (lambda (x2777728017) (kont27874 x2777728017))))
                 (list f2787528016))
               (let ((f2788128018
                      (lambda (a2777828019)
                        (let ((f2788028020
                               (lambda (a2777928021)
                                 (if a2777928021
                                   (let ((f2787828022
                                          (lambda (a2778028023)
                                            (let ((f2787728024
                                                   (lambda (a2778128025)
                                                     (let ((f2787628026
                                                            (lambda (a2778228027)
                                                              (cons
                                                               kont27874
                                                               a2778028023
                                                               a2778228027))))
                                                       (filter
                                                        f2787628026
                                                        op
                                                        a2778128025)))))
                                              (cdr f2787728024 lst)))))
                                     (car f2787828022 lst))
                                   (let ((f2787928028
                                          (lambda (a2778328029)
                                            (filter
                                             kont27874
                                             op
                                             a2778328029))))
                                     (cdr f2787928028 lst))))))
                          (op f2788028020 a2777828019)))))
                 (car f2788128018 lst))))))
      (null? f2788228014 lst)))
  (define (drop kont27883 lst n)
    (let ((a2778428030 '0))
      (let ((f2788628031
             (lambda (a2778528032)
               (if a2778528032
                 (kont27883 lst)
                 (let ((f2788528033
                        (lambda (a2778628034)
                          (let ((a2778728035 '1))
                            (let ((f2788428036
                                   (lambda (a2778828037)
                                     (drop
                                      kont27883
                                      a2778628034
                                      a2778828037))))
                              (- f2788428036 n a2778728035))))))
                   (cdr f2788528033 lst))))))
        (= f2788628031 n a2778428030))))
  (define (foldr kont27887 proc acc lst)
    (let ((f2789128038
           (lambda (a2778928039)
             (if a2778928039
               (kont27887 acc)
               (let ((f2789028040
                      (lambda (a2779028041)
                        (let ((f2788928042
                               (lambda (a2779128043)
                                 (let ((f2788828044
                                        (lambda (a2779228045)
                                          (proc
                                           kont27887
                                           a2779028041
                                           a2779228045))))
                                   (foldr f2788828044 proc acc a2779128043)))))
                          (cdr f2788928042 lst)))))
                 (car f2789028040 lst))))))
      (null? f2789128038 lst)))
  (define (append kont27892 lst1 lst2)
    (let ((f2789628046
           (lambda (a2779328047)
             (if a2779328047
               (kont27892 lst2)
               (let ((f2789528048
                      (lambda (a2779428049)
                        (let ((f2789428050
                               (lambda (a2779528051)
                                 (let ((f2789328052
                                        (lambda (a2779628053)
                                          (cons
                                           kont27892
                                           a2779428049
                                           a2779628053))))
                                   (append f2789328052 a2779528051 lst2)))))
                          (cdr f2789428050 lst1)))))
                 (car f2789528048 lst1))))))
      (null? f2789628046 lst1)))
  (define (hash . lst)
    (let ((kont2789728054 (prim car lst)))
      (let ((lst28055 (prim cdr lst)))
        (let ((x2779728056 (apply-prim hash lst28055)))
          (kont2789728054 x2779728056)))))
  (define (hash-ref kont27899 h k)
    (let ((x2779828057 (prim hash-ref h k))) (kont27899 x2779828057)))
  (define (hash-set kont27900 h k v)
    (let ((x2779928058 (prim hash-set h k v))) (kont27900 x2779928058)))
  (define (hash-has-key? kont27901 h k)
    (let ((x2780028059 (prim hash-has-key? h k))) (kont27901 x2780028059)))
  (define (hash-count kont27902 h)
    (let ((x2780128060 (prim hash-count h))) (kont27902 x2780128060)))
  (define (call kont27903)
    (let ((a2780228061 '100))
      (let ((a2780328062 '2))
        (let ((a2780428063 '12))
          (/ kont27903 a2780228061 a2780328062 a2780428063)))))
  (define (brouhaha_main kont27904)
    (let ((f2790528064 (lambda (x2780528065) (kont27904 x2780528065))))
      (call f2790528064))))
