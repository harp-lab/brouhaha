'((define (+ . lst) (let ((x97264 (apply-prim + lst))) x97264))
  (define (- . lst) (let ((x97265 (apply-prim - lst))) x97265))
  (define (* . lst) (let ((x97266 (apply-prim * lst))) x97266))
  (define (modulo a b) (let ((x97267 (prim modulo a b))) x97267))
  (define (/ . lst) (let ((x97268 (apply-prim / lst))) x97268))
  (define (= . lst) (let ((x97269 (apply-prim = lst))) x97269))
  (define (> . lst) (let ((x97270 (apply-prim > lst))) x97270))
  (define (< . lst) (let ((x97271 (apply-prim < lst))) x97271))
  (define (<= . lst) (let ((x97272 (apply-prim <= lst))) x97272))
  (define (>= . lst) (let ((x97273 (apply-prim >= lst))) x97273))
  (define (null? x) (let ((x97274 (prim null? x))) x97274))
  (define (equal? x y) (let ((x97275 (prim equal? x y))) x97275))
  (define (eq? x y) (let ((x97276 (prim eq? x y))) x97276))
  (define (cons a b) (let ((x97277 (prim cons a b))) x97277))
  (define (car lst) (let ((x97278 (prim car lst))) x97278))
  (define (cdr lst) (let ((x97279 (prim cdr lst))) x97279))
  (define (even? x)
    (let ((a97280 '0))
      (let ((a97281 '2))
        (let ((a97282 (modulo x a97281))) (equal? a97280 a97282)))))
  (define (odd? x)
    (let ((a97283 '1))
      (let ((a97284 '2))
        (let ((a97285 (modulo x a97284))) (equal? a97283 a97285)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a97286 (null? lst)))
      (if a97286
        (let ((x97287 '#f)) x97287)
        (let ((a97288 (car lst)))
          (let ((a97289 (equal? a97288 x)))
            (if a97289
              (let ((x97290 '#t)) x97290)
              (let ((a97291 (cdr lst))) (member? x a97291))))))))
  (define (foldl fun acc lst)
    (let ((a97292 (null? lst)))
      (if a97292
        acc
        (let ((a97293 (car lst)))
          (let ((a97294 (fun a97293 acc)))
            (let ((a97295 (cdr lst))) (foldl fun a97294 a97295)))))))
  (define (reverse-helper lst lst2)
    (let ((a97296 (null? lst)))
      (if a97296
        lst2
        (let ((a97297 (cdr lst)))
          (let ((a97298 (car lst)))
            (let ((a97299 (cons a97298 lst2)))
              (reverse-helper a97297 a97299)))))))
  (define (reverse lst) (let ((a97300 (list))) (reverse-helper lst a97300)))
  (define (take-helper lst n lst2)
    (let ((a97301 '0))
      (let ((a97302 (= n a97301)))
        (if a97302
          (let ((x97303 (reverse lst2))) x97303)
          (let ((a97304 (cdr lst)))
            (let ((a97305 '1))
              (let ((a97306 (- n a97305)))
                (let ((a97307 (car lst)))
                  (let ((a97308 (cons a97307 lst2)))
                    (take-helper a97304 a97306 a97308))))))))))
  (define (take lst n) (let ((a97309 (list))) (take-helper lst n a97309)))
  (define (length lst)
    (let ((a97310 (null? lst)))
      (if a97310
        (let ((x97311 '0)) x97311)
        (let ((a97312 '1))
          (let ((a97313 (cdr lst)))
            (let ((a97314 (length a97313))) (+ a97312 a97314)))))))
  (define (map proc lst)
    (let ((a97315 (null? lst)))
      (if a97315
        (let ((x97316 (list))) x97316)
        (let ((a97317 (car lst)))
          (let ((a97318 (proc a97317)))
            (let ((a97319 (cdr lst)))
              (let ((a97320 (map proc a97319))) (cons a97318 a97320))))))))
  (define (filter op lst)
    (let ((a97321 (null? lst)))
      (if a97321
        (let ((x97322 (list))) x97322)
        (let ((a97323 (car lst)))
          (let ((a97324 (op a97323)))
            (if a97324
              (let ((a97325 (car lst)))
                (let ((a97326 (cdr lst)))
                  (let ((a97327 (filter op a97326))) (cons a97325 a97327))))
              (let ((a97328 (cdr lst))) (filter op a97328))))))))
  (define (drop lst n)
    (let ((a97329 '0))
      (let ((a97330 (= n a97329)))
        (if a97330
          lst
          (let ((a97331 (cdr lst)))
            (let ((a97332 '1))
              (let ((a97333 (- n a97332))) (drop a97331 a97333))))))))
  (define (foldr proc acc lst)
    (let ((a97334 (null? lst)))
      (if a97334
        acc
        (let ((a97335 (car lst)))
          (let ((a97336 (cdr lst)))
            (let ((a97337 (foldr proc acc a97336))) (proc a97335 a97337)))))))
  (define (append lst1 lst2)
    (let ((a97338 (null? lst1)))
      (if a97338
        lst2
        (let ((a97339 (car lst1)))
          (let ((a97340 (cdr lst1)))
            (let ((a97341 (append a97340 lst2))) (cons a97339 a97341)))))))
  (define (hash . lst) (let ((x97342 (apply-prim hash lst))) x97342))
  (define (hash-ref h k) (let ((x97343 (prim hash-ref h k))) x97343))
  (define (hash-set h k v) (let ((x97344 (prim hash-set h k v))) x97344))
  (define (hash-has-key? h k) (let ((x97345 (prim hash-has-key? h k))) x97345))
  (define (hash-count h) (let ((x97346 (prim hash-count h))) x97346))
  (define (call)
    (let ((a97347 '1))
      (let ((a97348 '2))
        (let ((a97349 (equal? a97347 a97348)))
          (if a97349
            (let ((a97350 '1)) (let ((a97351 '2)) (equal? a97350 a97351)))
            (let ((a97352 '3))
              (let ((a97353 (even? a97352)))
                (if a97353
                  (let ((a97354 '3)) (even? a97354))
                  (let ((a97355 '2)) (odd? a97355))))))))))
  (define (brouhaha_main) (let ((x97356 (call))) x97356)))
