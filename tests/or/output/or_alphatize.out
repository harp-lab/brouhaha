'((define (+ . lst) (let ((x92673 (apply-prim + lst))) x92673))
  (define (- . lst) (let ((x92674 (apply-prim - lst))) x92674))
  (define (* . lst) (let ((x92675 (apply-prim * lst))) x92675))
  (define (modulo a b) (let ((x92676 (prim modulo a b))) x92676))
  (define (/ . lst) (let ((x92677 (apply-prim / lst))) x92677))
  (define (= . lst) (let ((x92678 (apply-prim = lst))) x92678))
  (define (> . lst) (let ((x92679 (apply-prim > lst))) x92679))
  (define (< . lst) (let ((x92680 (apply-prim < lst))) x92680))
  (define (<= . lst) (let ((x92681 (apply-prim <= lst))) x92681))
  (define (>= . lst) (let ((x92682 (apply-prim >= lst))) x92682))
  (define (null? x) (let ((x92683 (prim null? x))) x92683))
  (define (equal? x y) (let ((x92684 (prim equal? x y))) x92684))
  (define (eq? x y) (let ((x92685 (prim eq? x y))) x92685))
  (define (cons a b) (let ((x92686 (prim cons a b))) x92686))
  (define (car lst) (let ((x92687 (prim car lst))) x92687))
  (define (cdr lst) (let ((x92688 (prim cdr lst))) x92688))
  (define (even? x)
    (let ((a92689 '0))
      (let ((a92690 '2))
        (let ((a92691 (modulo x a92690))) (equal? a92689 a92691)))))
  (define (odd? x)
    (let ((a92692 '1))
      (let ((a92693 '2))
        (let ((a92694 (modulo x a92693))) (equal? a92692 a92694)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a92695 (null? lst)))
      (if a92695
        (let ((x92696 '#f)) x92696)
        (let ((a92697 (car lst)))
          (let ((a92698 (equal? a92697 x)))
            (if a92698
              (let ((x92699 '#t)) x92699)
              (let ((a92700 (cdr lst))) (member? x a92700))))))))
  (define (foldl fun acc lst)
    (let ((a92701 (null? lst)))
      (if a92701
        acc
        (let ((a92702 (car lst)))
          (let ((a92703 (fun a92702 acc)))
            (let ((a92704 (cdr lst))) (foldl fun a92703 a92704)))))))
  (define (reverse-helper lst lst2)
    (let ((a92705 (null? lst)))
      (if a92705
        lst2
        (let ((a92706 (cdr lst)))
          (let ((a92707 (car lst)))
            (let ((a92708 (cons a92707 lst2)))
              (reverse-helper a92706 a92708)))))))
  (define (reverse lst) (let ((a92709 (list))) (reverse-helper lst a92709)))
  (define (take-helper lst n lst2)
    (let ((a92710 '0))
      (let ((a92711 (= n a92710)))
        (if a92711
          (let ((x92712 (reverse lst2))) x92712)
          (let ((a92713 (cdr lst)))
            (let ((a92714 '1))
              (let ((a92715 (- n a92714)))
                (let ((a92716 (car lst)))
                  (let ((a92717 (cons a92716 lst2)))
                    (take-helper a92713 a92715 a92717))))))))))
  (define (take lst n) (let ((a92718 (list))) (take-helper lst n a92718)))
  (define (length lst)
    (let ((a92719 (null? lst)))
      (if a92719
        (let ((x92720 '0)) x92720)
        (let ((a92721 '1))
          (let ((a92722 (cdr lst)))
            (let ((a92723 (length a92722))) (+ a92721 a92723)))))))
  (define (map proc lst)
    (let ((a92724 (null? lst)))
      (if a92724
        (let ((x92725 (list))) x92725)
        (let ((a92726 (car lst)))
          (let ((a92727 (proc a92726)))
            (let ((a92728 (cdr lst)))
              (let ((a92729 (map proc a92728))) (cons a92727 a92729))))))))
  (define (filter op lst)
    (let ((a92730 (null? lst)))
      (if a92730
        (let ((x92731 (list))) x92731)
        (let ((a92732 (car lst)))
          (let ((a92733 (op a92732)))
            (if a92733
              (let ((a92734 (car lst)))
                (let ((a92735 (cdr lst)))
                  (let ((a92736 (filter op a92735))) (cons a92734 a92736))))
              (let ((a92737 (cdr lst))) (filter op a92737))))))))
  (define (drop lst n)
    (let ((a92738 '0))
      (let ((a92739 (= n a92738)))
        (if a92739
          lst
          (let ((a92740 (cdr lst)))
            (let ((a92741 '1))
              (let ((a92742 (- n a92741))) (drop a92740 a92742))))))))
  (define (foldr proc acc lst)
    (let ((a92743 (null? lst)))
      (if a92743
        acc
        (let ((a92744 (car lst)))
          (let ((a92745 (cdr lst)))
            (let ((a92746 (foldr proc acc a92745))) (proc a92744 a92746)))))))
  (define (append lst1 lst2)
    (let ((a92747 (null? lst1)))
      (if a92747
        lst2
        (let ((a92748 (car lst1)))
          (let ((a92749 (cdr lst1)))
            (let ((a92750 (append a92749 lst2))) (cons a92748 a92750)))))))
  (define (hash . lst) (let ((x92751 (apply-prim hash lst))) x92751))
  (define (hash-ref h k) (let ((x92752 (prim hash-ref h k))) x92752))
  (define (hash-set h k v) (let ((x92753 (prim hash-set h k v))) x92753))
  (define (hash-has-key? h k) (let ((x92754 (prim hash-has-key? h k))) x92754))
  (define (hash-count h) (let ((x92755 (prim hash-count h))) x92755))
  (define (call)
    (let ((a92756 '1))
      (let ((a92757 '2))
        (let ((a92758 (equal? a92756 a92757)))
          (if a92758
            (let ((a92759 '1)) (let ((a92760 '2)) (equal? a92759 a92760)))
            (let ((a92761 '3))
              (let ((a92762 (even? a92761)))
                (if a92762
                  (let ((a92763 '3)) (even? a92763))
                  (let ((a92764 '2)) (odd? a92764))))))))))
  (define (brouhaha_main) (let ((x92765 (call))) x92765)))
