'((define (+ . lst)
    (let ((kont97357 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97264 (apply-prim + lst))) (kont97357 x97264)))))
  (define (- . lst)
    (let ((kont97359 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97265 (apply-prim - lst))) (kont97359 x97265)))))
  (define (* . lst)
    (let ((kont97361 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97266 (apply-prim * lst))) (kont97361 x97266)))))
  (define (modulo kont97363 a b)
    (let ((x97267 (prim modulo a b))) (kont97363 x97267)))
  (define (/ . lst)
    (let ((kont97364 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97268 (apply-prim / lst))) (kont97364 x97268)))))
  (define (= . lst)
    (let ((kont97366 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97269 (apply-prim = lst))) (kont97366 x97269)))))
  (define (> . lst)
    (let ((kont97368 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97270 (apply-prim > lst))) (kont97368 x97270)))))
  (define (< . lst)
    (let ((kont97370 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97271 (apply-prim < lst))) (kont97370 x97271)))))
  (define (<= . lst)
    (let ((kont97372 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97272 (apply-prim <= lst))) (kont97372 x97272)))))
  (define (>= . lst)
    (let ((kont97374 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97273 (apply-prim >= lst))) (kont97374 x97273)))))
  (define (null? kont97376 x)
    (let ((x97274 (prim null? x))) (kont97376 x97274)))
  (define (equal? kont97377 x y)
    (let ((x97275 (prim equal? x y))) (kont97377 x97275)))
  (define (eq? kont97378 x y)
    (let ((x97276 (prim eq? x y))) (kont97378 x97276)))
  (define (cons kont97379 a b)
    (let ((x97277 (prim cons a b))) (kont97379 x97277)))
  (define (car kont97380 lst)
    (let ((x97278 (prim car lst))) (kont97380 x97278)))
  (define (cdr kont97381 lst)
    (let ((x97279 (prim cdr lst))) (kont97381 x97279)))
  (define (even? kont97382 x)
    (let ((a97280 '0))
      (let ((a97281 '2))
        (let ((f97383 (lambda (a97282) (equal? kont97382 a97280 a97282))))
          (modulo f97383 x a97281)))))
  (define (odd? kont97384 x)
    (let ((a97283 '1))
      (let ((a97284 '2))
        (let ((f97385 (lambda (a97285) (equal? kont97384 a97283 a97285))))
          (modulo f97385 x a97284)))))
  (define (list . x)
    (let ((kont97386 (prim car x))) (let ((x (prim cdr x))) (kont97386 x))))
  (define (member? kont97388 x lst)
    (let ((f97392
           (lambda (a97286)
             (if a97286
               (let ((x97287 '#f)) (kont97388 x97287))
               (let ((f97391
                      (lambda (a97288)
                        (let ((f97390
                               (lambda (a97289)
                                 (if a97289
                                   (let ((x97290 '#t)) (kont97388 x97290))
                                   (let ((f97389
                                          (lambda (a97291)
                                            (member? kont97388 x a97291))))
                                     (cdr f97389 lst))))))
                          (equal? f97390 a97288 x)))))
                 (car f97391 lst))))))
      (null? f97392 lst)))
  (define (foldl kont97393 fun acc lst)
    (let ((f97397
           (lambda (a97292)
             (if a97292
               (kont97393 acc)
               (let ((f97396
                      (lambda (a97293)
                        (let ((f97395
                               (lambda (a97294)
                                 (let ((f97394
                                        (lambda (a97295)
                                          (foldl
                                           kont97393
                                           fun
                                           a97294
                                           a97295))))
                                   (cdr f97394 lst)))))
                          (fun f97395 a97293 acc)))))
                 (car f97396 lst))))))
      (null? f97397 lst)))
  (define (reverse-helper kont97398 lst lst2)
    (let ((f97402
           (lambda (a97296)
             (if a97296
               (kont97398 lst2)
               (let ((f97401
                      (lambda (a97297)
                        (let ((f97400
                               (lambda (a97298)
                                 (let ((f97399
                                        (lambda (a97299)
                                          (reverse-helper
                                           kont97398
                                           a97297
                                           a97299))))
                                   (cons f97399 a97298 lst2)))))
                          (car f97400 lst)))))
                 (cdr f97401 lst))))))
      (null? f97402 lst)))
  (define (reverse kont97403 lst)
    (let ((f97404 (lambda (a97300) (reverse-helper kont97403 lst a97300))))
      (list f97404)))
  (define (take-helper kont97405 lst n lst2)
    (let ((a97301 '0))
      (let ((f97411
             (lambda (a97302)
               (if a97302
                 (let ((f97406 (lambda (x97303) (kont97405 x97303))))
                   (reverse f97406 lst2))
                 (let ((f97410
                        (lambda (a97304)
                          (let ((a97305 '1))
                            (let ((f97409
                                   (lambda (a97306)
                                     (let ((f97408
                                            (lambda (a97307)
                                              (let ((f97407
                                                     (lambda (a97308)
                                                       (take-helper
                                                        kont97405
                                                        a97304
                                                        a97306
                                                        a97308))))
                                                (cons f97407 a97307 lst2)))))
                                       (car f97408 lst)))))
                              (- f97409 n a97305))))))
                   (cdr f97410 lst))))))
        (= f97411 n a97301))))
  (define (take kont97412 lst n)
    (let ((f97413 (lambda (a97309) (take-helper kont97412 lst n a97309))))
      (list f97413)))
  (define (length kont97414 lst)
    (let ((f97417
           (lambda (a97310)
             (if a97310
               (let ((x97311 '0)) (kont97414 x97311))
               (let ((a97312 '1))
                 (let ((f97416
                        (lambda (a97313)
                          (let ((f97415
                                 (lambda (a97314)
                                   (+ kont97414 a97312 a97314))))
                            (length f97415 a97313)))))
                   (cdr f97416 lst)))))))
      (null? f97417 lst)))
  (define (map kont97418 proc lst)
    (let ((f97424
           (lambda (a97315)
             (if a97315
               (let ((f97419 (lambda (x97316) (kont97418 x97316))))
                 (list f97419))
               (let ((f97423
                      (lambda (a97317)
                        (let ((f97422
                               (lambda (a97318)
                                 (let ((f97421
                                        (lambda (a97319)
                                          (let ((f97420
                                                 (lambda (a97320)
                                                   (cons
                                                    kont97418
                                                    a97318
                                                    a97320))))
                                            (map f97420 proc a97319)))))
                                   (cdr f97421 lst)))))
                          (proc f97422 a97317)))))
                 (car f97423 lst))))))
      (null? f97424 lst)))
  (define (filter kont97425 op lst)
    (let ((f97433
           (lambda (a97321)
             (if a97321
               (let ((f97426 (lambda (x97322) (kont97425 x97322))))
                 (list f97426))
               (let ((f97432
                      (lambda (a97323)
                        (let ((f97431
                               (lambda (a97324)
                                 (if a97324
                                   (let ((f97429
                                          (lambda (a97325)
                                            (let ((f97428
                                                   (lambda (a97326)
                                                     (let ((f97427
                                                            (lambda (a97327)
                                                              (cons
                                                               kont97425
                                                               a97325
                                                               a97327))))
                                                       (filter
                                                        f97427
                                                        op
                                                        a97326)))))
                                              (cdr f97428 lst)))))
                                     (car f97429 lst))
                                   (let ((f97430
                                          (lambda (a97328)
                                            (filter kont97425 op a97328))))
                                     (cdr f97430 lst))))))
                          (op f97431 a97323)))))
                 (car f97432 lst))))))
      (null? f97433 lst)))
  (define (drop kont97434 lst n)
    (let ((a97329 '0))
      (let ((f97437
             (lambda (a97330)
               (if a97330
                 (kont97434 lst)
                 (let ((f97436
                        (lambda (a97331)
                          (let ((a97332 '1))
                            (let ((f97435
                                   (lambda (a97333)
                                     (drop kont97434 a97331 a97333))))
                              (- f97435 n a97332))))))
                   (cdr f97436 lst))))))
        (= f97437 n a97329))))
  (define (foldr kont97438 proc acc lst)
    (let ((f97442
           (lambda (a97334)
             (if a97334
               (kont97438 acc)
               (let ((f97441
                      (lambda (a97335)
                        (let ((f97440
                               (lambda (a97336)
                                 (let ((f97439
                                        (lambda (a97337)
                                          (proc kont97438 a97335 a97337))))
                                   (foldr f97439 proc acc a97336)))))
                          (cdr f97440 lst)))))
                 (car f97441 lst))))))
      (null? f97442 lst)))
  (define (append kont97443 lst1 lst2)
    (let ((f97447
           (lambda (a97338)
             (if a97338
               (kont97443 lst2)
               (let ((f97446
                      (lambda (a97339)
                        (let ((f97445
                               (lambda (a97340)
                                 (let ((f97444
                                        (lambda (a97341)
                                          (cons kont97443 a97339 a97341))))
                                   (append f97444 a97340 lst2)))))
                          (cdr f97445 lst1)))))
                 (car f97446 lst1))))))
      (null? f97447 lst1)))
  (define (hash . lst)
    (let ((kont97448 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x97342 (apply-prim hash lst))) (kont97448 x97342)))))
  (define (hash-ref kont97450 h k)
    (let ((x97343 (prim hash-ref h k))) (kont97450 x97343)))
  (define (hash-set kont97451 h k v)
    (let ((x97344 (prim hash-set h k v))) (kont97451 x97344)))
  (define (hash-has-key? kont97452 h k)
    (let ((x97345 (prim hash-has-key? h k))) (kont97452 x97345)))
  (define (hash-count kont97453 h)
    (let ((x97346 (prim hash-count h))) (kont97453 x97346)))
  (define (call kont97454)
    (let ((a97347 '1))
      (let ((a97348 '2))
        (let ((f97456
               (lambda (a97349)
                 (if a97349
                   (let ((a97350 '1))
                     (let ((a97351 '2)) (equal? kont97454 a97350 a97351)))
                   (let ((a97352 '3))
                     (let ((f97455
                            (lambda (a97353)
                              (if a97353
                                (let ((a97354 '3)) (even? kont97454 a97354))
                                (let ((a97355 '2)) (odd? kont97454 a97355))))))
                       (even? f97455 a97352)))))))
          (equal? f97456 a97347 a97348)))))
  (define (brouhaha_main kont97457)
    (let ((f97458 (lambda (x97356) (kont97457 x97356)))) (call f97458))))
