'((define (+ . lst)
    (let ((kont91226 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91139 (apply-prim + lst))) (kont91226 x91139)))))
  (define (- . lst)
    (let ((kont91228 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91140 (apply-prim - lst))) (kont91228 x91140)))))
  (define (* . lst)
    (let ((kont91230 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91141 (apply-prim * lst))) (kont91230 x91141)))))
  (define (modulo kont91232 a b)
    (let ((x91142 (prim modulo a b))) (kont91232 x91142)))
  (define (/ . lst)
    (let ((kont91233 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91143 (apply-prim / lst))) (kont91233 x91143)))))
  (define (= . lst)
    (let ((kont91235 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91144 (apply-prim = lst))) (kont91235 x91144)))))
  (define (> . lst)
    (let ((kont91237 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91145 (apply-prim > lst))) (kont91237 x91145)))))
  (define (< . lst)
    (let ((kont91239 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91146 (apply-prim < lst))) (kont91239 x91146)))))
  (define (<= . lst)
    (let ((kont91241 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91147 (apply-prim <= lst))) (kont91241 x91147)))))
  (define (>= . lst)
    (let ((kont91243 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91148 (apply-prim >= lst))) (kont91243 x91148)))))
  (define (null? kont91245 x)
    (let ((x91149 (prim null? x))) (kont91245 x91149)))
  (define (equal? kont91246 x y)
    (let ((x91150 (prim equal? x y))) (kont91246 x91150)))
  (define (eq? kont91247 x y)
    (let ((x91151 (prim eq? x y))) (kont91247 x91151)))
  (define (cons kont91248 a b)
    (let ((x91152 (prim cons a b))) (kont91248 x91152)))
  (define (car kont91249 lst)
    (let ((x91153 (prim car lst))) (kont91249 x91153)))
  (define (cdr kont91250 lst)
    (let ((x91154 (prim cdr lst))) (kont91250 x91154)))
  (define (even? kont91251 x)
    (let ((a91155 '0))
      (let ((a91156 '2))
        (let ((f91252 (lambda (a91157) (equal? kont91251 a91155 a91157))))
          (modulo f91252 x a91156)))))
  (define (odd? kont91253 x)
    (let ((a91158 '1))
      (let ((a91159 '2))
        (let ((f91254 (lambda (a91160) (equal? kont91253 a91158 a91160))))
          (modulo f91254 x a91159)))))
  (define (list . x)
    (let ((kont91255 (prim car x))) (let ((x (prim cdr x))) (kont91255 x))))
  (define (member? kont91257 x lst)
    (let ((f91261
           (lambda (a91161)
             (if a91161
               (let ((x91162 '#f)) (kont91257 x91162))
               (let ((f91260
                      (lambda (a91163)
                        (let ((f91259
                               (lambda (a91164)
                                 (if a91164
                                   (let ((x91165 '#t)) (kont91257 x91165))
                                   (let ((f91258
                                          (lambda (a91166)
                                            (member? kont91257 x a91166))))
                                     (cdr f91258 lst))))))
                          (equal? f91259 a91163 x)))))
                 (car f91260 lst))))))
      (null? f91261 lst)))
  (define (foldl kont91262 fun acc lst)
    (let ((f91266
           (lambda (a91167)
             (if a91167
               (kont91262 acc)
               (let ((f91265
                      (lambda (a91168)
                        (let ((f91264
                               (lambda (a91169)
                                 (let ((f91263
                                        (lambda (a91170)
                                          (foldl
                                           kont91262
                                           fun
                                           a91169
                                           a91170))))
                                   (cdr f91263 lst)))))
                          (fun f91264 a91168 acc)))))
                 (car f91265 lst))))))
      (null? f91266 lst)))
  (define (reverse-helper kont91267 lst lst2)
    (let ((f91271
           (lambda (a91171)
             (if a91171
               (kont91267 lst2)
               (let ((f91270
                      (lambda (a91172)
                        (let ((f91269
                               (lambda (a91173)
                                 (let ((f91268
                                        (lambda (a91174)
                                          (reverse-helper
                                           kont91267
                                           a91172
                                           a91174))))
                                   (cons f91268 a91173 lst2)))))
                          (car f91269 lst)))))
                 (cdr f91270 lst))))))
      (null? f91271 lst)))
  (define (reverse kont91272 lst)
    (let ((f91273 (lambda (a91175) (reverse-helper kont91272 lst a91175))))
      (list f91273)))
  (define (take-helper kont91274 lst n lst2)
    (let ((a91176 '0))
      (let ((f91280
             (lambda (a91177)
               (if a91177
                 (let ((f91275 (lambda (x91178) (kont91274 x91178))))
                   (reverse f91275 lst2))
                 (let ((f91279
                        (lambda (a91179)
                          (let ((a91180 '1))
                            (let ((f91278
                                   (lambda (a91181)
                                     (let ((f91277
                                            (lambda (a91182)
                                              (let ((f91276
                                                     (lambda (a91183)
                                                       (take-helper
                                                        kont91274
                                                        a91179
                                                        a91181
                                                        a91183))))
                                                (cons f91276 a91182 lst2)))))
                                       (car f91277 lst)))))
                              (- f91278 n a91180))))))
                   (cdr f91279 lst))))))
        (= f91280 n a91176))))
  (define (take kont91281 lst n)
    (let ((f91282 (lambda (a91184) (take-helper kont91281 lst n a91184))))
      (list f91282)))
  (define (length kont91283 lst)
    (let ((f91286
           (lambda (a91185)
             (if a91185
               (let ((x91186 '0)) (kont91283 x91186))
               (let ((a91187 '1))
                 (let ((f91285
                        (lambda (a91188)
                          (let ((f91284
                                 (lambda (a91189)
                                   (+ kont91283 a91187 a91189))))
                            (length f91284 a91188)))))
                   (cdr f91285 lst)))))))
      (null? f91286 lst)))
  (define (map kont91287 proc lst)
    (let ((f91293
           (lambda (a91190)
             (if a91190
               (let ((f91288 (lambda (x91191) (kont91287 x91191))))
                 (list f91288))
               (let ((f91292
                      (lambda (a91192)
                        (let ((f91291
                               (lambda (a91193)
                                 (let ((f91290
                                        (lambda (a91194)
                                          (let ((f91289
                                                 (lambda (a91195)
                                                   (cons
                                                    kont91287
                                                    a91193
                                                    a91195))))
                                            (map f91289 proc a91194)))))
                                   (cdr f91290 lst)))))
                          (proc f91291 a91192)))))
                 (car f91292 lst))))))
      (null? f91293 lst)))
  (define (filter kont91294 op lst)
    (let ((f91302
           (lambda (a91196)
             (if a91196
               (let ((f91295 (lambda (x91197) (kont91294 x91197))))
                 (list f91295))
               (let ((f91301
                      (lambda (a91198)
                        (let ((f91300
                               (lambda (a91199)
                                 (if a91199
                                   (let ((f91298
                                          (lambda (a91200)
                                            (let ((f91297
                                                   (lambda (a91201)
                                                     (let ((f91296
                                                            (lambda (a91202)
                                                              (cons
                                                               kont91294
                                                               a91200
                                                               a91202))))
                                                       (filter
                                                        f91296
                                                        op
                                                        a91201)))))
                                              (cdr f91297 lst)))))
                                     (car f91298 lst))
                                   (let ((f91299
                                          (lambda (a91203)
                                            (filter kont91294 op a91203))))
                                     (cdr f91299 lst))))))
                          (op f91300 a91198)))))
                 (car f91301 lst))))))
      (null? f91302 lst)))
  (define (drop kont91303 lst n)
    (let ((a91204 '0))
      (let ((f91306
             (lambda (a91205)
               (if a91205
                 (kont91303 lst)
                 (let ((f91305
                        (lambda (a91206)
                          (let ((a91207 '1))
                            (let ((f91304
                                   (lambda (a91208)
                                     (drop kont91303 a91206 a91208))))
                              (- f91304 n a91207))))))
                   (cdr f91305 lst))))))
        (= f91306 n a91204))))
  (define (foldr kont91307 proc acc lst)
    (let ((f91311
           (lambda (a91209)
             (if a91209
               (kont91307 acc)
               (let ((f91310
                      (lambda (a91210)
                        (let ((f91309
                               (lambda (a91211)
                                 (let ((f91308
                                        (lambda (a91212)
                                          (proc kont91307 a91210 a91212))))
                                   (foldr f91308 proc acc a91211)))))
                          (cdr f91309 lst)))))
                 (car f91310 lst))))))
      (null? f91311 lst)))
  (define (append kont91312 lst1 lst2)
    (let ((f91316
           (lambda (a91213)
             (if a91213
               (kont91312 lst2)
               (let ((f91315
                      (lambda (a91214)
                        (let ((f91314
                               (lambda (a91215)
                                 (let ((f91313
                                        (lambda (a91216)
                                          (cons kont91312 a91214 a91216))))
                                   (append f91313 a91215 lst2)))))
                          (cdr f91314 lst1)))))
                 (car f91315 lst1))))))
      (null? f91316 lst1)))
  (define (hash . lst)
    (let ((kont91317 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x91217 (apply-prim hash lst))) (kont91317 x91217)))))
  (define (hash-ref kont91319 h k)
    (let ((x91218 (prim hash-ref h k))) (kont91319 x91218)))
  (define (hash-set kont91320 h k v)
    (let ((x91219 (prim hash-set h k v))) (kont91320 x91219)))
  (define (hash-has-key? kont91321 h k)
    (let ((x91220 (prim hash-has-key? h k))) (kont91321 x91220)))
  (define (hash-count kont91322 h)
    (let ((x91221 (prim hash-count h))) (kont91322 x91221)))
  (define (call kont91323)
    (let ((a91222 '#f))
      (if a91222
        (let ((x91223 '#f)) (kont91323 x91223))
        (let ((x91224 '#t)) (kont91323 x91224)))))
  (define (brouhaha_main kont91324)
    (let ((f91325 (lambda (x91225) (kont91324 x91225)))) (call f91325))))
