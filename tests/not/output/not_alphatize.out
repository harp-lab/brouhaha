'((define (+ . lst) (let ((x91139 (apply-prim + lst))) x91139))
  (define (- . lst) (let ((x91140 (apply-prim - lst))) x91140))
  (define (* . lst) (let ((x91141 (apply-prim * lst))) x91141))
  (define (modulo a b) (let ((x91142 (prim modulo a b))) x91142))
  (define (/ . lst) (let ((x91143 (apply-prim / lst))) x91143))
  (define (= . lst) (let ((x91144 (apply-prim = lst))) x91144))
  (define (> . lst) (let ((x91145 (apply-prim > lst))) x91145))
  (define (< . lst) (let ((x91146 (apply-prim < lst))) x91146))
  (define (<= . lst) (let ((x91147 (apply-prim <= lst))) x91147))
  (define (>= . lst) (let ((x91148 (apply-prim >= lst))) x91148))
  (define (null? x) (let ((x91149 (prim null? x))) x91149))
  (define (equal? x y) (let ((x91150 (prim equal? x y))) x91150))
  (define (eq? x y) (let ((x91151 (prim eq? x y))) x91151))
  (define (cons a b) (let ((x91152 (prim cons a b))) x91152))
  (define (car lst) (let ((x91153 (prim car lst))) x91153))
  (define (cdr lst) (let ((x91154 (prim cdr lst))) x91154))
  (define (even? x)
    (let ((a91155 '0))
      (let ((a91156 '2))
        (let ((a91157 (modulo x a91156))) (equal? a91155 a91157)))))
  (define (odd? x)
    (let ((a91158 '1))
      (let ((a91159 '2))
        (let ((a91160 (modulo x a91159))) (equal? a91158 a91160)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a91161 (null? lst)))
      (if a91161
        (let ((x91162 '#f)) x91162)
        (let ((a91163 (car lst)))
          (let ((a91164 (equal? a91163 x)))
            (if a91164
              (let ((x91165 '#t)) x91165)
              (let ((a91166 (cdr lst))) (member? x a91166))))))))
  (define (foldl fun acc lst)
    (let ((a91167 (null? lst)))
      (if a91167
        acc
        (let ((a91168 (car lst)))
          (let ((a91169 (fun a91168 acc)))
            (let ((a91170 (cdr lst))) (foldl fun a91169 a91170)))))))
  (define (reverse-helper lst lst2)
    (let ((a91171 (null? lst)))
      (if a91171
        lst2
        (let ((a91172 (cdr lst)))
          (let ((a91173 (car lst)))
            (let ((a91174 (cons a91173 lst2)))
              (reverse-helper a91172 a91174)))))))
  (define (reverse lst) (let ((a91175 (list))) (reverse-helper lst a91175)))
  (define (take-helper lst n lst2)
    (let ((a91176 '0))
      (let ((a91177 (= n a91176)))
        (if a91177
          (let ((x91178 (reverse lst2))) x91178)
          (let ((a91179 (cdr lst)))
            (let ((a91180 '1))
              (let ((a91181 (- n a91180)))
                (let ((a91182 (car lst)))
                  (let ((a91183 (cons a91182 lst2)))
                    (take-helper a91179 a91181 a91183))))))))))
  (define (take lst n) (let ((a91184 (list))) (take-helper lst n a91184)))
  (define (length lst)
    (let ((a91185 (null? lst)))
      (if a91185
        (let ((x91186 '0)) x91186)
        (let ((a91187 '1))
          (let ((a91188 (cdr lst)))
            (let ((a91189 (length a91188))) (+ a91187 a91189)))))))
  (define (map proc lst)
    (let ((a91190 (null? lst)))
      (if a91190
        (let ((x91191 (list))) x91191)
        (let ((a91192 (car lst)))
          (let ((a91193 (proc a91192)))
            (let ((a91194 (cdr lst)))
              (let ((a91195 (map proc a91194))) (cons a91193 a91195))))))))
  (define (filter op lst)
    (let ((a91196 (null? lst)))
      (if a91196
        (let ((x91197 (list))) x91197)
        (let ((a91198 (car lst)))
          (let ((a91199 (op a91198)))
            (if a91199
              (let ((a91200 (car lst)))
                (let ((a91201 (cdr lst)))
                  (let ((a91202 (filter op a91201))) (cons a91200 a91202))))
              (let ((a91203 (cdr lst))) (filter op a91203))))))))
  (define (drop lst n)
    (let ((a91204 '0))
      (let ((a91205 (= n a91204)))
        (if a91205
          lst
          (let ((a91206 (cdr lst)))
            (let ((a91207 '1))
              (let ((a91208 (- n a91207))) (drop a91206 a91208))))))))
  (define (foldr proc acc lst)
    (let ((a91209 (null? lst)))
      (if a91209
        acc
        (let ((a91210 (car lst)))
          (let ((a91211 (cdr lst)))
            (let ((a91212 (foldr proc acc a91211))) (proc a91210 a91212)))))))
  (define (append lst1 lst2)
    (let ((a91213 (null? lst1)))
      (if a91213
        lst2
        (let ((a91214 (car lst1)))
          (let ((a91215 (cdr lst1)))
            (let ((a91216 (append a91215 lst2))) (cons a91214 a91216)))))))
  (define (hash . lst) (let ((x91217 (apply-prim hash lst))) x91217))
  (define (hash-ref h k) (let ((x91218 (prim hash-ref h k))) x91218))
  (define (hash-set h k v) (let ((x91219 (prim hash-set h k v))) x91219))
  (define (hash-has-key? h k) (let ((x91220 (prim hash-has-key? h k))) x91220))
  (define (hash-count h) (let ((x91221 (prim hash-count h))) x91221))
  (define (call)
    (let ((a91222 '#f))
      (if a91222 (let ((x91223 '#f)) x91223) (let ((x91224 '#t)) x91224))))
  (define (brouhaha_main) (let ((x91225 (call))) x91225)))
