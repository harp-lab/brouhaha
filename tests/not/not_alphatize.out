'((define (+ . lst) (let ((x95710 (apply-prim + lst))) x95710))
  (define (- . lst) (let ((x95711 (apply-prim - lst))) x95711))
  (define (* . lst) (let ((x95712 (apply-prim * lst))) x95712))
  (define (modulo a b) (let ((x95713 (prim modulo a b))) x95713))
  (define (/ . lst) (let ((x95714 (apply-prim / lst))) x95714))
  (define (= . lst) (let ((x95715 (apply-prim = lst))) x95715))
  (define (> . lst) (let ((x95716 (apply-prim > lst))) x95716))
  (define (< . lst) (let ((x95717 (apply-prim < lst))) x95717))
  (define (<= . lst) (let ((x95718 (apply-prim <= lst))) x95718))
  (define (>= . lst) (let ((x95719 (apply-prim >= lst))) x95719))
  (define (null? x) (let ((x95720 (prim null? x))) x95720))
  (define (equal? x y) (let ((x95721 (prim equal? x y))) x95721))
  (define (eq? x y) (let ((x95722 (prim eq? x y))) x95722))
  (define (cons a b) (let ((x95723 (prim cons a b))) x95723))
  (define (car lst) (let ((x95724 (prim car lst))) x95724))
  (define (cdr lst) (let ((x95725 (prim cdr lst))) x95725))
  (define (even? x)
    (let ((a95726 '0))
      (let ((a95727 '2))
        (let ((a95728 (modulo x a95727))) (equal? a95726 a95728)))))
  (define (odd? x)
    (let ((a95729 '1))
      (let ((a95730 '2))
        (let ((a95731 (modulo x a95730))) (equal? a95729 a95731)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a95732 (null? lst)))
      (if a95732
        (let ((x95733 '#f)) x95733)
        (let ((a95734 (car lst)))
          (let ((a95735 (equal? a95734 x)))
            (if a95735
              (let ((x95736 '#t)) x95736)
              (let ((a95737 (cdr lst))) (member? x a95737))))))))
  (define (foldl fun acc lst)
    (let ((a95738 (null? lst)))
      (if a95738
        acc
        (let ((a95739 (car lst)))
          (let ((a95740 (fun a95739 acc)))
            (let ((a95741 (cdr lst))) (foldl fun a95740 a95741)))))))
  (define (reverse-helper lst lst2)
    (let ((a95742 (null? lst)))
      (if a95742
        lst2
        (let ((a95743 (cdr lst)))
          (let ((a95744 (car lst)))
            (let ((a95745 (cons a95744 lst2)))
              (reverse-helper a95743 a95745)))))))
  (define (reverse lst) (let ((a95746 (list))) (reverse-helper lst a95746)))
  (define (take-helper lst n lst2)
    (let ((a95747 '0))
      (let ((a95748 (= n a95747)))
        (if a95748
          (let ((x95749 (reverse lst2))) x95749)
          (let ((a95750 (cdr lst)))
            (let ((a95751 '1))
              (let ((a95752 (- n a95751)))
                (let ((a95753 (car lst)))
                  (let ((a95754 (cons a95753 lst2)))
                    (take-helper a95750 a95752 a95754))))))))))
  (define (take lst n) (let ((a95755 (list))) (take-helper lst n a95755)))
  (define (length lst)
    (let ((a95756 (null? lst)))
      (if a95756
        (let ((x95757 '0)) x95757)
        (let ((a95758 '1))
          (let ((a95759 (cdr lst)))
            (let ((a95760 (length a95759))) (+ a95758 a95760)))))))
  (define (map proc lst)
    (let ((a95761 (null? lst)))
      (if a95761
        (let ((x95762 (list))) x95762)
        (let ((a95763 (car lst)))
          (let ((a95764 (proc a95763)))
            (let ((a95765 (cdr lst)))
              (let ((a95766 (map proc a95765))) (cons a95764 a95766))))))))
  (define (filter op lst)
    (let ((a95767 (null? lst)))
      (if a95767
        (let ((x95768 (list))) x95768)
        (let ((a95769 (car lst)))
          (let ((a95770 (op a95769)))
            (if a95770
              (let ((a95771 (car lst)))
                (let ((a95772 (cdr lst)))
                  (let ((a95773 (filter op a95772))) (cons a95771 a95773))))
              (let ((a95774 (cdr lst))) (filter op a95774))))))))
  (define (drop lst n)
    (let ((a95775 '0))
      (let ((a95776 (= n a95775)))
        (if a95776
          lst
          (let ((a95777 (cdr lst)))
            (let ((a95778 '1))
              (let ((a95779 (- n a95778))) (drop a95777 a95779))))))))
  (define (foldr proc acc lst)
    (let ((a95780 (null? lst)))
      (if a95780
        acc
        (let ((a95781 (car lst)))
          (let ((a95782 (cdr lst)))
            (let ((a95783 (foldr proc acc a95782))) (proc a95781 a95783)))))))
  (define (append lst1 lst2)
    (let ((a95784 (null? lst1)))
      (if a95784
        lst2
        (let ((a95785 (car lst1)))
          (let ((a95786 (cdr lst1)))
            (let ((a95787 (append a95786 lst2))) (cons a95785 a95787)))))))
  (define (hash . lst) (let ((x95788 (apply-prim hash lst))) x95788))
  (define (hash-ref h k) (let ((x95789 (prim hash-ref h k))) x95789))
  (define (hash-set h k v) (let ((x95790 (prim hash-set h k v))) x95790))
  (define (hash-has-key? h k) (let ((x95791 (prim hash-has-key? h k))) x95791))
  (define (hash-count h) (let ((x95792 (prim hash-count h))) x95792))
  (define (call)
    (let ((a95793 '#f))
      (if a95793 (let ((x95794 '#f)) x95794) (let ((x95795 '#t)) x95795))))
  (define (brouhaha_main) (let ((x95796 (call))) x95796)))
