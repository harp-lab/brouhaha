;; won't work, untill we implement the mpz/mpf promotion thing!

;;; Source: https://www.larcenists.org/benchmarksAboutR7.html
;;; PI -- A bignum-intensive benchmark that calculates digits of pi.

(define (mydiv x y)
  (cond ((and (positive? x)
              (positive? y)
              (>= x 0))
         (quotient x y))
        ((< y 0)
         (let* ((q (quotient x y))
                (r (- x (* q y))))
           (if (= r 0)
               q
               (+ q 1))))
        (else
         (let* ((q (quotient x y))
                (r (- x (* q y))))
           (if (= r 0)
               q
               (- q 1))))))

(define (width x i n)
  (if (< x n) i (width x (+ i 1) (* n 2))))


(define (root-helper g x y)
  (let ((a (expt g (- y 1))))
    (let ((b (* a y)))
      (let ((c (* a (- y 1))))
        (let ((d (mydiv (+ x (* g c)) b)))
          (if (< d g) (root-helper d x y) g))))))

(define (root x y)
  (root-helper (expt
                2
                (mydiv (+ (width x 0 1) (- y 1)) y))
               x
               y))

(define (square-root x)
  (root x 2))

(define (quartic-root x)
  (root x 4))

(define (square x)
  (* x x))

; Compute pi using the 'brent-salamin' method.

(define (pi-brent-salamin-helper one a b t x)
  (if (= a b)
      (mydiv (square (+ a b)) (* 4 t))
      (let ((new-a (mydiv (+ a b) 2)))
        (pi-brent-salamin-helper
         one
         new-a
         (square-root (* a b))
         (- t
            (mydiv
             (* x (square (- new-a a)))
             one))
         (* 2 x)))))

(define (pi-brent-salamin nb-digits)
  (let ((one (expt 10 nb-digits)))
    (pi-brent-salamin-helper
     one
     one
     (square-root (mydiv (square one) 2))
     (mydiv one 4)
     1)))

; Compute pi using the quadratically converging 'borwein' method.
(define (pi-borwein2-helper one one^2 one^4 sqrt2 qurt2 x y p)
  (let ((new-p (mydiv (* p (+ x one))
                      (+ y one))))
    (if (= x one)
        new-p
        (let ((sqrt-x (square-root (* one x))))
          (pi-borwein2-helper
           one one^2 one^4 sqrt2 qurt2
           (mydiv
            (* one (+ x one))
            (* 2 sqrt-x))
           (mydiv
            (* one (+ (* x y) one^2))
            (* (+ y one) sqrt-x))
           new-p)))) )

(define (pi-borwein2 nb-digits)
  (let* ((one (expt 10 nb-digits))
         (one^2 (square one))
         (one^4 (square one^2))
         (sqrt2 (square-root (* one^2 2)))
         (qurt2 (quartic-root (* one^4 2))))
    (pi-borwein2-helper one one^2 one^4 sqrt2 qurt2
                        (mydiv
                         (* one (+ sqrt2 one))
                         (* 2 qurt2))
                        qurt2
                        (+ (* 2 one) sqrt2))))

; Compute pi using the quartically converging 'borwein' method.

(define (pi-borwein4-helper one one^2 one^4 sqrt2 y a x)
  (if (= y 0)
      (mydiv one^2 a)
      (let* ((t1 (quartic-root (- one^4 (square (square y)))))
             (t2 (mydiv
                  (* one (- one t1))
                  (+ one t1)))
             (t3 (mydiv
                  (square (mydiv (square (+ one t2)) one))
                  one))
             (t4 (+ one
                    (+ t2
                       (mydiv (square t2) one)))))
        (pi-borwein4-helper one one^2 one^4 sqrt2
                            t2
                            (mydiv
                             (- (* t3 a) (* x (* t2 t4)))
                             one)
                            (* 4 x)))))


(define (pi-borwein4 nb-digits)
  (let* ((one (expt 10 nb-digits))
         (one^2 (square one))
         (one^4 (square one^2))
         (sqrt2 (square-root (* one^2 2))))

    (pi-borwein4-helper one one^2 one^4 sqrt2 (- sqrt2 one) (- (* 6 one) (* 4 sqrt2)) 8)))

(define (pies n m s)
  (if (< m n)
      (list)
      (let ((bs (pi-brent-salamin n))
            (b2 (pi-borwein2 n))
            (b4 (pi-borwein4 n)))
        (cons (list b2 (- bs b2) (- b4 b2))
              (pies (+ n s) m s)))))
(define (brouhaha_main)
  (pies 1
        15
        1
        ))

;(pies 50 500 50)

