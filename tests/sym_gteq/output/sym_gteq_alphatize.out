'((define (+ . lst) (let ((x113965 (apply-prim + lst))) x113965))
  (define (- . lst) (let ((x113966 (apply-prim - lst))) x113966))
  (define (* . lst) (let ((x113967 (apply-prim * lst))) x113967))
  (define (modulo a b) (let ((x113968 (prim modulo a b))) x113968))
  (define (/ . lst) (let ((x113969 (apply-prim / lst))) x113969))
  (define (= . lst) (let ((x113970 (apply-prim = lst))) x113970))
  (define (> . lst) (let ((x113971 (apply-prim > lst))) x113971))
  (define (< . lst) (let ((x113972 (apply-prim < lst))) x113972))
  (define (<= . lst) (let ((x113973 (apply-prim <= lst))) x113973))
  (define (>= . lst) (let ((x113974 (apply-prim >= lst))) x113974))
  (define (null? x) (let ((x113975 (prim null? x))) x113975))
  (define (equal? x y) (let ((x113976 (prim equal? x y))) x113976))
  (define (eq? x y) (let ((x113977 (prim eq? x y))) x113977))
  (define (cons a b) (let ((x113978 (prim cons a b))) x113978))
  (define (car lst) (let ((x113979 (prim car lst))) x113979))
  (define (cdr lst) (let ((x113980 (prim cdr lst))) x113980))
  (define (even? x)
    (let ((a113981 '0))
      (let ((a113982 '2))
        (let ((a113983 (modulo x a113982))) (equal? a113981 a113983)))))
  (define (odd? x)
    (let ((a113984 '1))
      (let ((a113985 '2))
        (let ((a113986 (modulo x a113985))) (equal? a113984 a113986)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a113987 (null? lst)))
      (if a113987
        (let ((x113988 '#f)) x113988)
        (let ((a113989 (car lst)))
          (let ((a113990 (equal? a113989 x)))
            (if a113990
              (let ((x113991 '#t)) x113991)
              (let ((a113992 (cdr lst))) (member? x a113992))))))))
  (define (foldl fun acc lst)
    (let ((a113993 (null? lst)))
      (if a113993
        acc
        (let ((a113994 (car lst)))
          (let ((a113995 (fun a113994 acc)))
            (let ((a113996 (cdr lst))) (foldl fun a113995 a113996)))))))
  (define (reverse-helper lst lst2)
    (let ((a113997 (null? lst)))
      (if a113997
        lst2
        (let ((a113998 (cdr lst)))
          (let ((a113999 (car lst)))
            (let ((a114000 (cons a113999 lst2)))
              (reverse-helper a113998 a114000)))))))
  (define (reverse lst) (let ((a114001 (list))) (reverse-helper lst a114001)))
  (define (take-helper lst n lst2)
    (let ((a114002 '0))
      (let ((a114003 (= n a114002)))
        (if a114003
          (let ((x114004 (reverse lst2))) x114004)
          (let ((a114005 (cdr lst)))
            (let ((a114006 '1))
              (let ((a114007 (- n a114006)))
                (let ((a114008 (car lst)))
                  (let ((a114009 (cons a114008 lst2)))
                    (take-helper a114005 a114007 a114009))))))))))
  (define (take lst n) (let ((a114010 (list))) (take-helper lst n a114010)))
  (define (length lst)
    (let ((a114011 (null? lst)))
      (if a114011
        (let ((x114012 '0)) x114012)
        (let ((a114013 '1))
          (let ((a114014 (cdr lst)))
            (let ((a114015 (length a114014))) (+ a114013 a114015)))))))
  (define (map proc lst)
    (let ((a114016 (null? lst)))
      (if a114016
        (let ((x114017 (list))) x114017)
        (let ((a114018 (car lst)))
          (let ((a114019 (proc a114018)))
            (let ((a114020 (cdr lst)))
              (let ((a114021 (map proc a114020))) (cons a114019 a114021))))))))
  (define (filter op lst)
    (let ((a114022 (null? lst)))
      (if a114022
        (let ((x114023 (list))) x114023)
        (let ((a114024 (car lst)))
          (let ((a114025 (op a114024)))
            (if a114025
              (let ((a114026 (car lst)))
                (let ((a114027 (cdr lst)))
                  (let ((a114028 (filter op a114027)))
                    (cons a114026 a114028))))
              (let ((a114029 (cdr lst))) (filter op a114029))))))))
  (define (drop lst n)
    (let ((a114030 '0))
      (let ((a114031 (= n a114030)))
        (if a114031
          lst
          (let ((a114032 (cdr lst)))
            (let ((a114033 '1))
              (let ((a114034 (- n a114033))) (drop a114032 a114034))))))))
  (define (foldr proc acc lst)
    (let ((a114035 (null? lst)))
      (if a114035
        acc
        (let ((a114036 (car lst)))
          (let ((a114037 (cdr lst)))
            (let ((a114038 (foldr proc acc a114037)))
              (proc a114036 a114038)))))))
  (define (append lst1 lst2)
    (let ((a114039 (null? lst1)))
      (if a114039
        lst2
        (let ((a114040 (car lst1)))
          (let ((a114041 (cdr lst1)))
            (let ((a114042 (append a114041 lst2))) (cons a114040 a114042)))))))
  (define (hash . lst) (let ((x114043 (apply-prim hash lst))) x114043))
  (define (hash-ref h k) (let ((x114044 (prim hash-ref h k))) x114044))
  (define (hash-set h k v) (let ((x114045 (prim hash-set h k v))) x114045))
  (define (hash-has-key? h k)
    (let ((x114046 (prim hash-has-key? h k))) x114046))
  (define (hash-count h) (let ((x114047 (prim hash-count h))) x114047))
  (define (call)
    (let ((a114048 '100))
      (let ((a114049 '90))
        (let ((a114050 '80))
          (let ((a114051 '70))
            (let ((a114052 '60))
              (>= a114048 a114049 a114050 a114051 a114052)))))))
  (define (brouhaha_main) (let ((x114053 (call))) x114053)))
