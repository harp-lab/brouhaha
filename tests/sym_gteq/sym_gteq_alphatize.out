'((define (+ . lst) (let ((x119796 (apply-prim + lst))) x119796))
  (define (- . lst) (let ((x119797 (apply-prim - lst))) x119797))
  (define (* . lst) (let ((x119798 (apply-prim * lst))) x119798))
  (define (modulo a b) (let ((x119799 (prim modulo a b))) x119799))
  (define (/ . lst) (let ((x119800 (apply-prim / lst))) x119800))
  (define (= . lst) (let ((x119801 (apply-prim = lst))) x119801))
  (define (> . lst) (let ((x119802 (apply-prim > lst))) x119802))
  (define (< . lst) (let ((x119803 (apply-prim < lst))) x119803))
  (define (<= . lst) (let ((x119804 (apply-prim <= lst))) x119804))
  (define (>= . lst) (let ((x119805 (apply-prim >= lst))) x119805))
  (define (null? x) (let ((x119806 (prim null? x))) x119806))
  (define (equal? x y) (let ((x119807 (prim equal? x y))) x119807))
  (define (eq? x y) (let ((x119808 (prim eq? x y))) x119808))
  (define (cons a b) (let ((x119809 (prim cons a b))) x119809))
  (define (car lst) (let ((x119810 (prim car lst))) x119810))
  (define (cdr lst) (let ((x119811 (prim cdr lst))) x119811))
  (define (even? x)
    (let ((a119812 '0))
      (let ((a119813 '2))
        (let ((a119814 (modulo x a119813))) (equal? a119812 a119814)))))
  (define (odd? x)
    (let ((a119815 '1))
      (let ((a119816 '2))
        (let ((a119817 (modulo x a119816))) (equal? a119815 a119817)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a119818 (null? lst)))
      (if a119818
        (let ((x119819 '#f)) x119819)
        (let ((a119820 (car lst)))
          (let ((a119821 (equal? a119820 x)))
            (if a119821
              (let ((x119822 '#t)) x119822)
              (let ((a119823 (cdr lst))) (member? x a119823))))))))
  (define (foldl fun acc lst)
    (let ((a119824 (null? lst)))
      (if a119824
        acc
        (let ((a119825 (car lst)))
          (let ((a119826 (fun a119825 acc)))
            (let ((a119827 (cdr lst))) (foldl fun a119826 a119827)))))))
  (define (reverse-helper lst lst2)
    (let ((a119828 (null? lst)))
      (if a119828
        lst2
        (let ((a119829 (cdr lst)))
          (let ((a119830 (car lst)))
            (let ((a119831 (cons a119830 lst2)))
              (reverse-helper a119829 a119831)))))))
  (define (reverse lst) (let ((a119832 (list))) (reverse-helper lst a119832)))
  (define (take-helper lst n lst2)
    (let ((a119833 '0))
      (let ((a119834 (= n a119833)))
        (if a119834
          (let ((x119835 (reverse lst2))) x119835)
          (let ((a119836 (cdr lst)))
            (let ((a119837 '1))
              (let ((a119838 (- n a119837)))
                (let ((a119839 (car lst)))
                  (let ((a119840 (cons a119839 lst2)))
                    (take-helper a119836 a119838 a119840))))))))))
  (define (take lst n) (let ((a119841 (list))) (take-helper lst n a119841)))
  (define (length lst)
    (let ((a119842 (null? lst)))
      (if a119842
        (let ((x119843 '0)) x119843)
        (let ((a119844 '1))
          (let ((a119845 (cdr lst)))
            (let ((a119846 (length a119845))) (+ a119844 a119846)))))))
  (define (map proc lst)
    (let ((a119847 (null? lst)))
      (if a119847
        (let ((x119848 (list))) x119848)
        (let ((a119849 (car lst)))
          (let ((a119850 (proc a119849)))
            (let ((a119851 (cdr lst)))
              (let ((a119852 (map proc a119851))) (cons a119850 a119852))))))))
  (define (filter op lst)
    (let ((a119853 (null? lst)))
      (if a119853
        (let ((x119854 (list))) x119854)
        (let ((a119855 (car lst)))
          (let ((a119856 (op a119855)))
            (if a119856
              (let ((a119857 (car lst)))
                (let ((a119858 (cdr lst)))
                  (let ((a119859 (filter op a119858)))
                    (cons a119857 a119859))))
              (let ((a119860 (cdr lst))) (filter op a119860))))))))
  (define (drop lst n)
    (let ((a119861 '0))
      (let ((a119862 (= n a119861)))
        (if a119862
          lst
          (let ((a119863 (cdr lst)))
            (let ((a119864 '1))
              (let ((a119865 (- n a119864))) (drop a119863 a119865))))))))
  (define (foldr proc acc lst)
    (let ((a119866 (null? lst)))
      (if a119866
        acc
        (let ((a119867 (car lst)))
          (let ((a119868 (cdr lst)))
            (let ((a119869 (foldr proc acc a119868)))
              (proc a119867 a119869)))))))
  (define (append lst1 lst2)
    (let ((a119870 (null? lst1)))
      (if a119870
        lst2
        (let ((a119871 (car lst1)))
          (let ((a119872 (cdr lst1)))
            (let ((a119873 (append a119872 lst2))) (cons a119871 a119873)))))))
  (define (hash . lst) (let ((x119874 (apply-prim hash lst))) x119874))
  (define (hash-ref h k) (let ((x119875 (prim hash-ref h k))) x119875))
  (define (hash-set h k v) (let ((x119876 (prim hash-set h k v))) x119876))
  (define (hash-has-key? h k)
    (let ((x119877 (prim hash-has-key? h k))) x119877))
  (define (hash-count h) (let ((x119878 (prim hash-count h))) x119878))
  (define (call)
    (let ((a119879 '100))
      (let ((a119880 '90))
        (let ((a119881 '80))
          (let ((a119882 '70))
            (let ((a119883 '60))
              (>= a119879 a119880 a119881 a119882 a119883)))))))
  (define (brouhaha_main) (let ((x119884 (call))) x119884)))
