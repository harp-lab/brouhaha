'((define (+ . lst)
    (let ((kont5588455985 (prim car lst)))
      (let ((lst55986 (prim cdr lst)))
        (let ((x5579355987 (apply-prim + lst55986)))
          (kont5588455985 x5579355987)))))
  (define (- . lst)
    (let ((kont5588655988 (prim car lst)))
      (let ((lst55989 (prim cdr lst)))
        (let ((x5579455990 (apply-prim - lst55989)))
          (kont5588655988 x5579455990)))))
  (define (* . lst)
    (let ((kont5588855991 (prim car lst)))
      (let ((lst55992 (prim cdr lst)))
        (let ((x5579555993 (apply-prim * lst55992)))
          (kont5588855991 x5579555993)))))
  (define (modulo kont55890 a b)
    (let ((x5579655994 (prim modulo a b))) (kont55890 x5579655994)))
  (define (/ . lst)
    (let ((kont5589155995 (prim car lst)))
      (let ((lst55996 (prim cdr lst)))
        (let ((x5579755997 (apply-prim / lst55996)))
          (kont5589155995 x5579755997)))))
  (define (= . lst)
    (let ((kont5589355998 (prim car lst)))
      (let ((lst55999 (prim cdr lst)))
        (let ((x5579856000 (apply-prim = lst55999)))
          (kont5589355998 x5579856000)))))
  (define (> . lst)
    (let ((kont5589556001 (prim car lst)))
      (let ((lst56002 (prim cdr lst)))
        (let ((x5579956003 (apply-prim > lst56002)))
          (kont5589556001 x5579956003)))))
  (define (< . lst)
    (let ((kont5589756004 (prim car lst)))
      (let ((lst56005 (prim cdr lst)))
        (let ((x5580056006 (apply-prim < lst56005)))
          (kont5589756004 x5580056006)))))
  (define (<= . lst)
    (let ((kont5589956007 (prim car lst)))
      (let ((lst56008 (prim cdr lst)))
        (let ((x5580156009 (apply-prim <= lst56008)))
          (kont5589956007 x5580156009)))))
  (define (>= . lst)
    (let ((kont5590156010 (prim car lst)))
      (let ((lst56011 (prim cdr lst)))
        (let ((x5580256012 (apply-prim >= lst56011)))
          (kont5590156010 x5580256012)))))
  (define (null? kont55903 x)
    (let ((x5580356013 (prim null? x))) (kont55903 x5580356013)))
  (define (equal? kont55904 x y)
    (let ((x5580456014 (prim equal? x y))) (kont55904 x5580456014)))
  (define (eq? kont55905 x y)
    (let ((x5580556015 (prim eq? x y))) (kont55905 x5580556015)))
  (define (cons kont55906 a b)
    (let ((x5580656016 (prim cons a b))) (kont55906 x5580656016)))
  (define (car kont55907 lst)
    (let ((x5580756017 (prim car lst))) (kont55907 x5580756017)))
  (define (cdr kont55908 lst)
    (let ((x5580856018 (prim cdr lst))) (kont55908 x5580856018)))
  (define (even? kont55909 x)
    (let ((a5580956019 '0))
      (let ((a5581056020 '2))
        (let ((f5591056021
               (lambda (a5581156022)
                 (equal? kont55909 a5580956019 a5581156022))))
          (modulo f5591056021 x a5581056020)))))
  (define (odd? kont55911 x)
    (let ((a5581256023 '1))
      (let ((a5581356024 '2))
        (let ((f5591256025
               (lambda (a5581456026)
                 (equal? kont55911 a5581256023 a5581456026))))
          (modulo f5591256025 x a5581356024)))))
  (define (list . x)
    (let ((kont5591356027 (prim car x)))
      (let ((x56028 (prim cdr x))) (kont5591356027 x56028))))
  (define (member? kont55915 x lst)
    (let ((f5591956029
           (lambda (a5581556030)
             (if a5581556030
               (let ((x5581656031 '#f)) (kont55915 x5581656031))
               (let ((f5591856032
                      (lambda (a5581756033)
                        (let ((f5591756034
                               (lambda (a5581856035)
                                 (if a5581856035
                                   (let ((x5581956036 '#t))
                                     (kont55915 x5581956036))
                                   (let ((f5591656037
                                          (lambda (a5582056038)
                                            (member?
                                             kont55915
                                             x
                                             a5582056038))))
                                     (cdr f5591656037 lst))))))
                          (equal? f5591756034 a5581756033 x)))))
                 (car f5591856032 lst))))))
      (null? f5591956029 lst)))
  (define (foldl kont55920 fun acc lst)
    (let ((f5592456039
           (lambda (a5582156040)
             (if a5582156040
               (kont55920 acc)
               (let ((f5592356041
                      (lambda (a5582256042)
                        (let ((f5592256043
                               (lambda (a5582356044)
                                 (let ((f5592156045
                                        (lambda (a5582456046)
                                          (foldl
                                           kont55920
                                           fun
                                           a5582356044
                                           a5582456046))))
                                   (cdr f5592156045 lst)))))
                          (fun f5592256043 a5582256042 acc)))))
                 (car f5592356041 lst))))))
      (null? f5592456039 lst)))
  (define (reverse-helper kont55925 lst lst2)
    (let ((f5592956047
           (lambda (a5582556048)
             (if a5582556048
               (kont55925 lst2)
               (let ((f5592856049
                      (lambda (a5582656050)
                        (let ((f5592756051
                               (lambda (a5582756052)
                                 (let ((f5592656053
                                        (lambda (a5582856054)
                                          (reverse-helper
                                           kont55925
                                           a5582656050
                                           a5582856054))))
                                   (cons f5592656053 a5582756052 lst2)))))
                          (car f5592756051 lst)))))
                 (cdr f5592856049 lst))))))
      (null? f5592956047 lst)))
  (define (reverse kont55930 lst)
    (let ((f5593156055
           (lambda (a5582956056) (reverse-helper kont55930 lst a5582956056))))
      (list f5593156055)))
  (define (take-helper kont55932 lst n lst2)
    (let ((a5583056057 '0))
      (let ((f5593856058
             (lambda (a5583156059)
               (if a5583156059
                 (let ((f5593356060
                        (lambda (x5583256061) (kont55932 x5583256061))))
                   (reverse f5593356060 lst2))
                 (let ((f5593756062
                        (lambda (a5583356063)
                          (let ((a5583456064 '1))
                            (let ((f5593656065
                                   (lambda (a5583556066)
                                     (let ((f5593556067
                                            (lambda (a5583656068)
                                              (let ((f5593456069
                                                     (lambda (a5583756070)
                                                       (take-helper
                                                        kont55932
                                                        a5583356063
                                                        a5583556066
                                                        a5583756070))))
                                                (cons
                                                 f5593456069
                                                 a5583656068
                                                 lst2)))))
                                       (car f5593556067 lst)))))
                              (- f5593656065 n a5583456064))))))
                   (cdr f5593756062 lst))))))
        (= f5593856058 n a5583056057))))
  (define (take kont55939 lst n)
    (let ((f5594056071
           (lambda (a5583856072) (take-helper kont55939 lst n a5583856072))))
      (list f5594056071)))
  (define (length kont55941 lst)
    (let ((f5594456073
           (lambda (a5583956074)
             (if a5583956074
               (let ((x5584056075 '0)) (kont55941 x5584056075))
               (let ((a5584156076 '1))
                 (let ((f5594356077
                        (lambda (a5584256078)
                          (let ((f5594256079
                                 (lambda (a5584356080)
                                   (+ kont55941 a5584156076 a5584356080))))
                            (length f5594256079 a5584256078)))))
                   (cdr f5594356077 lst)))))))
      (null? f5594456073 lst)))
  (define (map kont55945 proc lst)
    (let ((f5595156081
           (lambda (a5584456082)
             (if a5584456082
               (let ((f5594656083
                      (lambda (x5584556084) (kont55945 x5584556084))))
                 (list f5594656083))
               (let ((f5595056085
                      (lambda (a5584656086)
                        (let ((f5594956087
                               (lambda (a5584756088)
                                 (let ((f5594856089
                                        (lambda (a5584856090)
                                          (let ((f5594756091
                                                 (lambda (a5584956092)
                                                   (cons
                                                    kont55945
                                                    a5584756088
                                                    a5584956092))))
                                            (map
                                             f5594756091
                                             proc
                                             a5584856090)))))
                                   (cdr f5594856089 lst)))))
                          (proc f5594956087 a5584656086)))))
                 (car f5595056085 lst))))))
      (null? f5595156081 lst)))
  (define (filter kont55952 op lst)
    (let ((f5596056093
           (lambda (a5585056094)
             (if a5585056094
               (let ((f5595356095
                      (lambda (x5585156096) (kont55952 x5585156096))))
                 (list f5595356095))
               (let ((f5595956097
                      (lambda (a5585256098)
                        (let ((f5595856099
                               (lambda (a5585356100)
                                 (if a5585356100
                                   (let ((f5595656101
                                          (lambda (a5585456102)
                                            (let ((f5595556103
                                                   (lambda (a5585556104)
                                                     (let ((f5595456105
                                                            (lambda (a5585656106)
                                                              (cons
                                                               kont55952
                                                               a5585456102
                                                               a5585656106))))
                                                       (filter
                                                        f5595456105
                                                        op
                                                        a5585556104)))))
                                              (cdr f5595556103 lst)))))
                                     (car f5595656101 lst))
                                   (let ((f5595756107
                                          (lambda (a5585756108)
                                            (filter
                                             kont55952
                                             op
                                             a5585756108))))
                                     (cdr f5595756107 lst))))))
                          (op f5595856099 a5585256098)))))
                 (car f5595956097 lst))))))
      (null? f5596056093 lst)))
  (define (drop kont55961 lst n)
    (let ((a5585856109 '0))
      (let ((f5596456110
             (lambda (a5585956111)
               (if a5585956111
                 (kont55961 lst)
                 (let ((f5596356112
                        (lambda (a5586056113)
                          (let ((a5586156114 '1))
                            (let ((f5596256115
                                   (lambda (a5586256116)
                                     (drop
                                      kont55961
                                      a5586056113
                                      a5586256116))))
                              (- f5596256115 n a5586156114))))))
                   (cdr f5596356112 lst))))))
        (= f5596456110 n a5585856109))))
  (define (foldr kont55965 proc acc lst)
    (let ((f5596956117
           (lambda (a5586356118)
             (if a5586356118
               (kont55965 acc)
               (let ((f5596856119
                      (lambda (a5586456120)
                        (let ((f5596756121
                               (lambda (a5586556122)
                                 (let ((f5596656123
                                        (lambda (a5586656124)
                                          (proc
                                           kont55965
                                           a5586456120
                                           a5586656124))))
                                   (foldr f5596656123 proc acc a5586556122)))))
                          (cdr f5596756121 lst)))))
                 (car f5596856119 lst))))))
      (null? f5596956117 lst)))
  (define (append kont55970 lst1 lst2)
    (let ((f5597456125
           (lambda (a5586756126)
             (if a5586756126
               (kont55970 lst2)
               (let ((f5597356127
                      (lambda (a5586856128)
                        (let ((f5597256129
                               (lambda (a5586956130)
                                 (let ((f5597156131
                                        (lambda (a5587056132)
                                          (cons
                                           kont55970
                                           a5586856128
                                           a5587056132))))
                                   (append f5597156131 a5586956130 lst2)))))
                          (cdr f5597256129 lst1)))))
                 (car f5597356127 lst1))))))
      (null? f5597456125 lst1)))
  (define (hash . lst)
    (let ((kont5597556133 (prim car lst)))
      (let ((lst56134 (prim cdr lst)))
        (let ((x5587156135 (apply-prim hash lst56134)))
          (kont5597556133 x5587156135)))))
  (define (hash-ref kont55977 h k)
    (let ((x5587256136 (prim hash-ref h k))) (kont55977 x5587256136)))
  (define (hash-set kont55978 h k v)
    (let ((x5587356137 (prim hash-set h k v))) (kont55978 x5587356137)))
  (define (hash-has-key? kont55979 h k)
    (let ((x5587456138 (prim hash-has-key? h k))) (kont55979 x5587456138)))
  (define (hash-count kont55980 h)
    (let ((x5587556139 (prim hash-count h))) (kont55980 x5587556139)))
  (define (call kont55981)
    (let ((a5587656140 '100))
      (let ((a5587756141 '80))
        (let ((a5587856142 '10))
          (let ((a5587956143 '2))
            (let ((a5588056144 '25))
              (let ((a5588156145 '30))
                (let ((f5598256146
                       (lambda (a5588256147)
                         (hash-count kont55981 a5588256147))))
                  (hash
                   f5598256146
                   a5587656140
                   a5587756141
                   a5587856142
                   a5587956143
                   a5588056144
                   a5588156145)))))))))
  (define (brouhaha_main kont55983)
    (let ((f5598456148 (lambda (x5588356149) (kont55983 x5588356149))))
      (call f5598456148))))
