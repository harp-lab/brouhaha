'((define (+ . lst) (let ((x55793 (apply-prim + lst))) x55793))
  (define (- . lst) (let ((x55794 (apply-prim - lst))) x55794))
  (define (* . lst) (let ((x55795 (apply-prim * lst))) x55795))
  (define (modulo a b) (let ((x55796 (prim modulo a b))) x55796))
  (define (/ . lst) (let ((x55797 (apply-prim / lst))) x55797))
  (define (= . lst) (let ((x55798 (apply-prim = lst))) x55798))
  (define (> . lst) (let ((x55799 (apply-prim > lst))) x55799))
  (define (< . lst) (let ((x55800 (apply-prim < lst))) x55800))
  (define (<= . lst) (let ((x55801 (apply-prim <= lst))) x55801))
  (define (>= . lst) (let ((x55802 (apply-prim >= lst))) x55802))
  (define (null? x) (let ((x55803 (prim null? x))) x55803))
  (define (equal? x y) (let ((x55804 (prim equal? x y))) x55804))
  (define (eq? x y) (let ((x55805 (prim eq? x y))) x55805))
  (define (cons a b) (let ((x55806 (prim cons a b))) x55806))
  (define (car lst) (let ((x55807 (prim car lst))) x55807))
  (define (cdr lst) (let ((x55808 (prim cdr lst))) x55808))
  (define (even? x)
    (let ((a55809 '0))
      (let ((a55810 '2))
        (let ((a55811 (modulo x a55810))) (equal? a55809 a55811)))))
  (define (odd? x)
    (let ((a55812 '1))
      (let ((a55813 '2))
        (let ((a55814 (modulo x a55813))) (equal? a55812 a55814)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a55815 (null? lst)))
      (if a55815
        (let ((x55816 '#f)) x55816)
        (let ((a55817 (car lst)))
          (let ((a55818 (equal? a55817 x)))
            (if a55818
              (let ((x55819 '#t)) x55819)
              (let ((a55820 (cdr lst))) (member? x a55820))))))))
  (define (foldl fun acc lst)
    (let ((a55821 (null? lst)))
      (if a55821
        acc
        (let ((a55822 (car lst)))
          (let ((a55823 (fun a55822 acc)))
            (let ((a55824 (cdr lst))) (foldl fun a55823 a55824)))))))
  (define (reverse-helper lst lst2)
    (let ((a55825 (null? lst)))
      (if a55825
        lst2
        (let ((a55826 (cdr lst)))
          (let ((a55827 (car lst)))
            (let ((a55828 (cons a55827 lst2)))
              (reverse-helper a55826 a55828)))))))
  (define (reverse lst) (let ((a55829 (list))) (reverse-helper lst a55829)))
  (define (take-helper lst n lst2)
    (let ((a55830 '0))
      (let ((a55831 (= n a55830)))
        (if a55831
          (let ((x55832 (reverse lst2))) x55832)
          (let ((a55833 (cdr lst)))
            (let ((a55834 '1))
              (let ((a55835 (- n a55834)))
                (let ((a55836 (car lst)))
                  (let ((a55837 (cons a55836 lst2)))
                    (take-helper a55833 a55835 a55837))))))))))
  (define (take lst n) (let ((a55838 (list))) (take-helper lst n a55838)))
  (define (length lst)
    (let ((a55839 (null? lst)))
      (if a55839
        (let ((x55840 '0)) x55840)
        (let ((a55841 '1))
          (let ((a55842 (cdr lst)))
            (let ((a55843 (length a55842))) (+ a55841 a55843)))))))
  (define (map proc lst)
    (let ((a55844 (null? lst)))
      (if a55844
        (let ((x55845 (list))) x55845)
        (let ((a55846 (car lst)))
          (let ((a55847 (proc a55846)))
            (let ((a55848 (cdr lst)))
              (let ((a55849 (map proc a55848))) (cons a55847 a55849))))))))
  (define (filter op lst)
    (let ((a55850 (null? lst)))
      (if a55850
        (let ((x55851 (list))) x55851)
        (let ((a55852 (car lst)))
          (let ((a55853 (op a55852)))
            (if a55853
              (let ((a55854 (car lst)))
                (let ((a55855 (cdr lst)))
                  (let ((a55856 (filter op a55855))) (cons a55854 a55856))))
              (let ((a55857 (cdr lst))) (filter op a55857))))))))
  (define (drop lst n)
    (let ((a55858 '0))
      (let ((a55859 (= n a55858)))
        (if a55859
          lst
          (let ((a55860 (cdr lst)))
            (let ((a55861 '1))
              (let ((a55862 (- n a55861))) (drop a55860 a55862))))))))
  (define (foldr proc acc lst)
    (let ((a55863 (null? lst)))
      (if a55863
        acc
        (let ((a55864 (car lst)))
          (let ((a55865 (cdr lst)))
            (let ((a55866 (foldr proc acc a55865))) (proc a55864 a55866)))))))
  (define (append lst1 lst2)
    (let ((a55867 (null? lst1)))
      (if a55867
        lst2
        (let ((a55868 (car lst1)))
          (let ((a55869 (cdr lst1)))
            (let ((a55870 (append a55869 lst2))) (cons a55868 a55870)))))))
  (define (hash . lst) (let ((x55871 (apply-prim hash lst))) x55871))
  (define (hash-ref h k) (let ((x55872 (prim hash-ref h k))) x55872))
  (define (hash-set h k v) (let ((x55873 (prim hash-set h k v))) x55873))
  (define (hash-has-key? h k) (let ((x55874 (prim hash-has-key? h k))) x55874))
  (define (hash-count h) (let ((x55875 (prim hash-count h))) x55875))
  (define (call)
    (let ((a55876 '100))
      (let ((a55877 '80))
        (let ((a55878 '10))
          (let ((a55879 '2))
            (let ((a55880 '25))
              (let ((a55881 '30))
                (let ((a55882
                       (hash a55876 a55877 a55878 a55879 a55880 a55881)))
                  (hash-count a55882)))))))))
  (define (brouhaha_main) (let ((x55883 (call))) x55883)))
