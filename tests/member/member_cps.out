'((define (+ . lst)
    (let ((kont8267682777 (prim car lst)))
      (let ((lst82778 (prim cdr lst)))
        (let ((x8258482779 (apply-prim + lst82778)))
          (kont8267682777 x8258482779)))))
  (define (- . lst)
    (let ((kont8267882780 (prim car lst)))
      (let ((lst82781 (prim cdr lst)))
        (let ((x8258582782 (apply-prim - lst82781)))
          (kont8267882780 x8258582782)))))
  (define (* . lst)
    (let ((kont8268082783 (prim car lst)))
      (let ((lst82784 (prim cdr lst)))
        (let ((x8258682785 (apply-prim * lst82784)))
          (kont8268082783 x8258682785)))))
  (define (modulo kont82682 a b)
    (let ((x8258782786 (prim modulo a b))) (kont82682 x8258782786)))
  (define (/ . lst)
    (let ((kont8268382787 (prim car lst)))
      (let ((lst82788 (prim cdr lst)))
        (let ((x8258882789 (apply-prim / lst82788)))
          (kont8268382787 x8258882789)))))
  (define (= . lst)
    (let ((kont8268582790 (prim car lst)))
      (let ((lst82791 (prim cdr lst)))
        (let ((x8258982792 (apply-prim = lst82791)))
          (kont8268582790 x8258982792)))))
  (define (> . lst)
    (let ((kont8268782793 (prim car lst)))
      (let ((lst82794 (prim cdr lst)))
        (let ((x8259082795 (apply-prim > lst82794)))
          (kont8268782793 x8259082795)))))
  (define (< . lst)
    (let ((kont8268982796 (prim car lst)))
      (let ((lst82797 (prim cdr lst)))
        (let ((x8259182798 (apply-prim < lst82797)))
          (kont8268982796 x8259182798)))))
  (define (<= . lst)
    (let ((kont8269182799 (prim car lst)))
      (let ((lst82800 (prim cdr lst)))
        (let ((x8259282801 (apply-prim <= lst82800)))
          (kont8269182799 x8259282801)))))
  (define (>= . lst)
    (let ((kont8269382802 (prim car lst)))
      (let ((lst82803 (prim cdr lst)))
        (let ((x8259382804 (apply-prim >= lst82803)))
          (kont8269382802 x8259382804)))))
  (define (null? kont82695 x)
    (let ((x8259482805 (prim null? x))) (kont82695 x8259482805)))
  (define (equal? kont82696 x y)
    (let ((x8259582806 (prim equal? x y))) (kont82696 x8259582806)))
  (define (eq? kont82697 x y)
    (let ((x8259682807 (prim eq? x y))) (kont82697 x8259682807)))
  (define (cons kont82698 a b)
    (let ((x8259782808 (prim cons a b))) (kont82698 x8259782808)))
  (define (car kont82699 lst)
    (let ((x8259882809 (prim car lst))) (kont82699 x8259882809)))
  (define (cdr kont82700 lst)
    (let ((x8259982810 (prim cdr lst))) (kont82700 x8259982810)))
  (define (even? kont82701 x)
    (let ((a8260082811 '0))
      (let ((a8260182812 '2))
        (let ((f8270282813
               (lambda (a8260282814)
                 (equal? kont82701 a8260082811 a8260282814))))
          (modulo f8270282813 x a8260182812)))))
  (define (odd? kont82703 x)
    (let ((a8260382815 '1))
      (let ((a8260482816 '2))
        (let ((f8270482817
               (lambda (a8260582818)
                 (equal? kont82703 a8260382815 a8260582818))))
          (modulo f8270482817 x a8260482816)))))
  (define (list . x)
    (let ((kont8270582819 (prim car x)))
      (let ((x82820 (prim cdr x))) (kont8270582819 x82820))))
  (define (member? kont82707 x lst)
    (let ((f8271182821
           (lambda (a8260682822)
             (if a8260682822
               (let ((x8260782823 '#f)) (kont82707 x8260782823))
               (let ((f8271082824
                      (lambda (a8260882825)
                        (let ((f8270982826
                               (lambda (a8260982827)
                                 (if a8260982827
                                   (let ((x8261082828 '#t))
                                     (kont82707 x8261082828))
                                   (let ((f8270882829
                                          (lambda (a8261182830)
                                            (member?
                                             kont82707
                                             x
                                             a8261182830))))
                                     (cdr f8270882829 lst))))))
                          (equal? f8270982826 a8260882825 x)))))
                 (car f8271082824 lst))))))
      (null? f8271182821 lst)))
  (define (foldl kont82712 fun acc lst)
    (let ((f8271682831
           (lambda (a8261282832)
             (if a8261282832
               (kont82712 acc)
               (let ((f8271582833
                      (lambda (a8261382834)
                        (let ((f8271482835
                               (lambda (a8261482836)
                                 (let ((f8271382837
                                        (lambda (a8261582838)
                                          (foldl
                                           kont82712
                                           fun
                                           a8261482836
                                           a8261582838))))
                                   (cdr f8271382837 lst)))))
                          (fun f8271482835 a8261382834 acc)))))
                 (car f8271582833 lst))))))
      (null? f8271682831 lst)))
  (define (reverse-helper kont82717 lst lst2)
    (let ((f8272182839
           (lambda (a8261682840)
             (if a8261682840
               (kont82717 lst2)
               (let ((f8272082841
                      (lambda (a8261782842)
                        (let ((f8271982843
                               (lambda (a8261882844)
                                 (let ((f8271882845
                                        (lambda (a8261982846)
                                          (reverse-helper
                                           kont82717
                                           a8261782842
                                           a8261982846))))
                                   (cons f8271882845 a8261882844 lst2)))))
                          (car f8271982843 lst)))))
                 (cdr f8272082841 lst))))))
      (null? f8272182839 lst)))
  (define (reverse kont82722 lst)
    (let ((f8272382847
           (lambda (a8262082848) (reverse-helper kont82722 lst a8262082848))))
      (list f8272382847)))
  (define (take-helper kont82724 lst n lst2)
    (let ((a8262182849 '0))
      (let ((f8273082850
             (lambda (a8262282851)
               (if a8262282851
                 (let ((f8272582852
                        (lambda (x8262382853) (kont82724 x8262382853))))
                   (reverse f8272582852 lst2))
                 (let ((f8272982854
                        (lambda (a8262482855)
                          (let ((a8262582856 '1))
                            (let ((f8272882857
                                   (lambda (a8262682858)
                                     (let ((f8272782859
                                            (lambda (a8262782860)
                                              (let ((f8272682861
                                                     (lambda (a8262882862)
                                                       (take-helper
                                                        kont82724
                                                        a8262482855
                                                        a8262682858
                                                        a8262882862))))
                                                (cons
                                                 f8272682861
                                                 a8262782860
                                                 lst2)))))
                                       (car f8272782859 lst)))))
                              (- f8272882857 n a8262582856))))))
                   (cdr f8272982854 lst))))))
        (= f8273082850 n a8262182849))))
  (define (take kont82731 lst n)
    (let ((f8273282863
           (lambda (a8262982864) (take-helper kont82731 lst n a8262982864))))
      (list f8273282863)))
  (define (length kont82733 lst)
    (let ((f8273682865
           (lambda (a8263082866)
             (if a8263082866
               (let ((x8263182867 '0)) (kont82733 x8263182867))
               (let ((a8263282868 '1))
                 (let ((f8273582869
                        (lambda (a8263382870)
                          (let ((f8273482871
                                 (lambda (a8263482872)
                                   (+ kont82733 a8263282868 a8263482872))))
                            (length f8273482871 a8263382870)))))
                   (cdr f8273582869 lst)))))))
      (null? f8273682865 lst)))
  (define (map kont82737 proc lst)
    (let ((f8274382873
           (lambda (a8263582874)
             (if a8263582874
               (let ((f8273882875
                      (lambda (x8263682876) (kont82737 x8263682876))))
                 (list f8273882875))
               (let ((f8274282877
                      (lambda (a8263782878)
                        (let ((f8274182879
                               (lambda (a8263882880)
                                 (let ((f8274082881
                                        (lambda (a8263982882)
                                          (let ((f8273982883
                                                 (lambda (a8264082884)
                                                   (cons
                                                    kont82737
                                                    a8263882880
                                                    a8264082884))))
                                            (map
                                             f8273982883
                                             proc
                                             a8263982882)))))
                                   (cdr f8274082881 lst)))))
                          (proc f8274182879 a8263782878)))))
                 (car f8274282877 lst))))))
      (null? f8274382873 lst)))
  (define (filter kont82744 op lst)
    (let ((f8275282885
           (lambda (a8264182886)
             (if a8264182886
               (let ((f8274582887
                      (lambda (x8264282888) (kont82744 x8264282888))))
                 (list f8274582887))
               (let ((f8275182889
                      (lambda (a8264382890)
                        (let ((f8275082891
                               (lambda (a8264482892)
                                 (if a8264482892
                                   (let ((f8274882893
                                          (lambda (a8264582894)
                                            (let ((f8274782895
                                                   (lambda (a8264682896)
                                                     (let ((f8274682897
                                                            (lambda (a8264782898)
                                                              (cons
                                                               kont82744
                                                               a8264582894
                                                               a8264782898))))
                                                       (filter
                                                        f8274682897
                                                        op
                                                        a8264682896)))))
                                              (cdr f8274782895 lst)))))
                                     (car f8274882893 lst))
                                   (let ((f8274982899
                                          (lambda (a8264882900)
                                            (filter
                                             kont82744
                                             op
                                             a8264882900))))
                                     (cdr f8274982899 lst))))))
                          (op f8275082891 a8264382890)))))
                 (car f8275182889 lst))))))
      (null? f8275282885 lst)))
  (define (drop kont82753 lst n)
    (let ((a8264982901 '0))
      (let ((f8275682902
             (lambda (a8265082903)
               (if a8265082903
                 (kont82753 lst)
                 (let ((f8275582904
                        (lambda (a8265182905)
                          (let ((a8265282906 '1))
                            (let ((f8275482907
                                   (lambda (a8265382908)
                                     (drop
                                      kont82753
                                      a8265182905
                                      a8265382908))))
                              (- f8275482907 n a8265282906))))))
                   (cdr f8275582904 lst))))))
        (= f8275682902 n a8264982901))))
  (define (foldr kont82757 proc acc lst)
    (let ((f8276182909
           (lambda (a8265482910)
             (if a8265482910
               (kont82757 acc)
               (let ((f8276082911
                      (lambda (a8265582912)
                        (let ((f8275982913
                               (lambda (a8265682914)
                                 (let ((f8275882915
                                        (lambda (a8265782916)
                                          (proc
                                           kont82757
                                           a8265582912
                                           a8265782916))))
                                   (foldr f8275882915 proc acc a8265682914)))))
                          (cdr f8275982913 lst)))))
                 (car f8276082911 lst))))))
      (null? f8276182909 lst)))
  (define (append kont82762 lst1 lst2)
    (let ((f8276682917
           (lambda (a8265882918)
             (if a8265882918
               (kont82762 lst2)
               (let ((f8276582919
                      (lambda (a8265982920)
                        (let ((f8276482921
                               (lambda (a8266082922)
                                 (let ((f8276382923
                                        (lambda (a8266182924)
                                          (cons
                                           kont82762
                                           a8265982920
                                           a8266182924))))
                                   (append f8276382923 a8266082922 lst2)))))
                          (cdr f8276482921 lst1)))))
                 (car f8276582919 lst1))))))
      (null? f8276682917 lst1)))
  (define (hash . lst)
    (let ((kont8276782925 (prim car lst)))
      (let ((lst82926 (prim cdr lst)))
        (let ((x8266282927 (apply-prim hash lst82926)))
          (kont8276782925 x8266282927)))))
  (define (hash-ref kont82769 h k)
    (let ((x8266382928 (prim hash-ref h k))) (kont82769 x8266382928)))
  (define (hash-set kont82770 h k v)
    (let ((x8266482929 (prim hash-set h k v))) (kont82770 x8266482929)))
  (define (hash-has-key? kont82771 h k)
    (let ((x8266582930 (prim hash-has-key? h k))) (kont82771 x8266582930)))
  (define (hash-count kont82772 h)
    (let ((x8266682931 (prim hash-count h))) (kont82772 x8266682931)))
  (define (call kont82773 op lst)
    (let ((f8277482932
           (lambda (a8266782933)
             (if a8266782933
               (let ((x8266882934 '1)) (kont82773 x8266882934))
               (let ((x8266982935 '2)) (kont82773 x8266982935))))))
      (member? f8277482932 op lst)))
  (define (brouhaha_main kont82775)
    (let ((a8267082936 '1))
      (let ((a8267182937 '1))
        (let ((a8267282938 '2))
          (let ((a8267382939 '3))
            (let ((a8267482940 '4))
              (let ((f8277682941
                     (lambda (a8267582942)
                       (call kont82775 a8267082936 a8267582942))))
                (list
                 f8277682941
                 a8267182937
                 a8267282938
                 a8267382939
                 a8267482940)))))))))
