'((define (+ . lst) (let ((x82584 (apply-prim + lst))) x82584))
  (define (- . lst) (let ((x82585 (apply-prim - lst))) x82585))
  (define (* . lst) (let ((x82586 (apply-prim * lst))) x82586))
  (define (modulo a b) (let ((x82587 (prim modulo a b))) x82587))
  (define (/ . lst) (let ((x82588 (apply-prim / lst))) x82588))
  (define (= . lst) (let ((x82589 (apply-prim = lst))) x82589))
  (define (> . lst) (let ((x82590 (apply-prim > lst))) x82590))
  (define (< . lst) (let ((x82591 (apply-prim < lst))) x82591))
  (define (<= . lst) (let ((x82592 (apply-prim <= lst))) x82592))
  (define (>= . lst) (let ((x82593 (apply-prim >= lst))) x82593))
  (define (null? x) (let ((x82594 (prim null? x))) x82594))
  (define (equal? x y) (let ((x82595 (prim equal? x y))) x82595))
  (define (eq? x y) (let ((x82596 (prim eq? x y))) x82596))
  (define (cons a b) (let ((x82597 (prim cons a b))) x82597))
  (define (car lst) (let ((x82598 (prim car lst))) x82598))
  (define (cdr lst) (let ((x82599 (prim cdr lst))) x82599))
  (define (even? x)
    (let ((a82600 '0))
      (let ((a82601 '2))
        (let ((a82602 (modulo x a82601))) (equal? a82600 a82602)))))
  (define (odd? x)
    (let ((a82603 '1))
      (let ((a82604 '2))
        (let ((a82605 (modulo x a82604))) (equal? a82603 a82605)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a82606 (null? lst)))
      (if a82606
        (let ((x82607 '#f)) x82607)
        (let ((a82608 (car lst)))
          (let ((a82609 (equal? a82608 x)))
            (if a82609
              (let ((x82610 '#t)) x82610)
              (let ((a82611 (cdr lst))) (member? x a82611))))))))
  (define (foldl fun acc lst)
    (let ((a82612 (null? lst)))
      (if a82612
        acc
        (let ((a82613 (car lst)))
          (let ((a82614 (fun a82613 acc)))
            (let ((a82615 (cdr lst))) (foldl fun a82614 a82615)))))))
  (define (reverse-helper lst lst2)
    (let ((a82616 (null? lst)))
      (if a82616
        lst2
        (let ((a82617 (cdr lst)))
          (let ((a82618 (car lst)))
            (let ((a82619 (cons a82618 lst2)))
              (reverse-helper a82617 a82619)))))))
  (define (reverse lst) (let ((a82620 (list))) (reverse-helper lst a82620)))
  (define (take-helper lst n lst2)
    (let ((a82621 '0))
      (let ((a82622 (= n a82621)))
        (if a82622
          (let ((x82623 (reverse lst2))) x82623)
          (let ((a82624 (cdr lst)))
            (let ((a82625 '1))
              (let ((a82626 (- n a82625)))
                (let ((a82627 (car lst)))
                  (let ((a82628 (cons a82627 lst2)))
                    (take-helper a82624 a82626 a82628))))))))))
  (define (take lst n) (let ((a82629 (list))) (take-helper lst n a82629)))
  (define (length lst)
    (let ((a82630 (null? lst)))
      (if a82630
        (let ((x82631 '0)) x82631)
        (let ((a82632 '1))
          (let ((a82633 (cdr lst)))
            (let ((a82634 (length a82633))) (+ a82632 a82634)))))))
  (define (map proc lst)
    (let ((a82635 (null? lst)))
      (if a82635
        (let ((x82636 (list))) x82636)
        (let ((a82637 (car lst)))
          (let ((a82638 (proc a82637)))
            (let ((a82639 (cdr lst)))
              (let ((a82640 (map proc a82639))) (cons a82638 a82640))))))))
  (define (filter op lst)
    (let ((a82641 (null? lst)))
      (if a82641
        (let ((x82642 (list))) x82642)
        (let ((a82643 (car lst)))
          (let ((a82644 (op a82643)))
            (if a82644
              (let ((a82645 (car lst)))
                (let ((a82646 (cdr lst)))
                  (let ((a82647 (filter op a82646))) (cons a82645 a82647))))
              (let ((a82648 (cdr lst))) (filter op a82648))))))))
  (define (drop lst n)
    (let ((a82649 '0))
      (let ((a82650 (= n a82649)))
        (if a82650
          lst
          (let ((a82651 (cdr lst)))
            (let ((a82652 '1))
              (let ((a82653 (- n a82652))) (drop a82651 a82653))))))))
  (define (foldr proc acc lst)
    (let ((a82654 (null? lst)))
      (if a82654
        acc
        (let ((a82655 (car lst)))
          (let ((a82656 (cdr lst)))
            (let ((a82657 (foldr proc acc a82656))) (proc a82655 a82657)))))))
  (define (append lst1 lst2)
    (let ((a82658 (null? lst1)))
      (if a82658
        lst2
        (let ((a82659 (car lst1)))
          (let ((a82660 (cdr lst1)))
            (let ((a82661 (append a82660 lst2))) (cons a82659 a82661)))))))
  (define (hash . lst) (let ((x82662 (apply-prim hash lst))) x82662))
  (define (hash-ref h k) (let ((x82663 (prim hash-ref h k))) x82663))
  (define (hash-set h k v) (let ((x82664 (prim hash-set h k v))) x82664))
  (define (hash-has-key? h k) (let ((x82665 (prim hash-has-key? h k))) x82665))
  (define (hash-count h) (let ((x82666 (prim hash-count h))) x82666))
  (define (call op lst)
    (let ((a82667 (member? op lst)))
      (if a82667 (let ((x82668 '1)) x82668) (let ((x82669 '2)) x82669))))
  (define (brouhaha_main)
    (let ((a82670 '1))
      (let ((a82671 '1))
        (let ((a82672 '2))
          (let ((a82673 '3))
            (let ((a82674 '4))
              (let ((a82675 (list a82671 a82672 a82673 a82674)))
                (call a82670 a82675)))))))))
