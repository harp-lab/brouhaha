'((define (+ . lst)
    (let ((kont82676 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82584 (apply-prim + lst))) (kont82676 x82584)))))
  (define (- . lst)
    (let ((kont82678 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82585 (apply-prim - lst))) (kont82678 x82585)))))
  (define (* . lst)
    (let ((kont82680 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82586 (apply-prim * lst))) (kont82680 x82586)))))
  (define (modulo kont82682 a b)
    (let ((x82587 (prim modulo a b))) (kont82682 x82587)))
  (define (/ . lst)
    (let ((kont82683 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82588 (apply-prim / lst))) (kont82683 x82588)))))
  (define (= . lst)
    (let ((kont82685 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82589 (apply-prim = lst))) (kont82685 x82589)))))
  (define (> . lst)
    (let ((kont82687 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82590 (apply-prim > lst))) (kont82687 x82590)))))
  (define (< . lst)
    (let ((kont82689 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82591 (apply-prim < lst))) (kont82689 x82591)))))
  (define (<= . lst)
    (let ((kont82691 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82592 (apply-prim <= lst))) (kont82691 x82592)))))
  (define (>= . lst)
    (let ((kont82693 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82593 (apply-prim >= lst))) (kont82693 x82593)))))
  (define (null? kont82695 x)
    (let ((x82594 (prim null? x))) (kont82695 x82594)))
  (define (equal? kont82696 x y)
    (let ((x82595 (prim equal? x y))) (kont82696 x82595)))
  (define (eq? kont82697 x y)
    (let ((x82596 (prim eq? x y))) (kont82697 x82596)))
  (define (cons kont82698 a b)
    (let ((x82597 (prim cons a b))) (kont82698 x82597)))
  (define (car kont82699 lst)
    (let ((x82598 (prim car lst))) (kont82699 x82598)))
  (define (cdr kont82700 lst)
    (let ((x82599 (prim cdr lst))) (kont82700 x82599)))
  (define (even? kont82701 x)
    (let ((a82600 '0))
      (let ((a82601 '2))
        (let ((f82702 (lambda (a82602) (equal? kont82701 a82600 a82602))))
          (modulo f82702 x a82601)))))
  (define (odd? kont82703 x)
    (let ((a82603 '1))
      (let ((a82604 '2))
        (let ((f82704 (lambda (a82605) (equal? kont82703 a82603 a82605))))
          (modulo f82704 x a82604)))))
  (define (list . x)
    (let ((kont82705 (prim car x))) (let ((x (prim cdr x))) (kont82705 x))))
  (define (member? kont82707 x lst)
    (let ((f82711
           (lambda (a82606)
             (if a82606
               (let ((x82607 '#f)) (kont82707 x82607))
               (let ((f82710
                      (lambda (a82608)
                        (let ((f82709
                               (lambda (a82609)
                                 (if a82609
                                   (let ((x82610 '#t)) (kont82707 x82610))
                                   (let ((f82708
                                          (lambda (a82611)
                                            (member? kont82707 x a82611))))
                                     (cdr f82708 lst))))))
                          (equal? f82709 a82608 x)))))
                 (car f82710 lst))))))
      (null? f82711 lst)))
  (define (foldl kont82712 fun acc lst)
    (let ((f82716
           (lambda (a82612)
             (if a82612
               (kont82712 acc)
               (let ((f82715
                      (lambda (a82613)
                        (let ((f82714
                               (lambda (a82614)
                                 (let ((f82713
                                        (lambda (a82615)
                                          (foldl
                                           kont82712
                                           fun
                                           a82614
                                           a82615))))
                                   (cdr f82713 lst)))))
                          (fun f82714 a82613 acc)))))
                 (car f82715 lst))))))
      (null? f82716 lst)))
  (define (reverse-helper kont82717 lst lst2)
    (let ((f82721
           (lambda (a82616)
             (if a82616
               (kont82717 lst2)
               (let ((f82720
                      (lambda (a82617)
                        (let ((f82719
                               (lambda (a82618)
                                 (let ((f82718
                                        (lambda (a82619)
                                          (reverse-helper
                                           kont82717
                                           a82617
                                           a82619))))
                                   (cons f82718 a82618 lst2)))))
                          (car f82719 lst)))))
                 (cdr f82720 lst))))))
      (null? f82721 lst)))
  (define (reverse kont82722 lst)
    (let ((f82723 (lambda (a82620) (reverse-helper kont82722 lst a82620))))
      (list f82723)))
  (define (take-helper kont82724 lst n lst2)
    (let ((a82621 '0))
      (let ((f82730
             (lambda (a82622)
               (if a82622
                 (let ((f82725 (lambda (x82623) (kont82724 x82623))))
                   (reverse f82725 lst2))
                 (let ((f82729
                        (lambda (a82624)
                          (let ((a82625 '1))
                            (let ((f82728
                                   (lambda (a82626)
                                     (let ((f82727
                                            (lambda (a82627)
                                              (let ((f82726
                                                     (lambda (a82628)
                                                       (take-helper
                                                        kont82724
                                                        a82624
                                                        a82626
                                                        a82628))))
                                                (cons f82726 a82627 lst2)))))
                                       (car f82727 lst)))))
                              (- f82728 n a82625))))))
                   (cdr f82729 lst))))))
        (= f82730 n a82621))))
  (define (take kont82731 lst n)
    (let ((f82732 (lambda (a82629) (take-helper kont82731 lst n a82629))))
      (list f82732)))
  (define (length kont82733 lst)
    (let ((f82736
           (lambda (a82630)
             (if a82630
               (let ((x82631 '0)) (kont82733 x82631))
               (let ((a82632 '1))
                 (let ((f82735
                        (lambda (a82633)
                          (let ((f82734
                                 (lambda (a82634)
                                   (+ kont82733 a82632 a82634))))
                            (length f82734 a82633)))))
                   (cdr f82735 lst)))))))
      (null? f82736 lst)))
  (define (map kont82737 proc lst)
    (let ((f82743
           (lambda (a82635)
             (if a82635
               (let ((f82738 (lambda (x82636) (kont82737 x82636))))
                 (list f82738))
               (let ((f82742
                      (lambda (a82637)
                        (let ((f82741
                               (lambda (a82638)
                                 (let ((f82740
                                        (lambda (a82639)
                                          (let ((f82739
                                                 (lambda (a82640)
                                                   (cons
                                                    kont82737
                                                    a82638
                                                    a82640))))
                                            (map f82739 proc a82639)))))
                                   (cdr f82740 lst)))))
                          (proc f82741 a82637)))))
                 (car f82742 lst))))))
      (null? f82743 lst)))
  (define (filter kont82744 op lst)
    (let ((f82752
           (lambda (a82641)
             (if a82641
               (let ((f82745 (lambda (x82642) (kont82744 x82642))))
                 (list f82745))
               (let ((f82751
                      (lambda (a82643)
                        (let ((f82750
                               (lambda (a82644)
                                 (if a82644
                                   (let ((f82748
                                          (lambda (a82645)
                                            (let ((f82747
                                                   (lambda (a82646)
                                                     (let ((f82746
                                                            (lambda (a82647)
                                                              (cons
                                                               kont82744
                                                               a82645
                                                               a82647))))
                                                       (filter
                                                        f82746
                                                        op
                                                        a82646)))))
                                              (cdr f82747 lst)))))
                                     (car f82748 lst))
                                   (let ((f82749
                                          (lambda (a82648)
                                            (filter kont82744 op a82648))))
                                     (cdr f82749 lst))))))
                          (op f82750 a82643)))))
                 (car f82751 lst))))))
      (null? f82752 lst)))
  (define (drop kont82753 lst n)
    (let ((a82649 '0))
      (let ((f82756
             (lambda (a82650)
               (if a82650
                 (kont82753 lst)
                 (let ((f82755
                        (lambda (a82651)
                          (let ((a82652 '1))
                            (let ((f82754
                                   (lambda (a82653)
                                     (drop kont82753 a82651 a82653))))
                              (- f82754 n a82652))))))
                   (cdr f82755 lst))))))
        (= f82756 n a82649))))
  (define (foldr kont82757 proc acc lst)
    (let ((f82761
           (lambda (a82654)
             (if a82654
               (kont82757 acc)
               (let ((f82760
                      (lambda (a82655)
                        (let ((f82759
                               (lambda (a82656)
                                 (let ((f82758
                                        (lambda (a82657)
                                          (proc kont82757 a82655 a82657))))
                                   (foldr f82758 proc acc a82656)))))
                          (cdr f82759 lst)))))
                 (car f82760 lst))))))
      (null? f82761 lst)))
  (define (append kont82762 lst1 lst2)
    (let ((f82766
           (lambda (a82658)
             (if a82658
               (kont82762 lst2)
               (let ((f82765
                      (lambda (a82659)
                        (let ((f82764
                               (lambda (a82660)
                                 (let ((f82763
                                        (lambda (a82661)
                                          (cons kont82762 a82659 a82661))))
                                   (append f82763 a82660 lst2)))))
                          (cdr f82764 lst1)))))
                 (car f82765 lst1))))))
      (null? f82766 lst1)))
  (define (hash . lst)
    (let ((kont82767 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x82662 (apply-prim hash lst))) (kont82767 x82662)))))
  (define (hash-ref kont82769 h k)
    (let ((x82663 (prim hash-ref h k))) (kont82769 x82663)))
  (define (hash-set kont82770 h k v)
    (let ((x82664 (prim hash-set h k v))) (kont82770 x82664)))
  (define (hash-has-key? kont82771 h k)
    (let ((x82665 (prim hash-has-key? h k))) (kont82771 x82665)))
  (define (hash-count kont82772 h)
    (let ((x82666 (prim hash-count h))) (kont82772 x82666)))
  (define (call kont82773 op lst)
    (let ((f82774
           (lambda (a82667)
             (if a82667
               (let ((x82668 '1)) (kont82773 x82668))
               (let ((x82669 '2)) (kont82773 x82669))))))
      (member? f82774 op lst)))
  (define (brouhaha_main kont82775)
    (let ((a82670 '1))
      (let ((a82671 '1))
        (let ((a82672 '2))
          (let ((a82673 '3))
            (let ((a82674 '4))
              (let ((f82776 (lambda (a82675) (call kont82775 a82670 a82675))))
                (list f82776 a82671 a82672 a82673 a82674)))))))))
