'((define (+ . lst)
    (let ((kont78645 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78553 (apply-prim + lst))) (kont78645 x78553)))))
  (define (- . lst)
    (let ((kont78647 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78554 (apply-prim - lst))) (kont78647 x78554)))))
  (define (* . lst)
    (let ((kont78649 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78555 (apply-prim * lst))) (kont78649 x78555)))))
  (define (modulo kont78651 a b)
    (let ((x78556 (prim modulo a b))) (kont78651 x78556)))
  (define (/ . lst)
    (let ((kont78652 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78557 (apply-prim / lst))) (kont78652 x78557)))))
  (define (= . lst)
    (let ((kont78654 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78558 (apply-prim = lst))) (kont78654 x78558)))))
  (define (> . lst)
    (let ((kont78656 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78559 (apply-prim > lst))) (kont78656 x78559)))))
  (define (< . lst)
    (let ((kont78658 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78560 (apply-prim < lst))) (kont78658 x78560)))))
  (define (<= . lst)
    (let ((kont78660 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78561 (apply-prim <= lst))) (kont78660 x78561)))))
  (define (>= . lst)
    (let ((kont78662 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78562 (apply-prim >= lst))) (kont78662 x78562)))))
  (define (null? kont78664 x)
    (let ((x78563 (prim null? x))) (kont78664 x78563)))
  (define (equal? kont78665 x y)
    (let ((x78564 (prim equal? x y))) (kont78665 x78564)))
  (define (eq? kont78666 x y)
    (let ((x78565 (prim eq? x y))) (kont78666 x78565)))
  (define (cons kont78667 a b)
    (let ((x78566 (prim cons a b))) (kont78667 x78566)))
  (define (car kont78668 lst)
    (let ((x78567 (prim car lst))) (kont78668 x78567)))
  (define (cdr kont78669 lst)
    (let ((x78568 (prim cdr lst))) (kont78669 x78568)))
  (define (even? kont78670 x)
    (let ((a78569 '0))
      (let ((a78570 '2))
        (let ((f78671 (lambda (a78571) (equal? kont78670 a78569 a78571))))
          (modulo f78671 x a78570)))))
  (define (odd? kont78672 x)
    (let ((a78572 '1))
      (let ((a78573 '2))
        (let ((f78673 (lambda (a78574) (equal? kont78672 a78572 a78574))))
          (modulo f78673 x a78573)))))
  (define (list . x)
    (let ((kont78674 (prim car x))) (let ((x (prim cdr x))) (kont78674 x))))
  (define (member? kont78676 x lst)
    (let ((f78680
           (lambda (a78575)
             (if a78575
               (let ((x78576 '#f)) (kont78676 x78576))
               (let ((f78679
                      (lambda (a78577)
                        (let ((f78678
                               (lambda (a78578)
                                 (if a78578
                                   (let ((x78579 '#t)) (kont78676 x78579))
                                   (let ((f78677
                                          (lambda (a78580)
                                            (member? kont78676 x a78580))))
                                     (cdr f78677 lst))))))
                          (equal? f78678 a78577 x)))))
                 (car f78679 lst))))))
      (null? f78680 lst)))
  (define (foldl kont78681 fun acc lst)
    (let ((f78685
           (lambda (a78581)
             (if a78581
               (kont78681 acc)
               (let ((f78684
                      (lambda (a78582)
                        (let ((f78683
                               (lambda (a78583)
                                 (let ((f78682
                                        (lambda (a78584)
                                          (foldl
                                           kont78681
                                           fun
                                           a78583
                                           a78584))))
                                   (cdr f78682 lst)))))
                          (fun f78683 a78582 acc)))))
                 (car f78684 lst))))))
      (null? f78685 lst)))
  (define (reverse-helper kont78686 lst lst2)
    (let ((f78690
           (lambda (a78585)
             (if a78585
               (kont78686 lst2)
               (let ((f78689
                      (lambda (a78586)
                        (let ((f78688
                               (lambda (a78587)
                                 (let ((f78687
                                        (lambda (a78588)
                                          (reverse-helper
                                           kont78686
                                           a78586
                                           a78588))))
                                   (cons f78687 a78587 lst2)))))
                          (car f78688 lst)))))
                 (cdr f78689 lst))))))
      (null? f78690 lst)))
  (define (reverse kont78691 lst)
    (let ((f78692 (lambda (a78589) (reverse-helper kont78691 lst a78589))))
      (list f78692)))
  (define (take-helper kont78693 lst n lst2)
    (let ((a78590 '0))
      (let ((f78699
             (lambda (a78591)
               (if a78591
                 (let ((f78694 (lambda (x78592) (kont78693 x78592))))
                   (reverse f78694 lst2))
                 (let ((f78698
                        (lambda (a78593)
                          (let ((a78594 '1))
                            (let ((f78697
                                   (lambda (a78595)
                                     (let ((f78696
                                            (lambda (a78596)
                                              (let ((f78695
                                                     (lambda (a78597)
                                                       (take-helper
                                                        kont78693
                                                        a78593
                                                        a78595
                                                        a78597))))
                                                (cons f78695 a78596 lst2)))))
                                       (car f78696 lst)))))
                              (- f78697 n a78594))))))
                   (cdr f78698 lst))))))
        (= f78699 n a78590))))
  (define (take kont78700 lst n)
    (let ((f78701 (lambda (a78598) (take-helper kont78700 lst n a78598))))
      (list f78701)))
  (define (length kont78702 lst)
    (let ((f78705
           (lambda (a78599)
             (if a78599
               (let ((x78600 '0)) (kont78702 x78600))
               (let ((a78601 '1))
                 (let ((f78704
                        (lambda (a78602)
                          (let ((f78703
                                 (lambda (a78603)
                                   (+ kont78702 a78601 a78603))))
                            (length f78703 a78602)))))
                   (cdr f78704 lst)))))))
      (null? f78705 lst)))
  (define (map kont78706 proc lst)
    (let ((f78712
           (lambda (a78604)
             (if a78604
               (let ((f78707 (lambda (x78605) (kont78706 x78605))))
                 (list f78707))
               (let ((f78711
                      (lambda (a78606)
                        (let ((f78710
                               (lambda (a78607)
                                 (let ((f78709
                                        (lambda (a78608)
                                          (let ((f78708
                                                 (lambda (a78609)
                                                   (cons
                                                    kont78706
                                                    a78607
                                                    a78609))))
                                            (map f78708 proc a78608)))))
                                   (cdr f78709 lst)))))
                          (proc f78710 a78606)))))
                 (car f78711 lst))))))
      (null? f78712 lst)))
  (define (filter kont78713 op lst)
    (let ((f78721
           (lambda (a78610)
             (if a78610
               (let ((f78714 (lambda (x78611) (kont78713 x78611))))
                 (list f78714))
               (let ((f78720
                      (lambda (a78612)
                        (let ((f78719
                               (lambda (a78613)
                                 (if a78613
                                   (let ((f78717
                                          (lambda (a78614)
                                            (let ((f78716
                                                   (lambda (a78615)
                                                     (let ((f78715
                                                            (lambda (a78616)
                                                              (cons
                                                               kont78713
                                                               a78614
                                                               a78616))))
                                                       (filter
                                                        f78715
                                                        op
                                                        a78615)))))
                                              (cdr f78716 lst)))))
                                     (car f78717 lst))
                                   (let ((f78718
                                          (lambda (a78617)
                                            (filter kont78713 op a78617))))
                                     (cdr f78718 lst))))))
                          (op f78719 a78612)))))
                 (car f78720 lst))))))
      (null? f78721 lst)))
  (define (drop kont78722 lst n)
    (let ((a78618 '0))
      (let ((f78725
             (lambda (a78619)
               (if a78619
                 (kont78722 lst)
                 (let ((f78724
                        (lambda (a78620)
                          (let ((a78621 '1))
                            (let ((f78723
                                   (lambda (a78622)
                                     (drop kont78722 a78620 a78622))))
                              (- f78723 n a78621))))))
                   (cdr f78724 lst))))))
        (= f78725 n a78618))))
  (define (foldr kont78726 proc acc lst)
    (let ((f78730
           (lambda (a78623)
             (if a78623
               (kont78726 acc)
               (let ((f78729
                      (lambda (a78624)
                        (let ((f78728
                               (lambda (a78625)
                                 (let ((f78727
                                        (lambda (a78626)
                                          (proc kont78726 a78624 a78626))))
                                   (foldr f78727 proc acc a78625)))))
                          (cdr f78728 lst)))))
                 (car f78729 lst))))))
      (null? f78730 lst)))
  (define (append kont78731 lst1 lst2)
    (let ((f78735
           (lambda (a78627)
             (if a78627
               (kont78731 lst2)
               (let ((f78734
                      (lambda (a78628)
                        (let ((f78733
                               (lambda (a78629)
                                 (let ((f78732
                                        (lambda (a78630)
                                          (cons kont78731 a78628 a78630))))
                                   (append f78732 a78629 lst2)))))
                          (cdr f78733 lst1)))))
                 (car f78734 lst1))))))
      (null? f78735 lst1)))
  (define (hash . lst)
    (let ((kont78736 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x78631 (apply-prim hash lst))) (kont78736 x78631)))))
  (define (hash-ref kont78738 h k)
    (let ((x78632 (prim hash-ref h k))) (kont78738 x78632)))
  (define (hash-set kont78739 h k v)
    (let ((x78633 (prim hash-set h k v))) (kont78739 x78633)))
  (define (hash-has-key? kont78740 h k)
    (let ((x78634 (prim hash-has-key? h k))) (kont78740 x78634)))
  (define (hash-count kont78741 h)
    (let ((x78635 (prim hash-count h))) (kont78741 x78635)))
  (define (call kont78742 op lst)
    (let ((f78743
           (lambda (a78636)
             (if a78636
               (let ((x78637 '1)) (kont78742 x78637))
               (let ((x78638 '2)) (kont78742 x78638))))))
      (member? f78743 op lst)))
  (define (brouhaha_main kont78744)
    (let ((a78639 '1))
      (let ((a78640 '1))
        (let ((a78641 '2))
          (let ((a78642 '3))
            (let ((a78643 '4))
              (let ((f78745 (lambda (a78644) (call kont78744 a78639 a78644))))
                (list f78745 a78640 a78641 a78642 a78643)))))))))
