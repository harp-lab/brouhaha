'((define (+ . lst)
    (let ((kont7864578746 (prim car lst)))
      (let ((lst78747 (prim cdr lst)))
        (let ((x7855378748 (apply-prim + lst78747)))
          (kont7864578746 x7855378748)))))
  (define (- . lst)
    (let ((kont7864778749 (prim car lst)))
      (let ((lst78750 (prim cdr lst)))
        (let ((x7855478751 (apply-prim - lst78750)))
          (kont7864778749 x7855478751)))))
  (define (* . lst)
    (let ((kont7864978752 (prim car lst)))
      (let ((lst78753 (prim cdr lst)))
        (let ((x7855578754 (apply-prim * lst78753)))
          (kont7864978752 x7855578754)))))
  (define (modulo kont78651 a b)
    (let ((x7855678755 (prim modulo a b))) (kont78651 x7855678755)))
  (define (/ . lst)
    (let ((kont7865278756 (prim car lst)))
      (let ((lst78757 (prim cdr lst)))
        (let ((x7855778758 (apply-prim / lst78757)))
          (kont7865278756 x7855778758)))))
  (define (= . lst)
    (let ((kont7865478759 (prim car lst)))
      (let ((lst78760 (prim cdr lst)))
        (let ((x7855878761 (apply-prim = lst78760)))
          (kont7865478759 x7855878761)))))
  (define (> . lst)
    (let ((kont7865678762 (prim car lst)))
      (let ((lst78763 (prim cdr lst)))
        (let ((x7855978764 (apply-prim > lst78763)))
          (kont7865678762 x7855978764)))))
  (define (< . lst)
    (let ((kont7865878765 (prim car lst)))
      (let ((lst78766 (prim cdr lst)))
        (let ((x7856078767 (apply-prim < lst78766)))
          (kont7865878765 x7856078767)))))
  (define (<= . lst)
    (let ((kont7866078768 (prim car lst)))
      (let ((lst78769 (prim cdr lst)))
        (let ((x7856178770 (apply-prim <= lst78769)))
          (kont7866078768 x7856178770)))))
  (define (>= . lst)
    (let ((kont7866278771 (prim car lst)))
      (let ((lst78772 (prim cdr lst)))
        (let ((x7856278773 (apply-prim >= lst78772)))
          (kont7866278771 x7856278773)))))
  (define (null? kont78664 x)
    (let ((x7856378774 (prim null? x))) (kont78664 x7856378774)))
  (define (equal? kont78665 x y)
    (let ((x7856478775 (prim equal? x y))) (kont78665 x7856478775)))
  (define (eq? kont78666 x y)
    (let ((x7856578776 (prim eq? x y))) (kont78666 x7856578776)))
  (define (cons kont78667 a b)
    (let ((x7856678777 (prim cons a b))) (kont78667 x7856678777)))
  (define (car kont78668 lst)
    (let ((x7856778778 (prim car lst))) (kont78668 x7856778778)))
  (define (cdr kont78669 lst)
    (let ((x7856878779 (prim cdr lst))) (kont78669 x7856878779)))
  (define (even? kont78670 x)
    (let ((a7856978780 '0))
      (let ((a7857078781 '2))
        (let ((f7867178782
               (lambda (a7857178783)
                 (equal? kont78670 a7856978780 a7857178783))))
          (modulo f7867178782 x a7857078781)))))
  (define (odd? kont78672 x)
    (let ((a7857278784 '1))
      (let ((a7857378785 '2))
        (let ((f7867378786
               (lambda (a7857478787)
                 (equal? kont78672 a7857278784 a7857478787))))
          (modulo f7867378786 x a7857378785)))))
  (define (list . x)
    (let ((kont7867478788 (prim car x)))
      (let ((x78789 (prim cdr x))) (kont7867478788 x78789))))
  (define (member? kont78676 x lst)
    (let ((f7868078790
           (lambda (a7857578791)
             (if a7857578791
               (let ((x7857678792 '#f)) (kont78676 x7857678792))
               (let ((f7867978793
                      (lambda (a7857778794)
                        (let ((f7867878795
                               (lambda (a7857878796)
                                 (if a7857878796
                                   (let ((x7857978797 '#t))
                                     (kont78676 x7857978797))
                                   (let ((f7867778798
                                          (lambda (a7858078799)
                                            (member?
                                             kont78676
                                             x
                                             a7858078799))))
                                     (cdr f7867778798 lst))))))
                          (equal? f7867878795 a7857778794 x)))))
                 (car f7867978793 lst))))))
      (null? f7868078790 lst)))
  (define (foldl kont78681 fun acc lst)
    (let ((f7868578800
           (lambda (a7858178801)
             (if a7858178801
               (kont78681 acc)
               (let ((f7868478802
                      (lambda (a7858278803)
                        (let ((f7868378804
                               (lambda (a7858378805)
                                 (let ((f7868278806
                                        (lambda (a7858478807)
                                          (foldl
                                           kont78681
                                           fun
                                           a7858378805
                                           a7858478807))))
                                   (cdr f7868278806 lst)))))
                          (fun f7868378804 a7858278803 acc)))))
                 (car f7868478802 lst))))))
      (null? f7868578800 lst)))
  (define (reverse-helper kont78686 lst lst2)
    (let ((f7869078808
           (lambda (a7858578809)
             (if a7858578809
               (kont78686 lst2)
               (let ((f7868978810
                      (lambda (a7858678811)
                        (let ((f7868878812
                               (lambda (a7858778813)
                                 (let ((f7868778814
                                        (lambda (a7858878815)
                                          (reverse-helper
                                           kont78686
                                           a7858678811
                                           a7858878815))))
                                   (cons f7868778814 a7858778813 lst2)))))
                          (car f7868878812 lst)))))
                 (cdr f7868978810 lst))))))
      (null? f7869078808 lst)))
  (define (reverse kont78691 lst)
    (let ((f7869278816
           (lambda (a7858978817) (reverse-helper kont78691 lst a7858978817))))
      (list f7869278816)))
  (define (take-helper kont78693 lst n lst2)
    (let ((a7859078818 '0))
      (let ((f7869978819
             (lambda (a7859178820)
               (if a7859178820
                 (let ((f7869478821
                        (lambda (x7859278822) (kont78693 x7859278822))))
                   (reverse f7869478821 lst2))
                 (let ((f7869878823
                        (lambda (a7859378824)
                          (let ((a7859478825 '1))
                            (let ((f7869778826
                                   (lambda (a7859578827)
                                     (let ((f7869678828
                                            (lambda (a7859678829)
                                              (let ((f7869578830
                                                     (lambda (a7859778831)
                                                       (take-helper
                                                        kont78693
                                                        a7859378824
                                                        a7859578827
                                                        a7859778831))))
                                                (cons
                                                 f7869578830
                                                 a7859678829
                                                 lst2)))))
                                       (car f7869678828 lst)))))
                              (- f7869778826 n a7859478825))))))
                   (cdr f7869878823 lst))))))
        (= f7869978819 n a7859078818))))
  (define (take kont78700 lst n)
    (let ((f7870178832
           (lambda (a7859878833) (take-helper kont78700 lst n a7859878833))))
      (list f7870178832)))
  (define (length kont78702 lst)
    (let ((f7870578834
           (lambda (a7859978835)
             (if a7859978835
               (let ((x7860078836 '0)) (kont78702 x7860078836))
               (let ((a7860178837 '1))
                 (let ((f7870478838
                        (lambda (a7860278839)
                          (let ((f7870378840
                                 (lambda (a7860378841)
                                   (+ kont78702 a7860178837 a7860378841))))
                            (length f7870378840 a7860278839)))))
                   (cdr f7870478838 lst)))))))
      (null? f7870578834 lst)))
  (define (map kont78706 proc lst)
    (let ((f7871278842
           (lambda (a7860478843)
             (if a7860478843
               (let ((f7870778844
                      (lambda (x7860578845) (kont78706 x7860578845))))
                 (list f7870778844))
               (let ((f7871178846
                      (lambda (a7860678847)
                        (let ((f7871078848
                               (lambda (a7860778849)
                                 (let ((f7870978850
                                        (lambda (a7860878851)
                                          (let ((f7870878852
                                                 (lambda (a7860978853)
                                                   (cons
                                                    kont78706
                                                    a7860778849
                                                    a7860978853))))
                                            (map
                                             f7870878852
                                             proc
                                             a7860878851)))))
                                   (cdr f7870978850 lst)))))
                          (proc f7871078848 a7860678847)))))
                 (car f7871178846 lst))))))
      (null? f7871278842 lst)))
  (define (filter kont78713 op lst)
    (let ((f7872178854
           (lambda (a7861078855)
             (if a7861078855
               (let ((f7871478856
                      (lambda (x7861178857) (kont78713 x7861178857))))
                 (list f7871478856))
               (let ((f7872078858
                      (lambda (a7861278859)
                        (let ((f7871978860
                               (lambda (a7861378861)
                                 (if a7861378861
                                   (let ((f7871778862
                                          (lambda (a7861478863)
                                            (let ((f7871678864
                                                   (lambda (a7861578865)
                                                     (let ((f7871578866
                                                            (lambda (a7861678867)
                                                              (cons
                                                               kont78713
                                                               a7861478863
                                                               a7861678867))))
                                                       (filter
                                                        f7871578866
                                                        op
                                                        a7861578865)))))
                                              (cdr f7871678864 lst)))))
                                     (car f7871778862 lst))
                                   (let ((f7871878868
                                          (lambda (a7861778869)
                                            (filter
                                             kont78713
                                             op
                                             a7861778869))))
                                     (cdr f7871878868 lst))))))
                          (op f7871978860 a7861278859)))))
                 (car f7872078858 lst))))))
      (null? f7872178854 lst)))
  (define (drop kont78722 lst n)
    (let ((a7861878870 '0))
      (let ((f7872578871
             (lambda (a7861978872)
               (if a7861978872
                 (kont78722 lst)
                 (let ((f7872478873
                        (lambda (a7862078874)
                          (let ((a7862178875 '1))
                            (let ((f7872378876
                                   (lambda (a7862278877)
                                     (drop
                                      kont78722
                                      a7862078874
                                      a7862278877))))
                              (- f7872378876 n a7862178875))))))
                   (cdr f7872478873 lst))))))
        (= f7872578871 n a7861878870))))
  (define (foldr kont78726 proc acc lst)
    (let ((f7873078878
           (lambda (a7862378879)
             (if a7862378879
               (kont78726 acc)
               (let ((f7872978880
                      (lambda (a7862478881)
                        (let ((f7872878882
                               (lambda (a7862578883)
                                 (let ((f7872778884
                                        (lambda (a7862678885)
                                          (proc
                                           kont78726
                                           a7862478881
                                           a7862678885))))
                                   (foldr f7872778884 proc acc a7862578883)))))
                          (cdr f7872878882 lst)))))
                 (car f7872978880 lst))))))
      (null? f7873078878 lst)))
  (define (append kont78731 lst1 lst2)
    (let ((f7873578886
           (lambda (a7862778887)
             (if a7862778887
               (kont78731 lst2)
               (let ((f7873478888
                      (lambda (a7862878889)
                        (let ((f7873378890
                               (lambda (a7862978891)
                                 (let ((f7873278892
                                        (lambda (a7863078893)
                                          (cons
                                           kont78731
                                           a7862878889
                                           a7863078893))))
                                   (append f7873278892 a7862978891 lst2)))))
                          (cdr f7873378890 lst1)))))
                 (car f7873478888 lst1))))))
      (null? f7873578886 lst1)))
  (define (hash . lst)
    (let ((kont7873678894 (prim car lst)))
      (let ((lst78895 (prim cdr lst)))
        (let ((x7863178896 (apply-prim hash lst78895)))
          (kont7873678894 x7863178896)))))
  (define (hash-ref kont78738 h k)
    (let ((x7863278897 (prim hash-ref h k))) (kont78738 x7863278897)))
  (define (hash-set kont78739 h k v)
    (let ((x7863378898 (prim hash-set h k v))) (kont78739 x7863378898)))
  (define (hash-has-key? kont78740 h k)
    (let ((x7863478899 (prim hash-has-key? h k))) (kont78740 x7863478899)))
  (define (hash-count kont78741 h)
    (let ((x7863578900 (prim hash-count h))) (kont78741 x7863578900)))
  (define (call kont78742 op lst)
    (let ((f7874378901
           (lambda (a7863678902)
             (if a7863678902
               (let ((x7863778903 '1)) (kont78742 x7863778903))
               (let ((x7863878904 '2)) (kont78742 x7863878904))))))
      (member? f7874378901 op lst)))
  (define (brouhaha_main kont78744)
    (let ((a7863978905 '1))
      (let ((a7864078906 '1))
        (let ((a7864178907 '2))
          (let ((a7864278908 '3))
            (let ((a7864378909 '4))
              (let ((f7874578910
                     (lambda (a7864478911)
                       (call kont78744 a7863978905 a7864478911))))
                (list
                 f7874578910
                 a7864078906
                 a7864178907
                 a7864278908
                 a7864378909)))))))))
