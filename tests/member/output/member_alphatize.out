'((define (+ . lst) (let ((x78553 (apply-prim + lst))) x78553))
  (define (- . lst) (let ((x78554 (apply-prim - lst))) x78554))
  (define (* . lst) (let ((x78555 (apply-prim * lst))) x78555))
  (define (modulo a b) (let ((x78556 (prim modulo a b))) x78556))
  (define (/ . lst) (let ((x78557 (apply-prim / lst))) x78557))
  (define (= . lst) (let ((x78558 (apply-prim = lst))) x78558))
  (define (> . lst) (let ((x78559 (apply-prim > lst))) x78559))
  (define (< . lst) (let ((x78560 (apply-prim < lst))) x78560))
  (define (<= . lst) (let ((x78561 (apply-prim <= lst))) x78561))
  (define (>= . lst) (let ((x78562 (apply-prim >= lst))) x78562))
  (define (null? x) (let ((x78563 (prim null? x))) x78563))
  (define (equal? x y) (let ((x78564 (prim equal? x y))) x78564))
  (define (eq? x y) (let ((x78565 (prim eq? x y))) x78565))
  (define (cons a b) (let ((x78566 (prim cons a b))) x78566))
  (define (car lst) (let ((x78567 (prim car lst))) x78567))
  (define (cdr lst) (let ((x78568 (prim cdr lst))) x78568))
  (define (even? x)
    (let ((a78569 '0))
      (let ((a78570 '2))
        (let ((a78571 (modulo x a78570))) (equal? a78569 a78571)))))
  (define (odd? x)
    (let ((a78572 '1))
      (let ((a78573 '2))
        (let ((a78574 (modulo x a78573))) (equal? a78572 a78574)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a78575 (null? lst)))
      (if a78575
        (let ((x78576 '#f)) x78576)
        (let ((a78577 (car lst)))
          (let ((a78578 (equal? a78577 x)))
            (if a78578
              (let ((x78579 '#t)) x78579)
              (let ((a78580 (cdr lst))) (member? x a78580))))))))
  (define (foldl fun acc lst)
    (let ((a78581 (null? lst)))
      (if a78581
        acc
        (let ((a78582 (car lst)))
          (let ((a78583 (fun a78582 acc)))
            (let ((a78584 (cdr lst))) (foldl fun a78583 a78584)))))))
  (define (reverse-helper lst lst2)
    (let ((a78585 (null? lst)))
      (if a78585
        lst2
        (let ((a78586 (cdr lst)))
          (let ((a78587 (car lst)))
            (let ((a78588 (cons a78587 lst2)))
              (reverse-helper a78586 a78588)))))))
  (define (reverse lst) (let ((a78589 (list))) (reverse-helper lst a78589)))
  (define (take-helper lst n lst2)
    (let ((a78590 '0))
      (let ((a78591 (= n a78590)))
        (if a78591
          (let ((x78592 (reverse lst2))) x78592)
          (let ((a78593 (cdr lst)))
            (let ((a78594 '1))
              (let ((a78595 (- n a78594)))
                (let ((a78596 (car lst)))
                  (let ((a78597 (cons a78596 lst2)))
                    (take-helper a78593 a78595 a78597))))))))))
  (define (take lst n) (let ((a78598 (list))) (take-helper lst n a78598)))
  (define (length lst)
    (let ((a78599 (null? lst)))
      (if a78599
        (let ((x78600 '0)) x78600)
        (let ((a78601 '1))
          (let ((a78602 (cdr lst)))
            (let ((a78603 (length a78602))) (+ a78601 a78603)))))))
  (define (map proc lst)
    (let ((a78604 (null? lst)))
      (if a78604
        (let ((x78605 (list))) x78605)
        (let ((a78606 (car lst)))
          (let ((a78607 (proc a78606)))
            (let ((a78608 (cdr lst)))
              (let ((a78609 (map proc a78608))) (cons a78607 a78609))))))))
  (define (filter op lst)
    (let ((a78610 (null? lst)))
      (if a78610
        (let ((x78611 (list))) x78611)
        (let ((a78612 (car lst)))
          (let ((a78613 (op a78612)))
            (if a78613
              (let ((a78614 (car lst)))
                (let ((a78615 (cdr lst)))
                  (let ((a78616 (filter op a78615))) (cons a78614 a78616))))
              (let ((a78617 (cdr lst))) (filter op a78617))))))))
  (define (drop lst n)
    (let ((a78618 '0))
      (let ((a78619 (= n a78618)))
        (if a78619
          lst
          (let ((a78620 (cdr lst)))
            (let ((a78621 '1))
              (let ((a78622 (- n a78621))) (drop a78620 a78622))))))))
  (define (foldr proc acc lst)
    (let ((a78623 (null? lst)))
      (if a78623
        acc
        (let ((a78624 (car lst)))
          (let ((a78625 (cdr lst)))
            (let ((a78626 (foldr proc acc a78625))) (proc a78624 a78626)))))))
  (define (append lst1 lst2)
    (let ((a78627 (null? lst1)))
      (if a78627
        lst2
        (let ((a78628 (car lst1)))
          (let ((a78629 (cdr lst1)))
            (let ((a78630 (append a78629 lst2))) (cons a78628 a78630)))))))
  (define (hash . lst) (let ((x78631 (apply-prim hash lst))) x78631))
  (define (hash-ref h k) (let ((x78632 (prim hash-ref h k))) x78632))
  (define (hash-set h k v) (let ((x78633 (prim hash-set h k v))) x78633))
  (define (hash-has-key? h k) (let ((x78634 (prim hash-has-key? h k))) x78634))
  (define (hash-count h) (let ((x78635 (prim hash-count h))) x78635))
  (define (call op lst)
    (let ((a78636 (member? op lst)))
      (if a78636 (let ((x78637 '1)) x78637) (let ((x78638 '2)) x78638))))
  (define (brouhaha_main)
    (let ((a78639 '1))
      (let ((a78640 '1))
        (let ((a78641 '2))
          (let ((a78642 '3))
            (let ((a78643 '4))
              (let ((a78644 (list a78640 a78641 a78642 a78643)))
                (call a78639 a78644)))))))))
