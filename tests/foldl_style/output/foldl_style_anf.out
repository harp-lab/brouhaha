'((define (+ . lst)
    (let ((kont48222 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48133 (apply-prim + lst))) (kont48222 x48133)))))
  (define (- . lst)
    (let ((kont48224 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48134 (apply-prim - lst))) (kont48224 x48134)))))
  (define (* . lst)
    (let ((kont48226 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48135 (apply-prim * lst))) (kont48226 x48135)))))
  (define (modulo kont48228 a b)
    (let ((x48136 (prim modulo a b))) (kont48228 x48136)))
  (define (/ . lst)
    (let ((kont48229 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48137 (apply-prim / lst))) (kont48229 x48137)))))
  (define (= . lst)
    (let ((kont48231 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48138 (apply-prim = lst))) (kont48231 x48138)))))
  (define (> . lst)
    (let ((kont48233 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48139 (apply-prim > lst))) (kont48233 x48139)))))
  (define (< . lst)
    (let ((kont48235 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48140 (apply-prim < lst))) (kont48235 x48140)))))
  (define (<= . lst)
    (let ((kont48237 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48141 (apply-prim <= lst))) (kont48237 x48141)))))
  (define (>= . lst)
    (let ((kont48239 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48142 (apply-prim >= lst))) (kont48239 x48142)))))
  (define (null? kont48241 x)
    (let ((x48143 (prim null? x))) (kont48241 x48143)))
  (define (equal? kont48242 x y)
    (let ((x48144 (prim equal? x y))) (kont48242 x48144)))
  (define (eq? kont48243 x y)
    (let ((x48145 (prim eq? x y))) (kont48243 x48145)))
  (define (cons kont48244 a b)
    (let ((x48146 (prim cons a b))) (kont48244 x48146)))
  (define (car kont48245 lst)
    (let ((x48147 (prim car lst))) (kont48245 x48147)))
  (define (cdr kont48246 lst)
    (let ((x48148 (prim cdr lst))) (kont48246 x48148)))
  (define (even? kont48247 x)
    (let ((a48149 '0))
      (let ((a48150 '2))
        (let ((f48248 (lambda (a48151) (equal? kont48247 a48149 a48151))))
          (modulo f48248 x a48150)))))
  (define (odd? kont48249 x)
    (let ((a48152 '1))
      (let ((a48153 '2))
        (let ((f48250 (lambda (a48154) (equal? kont48249 a48152 a48154))))
          (modulo f48250 x a48153)))))
  (define (list . x)
    (let ((kont48251 (prim car x))) (let ((x (prim cdr x))) (kont48251 x))))
  (define (member? kont48253 x lst)
    (let ((f48257
           (lambda (a48155)
             (if a48155
               (let ((x48156 '#f)) (kont48253 x48156))
               (let ((f48256
                      (lambda (a48157)
                        (let ((f48255
                               (lambda (a48158)
                                 (if a48158
                                   (let ((x48159 '#t)) (kont48253 x48159))
                                   (let ((f48254
                                          (lambda (a48160)
                                            (member? kont48253 x a48160))))
                                     (cdr f48254 lst))))))
                          (equal? f48255 a48157 x)))))
                 (car f48256 lst))))))
      (null? f48257 lst)))
  (define (foldl kont48258 fun acc lst)
    (let ((f48262
           (lambda (a48161)
             (if a48161
               (kont48258 acc)
               (let ((f48261
                      (lambda (a48162)
                        (let ((f48260
                               (lambda (a48163)
                                 (let ((f48259
                                        (lambda (a48164)
                                          (foldl
                                           kont48258
                                           fun
                                           a48163
                                           a48164))))
                                   (cdr f48259 lst)))))
                          (fun f48260 a48162 acc)))))
                 (car f48261 lst))))))
      (null? f48262 lst)))
  (define (reverse-helper kont48263 lst lst2)
    (let ((f48267
           (lambda (a48165)
             (if a48165
               (kont48263 lst2)
               (let ((f48266
                      (lambda (a48166)
                        (let ((f48265
                               (lambda (a48167)
                                 (let ((f48264
                                        (lambda (a48168)
                                          (reverse-helper
                                           kont48263
                                           a48166
                                           a48168))))
                                   (cons f48264 a48167 lst2)))))
                          (car f48265 lst)))))
                 (cdr f48266 lst))))))
      (null? f48267 lst)))
  (define (reverse kont48268 lst)
    (let ((f48269 (lambda (a48169) (reverse-helper kont48268 lst a48169))))
      (list f48269)))
  (define (take-helper kont48270 lst n lst2)
    (let ((a48170 '0))
      (let ((f48276
             (lambda (a48171)
               (if a48171
                 (let ((f48271 (lambda (x48172) (kont48270 x48172))))
                   (reverse f48271 lst2))
                 (let ((f48275
                        (lambda (a48173)
                          (let ((a48174 '1))
                            (let ((f48274
                                   (lambda (a48175)
                                     (let ((f48273
                                            (lambda (a48176)
                                              (let ((f48272
                                                     (lambda (a48177)
                                                       (take-helper
                                                        kont48270
                                                        a48173
                                                        a48175
                                                        a48177))))
                                                (cons f48272 a48176 lst2)))))
                                       (car f48273 lst)))))
                              (- f48274 n a48174))))))
                   (cdr f48275 lst))))))
        (= f48276 n a48170))))
  (define (take kont48277 lst n)
    (let ((f48278 (lambda (a48178) (take-helper kont48277 lst n a48178))))
      (list f48278)))
  (define (length kont48279 lst)
    (let ((f48282
           (lambda (a48179)
             (if a48179
               (let ((x48180 '0)) (kont48279 x48180))
               (let ((a48181 '1))
                 (let ((f48281
                        (lambda (a48182)
                          (let ((f48280
                                 (lambda (a48183)
                                   (+ kont48279 a48181 a48183))))
                            (length f48280 a48182)))))
                   (cdr f48281 lst)))))))
      (null? f48282 lst)))
  (define (map kont48283 proc lst)
    (let ((f48289
           (lambda (a48184)
             (if a48184
               (let ((f48284 (lambda (x48185) (kont48283 x48185))))
                 (list f48284))
               (let ((f48288
                      (lambda (a48186)
                        (let ((f48287
                               (lambda (a48187)
                                 (let ((f48286
                                        (lambda (a48188)
                                          (let ((f48285
                                                 (lambda (a48189)
                                                   (cons
                                                    kont48283
                                                    a48187
                                                    a48189))))
                                            (map f48285 proc a48188)))))
                                   (cdr f48286 lst)))))
                          (proc f48287 a48186)))))
                 (car f48288 lst))))))
      (null? f48289 lst)))
  (define (filter kont48290 op lst)
    (let ((f48298
           (lambda (a48190)
             (if a48190
               (let ((f48291 (lambda (x48191) (kont48290 x48191))))
                 (list f48291))
               (let ((f48297
                      (lambda (a48192)
                        (let ((f48296
                               (lambda (a48193)
                                 (if a48193
                                   (let ((f48294
                                          (lambda (a48194)
                                            (let ((f48293
                                                   (lambda (a48195)
                                                     (let ((f48292
                                                            (lambda (a48196)
                                                              (cons
                                                               kont48290
                                                               a48194
                                                               a48196))))
                                                       (filter
                                                        f48292
                                                        op
                                                        a48195)))))
                                              (cdr f48293 lst)))))
                                     (car f48294 lst))
                                   (let ((f48295
                                          (lambda (a48197)
                                            (filter kont48290 op a48197))))
                                     (cdr f48295 lst))))))
                          (op f48296 a48192)))))
                 (car f48297 lst))))))
      (null? f48298 lst)))
  (define (drop kont48299 lst n)
    (let ((a48198 '0))
      (let ((f48302
             (lambda (a48199)
               (if a48199
                 (kont48299 lst)
                 (let ((f48301
                        (lambda (a48200)
                          (let ((a48201 '1))
                            (let ((f48300
                                   (lambda (a48202)
                                     (drop kont48299 a48200 a48202))))
                              (- f48300 n a48201))))))
                   (cdr f48301 lst))))))
        (= f48302 n a48198))))
  (define (foldr kont48303 proc acc lst)
    (let ((f48307
           (lambda (a48203)
             (if a48203
               (kont48303 acc)
               (let ((f48306
                      (lambda (a48204)
                        (let ((f48305
                               (lambda (a48205)
                                 (let ((f48304
                                        (lambda (a48206)
                                          (proc kont48303 a48204 a48206))))
                                   (foldr f48304 proc acc a48205)))))
                          (cdr f48305 lst)))))
                 (car f48306 lst))))))
      (null? f48307 lst)))
  (define (append kont48308 lst1 lst2)
    (let ((f48312
           (lambda (a48207)
             (if a48207
               (kont48308 lst2)
               (let ((f48311
                      (lambda (a48208)
                        (let ((f48310
                               (lambda (a48209)
                                 (let ((f48309
                                        (lambda (a48210)
                                          (cons kont48308 a48208 a48210))))
                                   (append f48309 a48209 lst2)))))
                          (cdr f48310 lst1)))))
                 (car f48311 lst1))))))
      (null? f48312 lst1)))
  (define (hash . lst)
    (let ((kont48313 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48211 (apply-prim hash lst))) (kont48313 x48211)))))
  (define (hash-ref kont48315 h k)
    (let ((x48212 (prim hash-ref h k))) (kont48315 x48212)))
  (define (hash-set kont48316 h k v)
    (let ((x48213 (prim hash-set h k v))) (kont48316 x48213)))
  (define (hash-has-key? kont48317 h k)
    (let ((x48214 (prim hash-has-key? h k))) (kont48317 x48214)))
  (define (hash-count kont48318 h)
    (let ((x48215 (prim hash-count h))) (kont48318 x48215)))
  (define (call-foldl kont48319 lst)
    (let ((a48216 '0)) (foldl kont48319 + a48216 lst)))
  (define (brouhaha_main kont48320)
    (let ((a48217 '1))
      (let ((a48218 '2))
        (let ((a48219 '3))
          (let ((a48220 '4))
            (let ((f48321 (lambda (a48221) (call-foldl kont48320 a48221))))
              (list f48321 a48217 a48218 a48219 a48220))))))))
