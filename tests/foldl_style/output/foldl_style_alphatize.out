'((define (+ . lst) (let ((x48133 (apply-prim + lst))) x48133))
  (define (- . lst) (let ((x48134 (apply-prim - lst))) x48134))
  (define (* . lst) (let ((x48135 (apply-prim * lst))) x48135))
  (define (modulo a b) (let ((x48136 (prim modulo a b))) x48136))
  (define (/ . lst) (let ((x48137 (apply-prim / lst))) x48137))
  (define (= . lst) (let ((x48138 (apply-prim = lst))) x48138))
  (define (> . lst) (let ((x48139 (apply-prim > lst))) x48139))
  (define (< . lst) (let ((x48140 (apply-prim < lst))) x48140))
  (define (<= . lst) (let ((x48141 (apply-prim <= lst))) x48141))
  (define (>= . lst) (let ((x48142 (apply-prim >= lst))) x48142))
  (define (null? x) (let ((x48143 (prim null? x))) x48143))
  (define (equal? x y) (let ((x48144 (prim equal? x y))) x48144))
  (define (eq? x y) (let ((x48145 (prim eq? x y))) x48145))
  (define (cons a b) (let ((x48146 (prim cons a b))) x48146))
  (define (car lst) (let ((x48147 (prim car lst))) x48147))
  (define (cdr lst) (let ((x48148 (prim cdr lst))) x48148))
  (define (even? x)
    (let ((a48149 '0))
      (let ((a48150 '2))
        (let ((a48151 (modulo x a48150))) (equal? a48149 a48151)))))
  (define (odd? x)
    (let ((a48152 '1))
      (let ((a48153 '2))
        (let ((a48154 (modulo x a48153))) (equal? a48152 a48154)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a48155 (null? lst)))
      (if a48155
        (let ((x48156 '#f)) x48156)
        (let ((a48157 (car lst)))
          (let ((a48158 (equal? a48157 x)))
            (if a48158
              (let ((x48159 '#t)) x48159)
              (let ((a48160 (cdr lst))) (member? x a48160))))))))
  (define (foldl fun acc lst)
    (let ((a48161 (null? lst)))
      (if a48161
        acc
        (let ((a48162 (car lst)))
          (let ((a48163 (fun a48162 acc)))
            (let ((a48164 (cdr lst))) (foldl fun a48163 a48164)))))))
  (define (reverse-helper lst lst2)
    (let ((a48165 (null? lst)))
      (if a48165
        lst2
        (let ((a48166 (cdr lst)))
          (let ((a48167 (car lst)))
            (let ((a48168 (cons a48167 lst2)))
              (reverse-helper a48166 a48168)))))))
  (define (reverse lst) (let ((a48169 (list))) (reverse-helper lst a48169)))
  (define (take-helper lst n lst2)
    (let ((a48170 '0))
      (let ((a48171 (= n a48170)))
        (if a48171
          (let ((x48172 (reverse lst2))) x48172)
          (let ((a48173 (cdr lst)))
            (let ((a48174 '1))
              (let ((a48175 (- n a48174)))
                (let ((a48176 (car lst)))
                  (let ((a48177 (cons a48176 lst2)))
                    (take-helper a48173 a48175 a48177))))))))))
  (define (take lst n) (let ((a48178 (list))) (take-helper lst n a48178)))
  (define (length lst)
    (let ((a48179 (null? lst)))
      (if a48179
        (let ((x48180 '0)) x48180)
        (let ((a48181 '1))
          (let ((a48182 (cdr lst)))
            (let ((a48183 (length a48182))) (+ a48181 a48183)))))))
  (define (map proc lst)
    (let ((a48184 (null? lst)))
      (if a48184
        (let ((x48185 (list))) x48185)
        (let ((a48186 (car lst)))
          (let ((a48187 (proc a48186)))
            (let ((a48188 (cdr lst)))
              (let ((a48189 (map proc a48188))) (cons a48187 a48189))))))))
  (define (filter op lst)
    (let ((a48190 (null? lst)))
      (if a48190
        (let ((x48191 (list))) x48191)
        (let ((a48192 (car lst)))
          (let ((a48193 (op a48192)))
            (if a48193
              (let ((a48194 (car lst)))
                (let ((a48195 (cdr lst)))
                  (let ((a48196 (filter op a48195))) (cons a48194 a48196))))
              (let ((a48197 (cdr lst))) (filter op a48197))))))))
  (define (drop lst n)
    (let ((a48198 '0))
      (let ((a48199 (= n a48198)))
        (if a48199
          lst
          (let ((a48200 (cdr lst)))
            (let ((a48201 '1))
              (let ((a48202 (- n a48201))) (drop a48200 a48202))))))))
  (define (foldr proc acc lst)
    (let ((a48203 (null? lst)))
      (if a48203
        acc
        (let ((a48204 (car lst)))
          (let ((a48205 (cdr lst)))
            (let ((a48206 (foldr proc acc a48205))) (proc a48204 a48206)))))))
  (define (append lst1 lst2)
    (let ((a48207 (null? lst1)))
      (if a48207
        lst2
        (let ((a48208 (car lst1)))
          (let ((a48209 (cdr lst1)))
            (let ((a48210 (append a48209 lst2))) (cons a48208 a48210)))))))
  (define (hash . lst) (let ((x48211 (apply-prim hash lst))) x48211))
  (define (hash-ref h k) (let ((x48212 (prim hash-ref h k))) x48212))
  (define (hash-set h k v) (let ((x48213 (prim hash-set h k v))) x48213))
  (define (hash-has-key? h k) (let ((x48214 (prim hash-has-key? h k))) x48214))
  (define (hash-count h) (let ((x48215 (prim hash-count h))) x48215))
  (define (call-foldl lst) (let ((a48216 '0)) (foldl + a48216 lst)))
  (define (brouhaha_main)
    (let ((a48217 '1))
      (let ((a48218 '2))
        (let ((a48219 '3))
          (let ((a48220 '4))
            (let ((a48221 (list a48217 a48218 a48219 a48220)))
              (call-foldl a48221))))))))
