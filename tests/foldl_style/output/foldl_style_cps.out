'((define (+ . lst)
    (let ((kont4822248322 (prim car lst)))
      (let ((lst48323 (prim cdr lst)))
        (let ((x4813348324 (apply-prim + lst48323)))
          (kont4822248322 x4813348324)))))
  (define (- . lst)
    (let ((kont4822448325 (prim car lst)))
      (let ((lst48326 (prim cdr lst)))
        (let ((x4813448327 (apply-prim - lst48326)))
          (kont4822448325 x4813448327)))))
  (define (* . lst)
    (let ((kont4822648328 (prim car lst)))
      (let ((lst48329 (prim cdr lst)))
        (let ((x4813548330 (apply-prim * lst48329)))
          (kont4822648328 x4813548330)))))
  (define (modulo kont48228 a b)
    (let ((x4813648331 (prim modulo a b))) (kont48228 x4813648331)))
  (define (/ . lst)
    (let ((kont4822948332 (prim car lst)))
      (let ((lst48333 (prim cdr lst)))
        (let ((x4813748334 (apply-prim / lst48333)))
          (kont4822948332 x4813748334)))))
  (define (= . lst)
    (let ((kont4823148335 (prim car lst)))
      (let ((lst48336 (prim cdr lst)))
        (let ((x4813848337 (apply-prim = lst48336)))
          (kont4823148335 x4813848337)))))
  (define (> . lst)
    (let ((kont4823348338 (prim car lst)))
      (let ((lst48339 (prim cdr lst)))
        (let ((x4813948340 (apply-prim > lst48339)))
          (kont4823348338 x4813948340)))))
  (define (< . lst)
    (let ((kont4823548341 (prim car lst)))
      (let ((lst48342 (prim cdr lst)))
        (let ((x4814048343 (apply-prim < lst48342)))
          (kont4823548341 x4814048343)))))
  (define (<= . lst)
    (let ((kont4823748344 (prim car lst)))
      (let ((lst48345 (prim cdr lst)))
        (let ((x4814148346 (apply-prim <= lst48345)))
          (kont4823748344 x4814148346)))))
  (define (>= . lst)
    (let ((kont4823948347 (prim car lst)))
      (let ((lst48348 (prim cdr lst)))
        (let ((x4814248349 (apply-prim >= lst48348)))
          (kont4823948347 x4814248349)))))
  (define (null? kont48241 x)
    (let ((x4814348350 (prim null? x))) (kont48241 x4814348350)))
  (define (equal? kont48242 x y)
    (let ((x4814448351 (prim equal? x y))) (kont48242 x4814448351)))
  (define (eq? kont48243 x y)
    (let ((x4814548352 (prim eq? x y))) (kont48243 x4814548352)))
  (define (cons kont48244 a b)
    (let ((x4814648353 (prim cons a b))) (kont48244 x4814648353)))
  (define (car kont48245 lst)
    (let ((x4814748354 (prim car lst))) (kont48245 x4814748354)))
  (define (cdr kont48246 lst)
    (let ((x4814848355 (prim cdr lst))) (kont48246 x4814848355)))
  (define (even? kont48247 x)
    (let ((a4814948356 '0))
      (let ((a4815048357 '2))
        (let ((f4824848358
               (lambda (a4815148359)
                 (equal? kont48247 a4814948356 a4815148359))))
          (modulo f4824848358 x a4815048357)))))
  (define (odd? kont48249 x)
    (let ((a4815248360 '1))
      (let ((a4815348361 '2))
        (let ((f4825048362
               (lambda (a4815448363)
                 (equal? kont48249 a4815248360 a4815448363))))
          (modulo f4825048362 x a4815348361)))))
  (define (list . x)
    (let ((kont4825148364 (prim car x)))
      (let ((x48365 (prim cdr x))) (kont4825148364 x48365))))
  (define (member? kont48253 x lst)
    (let ((f4825748366
           (lambda (a4815548367)
             (if a4815548367
               (let ((x4815648368 '#f)) (kont48253 x4815648368))
               (let ((f4825648369
                      (lambda (a4815748370)
                        (let ((f4825548371
                               (lambda (a4815848372)
                                 (if a4815848372
                                   (let ((x4815948373 '#t))
                                     (kont48253 x4815948373))
                                   (let ((f4825448374
                                          (lambda (a4816048375)
                                            (member?
                                             kont48253
                                             x
                                             a4816048375))))
                                     (cdr f4825448374 lst))))))
                          (equal? f4825548371 a4815748370 x)))))
                 (car f4825648369 lst))))))
      (null? f4825748366 lst)))
  (define (foldl kont48258 fun acc lst)
    (let ((f4826248376
           (lambda (a4816148377)
             (if a4816148377
               (kont48258 acc)
               (let ((f4826148378
                      (lambda (a4816248379)
                        (let ((f4826048380
                               (lambda (a4816348381)
                                 (let ((f4825948382
                                        (lambda (a4816448383)
                                          (foldl
                                           kont48258
                                           fun
                                           a4816348381
                                           a4816448383))))
                                   (cdr f4825948382 lst)))))
                          (fun f4826048380 a4816248379 acc)))))
                 (car f4826148378 lst))))))
      (null? f4826248376 lst)))
  (define (reverse-helper kont48263 lst lst2)
    (let ((f4826748384
           (lambda (a4816548385)
             (if a4816548385
               (kont48263 lst2)
               (let ((f4826648386
                      (lambda (a4816648387)
                        (let ((f4826548388
                               (lambda (a4816748389)
                                 (let ((f4826448390
                                        (lambda (a4816848391)
                                          (reverse-helper
                                           kont48263
                                           a4816648387
                                           a4816848391))))
                                   (cons f4826448390 a4816748389 lst2)))))
                          (car f4826548388 lst)))))
                 (cdr f4826648386 lst))))))
      (null? f4826748384 lst)))
  (define (reverse kont48268 lst)
    (let ((f4826948392
           (lambda (a4816948393) (reverse-helper kont48268 lst a4816948393))))
      (list f4826948392)))
  (define (take-helper kont48270 lst n lst2)
    (let ((a4817048394 '0))
      (let ((f4827648395
             (lambda (a4817148396)
               (if a4817148396
                 (let ((f4827148397
                        (lambda (x4817248398) (kont48270 x4817248398))))
                   (reverse f4827148397 lst2))
                 (let ((f4827548399
                        (lambda (a4817348400)
                          (let ((a4817448401 '1))
                            (let ((f4827448402
                                   (lambda (a4817548403)
                                     (let ((f4827348404
                                            (lambda (a4817648405)
                                              (let ((f4827248406
                                                     (lambda (a4817748407)
                                                       (take-helper
                                                        kont48270
                                                        a4817348400
                                                        a4817548403
                                                        a4817748407))))
                                                (cons
                                                 f4827248406
                                                 a4817648405
                                                 lst2)))))
                                       (car f4827348404 lst)))))
                              (- f4827448402 n a4817448401))))))
                   (cdr f4827548399 lst))))))
        (= f4827648395 n a4817048394))))
  (define (take kont48277 lst n)
    (let ((f4827848408
           (lambda (a4817848409) (take-helper kont48277 lst n a4817848409))))
      (list f4827848408)))
  (define (length kont48279 lst)
    (let ((f4828248410
           (lambda (a4817948411)
             (if a4817948411
               (let ((x4818048412 '0)) (kont48279 x4818048412))
               (let ((a4818148413 '1))
                 (let ((f4828148414
                        (lambda (a4818248415)
                          (let ((f4828048416
                                 (lambda (a4818348417)
                                   (+ kont48279 a4818148413 a4818348417))))
                            (length f4828048416 a4818248415)))))
                   (cdr f4828148414 lst)))))))
      (null? f4828248410 lst)))
  (define (map kont48283 proc lst)
    (let ((f4828948418
           (lambda (a4818448419)
             (if a4818448419
               (let ((f4828448420
                      (lambda (x4818548421) (kont48283 x4818548421))))
                 (list f4828448420))
               (let ((f4828848422
                      (lambda (a4818648423)
                        (let ((f4828748424
                               (lambda (a4818748425)
                                 (let ((f4828648426
                                        (lambda (a4818848427)
                                          (let ((f4828548428
                                                 (lambda (a4818948429)
                                                   (cons
                                                    kont48283
                                                    a4818748425
                                                    a4818948429))))
                                            (map
                                             f4828548428
                                             proc
                                             a4818848427)))))
                                   (cdr f4828648426 lst)))))
                          (proc f4828748424 a4818648423)))))
                 (car f4828848422 lst))))))
      (null? f4828948418 lst)))
  (define (filter kont48290 op lst)
    (let ((f4829848430
           (lambda (a4819048431)
             (if a4819048431
               (let ((f4829148432
                      (lambda (x4819148433) (kont48290 x4819148433))))
                 (list f4829148432))
               (let ((f4829748434
                      (lambda (a4819248435)
                        (let ((f4829648436
                               (lambda (a4819348437)
                                 (if a4819348437
                                   (let ((f4829448438
                                          (lambda (a4819448439)
                                            (let ((f4829348440
                                                   (lambda (a4819548441)
                                                     (let ((f4829248442
                                                            (lambda (a4819648443)
                                                              (cons
                                                               kont48290
                                                               a4819448439
                                                               a4819648443))))
                                                       (filter
                                                        f4829248442
                                                        op
                                                        a4819548441)))))
                                              (cdr f4829348440 lst)))))
                                     (car f4829448438 lst))
                                   (let ((f4829548444
                                          (lambda (a4819748445)
                                            (filter
                                             kont48290
                                             op
                                             a4819748445))))
                                     (cdr f4829548444 lst))))))
                          (op f4829648436 a4819248435)))))
                 (car f4829748434 lst))))))
      (null? f4829848430 lst)))
  (define (drop kont48299 lst n)
    (let ((a4819848446 '0))
      (let ((f4830248447
             (lambda (a4819948448)
               (if a4819948448
                 (kont48299 lst)
                 (let ((f4830148449
                        (lambda (a4820048450)
                          (let ((a4820148451 '1))
                            (let ((f4830048452
                                   (lambda (a4820248453)
                                     (drop
                                      kont48299
                                      a4820048450
                                      a4820248453))))
                              (- f4830048452 n a4820148451))))))
                   (cdr f4830148449 lst))))))
        (= f4830248447 n a4819848446))))
  (define (foldr kont48303 proc acc lst)
    (let ((f4830748454
           (lambda (a4820348455)
             (if a4820348455
               (kont48303 acc)
               (let ((f4830648456
                      (lambda (a4820448457)
                        (let ((f4830548458
                               (lambda (a4820548459)
                                 (let ((f4830448460
                                        (lambda (a4820648461)
                                          (proc
                                           kont48303
                                           a4820448457
                                           a4820648461))))
                                   (foldr f4830448460 proc acc a4820548459)))))
                          (cdr f4830548458 lst)))))
                 (car f4830648456 lst))))))
      (null? f4830748454 lst)))
  (define (append kont48308 lst1 lst2)
    (let ((f4831248462
           (lambda (a4820748463)
             (if a4820748463
               (kont48308 lst2)
               (let ((f4831148464
                      (lambda (a4820848465)
                        (let ((f4831048466
                               (lambda (a4820948467)
                                 (let ((f4830948468
                                        (lambda (a4821048469)
                                          (cons
                                           kont48308
                                           a4820848465
                                           a4821048469))))
                                   (append f4830948468 a4820948467 lst2)))))
                          (cdr f4831048466 lst1)))))
                 (car f4831148464 lst1))))))
      (null? f4831248462 lst1)))
  (define (hash . lst)
    (let ((kont4831348470 (prim car lst)))
      (let ((lst48471 (prim cdr lst)))
        (let ((x4821148472 (apply-prim hash lst48471)))
          (kont4831348470 x4821148472)))))
  (define (hash-ref kont48315 h k)
    (let ((x4821248473 (prim hash-ref h k))) (kont48315 x4821248473)))
  (define (hash-set kont48316 h k v)
    (let ((x4821348474 (prim hash-set h k v))) (kont48316 x4821348474)))
  (define (hash-has-key? kont48317 h k)
    (let ((x4821448475 (prim hash-has-key? h k))) (kont48317 x4821448475)))
  (define (hash-count kont48318 h)
    (let ((x4821548476 (prim hash-count h))) (kont48318 x4821548476)))
  (define (call-foldl kont48319 lst)
    (let ((a4821648477 '0)) (foldl kont48319 + a4821648477 lst)))
  (define (brouhaha_main kont48320)
    (let ((a4821748478 '1))
      (let ((a4821848479 '2))
        (let ((a4821948480 '3))
          (let ((a4822048481 '4))
            (let ((f4832148482
                   (lambda (a4822148483) (call-foldl kont48320 a4822148483))))
              (list
               f4832148482
               a4821748478
               a4821848479
               a4821948480
               a4822048481))))))))
