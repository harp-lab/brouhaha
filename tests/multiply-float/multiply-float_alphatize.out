'((define (+ . lst) (let ((x87661 (apply-prim + lst))) x87661))
  (define (- . lst) (let ((x87662 (apply-prim - lst))) x87662))
  (define (* . lst) (let ((x87663 (apply-prim * lst))) x87663))
  (define (modulo a b) (let ((x87664 (prim modulo a b))) x87664))
  (define (/ . lst) (let ((x87665 (apply-prim / lst))) x87665))
  (define (= . lst) (let ((x87666 (apply-prim = lst))) x87666))
  (define (> . lst) (let ((x87667 (apply-prim > lst))) x87667))
  (define (< . lst) (let ((x87668 (apply-prim < lst))) x87668))
  (define (<= . lst) (let ((x87669 (apply-prim <= lst))) x87669))
  (define (>= . lst) (let ((x87670 (apply-prim >= lst))) x87670))
  (define (null? x) (let ((x87671 (prim null? x))) x87671))
  (define (equal? x y) (let ((x87672 (prim equal? x y))) x87672))
  (define (eq? x y) (let ((x87673 (prim eq? x y))) x87673))
  (define (cons a b) (let ((x87674 (prim cons a b))) x87674))
  (define (car lst) (let ((x87675 (prim car lst))) x87675))
  (define (cdr lst) (let ((x87676 (prim cdr lst))) x87676))
  (define (even? x)
    (let ((a87677 '0))
      (let ((a87678 '2))
        (let ((a87679 (modulo x a87678))) (equal? a87677 a87679)))))
  (define (odd? x)
    (let ((a87680 '1))
      (let ((a87681 '2))
        (let ((a87682 (modulo x a87681))) (equal? a87680 a87682)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a87683 (null? lst)))
      (if a87683
        (let ((x87684 '#f)) x87684)
        (let ((a87685 (car lst)))
          (let ((a87686 (equal? a87685 x)))
            (if a87686
              (let ((x87687 '#t)) x87687)
              (let ((a87688 (cdr lst))) (member? x a87688))))))))
  (define (foldl fun acc lst)
    (let ((a87689 (null? lst)))
      (if a87689
        acc
        (let ((a87690 (car lst)))
          (let ((a87691 (fun a87690 acc)))
            (let ((a87692 (cdr lst))) (foldl fun a87691 a87692)))))))
  (define (reverse-helper lst lst2)
    (let ((a87693 (null? lst)))
      (if a87693
        lst2
        (let ((a87694 (cdr lst)))
          (let ((a87695 (car lst)))
            (let ((a87696 (cons a87695 lst2)))
              (reverse-helper a87694 a87696)))))))
  (define (reverse lst) (let ((a87697 (list))) (reverse-helper lst a87697)))
  (define (take-helper lst n lst2)
    (let ((a87698 '0))
      (let ((a87699 (= n a87698)))
        (if a87699
          (let ((x87700 (reverse lst2))) x87700)
          (let ((a87701 (cdr lst)))
            (let ((a87702 '1))
              (let ((a87703 (- n a87702)))
                (let ((a87704 (car lst)))
                  (let ((a87705 (cons a87704 lst2)))
                    (take-helper a87701 a87703 a87705))))))))))
  (define (take lst n) (let ((a87706 (list))) (take-helper lst n a87706)))
  (define (length lst)
    (let ((a87707 (null? lst)))
      (if a87707
        (let ((x87708 '0)) x87708)
        (let ((a87709 '1))
          (let ((a87710 (cdr lst)))
            (let ((a87711 (length a87710))) (+ a87709 a87711)))))))
  (define (map proc lst)
    (let ((a87712 (null? lst)))
      (if a87712
        (let ((x87713 (list))) x87713)
        (let ((a87714 (car lst)))
          (let ((a87715 (proc a87714)))
            (let ((a87716 (cdr lst)))
              (let ((a87717 (map proc a87716))) (cons a87715 a87717))))))))
  (define (filter op lst)
    (let ((a87718 (null? lst)))
      (if a87718
        (let ((x87719 (list))) x87719)
        (let ((a87720 (car lst)))
          (let ((a87721 (op a87720)))
            (if a87721
              (let ((a87722 (car lst)))
                (let ((a87723 (cdr lst)))
                  (let ((a87724 (filter op a87723))) (cons a87722 a87724))))
              (let ((a87725 (cdr lst))) (filter op a87725))))))))
  (define (drop lst n)
    (let ((a87726 '0))
      (let ((a87727 (= n a87726)))
        (if a87727
          lst
          (let ((a87728 (cdr lst)))
            (let ((a87729 '1))
              (let ((a87730 (- n a87729))) (drop a87728 a87730))))))))
  (define (foldr proc acc lst)
    (let ((a87731 (null? lst)))
      (if a87731
        acc
        (let ((a87732 (car lst)))
          (let ((a87733 (cdr lst)))
            (let ((a87734 (foldr proc acc a87733))) (proc a87732 a87734)))))))
  (define (append lst1 lst2)
    (let ((a87735 (null? lst1)))
      (if a87735
        lst2
        (let ((a87736 (car lst1)))
          (let ((a87737 (cdr lst1)))
            (let ((a87738 (append a87737 lst2))) (cons a87736 a87738)))))))
  (define (hash . lst) (let ((x87739 (apply-prim hash lst))) x87739))
  (define (hash-ref h k) (let ((x87740 (prim hash-ref h k))) x87740))
  (define (hash-set h k v) (let ((x87741 (prim hash-set h k v))) x87741))
  (define (hash-has-key? h k) (let ((x87742 (prim hash-has-key? h k))) x87742))
  (define (hash-count h) (let ((x87743 (prim hash-count h))) x87743))
  (define (call)
    (let ((a87744 '1.4))
      (let ((a87745 '2.5)) (let ((a87746 '1.0)) (* a87744 a87745 a87746)))))
  (define (brouhaha_main) (let ((x87747 (call))) x87747)))
