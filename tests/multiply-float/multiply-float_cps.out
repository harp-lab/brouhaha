'((define (+ . lst)
    (let ((kont8774887848 (prim car lst)))
      (let ((lst87849 (prim cdr lst)))
        (let ((x8766187850 (apply-prim + lst87849)))
          (kont8774887848 x8766187850)))))
  (define (- . lst)
    (let ((kont8775087851 (prim car lst)))
      (let ((lst87852 (prim cdr lst)))
        (let ((x8766287853 (apply-prim - lst87852)))
          (kont8775087851 x8766287853)))))
  (define (* . lst)
    (let ((kont8775287854 (prim car lst)))
      (let ((lst87855 (prim cdr lst)))
        (let ((x8766387856 (apply-prim * lst87855)))
          (kont8775287854 x8766387856)))))
  (define (modulo kont87754 a b)
    (let ((x8766487857 (prim modulo a b))) (kont87754 x8766487857)))
  (define (/ . lst)
    (let ((kont8775587858 (prim car lst)))
      (let ((lst87859 (prim cdr lst)))
        (let ((x8766587860 (apply-prim / lst87859)))
          (kont8775587858 x8766587860)))))
  (define (= . lst)
    (let ((kont8775787861 (prim car lst)))
      (let ((lst87862 (prim cdr lst)))
        (let ((x8766687863 (apply-prim = lst87862)))
          (kont8775787861 x8766687863)))))
  (define (> . lst)
    (let ((kont8775987864 (prim car lst)))
      (let ((lst87865 (prim cdr lst)))
        (let ((x8766787866 (apply-prim > lst87865)))
          (kont8775987864 x8766787866)))))
  (define (< . lst)
    (let ((kont8776187867 (prim car lst)))
      (let ((lst87868 (prim cdr lst)))
        (let ((x8766887869 (apply-prim < lst87868)))
          (kont8776187867 x8766887869)))))
  (define (<= . lst)
    (let ((kont8776387870 (prim car lst)))
      (let ((lst87871 (prim cdr lst)))
        (let ((x8766987872 (apply-prim <= lst87871)))
          (kont8776387870 x8766987872)))))
  (define (>= . lst)
    (let ((kont8776587873 (prim car lst)))
      (let ((lst87874 (prim cdr lst)))
        (let ((x8767087875 (apply-prim >= lst87874)))
          (kont8776587873 x8767087875)))))
  (define (null? kont87767 x)
    (let ((x8767187876 (prim null? x))) (kont87767 x8767187876)))
  (define (equal? kont87768 x y)
    (let ((x8767287877 (prim equal? x y))) (kont87768 x8767287877)))
  (define (eq? kont87769 x y)
    (let ((x8767387878 (prim eq? x y))) (kont87769 x8767387878)))
  (define (cons kont87770 a b)
    (let ((x8767487879 (prim cons a b))) (kont87770 x8767487879)))
  (define (car kont87771 lst)
    (let ((x8767587880 (prim car lst))) (kont87771 x8767587880)))
  (define (cdr kont87772 lst)
    (let ((x8767687881 (prim cdr lst))) (kont87772 x8767687881)))
  (define (even? kont87773 x)
    (let ((a8767787882 '0))
      (let ((a8767887883 '2))
        (let ((f8777487884
               (lambda (a8767987885)
                 (equal? kont87773 a8767787882 a8767987885))))
          (modulo f8777487884 x a8767887883)))))
  (define (odd? kont87775 x)
    (let ((a8768087886 '1))
      (let ((a8768187887 '2))
        (let ((f8777687888
               (lambda (a8768287889)
                 (equal? kont87775 a8768087886 a8768287889))))
          (modulo f8777687888 x a8768187887)))))
  (define (list . x)
    (let ((kont8777787890 (prim car x)))
      (let ((x87891 (prim cdr x))) (kont8777787890 x87891))))
  (define (member? kont87779 x lst)
    (let ((f8778387892
           (lambda (a8768387893)
             (if a8768387893
               (let ((x8768487894 '#f)) (kont87779 x8768487894))
               (let ((f8778287895
                      (lambda (a8768587896)
                        (let ((f8778187897
                               (lambda (a8768687898)
                                 (if a8768687898
                                   (let ((x8768787899 '#t))
                                     (kont87779 x8768787899))
                                   (let ((f8778087900
                                          (lambda (a8768887901)
                                            (member?
                                             kont87779
                                             x
                                             a8768887901))))
                                     (cdr f8778087900 lst))))))
                          (equal? f8778187897 a8768587896 x)))))
                 (car f8778287895 lst))))))
      (null? f8778387892 lst)))
  (define (foldl kont87784 fun acc lst)
    (let ((f8778887902
           (lambda (a8768987903)
             (if a8768987903
               (kont87784 acc)
               (let ((f8778787904
                      (lambda (a8769087905)
                        (let ((f8778687906
                               (lambda (a8769187907)
                                 (let ((f8778587908
                                        (lambda (a8769287909)
                                          (foldl
                                           kont87784
                                           fun
                                           a8769187907
                                           a8769287909))))
                                   (cdr f8778587908 lst)))))
                          (fun f8778687906 a8769087905 acc)))))
                 (car f8778787904 lst))))))
      (null? f8778887902 lst)))
  (define (reverse-helper kont87789 lst lst2)
    (let ((f8779387910
           (lambda (a8769387911)
             (if a8769387911
               (kont87789 lst2)
               (let ((f8779287912
                      (lambda (a8769487913)
                        (let ((f8779187914
                               (lambda (a8769587915)
                                 (let ((f8779087916
                                        (lambda (a8769687917)
                                          (reverse-helper
                                           kont87789
                                           a8769487913
                                           a8769687917))))
                                   (cons f8779087916 a8769587915 lst2)))))
                          (car f8779187914 lst)))))
                 (cdr f8779287912 lst))))))
      (null? f8779387910 lst)))
  (define (reverse kont87794 lst)
    (let ((f8779587918
           (lambda (a8769787919) (reverse-helper kont87794 lst a8769787919))))
      (list f8779587918)))
  (define (take-helper kont87796 lst n lst2)
    (let ((a8769887920 '0))
      (let ((f8780287921
             (lambda (a8769987922)
               (if a8769987922
                 (let ((f8779787923
                        (lambda (x8770087924) (kont87796 x8770087924))))
                   (reverse f8779787923 lst2))
                 (let ((f8780187925
                        (lambda (a8770187926)
                          (let ((a8770287927 '1))
                            (let ((f8780087928
                                   (lambda (a8770387929)
                                     (let ((f8779987930
                                            (lambda (a8770487931)
                                              (let ((f8779887932
                                                     (lambda (a8770587933)
                                                       (take-helper
                                                        kont87796
                                                        a8770187926
                                                        a8770387929
                                                        a8770587933))))
                                                (cons
                                                 f8779887932
                                                 a8770487931
                                                 lst2)))))
                                       (car f8779987930 lst)))))
                              (- f8780087928 n a8770287927))))))
                   (cdr f8780187925 lst))))))
        (= f8780287921 n a8769887920))))
  (define (take kont87803 lst n)
    (let ((f8780487934
           (lambda (a8770687935) (take-helper kont87803 lst n a8770687935))))
      (list f8780487934)))
  (define (length kont87805 lst)
    (let ((f8780887936
           (lambda (a8770787937)
             (if a8770787937
               (let ((x8770887938 '0)) (kont87805 x8770887938))
               (let ((a8770987939 '1))
                 (let ((f8780787940
                        (lambda (a8771087941)
                          (let ((f8780687942
                                 (lambda (a8771187943)
                                   (+ kont87805 a8770987939 a8771187943))))
                            (length f8780687942 a8771087941)))))
                   (cdr f8780787940 lst)))))))
      (null? f8780887936 lst)))
  (define (map kont87809 proc lst)
    (let ((f8781587944
           (lambda (a8771287945)
             (if a8771287945
               (let ((f8781087946
                      (lambda (x8771387947) (kont87809 x8771387947))))
                 (list f8781087946))
               (let ((f8781487948
                      (lambda (a8771487949)
                        (let ((f8781387950
                               (lambda (a8771587951)
                                 (let ((f8781287952
                                        (lambda (a8771687953)
                                          (let ((f8781187954
                                                 (lambda (a8771787955)
                                                   (cons
                                                    kont87809
                                                    a8771587951
                                                    a8771787955))))
                                            (map
                                             f8781187954
                                             proc
                                             a8771687953)))))
                                   (cdr f8781287952 lst)))))
                          (proc f8781387950 a8771487949)))))
                 (car f8781487948 lst))))))
      (null? f8781587944 lst)))
  (define (filter kont87816 op lst)
    (let ((f8782487956
           (lambda (a8771887957)
             (if a8771887957
               (let ((f8781787958
                      (lambda (x8771987959) (kont87816 x8771987959))))
                 (list f8781787958))
               (let ((f8782387960
                      (lambda (a8772087961)
                        (let ((f8782287962
                               (lambda (a8772187963)
                                 (if a8772187963
                                   (let ((f8782087964
                                          (lambda (a8772287965)
                                            (let ((f8781987966
                                                   (lambda (a8772387967)
                                                     (let ((f8781887968
                                                            (lambda (a8772487969)
                                                              (cons
                                                               kont87816
                                                               a8772287965
                                                               a8772487969))))
                                                       (filter
                                                        f8781887968
                                                        op
                                                        a8772387967)))))
                                              (cdr f8781987966 lst)))))
                                     (car f8782087964 lst))
                                   (let ((f8782187970
                                          (lambda (a8772587971)
                                            (filter
                                             kont87816
                                             op
                                             a8772587971))))
                                     (cdr f8782187970 lst))))))
                          (op f8782287962 a8772087961)))))
                 (car f8782387960 lst))))))
      (null? f8782487956 lst)))
  (define (drop kont87825 lst n)
    (let ((a8772687972 '0))
      (let ((f8782887973
             (lambda (a8772787974)
               (if a8772787974
                 (kont87825 lst)
                 (let ((f8782787975
                        (lambda (a8772887976)
                          (let ((a8772987977 '1))
                            (let ((f8782687978
                                   (lambda (a8773087979)
                                     (drop
                                      kont87825
                                      a8772887976
                                      a8773087979))))
                              (- f8782687978 n a8772987977))))))
                   (cdr f8782787975 lst))))))
        (= f8782887973 n a8772687972))))
  (define (foldr kont87829 proc acc lst)
    (let ((f8783387980
           (lambda (a8773187981)
             (if a8773187981
               (kont87829 acc)
               (let ((f8783287982
                      (lambda (a8773287983)
                        (let ((f8783187984
                               (lambda (a8773387985)
                                 (let ((f8783087986
                                        (lambda (a8773487987)
                                          (proc
                                           kont87829
                                           a8773287983
                                           a8773487987))))
                                   (foldr f8783087986 proc acc a8773387985)))))
                          (cdr f8783187984 lst)))))
                 (car f8783287982 lst))))))
      (null? f8783387980 lst)))
  (define (append kont87834 lst1 lst2)
    (let ((f8783887988
           (lambda (a8773587989)
             (if a8773587989
               (kont87834 lst2)
               (let ((f8783787990
                      (lambda (a8773687991)
                        (let ((f8783687992
                               (lambda (a8773787993)
                                 (let ((f8783587994
                                        (lambda (a8773887995)
                                          (cons
                                           kont87834
                                           a8773687991
                                           a8773887995))))
                                   (append f8783587994 a8773787993 lst2)))))
                          (cdr f8783687992 lst1)))))
                 (car f8783787990 lst1))))))
      (null? f8783887988 lst1)))
  (define (hash . lst)
    (let ((kont8783987996 (prim car lst)))
      (let ((lst87997 (prim cdr lst)))
        (let ((x8773987998 (apply-prim hash lst87997)))
          (kont8783987996 x8773987998)))))
  (define (hash-ref kont87841 h k)
    (let ((x8774087999 (prim hash-ref h k))) (kont87841 x8774087999)))
  (define (hash-set kont87842 h k v)
    (let ((x8774188000 (prim hash-set h k v))) (kont87842 x8774188000)))
  (define (hash-has-key? kont87843 h k)
    (let ((x8774288001 (prim hash-has-key? h k))) (kont87843 x8774288001)))
  (define (hash-count kont87844 h)
    (let ((x8774388002 (prim hash-count h))) (kont87844 x8774388002)))
  (define (call kont87845)
    (let ((a8774488003 '1.4))
      (let ((a8774588004 '2.5))
        (let ((a8774688005 '1.0))
          (* kont87845 a8774488003 a8774588004 a8774688005)))))
  (define (brouhaha_main kont87846)
    (let ((f8784788006 (lambda (x8774788007) (kont87846 x8774788007))))
      (call f8784788006))))
