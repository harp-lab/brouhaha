'((define (+ . lst)
    (let ((kont87748 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87661 (apply-prim + lst))) (kont87748 x87661)))))
  (define (- . lst)
    (let ((kont87750 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87662 (apply-prim - lst))) (kont87750 x87662)))))
  (define (* . lst)
    (let ((kont87752 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87663 (apply-prim * lst))) (kont87752 x87663)))))
  (define (modulo kont87754 a b)
    (let ((x87664 (prim modulo a b))) (kont87754 x87664)))
  (define (/ . lst)
    (let ((kont87755 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87665 (apply-prim / lst))) (kont87755 x87665)))))
  (define (= . lst)
    (let ((kont87757 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87666 (apply-prim = lst))) (kont87757 x87666)))))
  (define (> . lst)
    (let ((kont87759 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87667 (apply-prim > lst))) (kont87759 x87667)))))
  (define (< . lst)
    (let ((kont87761 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87668 (apply-prim < lst))) (kont87761 x87668)))))
  (define (<= . lst)
    (let ((kont87763 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87669 (apply-prim <= lst))) (kont87763 x87669)))))
  (define (>= . lst)
    (let ((kont87765 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87670 (apply-prim >= lst))) (kont87765 x87670)))))
  (define (null? kont87767 x)
    (let ((x87671 (prim null? x))) (kont87767 x87671)))
  (define (equal? kont87768 x y)
    (let ((x87672 (prim equal? x y))) (kont87768 x87672)))
  (define (eq? kont87769 x y)
    (let ((x87673 (prim eq? x y))) (kont87769 x87673)))
  (define (cons kont87770 a b)
    (let ((x87674 (prim cons a b))) (kont87770 x87674)))
  (define (car kont87771 lst)
    (let ((x87675 (prim car lst))) (kont87771 x87675)))
  (define (cdr kont87772 lst)
    (let ((x87676 (prim cdr lst))) (kont87772 x87676)))
  (define (even? kont87773 x)
    (let ((a87677 '0))
      (let ((a87678 '2))
        (let ((f87774 (lambda (a87679) (equal? kont87773 a87677 a87679))))
          (modulo f87774 x a87678)))))
  (define (odd? kont87775 x)
    (let ((a87680 '1))
      (let ((a87681 '2))
        (let ((f87776 (lambda (a87682) (equal? kont87775 a87680 a87682))))
          (modulo f87776 x a87681)))))
  (define (list . x)
    (let ((kont87777 (prim car x))) (let ((x (prim cdr x))) (kont87777 x))))
  (define (member? kont87779 x lst)
    (let ((f87783
           (lambda (a87683)
             (if a87683
               (let ((x87684 '#f)) (kont87779 x87684))
               (let ((f87782
                      (lambda (a87685)
                        (let ((f87781
                               (lambda (a87686)
                                 (if a87686
                                   (let ((x87687 '#t)) (kont87779 x87687))
                                   (let ((f87780
                                          (lambda (a87688)
                                            (member? kont87779 x a87688))))
                                     (cdr f87780 lst))))))
                          (equal? f87781 a87685 x)))))
                 (car f87782 lst))))))
      (null? f87783 lst)))
  (define (foldl kont87784 fun acc lst)
    (let ((f87788
           (lambda (a87689)
             (if a87689
               (kont87784 acc)
               (let ((f87787
                      (lambda (a87690)
                        (let ((f87786
                               (lambda (a87691)
                                 (let ((f87785
                                        (lambda (a87692)
                                          (foldl
                                           kont87784
                                           fun
                                           a87691
                                           a87692))))
                                   (cdr f87785 lst)))))
                          (fun f87786 a87690 acc)))))
                 (car f87787 lst))))))
      (null? f87788 lst)))
  (define (reverse-helper kont87789 lst lst2)
    (let ((f87793
           (lambda (a87693)
             (if a87693
               (kont87789 lst2)
               (let ((f87792
                      (lambda (a87694)
                        (let ((f87791
                               (lambda (a87695)
                                 (let ((f87790
                                        (lambda (a87696)
                                          (reverse-helper
                                           kont87789
                                           a87694
                                           a87696))))
                                   (cons f87790 a87695 lst2)))))
                          (car f87791 lst)))))
                 (cdr f87792 lst))))))
      (null? f87793 lst)))
  (define (reverse kont87794 lst)
    (let ((f87795 (lambda (a87697) (reverse-helper kont87794 lst a87697))))
      (list f87795)))
  (define (take-helper kont87796 lst n lst2)
    (let ((a87698 '0))
      (let ((f87802
             (lambda (a87699)
               (if a87699
                 (let ((f87797 (lambda (x87700) (kont87796 x87700))))
                   (reverse f87797 lst2))
                 (let ((f87801
                        (lambda (a87701)
                          (let ((a87702 '1))
                            (let ((f87800
                                   (lambda (a87703)
                                     (let ((f87799
                                            (lambda (a87704)
                                              (let ((f87798
                                                     (lambda (a87705)
                                                       (take-helper
                                                        kont87796
                                                        a87701
                                                        a87703
                                                        a87705))))
                                                (cons f87798 a87704 lst2)))))
                                       (car f87799 lst)))))
                              (- f87800 n a87702))))))
                   (cdr f87801 lst))))))
        (= f87802 n a87698))))
  (define (take kont87803 lst n)
    (let ((f87804 (lambda (a87706) (take-helper kont87803 lst n a87706))))
      (list f87804)))
  (define (length kont87805 lst)
    (let ((f87808
           (lambda (a87707)
             (if a87707
               (let ((x87708 '0)) (kont87805 x87708))
               (let ((a87709 '1))
                 (let ((f87807
                        (lambda (a87710)
                          (let ((f87806
                                 (lambda (a87711)
                                   (+ kont87805 a87709 a87711))))
                            (length f87806 a87710)))))
                   (cdr f87807 lst)))))))
      (null? f87808 lst)))
  (define (map kont87809 proc lst)
    (let ((f87815
           (lambda (a87712)
             (if a87712
               (let ((f87810 (lambda (x87713) (kont87809 x87713))))
                 (list f87810))
               (let ((f87814
                      (lambda (a87714)
                        (let ((f87813
                               (lambda (a87715)
                                 (let ((f87812
                                        (lambda (a87716)
                                          (let ((f87811
                                                 (lambda (a87717)
                                                   (cons
                                                    kont87809
                                                    a87715
                                                    a87717))))
                                            (map f87811 proc a87716)))))
                                   (cdr f87812 lst)))))
                          (proc f87813 a87714)))))
                 (car f87814 lst))))))
      (null? f87815 lst)))
  (define (filter kont87816 op lst)
    (let ((f87824
           (lambda (a87718)
             (if a87718
               (let ((f87817 (lambda (x87719) (kont87816 x87719))))
                 (list f87817))
               (let ((f87823
                      (lambda (a87720)
                        (let ((f87822
                               (lambda (a87721)
                                 (if a87721
                                   (let ((f87820
                                          (lambda (a87722)
                                            (let ((f87819
                                                   (lambda (a87723)
                                                     (let ((f87818
                                                            (lambda (a87724)
                                                              (cons
                                                               kont87816
                                                               a87722
                                                               a87724))))
                                                       (filter
                                                        f87818
                                                        op
                                                        a87723)))))
                                              (cdr f87819 lst)))))
                                     (car f87820 lst))
                                   (let ((f87821
                                          (lambda (a87725)
                                            (filter kont87816 op a87725))))
                                     (cdr f87821 lst))))))
                          (op f87822 a87720)))))
                 (car f87823 lst))))))
      (null? f87824 lst)))
  (define (drop kont87825 lst n)
    (let ((a87726 '0))
      (let ((f87828
             (lambda (a87727)
               (if a87727
                 (kont87825 lst)
                 (let ((f87827
                        (lambda (a87728)
                          (let ((a87729 '1))
                            (let ((f87826
                                   (lambda (a87730)
                                     (drop kont87825 a87728 a87730))))
                              (- f87826 n a87729))))))
                   (cdr f87827 lst))))))
        (= f87828 n a87726))))
  (define (foldr kont87829 proc acc lst)
    (let ((f87833
           (lambda (a87731)
             (if a87731
               (kont87829 acc)
               (let ((f87832
                      (lambda (a87732)
                        (let ((f87831
                               (lambda (a87733)
                                 (let ((f87830
                                        (lambda (a87734)
                                          (proc kont87829 a87732 a87734))))
                                   (foldr f87830 proc acc a87733)))))
                          (cdr f87831 lst)))))
                 (car f87832 lst))))))
      (null? f87833 lst)))
  (define (append kont87834 lst1 lst2)
    (let ((f87838
           (lambda (a87735)
             (if a87735
               (kont87834 lst2)
               (let ((f87837
                      (lambda (a87736)
                        (let ((f87836
                               (lambda (a87737)
                                 (let ((f87835
                                        (lambda (a87738)
                                          (cons kont87834 a87736 a87738))))
                                   (append f87835 a87737 lst2)))))
                          (cdr f87836 lst1)))))
                 (car f87837 lst1))))))
      (null? f87838 lst1)))
  (define (hash . lst)
    (let ((kont87839 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x87739 (apply-prim hash lst))) (kont87839 x87739)))))
  (define (hash-ref kont87841 h k)
    (let ((x87740 (prim hash-ref h k))) (kont87841 x87740)))
  (define (hash-set kont87842 h k v)
    (let ((x87741 (prim hash-set h k v))) (kont87842 x87741)))
  (define (hash-has-key? kont87843 h k)
    (let ((x87742 (prim hash-has-key? h k))) (kont87843 x87742)))
  (define (hash-count kont87844 h)
    (let ((x87743 (prim hash-count h))) (kont87844 x87743)))
  (define (call kont87845)
    (let ((a87744 '1.4))
      (let ((a87745 '2.5))
        (let ((a87746 '1.0)) (* kont87845 a87744 a87745 a87746)))))
  (define (brouhaha_main kont87846)
    (let ((f87847 (lambda (x87747) (kont87846 x87747)))) (call f87847))))
