'((define (+ . lst) (let ((x64794 (apply-prim + lst))) x64794))
  (define (- . lst) (let ((x64795 (apply-prim - lst))) x64795))
  (define (* . lst) (let ((x64796 (apply-prim * lst))) x64796))
  (define (modulo a b) (let ((x64797 (prim modulo a b))) x64797))
  (define (/ . lst) (let ((x64798 (apply-prim / lst))) x64798))
  (define (= . lst) (let ((x64799 (apply-prim = lst))) x64799))
  (define (> . lst) (let ((x64800 (apply-prim > lst))) x64800))
  (define (< . lst) (let ((x64801 (apply-prim < lst))) x64801))
  (define (<= . lst) (let ((x64802 (apply-prim <= lst))) x64802))
  (define (>= . lst) (let ((x64803 (apply-prim >= lst))) x64803))
  (define (null? x) (let ((x64804 (prim null? x))) x64804))
  (define (equal? x y) (let ((x64805 (prim equal? x y))) x64805))
  (define (eq? x y) (let ((x64806 (prim eq? x y))) x64806))
  (define (cons a b) (let ((x64807 (prim cons a b))) x64807))
  (define (car lst) (let ((x64808 (prim car lst))) x64808))
  (define (cdr lst) (let ((x64809 (prim cdr lst))) x64809))
  (define (even? x)
    (let ((a64810 '0))
      (let ((a64811 '2))
        (let ((a64812 (modulo x a64811))) (equal? a64810 a64812)))))
  (define (odd? x)
    (let ((a64813 '1))
      (let ((a64814 '2))
        (let ((a64815 (modulo x a64814))) (equal? a64813 a64815)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a64816 (null? lst)))
      (if a64816
        (let ((x64817 '#f)) x64817)
        (let ((a64818 (car lst)))
          (let ((a64819 (equal? a64818 x)))
            (if a64819
              (let ((x64820 '#t)) x64820)
              (let ((a64821 (cdr lst))) (member? x a64821))))))))
  (define (foldl fun acc lst)
    (let ((a64822 (null? lst)))
      (if a64822
        acc
        (let ((a64823 (car lst)))
          (let ((a64824 (fun a64823 acc)))
            (let ((a64825 (cdr lst))) (foldl fun a64824 a64825)))))))
  (define (reverse-helper lst lst2)
    (let ((a64826 (null? lst)))
      (if a64826
        lst2
        (let ((a64827 (cdr lst)))
          (let ((a64828 (car lst)))
            (let ((a64829 (cons a64828 lst2)))
              (reverse-helper a64827 a64829)))))))
  (define (reverse lst) (let ((a64830 (list))) (reverse-helper lst a64830)))
  (define (take-helper lst n lst2)
    (let ((a64831 '0))
      (let ((a64832 (= n a64831)))
        (if a64832
          (let ((x64833 (reverse lst2))) x64833)
          (let ((a64834 (cdr lst)))
            (let ((a64835 '1))
              (let ((a64836 (- n a64835)))
                (let ((a64837 (car lst)))
                  (let ((a64838 (cons a64837 lst2)))
                    (take-helper a64834 a64836 a64838))))))))))
  (define (take lst n) (let ((a64839 (list))) (take-helper lst n a64839)))
  (define (length lst)
    (let ((a64840 (null? lst)))
      (if a64840
        (let ((x64841 '0)) x64841)
        (let ((a64842 '1))
          (let ((a64843 (cdr lst)))
            (let ((a64844 (length a64843))) (+ a64842 a64844)))))))
  (define (map proc lst)
    (let ((a64845 (null? lst)))
      (if a64845
        (let ((x64846 (list))) x64846)
        (let ((a64847 (car lst)))
          (let ((a64848 (proc a64847)))
            (let ((a64849 (cdr lst)))
              (let ((a64850 (map proc a64849))) (cons a64848 a64850))))))))
  (define (filter op lst)
    (let ((a64851 (null? lst)))
      (if a64851
        (let ((x64852 (list))) x64852)
        (let ((a64853 (car lst)))
          (let ((a64854 (op a64853)))
            (if a64854
              (let ((a64855 (car lst)))
                (let ((a64856 (cdr lst)))
                  (let ((a64857 (filter op a64856))) (cons a64855 a64857))))
              (let ((a64858 (cdr lst))) (filter op a64858))))))))
  (define (drop lst n)
    (let ((a64859 '0))
      (let ((a64860 (= n a64859)))
        (if a64860
          lst
          (let ((a64861 (cdr lst)))
            (let ((a64862 '1))
              (let ((a64863 (- n a64862))) (drop a64861 a64863))))))))
  (define (foldr proc acc lst)
    (let ((a64864 (null? lst)))
      (if a64864
        acc
        (let ((a64865 (car lst)))
          (let ((a64866 (cdr lst)))
            (let ((a64867 (foldr proc acc a64866))) (proc a64865 a64867)))))))
  (define (append lst1 lst2)
    (let ((a64868 (null? lst1)))
      (if a64868
        lst2
        (let ((a64869 (car lst1)))
          (let ((a64870 (cdr lst1)))
            (let ((a64871 (append a64870 lst2))) (cons a64869 a64871)))))))
  (define (hash . lst) (let ((x64872 (apply-prim hash lst))) x64872))
  (define (hash-ref h k) (let ((x64873 (prim hash-ref h k))) x64873))
  (define (hash-set h k v) (let ((x64874 (prim hash-set h k v))) x64874))
  (define (hash-has-key? h k) (let ((x64875 (prim hash-has-key? h k))) x64875))
  (define (hash-count h) (let ((x64876 (prim hash-count h))) x64876))
  (define (interleave-direct lst1 lst2)
    (let ((a64877 (null? lst1)))
      (if a64877
        lst2
        (let ((a64878 (null? lst2)))
          (if a64878
            lst1
            (let ((a64879 (car lst1)))
              (let ((a64880 (car lst2)))
                (let ((a64881 (cdr lst1)))
                  (let ((a64882 (cdr lst2)))
                    (let ((a64883 (interleave-direct a64881 a64882)))
                      (let ((a64884 (cons a64880 a64883)))
                        (cons a64879 a64884))))))))))))
  (define (brouhaha_main)
    (let ((a64885 '1))
      (let ((a64886 '2))
        (let ((a64887 '3))
          (let ((a64888 '4))
            (let ((a64889 '5))
              (let ((a64890 '6))
                (let ((a64891
                       (list a64885 a64886 a64887 a64888 a64889 a64890)))
                  (let ((a64892 '7))
                    (let ((a64893 '8))
                      (let ((a64894 '9))
                        (let ((a64895 '10))
                          (let ((a64896 (list a64892 a64893 a64894 a64895)))
                            (interleave-direct a64891 a64896)))))))))))))))
