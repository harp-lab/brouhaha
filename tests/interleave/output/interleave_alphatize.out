'((define (+ . lst) (let ((x61815 (apply-prim + lst))) x61815))
  (define (- . lst) (let ((x61816 (apply-prim - lst))) x61816))
  (define (* . lst) (let ((x61817 (apply-prim * lst))) x61817))
  (define (modulo a b) (let ((x61818 (prim modulo a b))) x61818))
  (define (/ . lst) (let ((x61819 (apply-prim / lst))) x61819))
  (define (= . lst) (let ((x61820 (apply-prim = lst))) x61820))
  (define (> . lst) (let ((x61821 (apply-prim > lst))) x61821))
  (define (< . lst) (let ((x61822 (apply-prim < lst))) x61822))
  (define (<= . lst) (let ((x61823 (apply-prim <= lst))) x61823))
  (define (>= . lst) (let ((x61824 (apply-prim >= lst))) x61824))
  (define (null? x) (let ((x61825 (prim null? x))) x61825))
  (define (equal? x y) (let ((x61826 (prim equal? x y))) x61826))
  (define (eq? x y) (let ((x61827 (prim eq? x y))) x61827))
  (define (cons a b) (let ((x61828 (prim cons a b))) x61828))
  (define (car lst) (let ((x61829 (prim car lst))) x61829))
  (define (cdr lst) (let ((x61830 (prim cdr lst))) x61830))
  (define (even? x)
    (let ((a61831 '0))
      (let ((a61832 '2))
        (let ((a61833 (modulo x a61832))) (equal? a61831 a61833)))))
  (define (odd? x)
    (let ((a61834 '1))
      (let ((a61835 '2))
        (let ((a61836 (modulo x a61835))) (equal? a61834 a61836)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a61837 (null? lst)))
      (if a61837
        (let ((x61838 '#f)) x61838)
        (let ((a61839 (car lst)))
          (let ((a61840 (equal? a61839 x)))
            (if a61840
              (let ((x61841 '#t)) x61841)
              (let ((a61842 (cdr lst))) (member? x a61842))))))))
  (define (foldl fun acc lst)
    (let ((a61843 (null? lst)))
      (if a61843
        acc
        (let ((a61844 (car lst)))
          (let ((a61845 (fun a61844 acc)))
            (let ((a61846 (cdr lst))) (foldl fun a61845 a61846)))))))
  (define (reverse-helper lst lst2)
    (let ((a61847 (null? lst)))
      (if a61847
        lst2
        (let ((a61848 (cdr lst)))
          (let ((a61849 (car lst)))
            (let ((a61850 (cons a61849 lst2)))
              (reverse-helper a61848 a61850)))))))
  (define (reverse lst) (let ((a61851 (list))) (reverse-helper lst a61851)))
  (define (take-helper lst n lst2)
    (let ((a61852 '0))
      (let ((a61853 (= n a61852)))
        (if a61853
          (let ((x61854 (reverse lst2))) x61854)
          (let ((a61855 (cdr lst)))
            (let ((a61856 '1))
              (let ((a61857 (- n a61856)))
                (let ((a61858 (car lst)))
                  (let ((a61859 (cons a61858 lst2)))
                    (take-helper a61855 a61857 a61859))))))))))
  (define (take lst n) (let ((a61860 (list))) (take-helper lst n a61860)))
  (define (length lst)
    (let ((a61861 (null? lst)))
      (if a61861
        (let ((x61862 '0)) x61862)
        (let ((a61863 '1))
          (let ((a61864 (cdr lst)))
            (let ((a61865 (length a61864))) (+ a61863 a61865)))))))
  (define (map proc lst)
    (let ((a61866 (null? lst)))
      (if a61866
        (let ((x61867 (list))) x61867)
        (let ((a61868 (car lst)))
          (let ((a61869 (proc a61868)))
            (let ((a61870 (cdr lst)))
              (let ((a61871 (map proc a61870))) (cons a61869 a61871))))))))
  (define (filter op lst)
    (let ((a61872 (null? lst)))
      (if a61872
        (let ((x61873 (list))) x61873)
        (let ((a61874 (car lst)))
          (let ((a61875 (op a61874)))
            (if a61875
              (let ((a61876 (car lst)))
                (let ((a61877 (cdr lst)))
                  (let ((a61878 (filter op a61877))) (cons a61876 a61878))))
              (let ((a61879 (cdr lst))) (filter op a61879))))))))
  (define (drop lst n)
    (let ((a61880 '0))
      (let ((a61881 (= n a61880)))
        (if a61881
          lst
          (let ((a61882 (cdr lst)))
            (let ((a61883 '1))
              (let ((a61884 (- n a61883))) (drop a61882 a61884))))))))
  (define (foldr proc acc lst)
    (let ((a61885 (null? lst)))
      (if a61885
        acc
        (let ((a61886 (car lst)))
          (let ((a61887 (cdr lst)))
            (let ((a61888 (foldr proc acc a61887))) (proc a61886 a61888)))))))
  (define (append lst1 lst2)
    (let ((a61889 (null? lst1)))
      (if a61889
        lst2
        (let ((a61890 (car lst1)))
          (let ((a61891 (cdr lst1)))
            (let ((a61892 (append a61891 lst2))) (cons a61890 a61892)))))))
  (define (hash . lst) (let ((x61893 (apply-prim hash lst))) x61893))
  (define (hash-ref h k) (let ((x61894 (prim hash-ref h k))) x61894))
  (define (hash-set h k v) (let ((x61895 (prim hash-set h k v))) x61895))
  (define (hash-has-key? h k) (let ((x61896 (prim hash-has-key? h k))) x61896))
  (define (hash-count h) (let ((x61897 (prim hash-count h))) x61897))
  (define (interleave-direct lst1 lst2)
    (let ((a61898 (null? lst1)))
      (if a61898
        lst2
        (let ((a61899 (null? lst2)))
          (if a61899
            lst1
            (let ((a61900 (car lst1)))
              (let ((a61901 (car lst2)))
                (let ((a61902 (cdr lst1)))
                  (let ((a61903 (cdr lst2)))
                    (let ((a61904 (interleave-direct a61902 a61903)))
                      (let ((a61905 (cons a61901 a61904)))
                        (cons a61900 a61905))))))))))))
  (define (brouhaha_main)
    (let ((a61906 '1))
      (let ((a61907 '2))
        (let ((a61908 '3))
          (let ((a61909 '4))
            (let ((a61910 '5))
              (let ((a61911 '6))
                (let ((a61912
                       (list a61906 a61907 a61908 a61909 a61910 a61911)))
                  (let ((a61913 '7))
                    (let ((a61914 '8))
                      (let ((a61915 '9))
                        (let ((a61916 '10))
                          (let ((a61917 (list a61913 a61914 a61915 a61916)))
                            (interleave-direct a61912 a61917)))))))))))))))
