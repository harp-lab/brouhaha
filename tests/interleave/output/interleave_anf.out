'((define (+ . lst)
    (let ((kont61918 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61815 (apply-prim + lst))) (kont61918 x61815)))))
  (define (- . lst)
    (let ((kont61920 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61816 (apply-prim - lst))) (kont61920 x61816)))))
  (define (* . lst)
    (let ((kont61922 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61817 (apply-prim * lst))) (kont61922 x61817)))))
  (define (modulo kont61924 a b)
    (let ((x61818 (prim modulo a b))) (kont61924 x61818)))
  (define (/ . lst)
    (let ((kont61925 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61819 (apply-prim / lst))) (kont61925 x61819)))))
  (define (= . lst)
    (let ((kont61927 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61820 (apply-prim = lst))) (kont61927 x61820)))))
  (define (> . lst)
    (let ((kont61929 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61821 (apply-prim > lst))) (kont61929 x61821)))))
  (define (< . lst)
    (let ((kont61931 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61822 (apply-prim < lst))) (kont61931 x61822)))))
  (define (<= . lst)
    (let ((kont61933 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61823 (apply-prim <= lst))) (kont61933 x61823)))))
  (define (>= . lst)
    (let ((kont61935 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61824 (apply-prim >= lst))) (kont61935 x61824)))))
  (define (null? kont61937 x)
    (let ((x61825 (prim null? x))) (kont61937 x61825)))
  (define (equal? kont61938 x y)
    (let ((x61826 (prim equal? x y))) (kont61938 x61826)))
  (define (eq? kont61939 x y)
    (let ((x61827 (prim eq? x y))) (kont61939 x61827)))
  (define (cons kont61940 a b)
    (let ((x61828 (prim cons a b))) (kont61940 x61828)))
  (define (car kont61941 lst)
    (let ((x61829 (prim car lst))) (kont61941 x61829)))
  (define (cdr kont61942 lst)
    (let ((x61830 (prim cdr lst))) (kont61942 x61830)))
  (define (even? kont61943 x)
    (let ((a61831 '0))
      (let ((a61832 '2))
        (let ((f61944 (lambda (a61833) (equal? kont61943 a61831 a61833))))
          (modulo f61944 x a61832)))))
  (define (odd? kont61945 x)
    (let ((a61834 '1))
      (let ((a61835 '2))
        (let ((f61946 (lambda (a61836) (equal? kont61945 a61834 a61836))))
          (modulo f61946 x a61835)))))
  (define (list . x)
    (let ((kont61947 (prim car x))) (let ((x (prim cdr x))) (kont61947 x))))
  (define (member? kont61949 x lst)
    (let ((f61953
           (lambda (a61837)
             (if a61837
               (let ((x61838 '#f)) (kont61949 x61838))
               (let ((f61952
                      (lambda (a61839)
                        (let ((f61951
                               (lambda (a61840)
                                 (if a61840
                                   (let ((x61841 '#t)) (kont61949 x61841))
                                   (let ((f61950
                                          (lambda (a61842)
                                            (member? kont61949 x a61842))))
                                     (cdr f61950 lst))))))
                          (equal? f61951 a61839 x)))))
                 (car f61952 lst))))))
      (null? f61953 lst)))
  (define (foldl kont61954 fun acc lst)
    (let ((f61958
           (lambda (a61843)
             (if a61843
               (kont61954 acc)
               (let ((f61957
                      (lambda (a61844)
                        (let ((f61956
                               (lambda (a61845)
                                 (let ((f61955
                                        (lambda (a61846)
                                          (foldl
                                           kont61954
                                           fun
                                           a61845
                                           a61846))))
                                   (cdr f61955 lst)))))
                          (fun f61956 a61844 acc)))))
                 (car f61957 lst))))))
      (null? f61958 lst)))
  (define (reverse-helper kont61959 lst lst2)
    (let ((f61963
           (lambda (a61847)
             (if a61847
               (kont61959 lst2)
               (let ((f61962
                      (lambda (a61848)
                        (let ((f61961
                               (lambda (a61849)
                                 (let ((f61960
                                        (lambda (a61850)
                                          (reverse-helper
                                           kont61959
                                           a61848
                                           a61850))))
                                   (cons f61960 a61849 lst2)))))
                          (car f61961 lst)))))
                 (cdr f61962 lst))))))
      (null? f61963 lst)))
  (define (reverse kont61964 lst)
    (let ((f61965 (lambda (a61851) (reverse-helper kont61964 lst a61851))))
      (list f61965)))
  (define (take-helper kont61966 lst n lst2)
    (let ((a61852 '0))
      (let ((f61972
             (lambda (a61853)
               (if a61853
                 (let ((f61967 (lambda (x61854) (kont61966 x61854))))
                   (reverse f61967 lst2))
                 (let ((f61971
                        (lambda (a61855)
                          (let ((a61856 '1))
                            (let ((f61970
                                   (lambda (a61857)
                                     (let ((f61969
                                            (lambda (a61858)
                                              (let ((f61968
                                                     (lambda (a61859)
                                                       (take-helper
                                                        kont61966
                                                        a61855
                                                        a61857
                                                        a61859))))
                                                (cons f61968 a61858 lst2)))))
                                       (car f61969 lst)))))
                              (- f61970 n a61856))))))
                   (cdr f61971 lst))))))
        (= f61972 n a61852))))
  (define (take kont61973 lst n)
    (let ((f61974 (lambda (a61860) (take-helper kont61973 lst n a61860))))
      (list f61974)))
  (define (length kont61975 lst)
    (let ((f61978
           (lambda (a61861)
             (if a61861
               (let ((x61862 '0)) (kont61975 x61862))
               (let ((a61863 '1))
                 (let ((f61977
                        (lambda (a61864)
                          (let ((f61976
                                 (lambda (a61865)
                                   (+ kont61975 a61863 a61865))))
                            (length f61976 a61864)))))
                   (cdr f61977 lst)))))))
      (null? f61978 lst)))
  (define (map kont61979 proc lst)
    (let ((f61985
           (lambda (a61866)
             (if a61866
               (let ((f61980 (lambda (x61867) (kont61979 x61867))))
                 (list f61980))
               (let ((f61984
                      (lambda (a61868)
                        (let ((f61983
                               (lambda (a61869)
                                 (let ((f61982
                                        (lambda (a61870)
                                          (let ((f61981
                                                 (lambda (a61871)
                                                   (cons
                                                    kont61979
                                                    a61869
                                                    a61871))))
                                            (map f61981 proc a61870)))))
                                   (cdr f61982 lst)))))
                          (proc f61983 a61868)))))
                 (car f61984 lst))))))
      (null? f61985 lst)))
  (define (filter kont61986 op lst)
    (let ((f61994
           (lambda (a61872)
             (if a61872
               (let ((f61987 (lambda (x61873) (kont61986 x61873))))
                 (list f61987))
               (let ((f61993
                      (lambda (a61874)
                        (let ((f61992
                               (lambda (a61875)
                                 (if a61875
                                   (let ((f61990
                                          (lambda (a61876)
                                            (let ((f61989
                                                   (lambda (a61877)
                                                     (let ((f61988
                                                            (lambda (a61878)
                                                              (cons
                                                               kont61986
                                                               a61876
                                                               a61878))))
                                                       (filter
                                                        f61988
                                                        op
                                                        a61877)))))
                                              (cdr f61989 lst)))))
                                     (car f61990 lst))
                                   (let ((f61991
                                          (lambda (a61879)
                                            (filter kont61986 op a61879))))
                                     (cdr f61991 lst))))))
                          (op f61992 a61874)))))
                 (car f61993 lst))))))
      (null? f61994 lst)))
  (define (drop kont61995 lst n)
    (let ((a61880 '0))
      (let ((f61998
             (lambda (a61881)
               (if a61881
                 (kont61995 lst)
                 (let ((f61997
                        (lambda (a61882)
                          (let ((a61883 '1))
                            (let ((f61996
                                   (lambda (a61884)
                                     (drop kont61995 a61882 a61884))))
                              (- f61996 n a61883))))))
                   (cdr f61997 lst))))))
        (= f61998 n a61880))))
  (define (foldr kont61999 proc acc lst)
    (let ((f62003
           (lambda (a61885)
             (if a61885
               (kont61999 acc)
               (let ((f62002
                      (lambda (a61886)
                        (let ((f62001
                               (lambda (a61887)
                                 (let ((f62000
                                        (lambda (a61888)
                                          (proc kont61999 a61886 a61888))))
                                   (foldr f62000 proc acc a61887)))))
                          (cdr f62001 lst)))))
                 (car f62002 lst))))))
      (null? f62003 lst)))
  (define (append kont62004 lst1 lst2)
    (let ((f62008
           (lambda (a61889)
             (if a61889
               (kont62004 lst2)
               (let ((f62007
                      (lambda (a61890)
                        (let ((f62006
                               (lambda (a61891)
                                 (let ((f62005
                                        (lambda (a61892)
                                          (cons kont62004 a61890 a61892))))
                                   (append f62005 a61891 lst2)))))
                          (cdr f62006 lst1)))))
                 (car f62007 lst1))))))
      (null? f62008 lst1)))
  (define (hash . lst)
    (let ((kont62009 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x61893 (apply-prim hash lst))) (kont62009 x61893)))))
  (define (hash-ref kont62011 h k)
    (let ((x61894 (prim hash-ref h k))) (kont62011 x61894)))
  (define (hash-set kont62012 h k v)
    (let ((x61895 (prim hash-set h k v))) (kont62012 x61895)))
  (define (hash-has-key? kont62013 h k)
    (let ((x61896 (prim hash-has-key? h k))) (kont62013 x61896)))
  (define (hash-count kont62014 h)
    (let ((x61897 (prim hash-count h))) (kont62014 x61897)))
  (define (interleave-direct kont62015 lst1 lst2)
    (let ((f62023
           (lambda (a61898)
             (if a61898
               (kont62015 lst2)
               (let ((f62022
                      (lambda (a61899)
                        (if a61899
                          (kont62015 lst1)
                          (let ((f62021
                                 (lambda (a61900)
                                   (let ((f62020
                                          (lambda (a61901)
                                            (let ((f62019
                                                   (lambda (a61902)
                                                     (let ((f62018
                                                            (lambda (a61903)
                                                              (let ((f62017
                                                                     (lambda (a61904)
                                                                       (let ((f62016
                                                                              (lambda (a61905)
                                                                                (cons
                                                                                 kont62015
                                                                                 a61900
                                                                                 a61905))))
                                                                         (cons
                                                                          f62016
                                                                          a61901
                                                                          a61904)))))
                                                                (interleave-direct
                                                                 f62017
                                                                 a61902
                                                                 a61903)))))
                                                       (cdr f62018 lst2)))))
                                              (cdr f62019 lst1)))))
                                     (car f62020 lst2)))))
                            (car f62021 lst1))))))
                 (null? f62022 lst2))))))
      (null? f62023 lst1)))
  (define (brouhaha_main kont62024)
    (let ((a61906 '1))
      (let ((a61907 '2))
        (let ((a61908 '3))
          (let ((a61909 '4))
            (let ((a61910 '5))
              (let ((a61911 '6))
                (let ((f62026
                       (lambda (a61912)
                         (let ((a61913 '7))
                           (let ((a61914 '8))
                             (let ((a61915 '9))
                               (let ((a61916 '10))
                                 (let ((f62025
                                        (lambda (a61917)
                                          (interleave-direct
                                           kont62024
                                           a61912
                                           a61917))))
                                   (list
                                    f62025
                                    a61913
                                    a61914
                                    a61915
                                    a61916)))))))))
                  (list
                   f62026
                   a61906
                   a61907
                   a61908
                   a61909
                   a61910
                   a61911))))))))))
