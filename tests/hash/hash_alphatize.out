'((define (+ . lst) (let ((x63618 (apply-prim + lst))) x63618))
  (define (- . lst) (let ((x63619 (apply-prim - lst))) x63619))
  (define (* . lst) (let ((x63620 (apply-prim * lst))) x63620))
  (define (modulo a b) (let ((x63621 (prim modulo a b))) x63621))
  (define (/ . lst) (let ((x63622 (apply-prim / lst))) x63622))
  (define (= . lst) (let ((x63623 (apply-prim = lst))) x63623))
  (define (> . lst) (let ((x63624 (apply-prim > lst))) x63624))
  (define (< . lst) (let ((x63625 (apply-prim < lst))) x63625))
  (define (<= . lst) (let ((x63626 (apply-prim <= lst))) x63626))
  (define (>= . lst) (let ((x63627 (apply-prim >= lst))) x63627))
  (define (null? x) (let ((x63628 (prim null? x))) x63628))
  (define (equal? x y) (let ((x63629 (prim equal? x y))) x63629))
  (define (eq? x y) (let ((x63630 (prim eq? x y))) x63630))
  (define (cons a b) (let ((x63631 (prim cons a b))) x63631))
  (define (car lst) (let ((x63632 (prim car lst))) x63632))
  (define (cdr lst) (let ((x63633 (prim cdr lst))) x63633))
  (define (even? x)
    (let ((a63634 '0))
      (let ((a63635 '2))
        (let ((a63636 (modulo x a63635))) (equal? a63634 a63636)))))
  (define (odd? x)
    (let ((a63637 '1))
      (let ((a63638 '2))
        (let ((a63639 (modulo x a63638))) (equal? a63637 a63639)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a63640 (null? lst)))
      (if a63640
        (let ((x63641 '#f)) x63641)
        (let ((a63642 (car lst)))
          (let ((a63643 (equal? a63642 x)))
            (if a63643
              (let ((x63644 '#t)) x63644)
              (let ((a63645 (cdr lst))) (member? x a63645))))))))
  (define (foldl fun acc lst)
    (let ((a63646 (null? lst)))
      (if a63646
        acc
        (let ((a63647 (car lst)))
          (let ((a63648 (fun a63647 acc)))
            (let ((a63649 (cdr lst))) (foldl fun a63648 a63649)))))))
  (define (reverse-helper lst lst2)
    (let ((a63650 (null? lst)))
      (if a63650
        lst2
        (let ((a63651 (cdr lst)))
          (let ((a63652 (car lst)))
            (let ((a63653 (cons a63652 lst2)))
              (reverse-helper a63651 a63653)))))))
  (define (reverse lst) (let ((a63654 (list))) (reverse-helper lst a63654)))
  (define (take-helper lst n lst2)
    (let ((a63655 '0))
      (let ((a63656 (= n a63655)))
        (if a63656
          (let ((x63657 (reverse lst2))) x63657)
          (let ((a63658 (cdr lst)))
            (let ((a63659 '1))
              (let ((a63660 (- n a63659)))
                (let ((a63661 (car lst)))
                  (let ((a63662 (cons a63661 lst2)))
                    (take-helper a63658 a63660 a63662))))))))))
  (define (take lst n) (let ((a63663 (list))) (take-helper lst n a63663)))
  (define (length lst)
    (let ((a63664 (null? lst)))
      (if a63664
        (let ((x63665 '0)) x63665)
        (let ((a63666 '1))
          (let ((a63667 (cdr lst)))
            (let ((a63668 (length a63667))) (+ a63666 a63668)))))))
  (define (map proc lst)
    (let ((a63669 (null? lst)))
      (if a63669
        (let ((x63670 (list))) x63670)
        (let ((a63671 (car lst)))
          (let ((a63672 (proc a63671)))
            (let ((a63673 (cdr lst)))
              (let ((a63674 (map proc a63673))) (cons a63672 a63674))))))))
  (define (filter op lst)
    (let ((a63675 (null? lst)))
      (if a63675
        (let ((x63676 (list))) x63676)
        (let ((a63677 (car lst)))
          (let ((a63678 (op a63677)))
            (if a63678
              (let ((a63679 (car lst)))
                (let ((a63680 (cdr lst)))
                  (let ((a63681 (filter op a63680))) (cons a63679 a63681))))
              (let ((a63682 (cdr lst))) (filter op a63682))))))))
  (define (drop lst n)
    (let ((a63683 '0))
      (let ((a63684 (= n a63683)))
        (if a63684
          lst
          (let ((a63685 (cdr lst)))
            (let ((a63686 '1))
              (let ((a63687 (- n a63686))) (drop a63685 a63687))))))))
  (define (foldr proc acc lst)
    (let ((a63688 (null? lst)))
      (if a63688
        acc
        (let ((a63689 (car lst)))
          (let ((a63690 (cdr lst)))
            (let ((a63691 (foldr proc acc a63690))) (proc a63689 a63691)))))))
  (define (append lst1 lst2)
    (let ((a63692 (null? lst1)))
      (if a63692
        lst2
        (let ((a63693 (car lst1)))
          (let ((a63694 (cdr lst1)))
            (let ((a63695 (append a63694 lst2))) (cons a63693 a63695)))))))
  (define (hash . lst) (let ((x63696 (apply-prim hash lst))) x63696))
  (define (hash-ref h k) (let ((x63697 (prim hash-ref h k))) x63697))
  (define (hash-set h k v) (let ((x63698 (prim hash-set h k v))) x63698))
  (define (hash-has-key? h k) (let ((x63699 (prim hash-has-key? h k))) x63699))
  (define (hash-count h) (let ((x63700 (prim hash-count h))) x63700))
  (define (call)
    (let ((a63701 '100))
      (let ((a63702 '80))
        (let ((a63703 '10))
          (let ((a63704 '2)) (hash a63701 a63702 a63703 a63704))))))
  (define (brouhaha_main) (let ((x63705 (call))) x63705)))
