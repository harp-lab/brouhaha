'((define (+ . lst) (let ((x54653 (apply-prim + lst))) x54653))
  (define (- . lst) (let ((x54654 (apply-prim - lst))) x54654))
  (define (* . lst) (let ((x54655 (apply-prim * lst))) x54655))
  (define (modulo a b) (let ((x54656 (prim modulo a b))) x54656))
  (define (/ . lst) (let ((x54657 (apply-prim / lst))) x54657))
  (define (= . lst) (let ((x54658 (apply-prim = lst))) x54658))
  (define (> . lst) (let ((x54659 (apply-prim > lst))) x54659))
  (define (< . lst) (let ((x54660 (apply-prim < lst))) x54660))
  (define (<= . lst) (let ((x54661 (apply-prim <= lst))) x54661))
  (define (>= . lst) (let ((x54662 (apply-prim >= lst))) x54662))
  (define (null? x) (let ((x54663 (prim null? x))) x54663))
  (define (equal? x y) (let ((x54664 (prim equal? x y))) x54664))
  (define (eq? x y) (let ((x54665 (prim eq? x y))) x54665))
  (define (cons a b) (let ((x54666 (prim cons a b))) x54666))
  (define (car lst) (let ((x54667 (prim car lst))) x54667))
  (define (cdr lst) (let ((x54668 (prim cdr lst))) x54668))
  (define (even? x)
    (let ((a54669 '0))
      (let ((a54670 '2))
        (let ((a54671 (modulo x a54670))) (equal? a54669 a54671)))))
  (define (odd? x)
    (let ((a54672 '1))
      (let ((a54673 '2))
        (let ((a54674 (modulo x a54673))) (equal? a54672 a54674)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a54675 (null? lst)))
      (if a54675
        (let ((x54676 '#f)) x54676)
        (let ((a54677 (car lst)))
          (let ((a54678 (equal? a54677 x)))
            (if a54678
              (let ((x54679 '#t)) x54679)
              (let ((a54680 (cdr lst))) (member? x a54680))))))))
  (define (foldl fun acc lst)
    (let ((a54681 (null? lst)))
      (if a54681
        acc
        (let ((a54682 (car lst)))
          (let ((a54683 (fun a54682 acc)))
            (let ((a54684 (cdr lst))) (foldl fun a54683 a54684)))))))
  (define (reverse-helper lst lst2)
    (let ((a54685 (null? lst)))
      (if a54685
        lst2
        (let ((a54686 (cdr lst)))
          (let ((a54687 (car lst)))
            (let ((a54688 (cons a54687 lst2)))
              (reverse-helper a54686 a54688)))))))
  (define (reverse lst) (let ((a54689 (list))) (reverse-helper lst a54689)))
  (define (take-helper lst n lst2)
    (let ((a54690 '0))
      (let ((a54691 (= n a54690)))
        (if a54691
          (let ((x54692 (reverse lst2))) x54692)
          (let ((a54693 (cdr lst)))
            (let ((a54694 '1))
              (let ((a54695 (- n a54694)))
                (let ((a54696 (car lst)))
                  (let ((a54697 (cons a54696 lst2)))
                    (take-helper a54693 a54695 a54697))))))))))
  (define (take lst n) (let ((a54698 (list))) (take-helper lst n a54698)))
  (define (length lst)
    (let ((a54699 (null? lst)))
      (if a54699
        (let ((x54700 '0)) x54700)
        (let ((a54701 '1))
          (let ((a54702 (cdr lst)))
            (let ((a54703 (length a54702))) (+ a54701 a54703)))))))
  (define (map proc lst)
    (let ((a54704 (null? lst)))
      (if a54704
        (let ((x54705 (list))) x54705)
        (let ((a54706 (car lst)))
          (let ((a54707 (proc a54706)))
            (let ((a54708 (cdr lst)))
              (let ((a54709 (map proc a54708))) (cons a54707 a54709))))))))
  (define (filter op lst)
    (let ((a54710 (null? lst)))
      (if a54710
        (let ((x54711 (list))) x54711)
        (let ((a54712 (car lst)))
          (let ((a54713 (op a54712)))
            (if a54713
              (let ((a54714 (car lst)))
                (let ((a54715 (cdr lst)))
                  (let ((a54716 (filter op a54715))) (cons a54714 a54716))))
              (let ((a54717 (cdr lst))) (filter op a54717))))))))
  (define (drop lst n)
    (let ((a54718 '0))
      (let ((a54719 (= n a54718)))
        (if a54719
          lst
          (let ((a54720 (cdr lst)))
            (let ((a54721 '1))
              (let ((a54722 (- n a54721))) (drop a54720 a54722))))))))
  (define (foldr proc acc lst)
    (let ((a54723 (null? lst)))
      (if a54723
        acc
        (let ((a54724 (car lst)))
          (let ((a54725 (cdr lst)))
            (let ((a54726 (foldr proc acc a54725))) (proc a54724 a54726)))))))
  (define (append lst1 lst2)
    (let ((a54727 (null? lst1)))
      (if a54727
        lst2
        (let ((a54728 (car lst1)))
          (let ((a54729 (cdr lst1)))
            (let ((a54730 (append a54729 lst2))) (cons a54728 a54730)))))))
  (define (hash . lst) (let ((x54731 (apply-prim hash lst))) x54731))
  (define (hash-ref h k) (let ((x54732 (prim hash-ref h k))) x54732))
  (define (hash-set h k v) (let ((x54733 (prim hash-set h k v))) x54733))
  (define (hash-has-key? h k) (let ((x54734 (prim hash-has-key? h k))) x54734))
  (define (hash-count h) (let ((x54735 (prim hash-count h))) x54735))
  (define (call)
    (let ((a54736 '100))
      (let ((a54737 '80))
        (let ((a54738 '10))
          (let ((a54739 '2)) (hash a54736 a54737 a54738 a54739))))))
  (define (brouhaha_main) (let ((x54740 (call))) x54740)))
