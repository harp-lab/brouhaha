'((define (+ . lst)
    (let ((kont6370663806 (prim car lst)))
      (let ((lst63807 (prim cdr lst)))
        (let ((x6361863808 (apply-prim + lst63807)))
          (kont6370663806 x6361863808)))))
  (define (- . lst)
    (let ((kont6370863809 (prim car lst)))
      (let ((lst63810 (prim cdr lst)))
        (let ((x6361963811 (apply-prim - lst63810)))
          (kont6370863809 x6361963811)))))
  (define (* . lst)
    (let ((kont6371063812 (prim car lst)))
      (let ((lst63813 (prim cdr lst)))
        (let ((x6362063814 (apply-prim * lst63813)))
          (kont6371063812 x6362063814)))))
  (define (modulo kont63712 a b)
    (let ((x6362163815 (prim modulo a b))) (kont63712 x6362163815)))
  (define (/ . lst)
    (let ((kont6371363816 (prim car lst)))
      (let ((lst63817 (prim cdr lst)))
        (let ((x6362263818 (apply-prim / lst63817)))
          (kont6371363816 x6362263818)))))
  (define (= . lst)
    (let ((kont6371563819 (prim car lst)))
      (let ((lst63820 (prim cdr lst)))
        (let ((x6362363821 (apply-prim = lst63820)))
          (kont6371563819 x6362363821)))))
  (define (> . lst)
    (let ((kont6371763822 (prim car lst)))
      (let ((lst63823 (prim cdr lst)))
        (let ((x6362463824 (apply-prim > lst63823)))
          (kont6371763822 x6362463824)))))
  (define (< . lst)
    (let ((kont6371963825 (prim car lst)))
      (let ((lst63826 (prim cdr lst)))
        (let ((x6362563827 (apply-prim < lst63826)))
          (kont6371963825 x6362563827)))))
  (define (<= . lst)
    (let ((kont6372163828 (prim car lst)))
      (let ((lst63829 (prim cdr lst)))
        (let ((x6362663830 (apply-prim <= lst63829)))
          (kont6372163828 x6362663830)))))
  (define (>= . lst)
    (let ((kont6372363831 (prim car lst)))
      (let ((lst63832 (prim cdr lst)))
        (let ((x6362763833 (apply-prim >= lst63832)))
          (kont6372363831 x6362763833)))))
  (define (null? kont63725 x)
    (let ((x6362863834 (prim null? x))) (kont63725 x6362863834)))
  (define (equal? kont63726 x y)
    (let ((x6362963835 (prim equal? x y))) (kont63726 x6362963835)))
  (define (eq? kont63727 x y)
    (let ((x6363063836 (prim eq? x y))) (kont63727 x6363063836)))
  (define (cons kont63728 a b)
    (let ((x6363163837 (prim cons a b))) (kont63728 x6363163837)))
  (define (car kont63729 lst)
    (let ((x6363263838 (prim car lst))) (kont63729 x6363263838)))
  (define (cdr kont63730 lst)
    (let ((x6363363839 (prim cdr lst))) (kont63730 x6363363839)))
  (define (even? kont63731 x)
    (let ((a6363463840 '0))
      (let ((a6363563841 '2))
        (let ((f6373263842
               (lambda (a6363663843)
                 (equal? kont63731 a6363463840 a6363663843))))
          (modulo f6373263842 x a6363563841)))))
  (define (odd? kont63733 x)
    (let ((a6363763844 '1))
      (let ((a6363863845 '2))
        (let ((f6373463846
               (lambda (a6363963847)
                 (equal? kont63733 a6363763844 a6363963847))))
          (modulo f6373463846 x a6363863845)))))
  (define (list . x)
    (let ((kont6373563848 (prim car x)))
      (let ((x63849 (prim cdr x))) (kont6373563848 x63849))))
  (define (member? kont63737 x lst)
    (let ((f6374163850
           (lambda (a6364063851)
             (if a6364063851
               (let ((x6364163852 '#f)) (kont63737 x6364163852))
               (let ((f6374063853
                      (lambda (a6364263854)
                        (let ((f6373963855
                               (lambda (a6364363856)
                                 (if a6364363856
                                   (let ((x6364463857 '#t))
                                     (kont63737 x6364463857))
                                   (let ((f6373863858
                                          (lambda (a6364563859)
                                            (member?
                                             kont63737
                                             x
                                             a6364563859))))
                                     (cdr f6373863858 lst))))))
                          (equal? f6373963855 a6364263854 x)))))
                 (car f6374063853 lst))))))
      (null? f6374163850 lst)))
  (define (foldl kont63742 fun acc lst)
    (let ((f6374663860
           (lambda (a6364663861)
             (if a6364663861
               (kont63742 acc)
               (let ((f6374563862
                      (lambda (a6364763863)
                        (let ((f6374463864
                               (lambda (a6364863865)
                                 (let ((f6374363866
                                        (lambda (a6364963867)
                                          (foldl
                                           kont63742
                                           fun
                                           a6364863865
                                           a6364963867))))
                                   (cdr f6374363866 lst)))))
                          (fun f6374463864 a6364763863 acc)))))
                 (car f6374563862 lst))))))
      (null? f6374663860 lst)))
  (define (reverse-helper kont63747 lst lst2)
    (let ((f6375163868
           (lambda (a6365063869)
             (if a6365063869
               (kont63747 lst2)
               (let ((f6375063870
                      (lambda (a6365163871)
                        (let ((f6374963872
                               (lambda (a6365263873)
                                 (let ((f6374863874
                                        (lambda (a6365363875)
                                          (reverse-helper
                                           kont63747
                                           a6365163871
                                           a6365363875))))
                                   (cons f6374863874 a6365263873 lst2)))))
                          (car f6374963872 lst)))))
                 (cdr f6375063870 lst))))))
      (null? f6375163868 lst)))
  (define (reverse kont63752 lst)
    (let ((f6375363876
           (lambda (a6365463877) (reverse-helper kont63752 lst a6365463877))))
      (list f6375363876)))
  (define (take-helper kont63754 lst n lst2)
    (let ((a6365563878 '0))
      (let ((f6376063879
             (lambda (a6365663880)
               (if a6365663880
                 (let ((f6375563881
                        (lambda (x6365763882) (kont63754 x6365763882))))
                   (reverse f6375563881 lst2))
                 (let ((f6375963883
                        (lambda (a6365863884)
                          (let ((a6365963885 '1))
                            (let ((f6375863886
                                   (lambda (a6366063887)
                                     (let ((f6375763888
                                            (lambda (a6366163889)
                                              (let ((f6375663890
                                                     (lambda (a6366263891)
                                                       (take-helper
                                                        kont63754
                                                        a6365863884
                                                        a6366063887
                                                        a6366263891))))
                                                (cons
                                                 f6375663890
                                                 a6366163889
                                                 lst2)))))
                                       (car f6375763888 lst)))))
                              (- f6375863886 n a6365963885))))))
                   (cdr f6375963883 lst))))))
        (= f6376063879 n a6365563878))))
  (define (take kont63761 lst n)
    (let ((f6376263892
           (lambda (a6366363893) (take-helper kont63761 lst n a6366363893))))
      (list f6376263892)))
  (define (length kont63763 lst)
    (let ((f6376663894
           (lambda (a6366463895)
             (if a6366463895
               (let ((x6366563896 '0)) (kont63763 x6366563896))
               (let ((a6366663897 '1))
                 (let ((f6376563898
                        (lambda (a6366763899)
                          (let ((f6376463900
                                 (lambda (a6366863901)
                                   (+ kont63763 a6366663897 a6366863901))))
                            (length f6376463900 a6366763899)))))
                   (cdr f6376563898 lst)))))))
      (null? f6376663894 lst)))
  (define (map kont63767 proc lst)
    (let ((f6377363902
           (lambda (a6366963903)
             (if a6366963903
               (let ((f6376863904
                      (lambda (x6367063905) (kont63767 x6367063905))))
                 (list f6376863904))
               (let ((f6377263906
                      (lambda (a6367163907)
                        (let ((f6377163908
                               (lambda (a6367263909)
                                 (let ((f6377063910
                                        (lambda (a6367363911)
                                          (let ((f6376963912
                                                 (lambda (a6367463913)
                                                   (cons
                                                    kont63767
                                                    a6367263909
                                                    a6367463913))))
                                            (map
                                             f6376963912
                                             proc
                                             a6367363911)))))
                                   (cdr f6377063910 lst)))))
                          (proc f6377163908 a6367163907)))))
                 (car f6377263906 lst))))))
      (null? f6377363902 lst)))
  (define (filter kont63774 op lst)
    (let ((f6378263914
           (lambda (a6367563915)
             (if a6367563915
               (let ((f6377563916
                      (lambda (x6367663917) (kont63774 x6367663917))))
                 (list f6377563916))
               (let ((f6378163918
                      (lambda (a6367763919)
                        (let ((f6378063920
                               (lambda (a6367863921)
                                 (if a6367863921
                                   (let ((f6377863922
                                          (lambda (a6367963923)
                                            (let ((f6377763924
                                                   (lambda (a6368063925)
                                                     (let ((f6377663926
                                                            (lambda (a6368163927)
                                                              (cons
                                                               kont63774
                                                               a6367963923
                                                               a6368163927))))
                                                       (filter
                                                        f6377663926
                                                        op
                                                        a6368063925)))))
                                              (cdr f6377763924 lst)))))
                                     (car f6377863922 lst))
                                   (let ((f6377963928
                                          (lambda (a6368263929)
                                            (filter
                                             kont63774
                                             op
                                             a6368263929))))
                                     (cdr f6377963928 lst))))))
                          (op f6378063920 a6367763919)))))
                 (car f6378163918 lst))))))
      (null? f6378263914 lst)))
  (define (drop kont63783 lst n)
    (let ((a6368363930 '0))
      (let ((f6378663931
             (lambda (a6368463932)
               (if a6368463932
                 (kont63783 lst)
                 (let ((f6378563933
                        (lambda (a6368563934)
                          (let ((a6368663935 '1))
                            (let ((f6378463936
                                   (lambda (a6368763937)
                                     (drop
                                      kont63783
                                      a6368563934
                                      a6368763937))))
                              (- f6378463936 n a6368663935))))))
                   (cdr f6378563933 lst))))))
        (= f6378663931 n a6368363930))))
  (define (foldr kont63787 proc acc lst)
    (let ((f6379163938
           (lambda (a6368863939)
             (if a6368863939
               (kont63787 acc)
               (let ((f6379063940
                      (lambda (a6368963941)
                        (let ((f6378963942
                               (lambda (a6369063943)
                                 (let ((f6378863944
                                        (lambda (a6369163945)
                                          (proc
                                           kont63787
                                           a6368963941
                                           a6369163945))))
                                   (foldr f6378863944 proc acc a6369063943)))))
                          (cdr f6378963942 lst)))))
                 (car f6379063940 lst))))))
      (null? f6379163938 lst)))
  (define (append kont63792 lst1 lst2)
    (let ((f6379663946
           (lambda (a6369263947)
             (if a6369263947
               (kont63792 lst2)
               (let ((f6379563948
                      (lambda (a6369363949)
                        (let ((f6379463950
                               (lambda (a6369463951)
                                 (let ((f6379363952
                                        (lambda (a6369563953)
                                          (cons
                                           kont63792
                                           a6369363949
                                           a6369563953))))
                                   (append f6379363952 a6369463951 lst2)))))
                          (cdr f6379463950 lst1)))))
                 (car f6379563948 lst1))))))
      (null? f6379663946 lst1)))
  (define (hash . lst)
    (let ((kont6379763954 (prim car lst)))
      (let ((lst63955 (prim cdr lst)))
        (let ((x6369663956 (apply-prim hash lst63955)))
          (kont6379763954 x6369663956)))))
  (define (hash-ref kont63799 h k)
    (let ((x6369763957 (prim hash-ref h k))) (kont63799 x6369763957)))
  (define (hash-set kont63800 h k v)
    (let ((x6369863958 (prim hash-set h k v))) (kont63800 x6369863958)))
  (define (hash-has-key? kont63801 h k)
    (let ((x6369963959 (prim hash-has-key? h k))) (kont63801 x6369963959)))
  (define (hash-count kont63802 h)
    (let ((x6370063960 (prim hash-count h))) (kont63802 x6370063960)))
  (define (call kont63803)
    (let ((a6370163961 '100))
      (let ((a6370263962 '80))
        (let ((a6370363963 '10))
          (let ((a6370463964 '2))
            (hash
             kont63803
             a6370163961
             a6370263962
             a6370363963
             a6370463964))))))
  (define (brouhaha_main kont63804)
    (let ((f6380563965 (lambda (x6370563966) (kont63804 x6370563966))))
      (call f6380563965))))
