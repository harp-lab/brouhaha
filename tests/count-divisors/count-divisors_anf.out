'((define (+ . lst)
    (let ((kont5828 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5734 (apply-prim + lst))) (kont5828 x5734)))))
  (define (- . lst)
    (let ((kont5830 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5735 (apply-prim - lst))) (kont5830 x5735)))))
  (define (* . lst)
    (let ((kont5832 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5736 (apply-prim * lst))) (kont5832 x5736)))))
  (define (modulo kont5834 a b)
    (let ((x5737 (prim modulo a b))) (kont5834 x5737)))
  (define (/ . lst)
    (let ((kont5835 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5738 (apply-prim / lst))) (kont5835 x5738)))))
  (define (= . lst)
    (let ((kont5837 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5739 (apply-prim = lst))) (kont5837 x5739)))))
  (define (> . lst)
    (let ((kont5839 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5740 (apply-prim > lst))) (kont5839 x5740)))))
  (define (< . lst)
    (let ((kont5841 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5741 (apply-prim < lst))) (kont5841 x5741)))))
  (define (<= . lst)
    (let ((kont5843 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5742 (apply-prim <= lst))) (kont5843 x5742)))))
  (define (>= . lst)
    (let ((kont5845 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5743 (apply-prim >= lst))) (kont5845 x5743)))))
  (define (null? kont5847 x) (let ((x5744 (prim null? x))) (kont5847 x5744)))
  (define (equal? kont5848 x y)
    (let ((x5745 (prim equal? x y))) (kont5848 x5745)))
  (define (eq? kont5849 x y) (let ((x5746 (prim eq? x y))) (kont5849 x5746)))
  (define (cons kont5850 a b) (let ((x5747 (prim cons a b))) (kont5850 x5747)))
  (define (car kont5851 lst) (let ((x5748 (prim car lst))) (kont5851 x5748)))
  (define (cdr kont5852 lst) (let ((x5749 (prim cdr lst))) (kont5852 x5749)))
  (define (even? kont5853 x)
    (let ((a5750 '0))
      (let ((a5751 '2))
        (let ((f5854 (lambda (a5752) (equal? kont5853 a5750 a5752))))
          (modulo f5854 x a5751)))))
  (define (odd? kont5855 x)
    (let ((a5753 '1))
      (let ((a5754 '2))
        (let ((f5856 (lambda (a5755) (equal? kont5855 a5753 a5755))))
          (modulo f5856 x a5754)))))
  (define (list . x)
    (let ((kont5857 (prim car x))) (let ((x (prim cdr x))) (kont5857 x))))
  (define (member? kont5859 x lst)
    (let ((f5863
           (lambda (a5756)
             (if a5756
               (let ((x5757 '#f)) (kont5859 x5757))
               (let ((f5862
                      (lambda (a5758)
                        (let ((f5861
                               (lambda (a5759)
                                 (if a5759
                                   (let ((x5760 '#t)) (kont5859 x5760))
                                   (let ((f5860
                                          (lambda (a5761)
                                            (member? kont5859 x a5761))))
                                     (cdr f5860 lst))))))
                          (equal? f5861 a5758 x)))))
                 (car f5862 lst))))))
      (null? f5863 lst)))
  (define (foldl kont5864 fun acc lst)
    (let ((f5868
           (lambda (a5762)
             (if a5762
               (kont5864 acc)
               (let ((f5867
                      (lambda (a5763)
                        (let ((f5866
                               (lambda (a5764)
                                 (let ((f5865
                                        (lambda (a5765)
                                          (foldl kont5864 fun a5764 a5765))))
                                   (cdr f5865 lst)))))
                          (fun f5866 a5763 acc)))))
                 (car f5867 lst))))))
      (null? f5868 lst)))
  (define (reverse-helper kont5869 lst lst2)
    (let ((f5873
           (lambda (a5766)
             (if a5766
               (kont5869 lst2)
               (let ((f5872
                      (lambda (a5767)
                        (let ((f5871
                               (lambda (a5768)
                                 (let ((f5870
                                        (lambda (a5769)
                                          (reverse-helper
                                           kont5869
                                           a5767
                                           a5769))))
                                   (cons f5870 a5768 lst2)))))
                          (car f5871 lst)))))
                 (cdr f5872 lst))))))
      (null? f5873 lst)))
  (define (reverse kont5874 lst)
    (let ((f5875 (lambda (a5770) (reverse-helper kont5874 lst a5770))))
      (list f5875)))
  (define (take-helper kont5876 lst n lst2)
    (let ((a5771 '0))
      (let ((f5882
             (lambda (a5772)
               (if a5772
                 (let ((f5877 (lambda (x5773) (kont5876 x5773))))
                   (reverse f5877 lst2))
                 (let ((f5881
                        (lambda (a5774)
                          (let ((a5775 '1))
                            (let ((f5880
                                   (lambda (a5776)
                                     (let ((f5879
                                            (lambda (a5777)
                                              (let ((f5878
                                                     (lambda (a5778)
                                                       (take-helper
                                                        kont5876
                                                        a5774
                                                        a5776
                                                        a5778))))
                                                (cons f5878 a5777 lst2)))))
                                       (car f5879 lst)))))
                              (- f5880 n a5775))))))
                   (cdr f5881 lst))))))
        (= f5882 n a5771))))
  (define (take kont5883 lst n)
    (let ((f5884 (lambda (a5779) (take-helper kont5883 lst n a5779))))
      (list f5884)))
  (define (length kont5885 lst)
    (let ((f5888
           (lambda (a5780)
             (if a5780
               (let ((x5781 '0)) (kont5885 x5781))
               (let ((a5782 '1))
                 (let ((f5887
                        (lambda (a5783)
                          (let ((f5886
                                 (lambda (a5784) (+ kont5885 a5782 a5784))))
                            (length f5886 a5783)))))
                   (cdr f5887 lst)))))))
      (null? f5888 lst)))
  (define (map kont5889 proc lst)
    (let ((f5895
           (lambda (a5785)
             (if a5785
               (let ((f5890 (lambda (x5786) (kont5889 x5786)))) (list f5890))
               (let ((f5894
                      (lambda (a5787)
                        (let ((f5893
                               (lambda (a5788)
                                 (let ((f5892
                                        (lambda (a5789)
                                          (let ((f5891
                                                 (lambda (a5790)
                                                   (cons
                                                    kont5889
                                                    a5788
                                                    a5790))))
                                            (map f5891 proc a5789)))))
                                   (cdr f5892 lst)))))
                          (proc f5893 a5787)))))
                 (car f5894 lst))))))
      (null? f5895 lst)))
  (define (filter kont5896 op lst)
    (let ((f5904
           (lambda (a5791)
             (if a5791
               (let ((f5897 (lambda (x5792) (kont5896 x5792)))) (list f5897))
               (let ((f5903
                      (lambda (a5793)
                        (let ((f5902
                               (lambda (a5794)
                                 (if a5794
                                   (let ((f5900
                                          (lambda (a5795)
                                            (let ((f5899
                                                   (lambda (a5796)
                                                     (let ((f5898
                                                            (lambda (a5797)
                                                              (cons
                                                               kont5896
                                                               a5795
                                                               a5797))))
                                                       (filter
                                                        f5898
                                                        op
                                                        a5796)))))
                                              (cdr f5899 lst)))))
                                     (car f5900 lst))
                                   (let ((f5901
                                          (lambda (a5798)
                                            (filter kont5896 op a5798))))
                                     (cdr f5901 lst))))))
                          (op f5902 a5793)))))
                 (car f5903 lst))))))
      (null? f5904 lst)))
  (define (drop kont5905 lst n)
    (let ((a5799 '0))
      (let ((f5908
             (lambda (a5800)
               (if a5800
                 (kont5905 lst)
                 (let ((f5907
                        (lambda (a5801)
                          (let ((a5802 '1))
                            (let ((f5906
                                   (lambda (a5803)
                                     (drop kont5905 a5801 a5803))))
                              (- f5906 n a5802))))))
                   (cdr f5907 lst))))))
        (= f5908 n a5799))))
  (define (foldr kont5909 proc acc lst)
    (let ((f5913
           (lambda (a5804)
             (if a5804
               (kont5909 acc)
               (let ((f5912
                      (lambda (a5805)
                        (let ((f5911
                               (lambda (a5806)
                                 (let ((f5910
                                        (lambda (a5807)
                                          (proc kont5909 a5805 a5807))))
                                   (foldr f5910 proc acc a5806)))))
                          (cdr f5911 lst)))))
                 (car f5912 lst))))))
      (null? f5913 lst)))
  (define (append kont5914 lst1 lst2)
    (let ((f5918
           (lambda (a5808)
             (if a5808
               (kont5914 lst2)
               (let ((f5917
                      (lambda (a5809)
                        (let ((f5916
                               (lambda (a5810)
                                 (let ((f5915
                                        (lambda (a5811)
                                          (cons kont5914 a5809 a5811))))
                                   (append f5915 a5810 lst2)))))
                          (cdr f5916 lst1)))))
                 (car f5917 lst1))))))
      (null? f5918 lst1)))
  (define (hash . lst)
    (let ((kont5919 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5812 (apply-prim hash lst))) (kont5919 x5812)))))
  (define (hash-ref kont5921 h k)
    (let ((x5813 (prim hash-ref h k))) (kont5921 x5813)))
  (define (hash-set kont5922 h k v)
    (let ((x5814 (prim hash-set h k v))) (kont5922 x5814)))
  (define (hash-has-key? kont5923 h k)
    (let ((x5815 (prim hash-has-key? h k))) (kont5923 x5815)))
  (define (hash-count kont5924 h)
    (let ((x5816 (prim hash-count h))) (kont5924 x5816)))
  (define (helper kont5925 i count num)
    (let ((f5930
           (lambda (a5817)
             (if a5817
               (kont5925 count)
               (let ((a5818 '1))
                 (let ((f5929
                        (lambda (a5819)
                          (let ((f5928
                                 (lambda (a5820)
                                   (let ((a5821 '0))
                                     (let ((f5927
                                            (lambda (a5822)
                                              (let ((f5926
                                                     (lambda (a5824)
                                                       (helper
                                                        kont5925
                                                        a5819
                                                        a5824
                                                        num))))
                                                (if a5822
                                                  (let ((a5823 '1))
                                                    (+ f5926 count a5823))
                                                  (f5926 count))))))
                                       (= f5927 a5820 a5821))))))
                            (modulo f5928 num i)))))
                   (+ f5929 i a5818)))))))
      (> f5930 i num)))
  (define (count-divisors kont5931 num)
    (let ((a5825 '1)) (let ((a5826 '0)) (helper kont5931 a5825 a5826 num))))
  (define (brouhaha_main kont5932)
    (let ((a5827 '10)) (count-divisors kont5932 a5827))))
