'((define (+ . lst) (let ((x5734 (apply-prim + lst))) x5734))
  (define (- . lst) (let ((x5735 (apply-prim - lst))) x5735))
  (define (* . lst) (let ((x5736 (apply-prim * lst))) x5736))
  (define (modulo a b) (let ((x5737 (prim modulo a b))) x5737))
  (define (/ . lst) (let ((x5738 (apply-prim / lst))) x5738))
  (define (= . lst) (let ((x5739 (apply-prim = lst))) x5739))
  (define (> . lst) (let ((x5740 (apply-prim > lst))) x5740))
  (define (< . lst) (let ((x5741 (apply-prim < lst))) x5741))
  (define (<= . lst) (let ((x5742 (apply-prim <= lst))) x5742))
  (define (>= . lst) (let ((x5743 (apply-prim >= lst))) x5743))
  (define (null? x) (let ((x5744 (prim null? x))) x5744))
  (define (equal? x y) (let ((x5745 (prim equal? x y))) x5745))
  (define (eq? x y) (let ((x5746 (prim eq? x y))) x5746))
  (define (cons a b) (let ((x5747 (prim cons a b))) x5747))
  (define (car lst) (let ((x5748 (prim car lst))) x5748))
  (define (cdr lst) (let ((x5749 (prim cdr lst))) x5749))
  (define (even? x)
    (let ((a5750 '0))
      (let ((a5751 '2))
        (let ((a5752 (modulo x a5751))) (equal? a5750 a5752)))))
  (define (odd? x)
    (let ((a5753 '1))
      (let ((a5754 '2))
        (let ((a5755 (modulo x a5754))) (equal? a5753 a5755)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a5756 (null? lst)))
      (if a5756
        (let ((x5757 '#f)) x5757)
        (let ((a5758 (car lst)))
          (let ((a5759 (equal? a5758 x)))
            (if a5759
              (let ((x5760 '#t)) x5760)
              (let ((a5761 (cdr lst))) (member? x a5761))))))))
  (define (foldl fun acc lst)
    (let ((a5762 (null? lst)))
      (if a5762
        acc
        (let ((a5763 (car lst)))
          (let ((a5764 (fun a5763 acc)))
            (let ((a5765 (cdr lst))) (foldl fun a5764 a5765)))))))
  (define (reverse-helper lst lst2)
    (let ((a5766 (null? lst)))
      (if a5766
        lst2
        (let ((a5767 (cdr lst)))
          (let ((a5768 (car lst)))
            (let ((a5769 (cons a5768 lst2))) (reverse-helper a5767 a5769)))))))
  (define (reverse lst) (let ((a5770 (list))) (reverse-helper lst a5770)))
  (define (take-helper lst n lst2)
    (let ((a5771 '0))
      (let ((a5772 (= n a5771)))
        (if a5772
          (let ((x5773 (reverse lst2))) x5773)
          (let ((a5774 (cdr lst)))
            (let ((a5775 '1))
              (let ((a5776 (- n a5775)))
                (let ((a5777 (car lst)))
                  (let ((a5778 (cons a5777 lst2)))
                    (take-helper a5774 a5776 a5778))))))))))
  (define (take lst n) (let ((a5779 (list))) (take-helper lst n a5779)))
  (define (length lst)
    (let ((a5780 (null? lst)))
      (if a5780
        (let ((x5781 '0)) x5781)
        (let ((a5782 '1))
          (let ((a5783 (cdr lst)))
            (let ((a5784 (length a5783))) (+ a5782 a5784)))))))
  (define (map proc lst)
    (let ((a5785 (null? lst)))
      (if a5785
        (let ((x5786 (list))) x5786)
        (let ((a5787 (car lst)))
          (let ((a5788 (proc a5787)))
            (let ((a5789 (cdr lst)))
              (let ((a5790 (map proc a5789))) (cons a5788 a5790))))))))
  (define (filter op lst)
    (let ((a5791 (null? lst)))
      (if a5791
        (let ((x5792 (list))) x5792)
        (let ((a5793 (car lst)))
          (let ((a5794 (op a5793)))
            (if a5794
              (let ((a5795 (car lst)))
                (let ((a5796 (cdr lst)))
                  (let ((a5797 (filter op a5796))) (cons a5795 a5797))))
              (let ((a5798 (cdr lst))) (filter op a5798))))))))
  (define (drop lst n)
    (let ((a5799 '0))
      (let ((a5800 (= n a5799)))
        (if a5800
          lst
          (let ((a5801 (cdr lst)))
            (let ((a5802 '1))
              (let ((a5803 (- n a5802))) (drop a5801 a5803))))))))
  (define (foldr proc acc lst)
    (let ((a5804 (null? lst)))
      (if a5804
        acc
        (let ((a5805 (car lst)))
          (let ((a5806 (cdr lst)))
            (let ((a5807 (foldr proc acc a5806))) (proc a5805 a5807)))))))
  (define (append lst1 lst2)
    (let ((a5808 (null? lst1)))
      (if a5808
        lst2
        (let ((a5809 (car lst1)))
          (let ((a5810 (cdr lst1)))
            (let ((a5811 (append a5810 lst2))) (cons a5809 a5811)))))))
  (define (hash . lst) (let ((x5812 (apply-prim hash lst))) x5812))
  (define (hash-ref h k) (let ((x5813 (prim hash-ref h k))) x5813))
  (define (hash-set h k v) (let ((x5814 (prim hash-set h k v))) x5814))
  (define (hash-has-key? h k) (let ((x5815 (prim hash-has-key? h k))) x5815))
  (define (hash-count h) (let ((x5816 (prim hash-count h))) x5816))
  (define (helper i count num)
    (let ((a5817 (> i num)))
      (if a5817
        count
        (let ((a5818 '1))
          (let ((a5819 (+ i a5818)))
            (let ((a5820 (modulo num i)))
              (let ((a5821 '0))
                (let ((a5822 (= a5820 a5821)))
                  (let ((a5824
                         (if a5822 (let ((a5823 '1)) (+ count a5823)) count)))
                    (helper a5819 a5824 num))))))))))
  (define (count-divisors num)
    (let ((a5825 '1)) (let ((a5826 '0)) (helper a5825 a5826 num))))
  (define (brouhaha_main) (let ((a5827 '10)) (count-divisors a5827))))
