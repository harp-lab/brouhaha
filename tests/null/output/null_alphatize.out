'((define (+ . lst) (let ((x91769 (apply-prim + lst))) x91769))
  (define (- . lst) (let ((x91770 (apply-prim - lst))) x91770))
  (define (* . lst) (let ((x91771 (apply-prim * lst))) x91771))
  (define (modulo a b) (let ((x91772 (prim modulo a b))) x91772))
  (define (/ . lst) (let ((x91773 (apply-prim / lst))) x91773))
  (define (= . lst) (let ((x91774 (apply-prim = lst))) x91774))
  (define (> . lst) (let ((x91775 (apply-prim > lst))) x91775))
  (define (< . lst) (let ((x91776 (apply-prim < lst))) x91776))
  (define (<= . lst) (let ((x91777 (apply-prim <= lst))) x91777))
  (define (>= . lst) (let ((x91778 (apply-prim >= lst))) x91778))
  (define (null? x) (let ((x91779 (prim null? x))) x91779))
  (define (equal? x y) (let ((x91780 (prim equal? x y))) x91780))
  (define (eq? x y) (let ((x91781 (prim eq? x y))) x91781))
  (define (cons a b) (let ((x91782 (prim cons a b))) x91782))
  (define (car lst) (let ((x91783 (prim car lst))) x91783))
  (define (cdr lst) (let ((x91784 (prim cdr lst))) x91784))
  (define (even? x)
    (let ((a91785 '0))
      (let ((a91786 '2))
        (let ((a91787 (modulo x a91786))) (equal? a91785 a91787)))))
  (define (odd? x)
    (let ((a91788 '1))
      (let ((a91789 '2))
        (let ((a91790 (modulo x a91789))) (equal? a91788 a91790)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a91791 (null? lst)))
      (if a91791
        (let ((x91792 '#f)) x91792)
        (let ((a91793 (car lst)))
          (let ((a91794 (equal? a91793 x)))
            (if a91794
              (let ((x91795 '#t)) x91795)
              (let ((a91796 (cdr lst))) (member? x a91796))))))))
  (define (foldl fun acc lst)
    (let ((a91797 (null? lst)))
      (if a91797
        acc
        (let ((a91798 (car lst)))
          (let ((a91799 (fun a91798 acc)))
            (let ((a91800 (cdr lst))) (foldl fun a91799 a91800)))))))
  (define (reverse-helper lst lst2)
    (let ((a91801 (null? lst)))
      (if a91801
        lst2
        (let ((a91802 (cdr lst)))
          (let ((a91803 (car lst)))
            (let ((a91804 (cons a91803 lst2)))
              (reverse-helper a91802 a91804)))))))
  (define (reverse lst) (let ((a91805 (list))) (reverse-helper lst a91805)))
  (define (take-helper lst n lst2)
    (let ((a91806 '0))
      (let ((a91807 (= n a91806)))
        (if a91807
          (let ((x91808 (reverse lst2))) x91808)
          (let ((a91809 (cdr lst)))
            (let ((a91810 '1))
              (let ((a91811 (- n a91810)))
                (let ((a91812 (car lst)))
                  (let ((a91813 (cons a91812 lst2)))
                    (take-helper a91809 a91811 a91813))))))))))
  (define (take lst n) (let ((a91814 (list))) (take-helper lst n a91814)))
  (define (length lst)
    (let ((a91815 (null? lst)))
      (if a91815
        (let ((x91816 '0)) x91816)
        (let ((a91817 '1))
          (let ((a91818 (cdr lst)))
            (let ((a91819 (length a91818))) (+ a91817 a91819)))))))
  (define (map proc lst)
    (let ((a91820 (null? lst)))
      (if a91820
        (let ((x91821 (list))) x91821)
        (let ((a91822 (car lst)))
          (let ((a91823 (proc a91822)))
            (let ((a91824 (cdr lst)))
              (let ((a91825 (map proc a91824))) (cons a91823 a91825))))))))
  (define (filter op lst)
    (let ((a91826 (null? lst)))
      (if a91826
        (let ((x91827 (list))) x91827)
        (let ((a91828 (car lst)))
          (let ((a91829 (op a91828)))
            (if a91829
              (let ((a91830 (car lst)))
                (let ((a91831 (cdr lst)))
                  (let ((a91832 (filter op a91831))) (cons a91830 a91832))))
              (let ((a91833 (cdr lst))) (filter op a91833))))))))
  (define (drop lst n)
    (let ((a91834 '0))
      (let ((a91835 (= n a91834)))
        (if a91835
          lst
          (let ((a91836 (cdr lst)))
            (let ((a91837 '1))
              (let ((a91838 (- n a91837))) (drop a91836 a91838))))))))
  (define (foldr proc acc lst)
    (let ((a91839 (null? lst)))
      (if a91839
        acc
        (let ((a91840 (car lst)))
          (let ((a91841 (cdr lst)))
            (let ((a91842 (foldr proc acc a91841))) (proc a91840 a91842)))))))
  (define (append lst1 lst2)
    (let ((a91843 (null? lst1)))
      (if a91843
        lst2
        (let ((a91844 (car lst1)))
          (let ((a91845 (cdr lst1)))
            (let ((a91846 (append a91845 lst2))) (cons a91844 a91846)))))))
  (define (hash . lst) (let ((x91847 (apply-prim hash lst))) x91847))
  (define (hash-ref h k) (let ((x91848 (prim hash-ref h k))) x91848))
  (define (hash-set h k v) (let ((x91849 (prim hash-set h k v))) x91849))
  (define (hash-has-key? h k) (let ((x91850 (prim hash-has-key? h k))) x91850))
  (define (hash-count h) (let ((x91851 (prim hash-count h))) x91851))
  (define (call) (let ((a91852 '1)) (null? a91852)))
  (define (brouhaha_main) (let ((x91853 (call))) x91853)))
