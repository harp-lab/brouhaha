'((define (+ . lst) (let ((x96340 (apply-prim + lst))) x96340))
  (define (- . lst) (let ((x96341 (apply-prim - lst))) x96341))
  (define (* . lst) (let ((x96342 (apply-prim * lst))) x96342))
  (define (modulo a b) (let ((x96343 (prim modulo a b))) x96343))
  (define (/ . lst) (let ((x96344 (apply-prim / lst))) x96344))
  (define (= . lst) (let ((x96345 (apply-prim = lst))) x96345))
  (define (> . lst) (let ((x96346 (apply-prim > lst))) x96346))
  (define (< . lst) (let ((x96347 (apply-prim < lst))) x96347))
  (define (<= . lst) (let ((x96348 (apply-prim <= lst))) x96348))
  (define (>= . lst) (let ((x96349 (apply-prim >= lst))) x96349))
  (define (null? x) (let ((x96350 (prim null? x))) x96350))
  (define (equal? x y) (let ((x96351 (prim equal? x y))) x96351))
  (define (eq? x y) (let ((x96352 (prim eq? x y))) x96352))
  (define (cons a b) (let ((x96353 (prim cons a b))) x96353))
  (define (car lst) (let ((x96354 (prim car lst))) x96354))
  (define (cdr lst) (let ((x96355 (prim cdr lst))) x96355))
  (define (even? x)
    (let ((a96356 '0))
      (let ((a96357 '2))
        (let ((a96358 (modulo x a96357))) (equal? a96356 a96358)))))
  (define (odd? x)
    (let ((a96359 '1))
      (let ((a96360 '2))
        (let ((a96361 (modulo x a96360))) (equal? a96359 a96361)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a96362 (null? lst)))
      (if a96362
        (let ((x96363 '#f)) x96363)
        (let ((a96364 (car lst)))
          (let ((a96365 (equal? a96364 x)))
            (if a96365
              (let ((x96366 '#t)) x96366)
              (let ((a96367 (cdr lst))) (member? x a96367))))))))
  (define (foldl fun acc lst)
    (let ((a96368 (null? lst)))
      (if a96368
        acc
        (let ((a96369 (car lst)))
          (let ((a96370 (fun a96369 acc)))
            (let ((a96371 (cdr lst))) (foldl fun a96370 a96371)))))))
  (define (reverse-helper lst lst2)
    (let ((a96372 (null? lst)))
      (if a96372
        lst2
        (let ((a96373 (cdr lst)))
          (let ((a96374 (car lst)))
            (let ((a96375 (cons a96374 lst2)))
              (reverse-helper a96373 a96375)))))))
  (define (reverse lst) (let ((a96376 (list))) (reverse-helper lst a96376)))
  (define (take-helper lst n lst2)
    (let ((a96377 '0))
      (let ((a96378 (= n a96377)))
        (if a96378
          (let ((x96379 (reverse lst2))) x96379)
          (let ((a96380 (cdr lst)))
            (let ((a96381 '1))
              (let ((a96382 (- n a96381)))
                (let ((a96383 (car lst)))
                  (let ((a96384 (cons a96383 lst2)))
                    (take-helper a96380 a96382 a96384))))))))))
  (define (take lst n) (let ((a96385 (list))) (take-helper lst n a96385)))
  (define (length lst)
    (let ((a96386 (null? lst)))
      (if a96386
        (let ((x96387 '0)) x96387)
        (let ((a96388 '1))
          (let ((a96389 (cdr lst)))
            (let ((a96390 (length a96389))) (+ a96388 a96390)))))))
  (define (map proc lst)
    (let ((a96391 (null? lst)))
      (if a96391
        (let ((x96392 (list))) x96392)
        (let ((a96393 (car lst)))
          (let ((a96394 (proc a96393)))
            (let ((a96395 (cdr lst)))
              (let ((a96396 (map proc a96395))) (cons a96394 a96396))))))))
  (define (filter op lst)
    (let ((a96397 (null? lst)))
      (if a96397
        (let ((x96398 (list))) x96398)
        (let ((a96399 (car lst)))
          (let ((a96400 (op a96399)))
            (if a96400
              (let ((a96401 (car lst)))
                (let ((a96402 (cdr lst)))
                  (let ((a96403 (filter op a96402))) (cons a96401 a96403))))
              (let ((a96404 (cdr lst))) (filter op a96404))))))))
  (define (drop lst n)
    (let ((a96405 '0))
      (let ((a96406 (= n a96405)))
        (if a96406
          lst
          (let ((a96407 (cdr lst)))
            (let ((a96408 '1))
              (let ((a96409 (- n a96408))) (drop a96407 a96409))))))))
  (define (foldr proc acc lst)
    (let ((a96410 (null? lst)))
      (if a96410
        acc
        (let ((a96411 (car lst)))
          (let ((a96412 (cdr lst)))
            (let ((a96413 (foldr proc acc a96412))) (proc a96411 a96413)))))))
  (define (append lst1 lst2)
    (let ((a96414 (null? lst1)))
      (if a96414
        lst2
        (let ((a96415 (car lst1)))
          (let ((a96416 (cdr lst1)))
            (let ((a96417 (append a96416 lst2))) (cons a96415 a96417)))))))
  (define (hash . lst) (let ((x96418 (apply-prim hash lst))) x96418))
  (define (hash-ref h k) (let ((x96419 (prim hash-ref h k))) x96419))
  (define (hash-set h k v) (let ((x96420 (prim hash-set h k v))) x96420))
  (define (hash-has-key? h k) (let ((x96421 (prim hash-has-key? h k))) x96421))
  (define (hash-count h) (let ((x96422 (prim hash-count h))) x96422))
  (define (call) (let ((a96423 '1)) (null? a96423)))
  (define (brouhaha_main) (let ((x96424 (call))) x96424)))
