'((define (+ . lst)
    (let ((kont99530 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99430 (apply-prim + lst))) (kont99530 x99430)))))
  (define (- . lst)
    (let ((kont99532 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99431 (apply-prim - lst))) (kont99532 x99431)))))
  (define (* . lst)
    (let ((kont99534 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99432 (apply-prim * lst))) (kont99534 x99432)))))
  (define (modulo kont99536 a b)
    (let ((x99433 (prim modulo a b))) (kont99536 x99433)))
  (define (/ . lst)
    (let ((kont99537 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99434 (apply-prim / lst))) (kont99537 x99434)))))
  (define (= . lst)
    (let ((kont99539 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99435 (apply-prim = lst))) (kont99539 x99435)))))
  (define (> . lst)
    (let ((kont99541 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99436 (apply-prim > lst))) (kont99541 x99436)))))
  (define (< . lst)
    (let ((kont99543 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99437 (apply-prim < lst))) (kont99543 x99437)))))
  (define (<= . lst)
    (let ((kont99545 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99438 (apply-prim <= lst))) (kont99545 x99438)))))
  (define (>= . lst)
    (let ((kont99547 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99439 (apply-prim >= lst))) (kont99547 x99439)))))
  (define (null? kont99549 x)
    (let ((x99440 (prim null? x))) (kont99549 x99440)))
  (define (equal? kont99550 x y)
    (let ((x99441 (prim equal? x y))) (kont99550 x99441)))
  (define (eq? kont99551 x y)
    (let ((x99442 (prim eq? x y))) (kont99551 x99442)))
  (define (cons kont99552 a b)
    (let ((x99443 (prim cons a b))) (kont99552 x99443)))
  (define (car kont99553 lst)
    (let ((x99444 (prim car lst))) (kont99553 x99444)))
  (define (cdr kont99554 lst)
    (let ((x99445 (prim cdr lst))) (kont99554 x99445)))
  (define (even? kont99555 x)
    (let ((a99446 '0))
      (let ((a99447 '2))
        (let ((f99556 (lambda (a99448) (equal? kont99555 a99446 a99448))))
          (modulo f99556 x a99447)))))
  (define (odd? kont99557 x)
    (let ((a99449 '1))
      (let ((a99450 '2))
        (let ((f99558 (lambda (a99451) (equal? kont99557 a99449 a99451))))
          (modulo f99558 x a99450)))))
  (define (list . x)
    (let ((kont99559 (prim car x))) (let ((x (prim cdr x))) (kont99559 x))))
  (define (member? kont99561 x lst)
    (let ((f99565
           (lambda (a99452)
             (if a99452
               (let ((x99453 '#f)) (kont99561 x99453))
               (let ((f99564
                      (lambda (a99454)
                        (let ((f99563
                               (lambda (a99455)
                                 (if a99455
                                   (let ((x99456 '#t)) (kont99561 x99456))
                                   (let ((f99562
                                          (lambda (a99457)
                                            (member? kont99561 x a99457))))
                                     (cdr f99562 lst))))))
                          (equal? f99563 a99454 x)))))
                 (car f99564 lst))))))
      (null? f99565 lst)))
  (define (foldl kont99566 fun acc lst)
    (let ((f99570
           (lambda (a99458)
             (if a99458
               (kont99566 acc)
               (let ((f99569
                      (lambda (a99459)
                        (let ((f99568
                               (lambda (a99460)
                                 (let ((f99567
                                        (lambda (a99461)
                                          (foldl
                                           kont99566
                                           fun
                                           a99460
                                           a99461))))
                                   (cdr f99567 lst)))))
                          (fun f99568 a99459 acc)))))
                 (car f99569 lst))))))
      (null? f99570 lst)))
  (define (reverse-helper kont99571 lst lst2)
    (let ((f99575
           (lambda (a99462)
             (if a99462
               (kont99571 lst2)
               (let ((f99574
                      (lambda (a99463)
                        (let ((f99573
                               (lambda (a99464)
                                 (let ((f99572
                                        (lambda (a99465)
                                          (reverse-helper
                                           kont99571
                                           a99463
                                           a99465))))
                                   (cons f99572 a99464 lst2)))))
                          (car f99573 lst)))))
                 (cdr f99574 lst))))))
      (null? f99575 lst)))
  (define (reverse kont99576 lst)
    (let ((f99577 (lambda (a99466) (reverse-helper kont99576 lst a99466))))
      (list f99577)))
  (define (take-helper kont99578 lst n lst2)
    (let ((a99467 '0))
      (let ((f99584
             (lambda (a99468)
               (if a99468
                 (let ((f99579 (lambda (x99469) (kont99578 x99469))))
                   (reverse f99579 lst2))
                 (let ((f99583
                        (lambda (a99470)
                          (let ((a99471 '1))
                            (let ((f99582
                                   (lambda (a99472)
                                     (let ((f99581
                                            (lambda (a99473)
                                              (let ((f99580
                                                     (lambda (a99474)
                                                       (take-helper
                                                        kont99578
                                                        a99470
                                                        a99472
                                                        a99474))))
                                                (cons f99580 a99473 lst2)))))
                                       (car f99581 lst)))))
                              (- f99582 n a99471))))))
                   (cdr f99583 lst))))))
        (= f99584 n a99467))))
  (define (take kont99585 lst n)
    (let ((f99586 (lambda (a99475) (take-helper kont99585 lst n a99475))))
      (list f99586)))
  (define (length kont99587 lst)
    (let ((f99590
           (lambda (a99476)
             (if a99476
               (let ((x99477 '0)) (kont99587 x99477))
               (let ((a99478 '1))
                 (let ((f99589
                        (lambda (a99479)
                          (let ((f99588
                                 (lambda (a99480)
                                   (+ kont99587 a99478 a99480))))
                            (length f99588 a99479)))))
                   (cdr f99589 lst)))))))
      (null? f99590 lst)))
  (define (map kont99591 proc lst)
    (let ((f99597
           (lambda (a99481)
             (if a99481
               (let ((f99592 (lambda (x99482) (kont99591 x99482))))
                 (list f99592))
               (let ((f99596
                      (lambda (a99483)
                        (let ((f99595
                               (lambda (a99484)
                                 (let ((f99594
                                        (lambda (a99485)
                                          (let ((f99593
                                                 (lambda (a99486)
                                                   (cons
                                                    kont99591
                                                    a99484
                                                    a99486))))
                                            (map f99593 proc a99485)))))
                                   (cdr f99594 lst)))))
                          (proc f99595 a99483)))))
                 (car f99596 lst))))))
      (null? f99597 lst)))
  (define (filter kont99598 op lst)
    (let ((f99606
           (lambda (a99487)
             (if a99487
               (let ((f99599 (lambda (x99488) (kont99598 x99488))))
                 (list f99599))
               (let ((f99605
                      (lambda (a99489)
                        (let ((f99604
                               (lambda (a99490)
                                 (if a99490
                                   (let ((f99602
                                          (lambda (a99491)
                                            (let ((f99601
                                                   (lambda (a99492)
                                                     (let ((f99600
                                                            (lambda (a99493)
                                                              (cons
                                                               kont99598
                                                               a99491
                                                               a99493))))
                                                       (filter
                                                        f99600
                                                        op
                                                        a99492)))))
                                              (cdr f99601 lst)))))
                                     (car f99602 lst))
                                   (let ((f99603
                                          (lambda (a99494)
                                            (filter kont99598 op a99494))))
                                     (cdr f99603 lst))))))
                          (op f99604 a99489)))))
                 (car f99605 lst))))))
      (null? f99606 lst)))
  (define (drop kont99607 lst n)
    (let ((a99495 '0))
      (let ((f99610
             (lambda (a99496)
               (if a99496
                 (kont99607 lst)
                 (let ((f99609
                        (lambda (a99497)
                          (let ((a99498 '1))
                            (let ((f99608
                                   (lambda (a99499)
                                     (drop kont99607 a99497 a99499))))
                              (- f99608 n a99498))))))
                   (cdr f99609 lst))))))
        (= f99610 n a99495))))
  (define (foldr kont99611 proc acc lst)
    (let ((f99615
           (lambda (a99500)
             (if a99500
               (kont99611 acc)
               (let ((f99614
                      (lambda (a99501)
                        (let ((f99613
                               (lambda (a99502)
                                 (let ((f99612
                                        (lambda (a99503)
                                          (proc kont99611 a99501 a99503))))
                                   (foldr f99612 proc acc a99502)))))
                          (cdr f99613 lst)))))
                 (car f99614 lst))))))
      (null? f99615 lst)))
  (define (append kont99616 lst1 lst2)
    (let ((f99620
           (lambda (a99504)
             (if a99504
               (kont99616 lst2)
               (let ((f99619
                      (lambda (a99505)
                        (let ((f99618
                               (lambda (a99506)
                                 (let ((f99617
                                        (lambda (a99507)
                                          (cons kont99616 a99505 a99507))))
                                   (append f99617 a99506 lst2)))))
                          (cdr f99618 lst1)))))
                 (car f99619 lst1))))))
      (null? f99620 lst1)))
  (define (hash . lst)
    (let ((kont99621 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x99508 (apply-prim hash lst))) (kont99621 x99508)))))
  (define (hash-ref kont99623 h k)
    (let ((x99509 (prim hash-ref h k))) (kont99623 x99509)))
  (define (hash-set kont99624 h k v)
    (let ((x99510 (prim hash-set h k v))) (kont99624 x99510)))
  (define (hash-has-key? kont99625 h k)
    (let ((x99511 (prim hash-has-key? h k))) (kont99625 x99511)))
  (define (hash-count kont99626 h)
    (let ((x99512 (prim hash-count h))) (kont99626 x99512)))
  (define (power kont99627 x n)
    (let ((a99513 '0))
      (let ((f99636
             (lambda (a99514)
               (if a99514
                 (let ((x99515 '1)) (kont99627 x99515))
                 (let ((a99516 '1))
                   (let ((f99635
                          (lambda (a99517)
                            (if a99517
                              (kont99627 x)
                              (let ((f99634
                                     (lambda (a99518)
                                       (if a99518
                                         (let ((f99629
                                                (lambda (a99519)
                                                  (let ((a99520 '2))
                                                    (let ((f99628
                                                           (lambda (a99521)
                                                             (power
                                                              kont99627
                                                              a99519
                                                              a99521))))
                                                      (/ f99628 n a99520))))))
                                           (* f99629 x x))
                                         (let ((f99633
                                                (lambda (a99522)
                                                  (let ((a99523 '1))
                                                    (let ((f99632
                                                           (lambda (a99524)
                                                             (let ((a99525 '2))
                                                               (let ((f99631
                                                                      (lambda (a99526)
                                                                        (let ((f99630
                                                                               (lambda (a99527)
                                                                                 (*
                                                                                  kont99627
                                                                                  x
                                                                                  a99527))))
                                                                          (power
                                                                           f99630
                                                                           a99522
                                                                           a99526)))))
                                                                 (/
                                                                  f99631
                                                                  a99524
                                                                  a99525))))))
                                                      (- f99632 n a99523))))))
                                           (* f99633 x x))))))
                                (even? f99634 n))))))
                     (= f99635 n a99516)))))))
        (= f99636 n a99513))))
  (define (brouhaha_main kont99637)
    (let ((a99528 '2)) (let ((a99529 '10)) (power kont99637 a99528 a99529)))))
