'((define (+ . lst) (let ((x99430 (apply-prim + lst))) x99430))
  (define (- . lst) (let ((x99431 (apply-prim - lst))) x99431))
  (define (* . lst) (let ((x99432 (apply-prim * lst))) x99432))
  (define (modulo a b) (let ((x99433 (prim modulo a b))) x99433))
  (define (/ . lst) (let ((x99434 (apply-prim / lst))) x99434))
  (define (= . lst) (let ((x99435 (apply-prim = lst))) x99435))
  (define (> . lst) (let ((x99436 (apply-prim > lst))) x99436))
  (define (< . lst) (let ((x99437 (apply-prim < lst))) x99437))
  (define (<= . lst) (let ((x99438 (apply-prim <= lst))) x99438))
  (define (>= . lst) (let ((x99439 (apply-prim >= lst))) x99439))
  (define (null? x) (let ((x99440 (prim null? x))) x99440))
  (define (equal? x y) (let ((x99441 (prim equal? x y))) x99441))
  (define (eq? x y) (let ((x99442 (prim eq? x y))) x99442))
  (define (cons a b) (let ((x99443 (prim cons a b))) x99443))
  (define (car lst) (let ((x99444 (prim car lst))) x99444))
  (define (cdr lst) (let ((x99445 (prim cdr lst))) x99445))
  (define (even? x)
    (let ((a99446 '0))
      (let ((a99447 '2))
        (let ((a99448 (modulo x a99447))) (equal? a99446 a99448)))))
  (define (odd? x)
    (let ((a99449 '1))
      (let ((a99450 '2))
        (let ((a99451 (modulo x a99450))) (equal? a99449 a99451)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a99452 (null? lst)))
      (if a99452
        (let ((x99453 '#f)) x99453)
        (let ((a99454 (car lst)))
          (let ((a99455 (equal? a99454 x)))
            (if a99455
              (let ((x99456 '#t)) x99456)
              (let ((a99457 (cdr lst))) (member? x a99457))))))))
  (define (foldl fun acc lst)
    (let ((a99458 (null? lst)))
      (if a99458
        acc
        (let ((a99459 (car lst)))
          (let ((a99460 (fun a99459 acc)))
            (let ((a99461 (cdr lst))) (foldl fun a99460 a99461)))))))
  (define (reverse-helper lst lst2)
    (let ((a99462 (null? lst)))
      (if a99462
        lst2
        (let ((a99463 (cdr lst)))
          (let ((a99464 (car lst)))
            (let ((a99465 (cons a99464 lst2)))
              (reverse-helper a99463 a99465)))))))
  (define (reverse lst) (let ((a99466 (list))) (reverse-helper lst a99466)))
  (define (take-helper lst n lst2)
    (let ((a99467 '0))
      (let ((a99468 (= n a99467)))
        (if a99468
          (let ((x99469 (reverse lst2))) x99469)
          (let ((a99470 (cdr lst)))
            (let ((a99471 '1))
              (let ((a99472 (- n a99471)))
                (let ((a99473 (car lst)))
                  (let ((a99474 (cons a99473 lst2)))
                    (take-helper a99470 a99472 a99474))))))))))
  (define (take lst n) (let ((a99475 (list))) (take-helper lst n a99475)))
  (define (length lst)
    (let ((a99476 (null? lst)))
      (if a99476
        (let ((x99477 '0)) x99477)
        (let ((a99478 '1))
          (let ((a99479 (cdr lst)))
            (let ((a99480 (length a99479))) (+ a99478 a99480)))))))
  (define (map proc lst)
    (let ((a99481 (null? lst)))
      (if a99481
        (let ((x99482 (list))) x99482)
        (let ((a99483 (car lst)))
          (let ((a99484 (proc a99483)))
            (let ((a99485 (cdr lst)))
              (let ((a99486 (map proc a99485))) (cons a99484 a99486))))))))
  (define (filter op lst)
    (let ((a99487 (null? lst)))
      (if a99487
        (let ((x99488 (list))) x99488)
        (let ((a99489 (car lst)))
          (let ((a99490 (op a99489)))
            (if a99490
              (let ((a99491 (car lst)))
                (let ((a99492 (cdr lst)))
                  (let ((a99493 (filter op a99492))) (cons a99491 a99493))))
              (let ((a99494 (cdr lst))) (filter op a99494))))))))
  (define (drop lst n)
    (let ((a99495 '0))
      (let ((a99496 (= n a99495)))
        (if a99496
          lst
          (let ((a99497 (cdr lst)))
            (let ((a99498 '1))
              (let ((a99499 (- n a99498))) (drop a99497 a99499))))))))
  (define (foldr proc acc lst)
    (let ((a99500 (null? lst)))
      (if a99500
        acc
        (let ((a99501 (car lst)))
          (let ((a99502 (cdr lst)))
            (let ((a99503 (foldr proc acc a99502))) (proc a99501 a99503)))))))
  (define (append lst1 lst2)
    (let ((a99504 (null? lst1)))
      (if a99504
        lst2
        (let ((a99505 (car lst1)))
          (let ((a99506 (cdr lst1)))
            (let ((a99507 (append a99506 lst2))) (cons a99505 a99507)))))))
  (define (hash . lst) (let ((x99508 (apply-prim hash lst))) x99508))
  (define (hash-ref h k) (let ((x99509 (prim hash-ref h k))) x99509))
  (define (hash-set h k v) (let ((x99510 (prim hash-set h k v))) x99510))
  (define (hash-has-key? h k) (let ((x99511 (prim hash-has-key? h k))) x99511))
  (define (hash-count h) (let ((x99512 (prim hash-count h))) x99512))
  (define (power x n)
    (let ((a99513 '0))
      (let ((a99514 (= n a99513)))
        (if a99514
          (let ((x99515 '1)) x99515)
          (let ((a99516 '1))
            (let ((a99517 (= n a99516)))
              (if a99517
                x
                (let ((a99518 (even? n)))
                  (if a99518
                    (let ((a99519 (* x x)))
                      (let ((a99520 '2))
                        (let ((a99521 (/ n a99520))) (power a99519 a99521))))
                    (let ((a99522 (* x x)))
                      (let ((a99523 '1))
                        (let ((a99524 (- n a99523)))
                          (let ((a99525 '2))
                            (let ((a99526 (/ a99524 a99525)))
                              (let ((a99527 (power a99522 a99526)))
                                (* x a99527))))))))))))))))
  (define (brouhaha_main)
    (let ((a99528 '2)) (let ((a99529 '10)) (power a99528 a99529)))))
