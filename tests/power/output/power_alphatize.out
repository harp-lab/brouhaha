'((define (+ . lst) (let ((x94739 (apply-prim + lst))) x94739))
  (define (- . lst) (let ((x94740 (apply-prim - lst))) x94740))
  (define (* . lst) (let ((x94741 (apply-prim * lst))) x94741))
  (define (modulo a b) (let ((x94742 (prim modulo a b))) x94742))
  (define (/ . lst) (let ((x94743 (apply-prim / lst))) x94743))
  (define (= . lst) (let ((x94744 (apply-prim = lst))) x94744))
  (define (> . lst) (let ((x94745 (apply-prim > lst))) x94745))
  (define (< . lst) (let ((x94746 (apply-prim < lst))) x94746))
  (define (<= . lst) (let ((x94747 (apply-prim <= lst))) x94747))
  (define (>= . lst) (let ((x94748 (apply-prim >= lst))) x94748))
  (define (null? x) (let ((x94749 (prim null? x))) x94749))
  (define (equal? x y) (let ((x94750 (prim equal? x y))) x94750))
  (define (eq? x y) (let ((x94751 (prim eq? x y))) x94751))
  (define (cons a b) (let ((x94752 (prim cons a b))) x94752))
  (define (car lst) (let ((x94753 (prim car lst))) x94753))
  (define (cdr lst) (let ((x94754 (prim cdr lst))) x94754))
  (define (even? x)
    (let ((a94755 '0))
      (let ((a94756 '2))
        (let ((a94757 (modulo x a94756))) (equal? a94755 a94757)))))
  (define (odd? x)
    (let ((a94758 '1))
      (let ((a94759 '2))
        (let ((a94760 (modulo x a94759))) (equal? a94758 a94760)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a94761 (null? lst)))
      (if a94761
        (let ((x94762 '#f)) x94762)
        (let ((a94763 (car lst)))
          (let ((a94764 (equal? a94763 x)))
            (if a94764
              (let ((x94765 '#t)) x94765)
              (let ((a94766 (cdr lst))) (member? x a94766))))))))
  (define (foldl fun acc lst)
    (let ((a94767 (null? lst)))
      (if a94767
        acc
        (let ((a94768 (car lst)))
          (let ((a94769 (fun a94768 acc)))
            (let ((a94770 (cdr lst))) (foldl fun a94769 a94770)))))))
  (define (reverse-helper lst lst2)
    (let ((a94771 (null? lst)))
      (if a94771
        lst2
        (let ((a94772 (cdr lst)))
          (let ((a94773 (car lst)))
            (let ((a94774 (cons a94773 lst2)))
              (reverse-helper a94772 a94774)))))))
  (define (reverse lst) (let ((a94775 (list))) (reverse-helper lst a94775)))
  (define (take-helper lst n lst2)
    (let ((a94776 '0))
      (let ((a94777 (= n a94776)))
        (if a94777
          (let ((x94778 (reverse lst2))) x94778)
          (let ((a94779 (cdr lst)))
            (let ((a94780 '1))
              (let ((a94781 (- n a94780)))
                (let ((a94782 (car lst)))
                  (let ((a94783 (cons a94782 lst2)))
                    (take-helper a94779 a94781 a94783))))))))))
  (define (take lst n) (let ((a94784 (list))) (take-helper lst n a94784)))
  (define (length lst)
    (let ((a94785 (null? lst)))
      (if a94785
        (let ((x94786 '0)) x94786)
        (let ((a94787 '1))
          (let ((a94788 (cdr lst)))
            (let ((a94789 (length a94788))) (+ a94787 a94789)))))))
  (define (map proc lst)
    (let ((a94790 (null? lst)))
      (if a94790
        (let ((x94791 (list))) x94791)
        (let ((a94792 (car lst)))
          (let ((a94793 (proc a94792)))
            (let ((a94794 (cdr lst)))
              (let ((a94795 (map proc a94794))) (cons a94793 a94795))))))))
  (define (filter op lst)
    (let ((a94796 (null? lst)))
      (if a94796
        (let ((x94797 (list))) x94797)
        (let ((a94798 (car lst)))
          (let ((a94799 (op a94798)))
            (if a94799
              (let ((a94800 (car lst)))
                (let ((a94801 (cdr lst)))
                  (let ((a94802 (filter op a94801))) (cons a94800 a94802))))
              (let ((a94803 (cdr lst))) (filter op a94803))))))))
  (define (drop lst n)
    (let ((a94804 '0))
      (let ((a94805 (= n a94804)))
        (if a94805
          lst
          (let ((a94806 (cdr lst)))
            (let ((a94807 '1))
              (let ((a94808 (- n a94807))) (drop a94806 a94808))))))))
  (define (foldr proc acc lst)
    (let ((a94809 (null? lst)))
      (if a94809
        acc
        (let ((a94810 (car lst)))
          (let ((a94811 (cdr lst)))
            (let ((a94812 (foldr proc acc a94811))) (proc a94810 a94812)))))))
  (define (append lst1 lst2)
    (let ((a94813 (null? lst1)))
      (if a94813
        lst2
        (let ((a94814 (car lst1)))
          (let ((a94815 (cdr lst1)))
            (let ((a94816 (append a94815 lst2))) (cons a94814 a94816)))))))
  (define (hash . lst) (let ((x94817 (apply-prim hash lst))) x94817))
  (define (hash-ref h k) (let ((x94818 (prim hash-ref h k))) x94818))
  (define (hash-set h k v) (let ((x94819 (prim hash-set h k v))) x94819))
  (define (hash-has-key? h k) (let ((x94820 (prim hash-has-key? h k))) x94820))
  (define (hash-count h) (let ((x94821 (prim hash-count h))) x94821))
  (define (power x n)
    (let ((a94822 '0))
      (let ((a94823 (= n a94822)))
        (if a94823
          (let ((x94824 '1)) x94824)
          (let ((a94825 '1))
            (let ((a94826 (= n a94825)))
              (if a94826
                x
                (let ((a94827 (even? n)))
                  (if a94827
                    (let ((a94828 (* x x)))
                      (let ((a94829 '2))
                        (let ((a94830 (/ n a94829))) (power a94828 a94830))))
                    (let ((a94831 (* x x)))
                      (let ((a94832 '1))
                        (let ((a94833 (- n a94832)))
                          (let ((a94834 '2))
                            (let ((a94835 (/ a94833 a94834)))
                              (let ((a94836 (power a94831 a94835)))
                                (* x a94836))))))))))))))))
  (define (brouhaha_main)
    (let ((a94837 '2)) (let ((a94838 '10)) (power a94837 a94838)))))
