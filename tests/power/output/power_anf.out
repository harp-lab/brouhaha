'((define (+ . lst)
    (let ((kont94839 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94739 (apply-prim + lst))) (kont94839 x94739)))))
  (define (- . lst)
    (let ((kont94841 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94740 (apply-prim - lst))) (kont94841 x94740)))))
  (define (* . lst)
    (let ((kont94843 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94741 (apply-prim * lst))) (kont94843 x94741)))))
  (define (modulo kont94845 a b)
    (let ((x94742 (prim modulo a b))) (kont94845 x94742)))
  (define (/ . lst)
    (let ((kont94846 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94743 (apply-prim / lst))) (kont94846 x94743)))))
  (define (= . lst)
    (let ((kont94848 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94744 (apply-prim = lst))) (kont94848 x94744)))))
  (define (> . lst)
    (let ((kont94850 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94745 (apply-prim > lst))) (kont94850 x94745)))))
  (define (< . lst)
    (let ((kont94852 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94746 (apply-prim < lst))) (kont94852 x94746)))))
  (define (<= . lst)
    (let ((kont94854 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94747 (apply-prim <= lst))) (kont94854 x94747)))))
  (define (>= . lst)
    (let ((kont94856 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94748 (apply-prim >= lst))) (kont94856 x94748)))))
  (define (null? kont94858 x)
    (let ((x94749 (prim null? x))) (kont94858 x94749)))
  (define (equal? kont94859 x y)
    (let ((x94750 (prim equal? x y))) (kont94859 x94750)))
  (define (eq? kont94860 x y)
    (let ((x94751 (prim eq? x y))) (kont94860 x94751)))
  (define (cons kont94861 a b)
    (let ((x94752 (prim cons a b))) (kont94861 x94752)))
  (define (car kont94862 lst)
    (let ((x94753 (prim car lst))) (kont94862 x94753)))
  (define (cdr kont94863 lst)
    (let ((x94754 (prim cdr lst))) (kont94863 x94754)))
  (define (even? kont94864 x)
    (let ((a94755 '0))
      (let ((a94756 '2))
        (let ((f94865 (lambda (a94757) (equal? kont94864 a94755 a94757))))
          (modulo f94865 x a94756)))))
  (define (odd? kont94866 x)
    (let ((a94758 '1))
      (let ((a94759 '2))
        (let ((f94867 (lambda (a94760) (equal? kont94866 a94758 a94760))))
          (modulo f94867 x a94759)))))
  (define (list . x)
    (let ((kont94868 (prim car x))) (let ((x (prim cdr x))) (kont94868 x))))
  (define (member? kont94870 x lst)
    (let ((f94874
           (lambda (a94761)
             (if a94761
               (let ((x94762 '#f)) (kont94870 x94762))
               (let ((f94873
                      (lambda (a94763)
                        (let ((f94872
                               (lambda (a94764)
                                 (if a94764
                                   (let ((x94765 '#t)) (kont94870 x94765))
                                   (let ((f94871
                                          (lambda (a94766)
                                            (member? kont94870 x a94766))))
                                     (cdr f94871 lst))))))
                          (equal? f94872 a94763 x)))))
                 (car f94873 lst))))))
      (null? f94874 lst)))
  (define (foldl kont94875 fun acc lst)
    (let ((f94879
           (lambda (a94767)
             (if a94767
               (kont94875 acc)
               (let ((f94878
                      (lambda (a94768)
                        (let ((f94877
                               (lambda (a94769)
                                 (let ((f94876
                                        (lambda (a94770)
                                          (foldl
                                           kont94875
                                           fun
                                           a94769
                                           a94770))))
                                   (cdr f94876 lst)))))
                          (fun f94877 a94768 acc)))))
                 (car f94878 lst))))))
      (null? f94879 lst)))
  (define (reverse-helper kont94880 lst lst2)
    (let ((f94884
           (lambda (a94771)
             (if a94771
               (kont94880 lst2)
               (let ((f94883
                      (lambda (a94772)
                        (let ((f94882
                               (lambda (a94773)
                                 (let ((f94881
                                        (lambda (a94774)
                                          (reverse-helper
                                           kont94880
                                           a94772
                                           a94774))))
                                   (cons f94881 a94773 lst2)))))
                          (car f94882 lst)))))
                 (cdr f94883 lst))))))
      (null? f94884 lst)))
  (define (reverse kont94885 lst)
    (let ((f94886 (lambda (a94775) (reverse-helper kont94885 lst a94775))))
      (list f94886)))
  (define (take-helper kont94887 lst n lst2)
    (let ((a94776 '0))
      (let ((f94893
             (lambda (a94777)
               (if a94777
                 (let ((f94888 (lambda (x94778) (kont94887 x94778))))
                   (reverse f94888 lst2))
                 (let ((f94892
                        (lambda (a94779)
                          (let ((a94780 '1))
                            (let ((f94891
                                   (lambda (a94781)
                                     (let ((f94890
                                            (lambda (a94782)
                                              (let ((f94889
                                                     (lambda (a94783)
                                                       (take-helper
                                                        kont94887
                                                        a94779
                                                        a94781
                                                        a94783))))
                                                (cons f94889 a94782 lst2)))))
                                       (car f94890 lst)))))
                              (- f94891 n a94780))))))
                   (cdr f94892 lst))))))
        (= f94893 n a94776))))
  (define (take kont94894 lst n)
    (let ((f94895 (lambda (a94784) (take-helper kont94894 lst n a94784))))
      (list f94895)))
  (define (length kont94896 lst)
    (let ((f94899
           (lambda (a94785)
             (if a94785
               (let ((x94786 '0)) (kont94896 x94786))
               (let ((a94787 '1))
                 (let ((f94898
                        (lambda (a94788)
                          (let ((f94897
                                 (lambda (a94789)
                                   (+ kont94896 a94787 a94789))))
                            (length f94897 a94788)))))
                   (cdr f94898 lst)))))))
      (null? f94899 lst)))
  (define (map kont94900 proc lst)
    (let ((f94906
           (lambda (a94790)
             (if a94790
               (let ((f94901 (lambda (x94791) (kont94900 x94791))))
                 (list f94901))
               (let ((f94905
                      (lambda (a94792)
                        (let ((f94904
                               (lambda (a94793)
                                 (let ((f94903
                                        (lambda (a94794)
                                          (let ((f94902
                                                 (lambda (a94795)
                                                   (cons
                                                    kont94900
                                                    a94793
                                                    a94795))))
                                            (map f94902 proc a94794)))))
                                   (cdr f94903 lst)))))
                          (proc f94904 a94792)))))
                 (car f94905 lst))))))
      (null? f94906 lst)))
  (define (filter kont94907 op lst)
    (let ((f94915
           (lambda (a94796)
             (if a94796
               (let ((f94908 (lambda (x94797) (kont94907 x94797))))
                 (list f94908))
               (let ((f94914
                      (lambda (a94798)
                        (let ((f94913
                               (lambda (a94799)
                                 (if a94799
                                   (let ((f94911
                                          (lambda (a94800)
                                            (let ((f94910
                                                   (lambda (a94801)
                                                     (let ((f94909
                                                            (lambda (a94802)
                                                              (cons
                                                               kont94907
                                                               a94800
                                                               a94802))))
                                                       (filter
                                                        f94909
                                                        op
                                                        a94801)))))
                                              (cdr f94910 lst)))))
                                     (car f94911 lst))
                                   (let ((f94912
                                          (lambda (a94803)
                                            (filter kont94907 op a94803))))
                                     (cdr f94912 lst))))))
                          (op f94913 a94798)))))
                 (car f94914 lst))))))
      (null? f94915 lst)))
  (define (drop kont94916 lst n)
    (let ((a94804 '0))
      (let ((f94919
             (lambda (a94805)
               (if a94805
                 (kont94916 lst)
                 (let ((f94918
                        (lambda (a94806)
                          (let ((a94807 '1))
                            (let ((f94917
                                   (lambda (a94808)
                                     (drop kont94916 a94806 a94808))))
                              (- f94917 n a94807))))))
                   (cdr f94918 lst))))))
        (= f94919 n a94804))))
  (define (foldr kont94920 proc acc lst)
    (let ((f94924
           (lambda (a94809)
             (if a94809
               (kont94920 acc)
               (let ((f94923
                      (lambda (a94810)
                        (let ((f94922
                               (lambda (a94811)
                                 (let ((f94921
                                        (lambda (a94812)
                                          (proc kont94920 a94810 a94812))))
                                   (foldr f94921 proc acc a94811)))))
                          (cdr f94922 lst)))))
                 (car f94923 lst))))))
      (null? f94924 lst)))
  (define (append kont94925 lst1 lst2)
    (let ((f94929
           (lambda (a94813)
             (if a94813
               (kont94925 lst2)
               (let ((f94928
                      (lambda (a94814)
                        (let ((f94927
                               (lambda (a94815)
                                 (let ((f94926
                                        (lambda (a94816)
                                          (cons kont94925 a94814 a94816))))
                                   (append f94926 a94815 lst2)))))
                          (cdr f94927 lst1)))))
                 (car f94928 lst1))))))
      (null? f94929 lst1)))
  (define (hash . lst)
    (let ((kont94930 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x94817 (apply-prim hash lst))) (kont94930 x94817)))))
  (define (hash-ref kont94932 h k)
    (let ((x94818 (prim hash-ref h k))) (kont94932 x94818)))
  (define (hash-set kont94933 h k v)
    (let ((x94819 (prim hash-set h k v))) (kont94933 x94819)))
  (define (hash-has-key? kont94934 h k)
    (let ((x94820 (prim hash-has-key? h k))) (kont94934 x94820)))
  (define (hash-count kont94935 h)
    (let ((x94821 (prim hash-count h))) (kont94935 x94821)))
  (define (power kont94936 x n)
    (let ((a94822 '0))
      (let ((f94945
             (lambda (a94823)
               (if a94823
                 (let ((x94824 '1)) (kont94936 x94824))
                 (let ((a94825 '1))
                   (let ((f94944
                          (lambda (a94826)
                            (if a94826
                              (kont94936 x)
                              (let ((f94943
                                     (lambda (a94827)
                                       (if a94827
                                         (let ((f94938
                                                (lambda (a94828)
                                                  (let ((a94829 '2))
                                                    (let ((f94937
                                                           (lambda (a94830)
                                                             (power
                                                              kont94936
                                                              a94828
                                                              a94830))))
                                                      (/ f94937 n a94829))))))
                                           (* f94938 x x))
                                         (let ((f94942
                                                (lambda (a94831)
                                                  (let ((a94832 '1))
                                                    (let ((f94941
                                                           (lambda (a94833)
                                                             (let ((a94834 '2))
                                                               (let ((f94940
                                                                      (lambda (a94835)
                                                                        (let ((f94939
                                                                               (lambda (a94836)
                                                                                 (*
                                                                                  kont94936
                                                                                  x
                                                                                  a94836))))
                                                                          (power
                                                                           f94939
                                                                           a94831
                                                                           a94835)))))
                                                                 (/
                                                                  f94940
                                                                  a94833
                                                                  a94834))))))
                                                      (- f94941 n a94832))))))
                                           (* f94942 x x))))))
                                (even? f94943 n))))))
                     (= f94944 n a94825)))))))
        (= f94945 n a94822))))
  (define (brouhaha_main kont94946)
    (let ((a94837 '2)) (let ((a94838 '10)) (power kont94946 a94837 a94838)))))
