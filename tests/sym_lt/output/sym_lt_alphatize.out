'((define (+ . lst) (let ((x115109 (apply-prim + lst))) x115109))
  (define (- . lst) (let ((x115110 (apply-prim - lst))) x115110))
  (define (* . lst) (let ((x115111 (apply-prim * lst))) x115111))
  (define (modulo a b) (let ((x115112 (prim modulo a b))) x115112))
  (define (/ . lst) (let ((x115113 (apply-prim / lst))) x115113))
  (define (= . lst) (let ((x115114 (apply-prim = lst))) x115114))
  (define (> . lst) (let ((x115115 (apply-prim > lst))) x115115))
  (define (< . lst) (let ((x115116 (apply-prim < lst))) x115116))
  (define (<= . lst) (let ((x115117 (apply-prim <= lst))) x115117))
  (define (>= . lst) (let ((x115118 (apply-prim >= lst))) x115118))
  (define (null? x) (let ((x115119 (prim null? x))) x115119))
  (define (equal? x y) (let ((x115120 (prim equal? x y))) x115120))
  (define (eq? x y) (let ((x115121 (prim eq? x y))) x115121))
  (define (cons a b) (let ((x115122 (prim cons a b))) x115122))
  (define (car lst) (let ((x115123 (prim car lst))) x115123))
  (define (cdr lst) (let ((x115124 (prim cdr lst))) x115124))
  (define (even? x)
    (let ((a115125 '0))
      (let ((a115126 '2))
        (let ((a115127 (modulo x a115126))) (equal? a115125 a115127)))))
  (define (odd? x)
    (let ((a115128 '1))
      (let ((a115129 '2))
        (let ((a115130 (modulo x a115129))) (equal? a115128 a115130)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a115131 (null? lst)))
      (if a115131
        (let ((x115132 '#f)) x115132)
        (let ((a115133 (car lst)))
          (let ((a115134 (equal? a115133 x)))
            (if a115134
              (let ((x115135 '#t)) x115135)
              (let ((a115136 (cdr lst))) (member? x a115136))))))))
  (define (foldl fun acc lst)
    (let ((a115137 (null? lst)))
      (if a115137
        acc
        (let ((a115138 (car lst)))
          (let ((a115139 (fun a115138 acc)))
            (let ((a115140 (cdr lst))) (foldl fun a115139 a115140)))))))
  (define (reverse-helper lst lst2)
    (let ((a115141 (null? lst)))
      (if a115141
        lst2
        (let ((a115142 (cdr lst)))
          (let ((a115143 (car lst)))
            (let ((a115144 (cons a115143 lst2)))
              (reverse-helper a115142 a115144)))))))
  (define (reverse lst) (let ((a115145 (list))) (reverse-helper lst a115145)))
  (define (take-helper lst n lst2)
    (let ((a115146 '0))
      (let ((a115147 (= n a115146)))
        (if a115147
          (let ((x115148 (reverse lst2))) x115148)
          (let ((a115149 (cdr lst)))
            (let ((a115150 '1))
              (let ((a115151 (- n a115150)))
                (let ((a115152 (car lst)))
                  (let ((a115153 (cons a115152 lst2)))
                    (take-helper a115149 a115151 a115153))))))))))
  (define (take lst n) (let ((a115154 (list))) (take-helper lst n a115154)))
  (define (length lst)
    (let ((a115155 (null? lst)))
      (if a115155
        (let ((x115156 '0)) x115156)
        (let ((a115157 '1))
          (let ((a115158 (cdr lst)))
            (let ((a115159 (length a115158))) (+ a115157 a115159)))))))
  (define (map proc lst)
    (let ((a115160 (null? lst)))
      (if a115160
        (let ((x115161 (list))) x115161)
        (let ((a115162 (car lst)))
          (let ((a115163 (proc a115162)))
            (let ((a115164 (cdr lst)))
              (let ((a115165 (map proc a115164))) (cons a115163 a115165))))))))
  (define (filter op lst)
    (let ((a115166 (null? lst)))
      (if a115166
        (let ((x115167 (list))) x115167)
        (let ((a115168 (car lst)))
          (let ((a115169 (op a115168)))
            (if a115169
              (let ((a115170 (car lst)))
                (let ((a115171 (cdr lst)))
                  (let ((a115172 (filter op a115171)))
                    (cons a115170 a115172))))
              (let ((a115173 (cdr lst))) (filter op a115173))))))))
  (define (drop lst n)
    (let ((a115174 '0))
      (let ((a115175 (= n a115174)))
        (if a115175
          lst
          (let ((a115176 (cdr lst)))
            (let ((a115177 '1))
              (let ((a115178 (- n a115177))) (drop a115176 a115178))))))))
  (define (foldr proc acc lst)
    (let ((a115179 (null? lst)))
      (if a115179
        acc
        (let ((a115180 (car lst)))
          (let ((a115181 (cdr lst)))
            (let ((a115182 (foldr proc acc a115181)))
              (proc a115180 a115182)))))))
  (define (append lst1 lst2)
    (let ((a115183 (null? lst1)))
      (if a115183
        lst2
        (let ((a115184 (car lst1)))
          (let ((a115185 (cdr lst1)))
            (let ((a115186 (append a115185 lst2))) (cons a115184 a115186)))))))
  (define (hash . lst) (let ((x115187 (apply-prim hash lst))) x115187))
  (define (hash-ref h k) (let ((x115188 (prim hash-ref h k))) x115188))
  (define (hash-set h k v) (let ((x115189 (prim hash-set h k v))) x115189))
  (define (hash-has-key? h k)
    (let ((x115190 (prim hash-has-key? h k))) x115190))
  (define (hash-count h) (let ((x115191 (prim hash-count h))) x115191))
  (define (call)
    (let ((a115192 '1))
      (let ((a115193 '2))
        (let ((a115194 '3))
          (let ((a115195 '4))
            (let ((a115196 '5))
              (let ((a115197 '100))
                (< a115192 a115193 a115194 a115195 a115196 a115197))))))))
  (define (brouhaha_main) (let ((x115198 (call))) x115198)))
