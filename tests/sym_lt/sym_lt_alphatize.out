'((define (+ . lst) (let ((x120976 (apply-prim + lst))) x120976))
  (define (- . lst) (let ((x120977 (apply-prim - lst))) x120977))
  (define (* . lst) (let ((x120978 (apply-prim * lst))) x120978))
  (define (modulo a b) (let ((x120979 (prim modulo a b))) x120979))
  (define (/ . lst) (let ((x120980 (apply-prim / lst))) x120980))
  (define (= . lst) (let ((x120981 (apply-prim = lst))) x120981))
  (define (> . lst) (let ((x120982 (apply-prim > lst))) x120982))
  (define (< . lst) (let ((x120983 (apply-prim < lst))) x120983))
  (define (<= . lst) (let ((x120984 (apply-prim <= lst))) x120984))
  (define (>= . lst) (let ((x120985 (apply-prim >= lst))) x120985))
  (define (null? x) (let ((x120986 (prim null? x))) x120986))
  (define (equal? x y) (let ((x120987 (prim equal? x y))) x120987))
  (define (eq? x y) (let ((x120988 (prim eq? x y))) x120988))
  (define (cons a b) (let ((x120989 (prim cons a b))) x120989))
  (define (car lst) (let ((x120990 (prim car lst))) x120990))
  (define (cdr lst) (let ((x120991 (prim cdr lst))) x120991))
  (define (even? x)
    (let ((a120992 '0))
      (let ((a120993 '2))
        (let ((a120994 (modulo x a120993))) (equal? a120992 a120994)))))
  (define (odd? x)
    (let ((a120995 '1))
      (let ((a120996 '2))
        (let ((a120997 (modulo x a120996))) (equal? a120995 a120997)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a120998 (null? lst)))
      (if a120998
        (let ((x120999 '#f)) x120999)
        (let ((a121000 (car lst)))
          (let ((a121001 (equal? a121000 x)))
            (if a121001
              (let ((x121002 '#t)) x121002)
              (let ((a121003 (cdr lst))) (member? x a121003))))))))
  (define (foldl fun acc lst)
    (let ((a121004 (null? lst)))
      (if a121004
        acc
        (let ((a121005 (car lst)))
          (let ((a121006 (fun a121005 acc)))
            (let ((a121007 (cdr lst))) (foldl fun a121006 a121007)))))))
  (define (reverse-helper lst lst2)
    (let ((a121008 (null? lst)))
      (if a121008
        lst2
        (let ((a121009 (cdr lst)))
          (let ((a121010 (car lst)))
            (let ((a121011 (cons a121010 lst2)))
              (reverse-helper a121009 a121011)))))))
  (define (reverse lst) (let ((a121012 (list))) (reverse-helper lst a121012)))
  (define (take-helper lst n lst2)
    (let ((a121013 '0))
      (let ((a121014 (= n a121013)))
        (if a121014
          (let ((x121015 (reverse lst2))) x121015)
          (let ((a121016 (cdr lst)))
            (let ((a121017 '1))
              (let ((a121018 (- n a121017)))
                (let ((a121019 (car lst)))
                  (let ((a121020 (cons a121019 lst2)))
                    (take-helper a121016 a121018 a121020))))))))))
  (define (take lst n) (let ((a121021 (list))) (take-helper lst n a121021)))
  (define (length lst)
    (let ((a121022 (null? lst)))
      (if a121022
        (let ((x121023 '0)) x121023)
        (let ((a121024 '1))
          (let ((a121025 (cdr lst)))
            (let ((a121026 (length a121025))) (+ a121024 a121026)))))))
  (define (map proc lst)
    (let ((a121027 (null? lst)))
      (if a121027
        (let ((x121028 (list))) x121028)
        (let ((a121029 (car lst)))
          (let ((a121030 (proc a121029)))
            (let ((a121031 (cdr lst)))
              (let ((a121032 (map proc a121031))) (cons a121030 a121032))))))))
  (define (filter op lst)
    (let ((a121033 (null? lst)))
      (if a121033
        (let ((x121034 (list))) x121034)
        (let ((a121035 (car lst)))
          (let ((a121036 (op a121035)))
            (if a121036
              (let ((a121037 (car lst)))
                (let ((a121038 (cdr lst)))
                  (let ((a121039 (filter op a121038)))
                    (cons a121037 a121039))))
              (let ((a121040 (cdr lst))) (filter op a121040))))))))
  (define (drop lst n)
    (let ((a121041 '0))
      (let ((a121042 (= n a121041)))
        (if a121042
          lst
          (let ((a121043 (cdr lst)))
            (let ((a121044 '1))
              (let ((a121045 (- n a121044))) (drop a121043 a121045))))))))
  (define (foldr proc acc lst)
    (let ((a121046 (null? lst)))
      (if a121046
        acc
        (let ((a121047 (car lst)))
          (let ((a121048 (cdr lst)))
            (let ((a121049 (foldr proc acc a121048)))
              (proc a121047 a121049)))))))
  (define (append lst1 lst2)
    (let ((a121050 (null? lst1)))
      (if a121050
        lst2
        (let ((a121051 (car lst1)))
          (let ((a121052 (cdr lst1)))
            (let ((a121053 (append a121052 lst2))) (cons a121051 a121053)))))))
  (define (hash . lst) (let ((x121054 (apply-prim hash lst))) x121054))
  (define (hash-ref h k) (let ((x121055 (prim hash-ref h k))) x121055))
  (define (hash-set h k v) (let ((x121056 (prim hash-set h k v))) x121056))
  (define (hash-has-key? h k)
    (let ((x121057 (prim hash-has-key? h k))) x121057))
  (define (hash-count h) (let ((x121058 (prim hash-count h))) x121058))
  (define (call)
    (let ((a121059 '1))
      (let ((a121060 '2))
        (let ((a121061 '3))
          (let ((a121062 '4))
            (let ((a121063 '5))
              (let ((a121064 '100))
                (< a121059 a121060 a121061 a121062 a121063 a121064))))))))
  (define (brouhaha_main) (let ((x121065 (call))) x121065)))
