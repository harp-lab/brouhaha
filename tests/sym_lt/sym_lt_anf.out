'((define (+ . lst)
    (let ((kont121066 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120976 (apply-prim + lst))) (kont121066 x120976)))))
  (define (- . lst)
    (let ((kont121068 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120977 (apply-prim - lst))) (kont121068 x120977)))))
  (define (* . lst)
    (let ((kont121070 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120978 (apply-prim * lst))) (kont121070 x120978)))))
  (define (modulo kont121072 a b)
    (let ((x120979 (prim modulo a b))) (kont121072 x120979)))
  (define (/ . lst)
    (let ((kont121073 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120980 (apply-prim / lst))) (kont121073 x120980)))))
  (define (= . lst)
    (let ((kont121075 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120981 (apply-prim = lst))) (kont121075 x120981)))))
  (define (> . lst)
    (let ((kont121077 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120982 (apply-prim > lst))) (kont121077 x120982)))))
  (define (< . lst)
    (let ((kont121079 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120983 (apply-prim < lst))) (kont121079 x120983)))))
  (define (<= . lst)
    (let ((kont121081 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120984 (apply-prim <= lst))) (kont121081 x120984)))))
  (define (>= . lst)
    (let ((kont121083 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x120985 (apply-prim >= lst))) (kont121083 x120985)))))
  (define (null? kont121085 x)
    (let ((x120986 (prim null? x))) (kont121085 x120986)))
  (define (equal? kont121086 x y)
    (let ((x120987 (prim equal? x y))) (kont121086 x120987)))
  (define (eq? kont121087 x y)
    (let ((x120988 (prim eq? x y))) (kont121087 x120988)))
  (define (cons kont121088 a b)
    (let ((x120989 (prim cons a b))) (kont121088 x120989)))
  (define (car kont121089 lst)
    (let ((x120990 (prim car lst))) (kont121089 x120990)))
  (define (cdr kont121090 lst)
    (let ((x120991 (prim cdr lst))) (kont121090 x120991)))
  (define (even? kont121091 x)
    (let ((a120992 '0))
      (let ((a120993 '2))
        (let ((f121092 (lambda (a120994) (equal? kont121091 a120992 a120994))))
          (modulo f121092 x a120993)))))
  (define (odd? kont121093 x)
    (let ((a120995 '1))
      (let ((a120996 '2))
        (let ((f121094 (lambda (a120997) (equal? kont121093 a120995 a120997))))
          (modulo f121094 x a120996)))))
  (define (list . x)
    (let ((kont121095 (prim car x))) (let ((x (prim cdr x))) (kont121095 x))))
  (define (member? kont121097 x lst)
    (let ((f121101
           (lambda (a120998)
             (if a120998
               (let ((x120999 '#f)) (kont121097 x120999))
               (let ((f121100
                      (lambda (a121000)
                        (let ((f121099
                               (lambda (a121001)
                                 (if a121001
                                   (let ((x121002 '#t)) (kont121097 x121002))
                                   (let ((f121098
                                          (lambda (a121003)
                                            (member? kont121097 x a121003))))
                                     (cdr f121098 lst))))))
                          (equal? f121099 a121000 x)))))
                 (car f121100 lst))))))
      (null? f121101 lst)))
  (define (foldl kont121102 fun acc lst)
    (let ((f121106
           (lambda (a121004)
             (if a121004
               (kont121102 acc)
               (let ((f121105
                      (lambda (a121005)
                        (let ((f121104
                               (lambda (a121006)
                                 (let ((f121103
                                        (lambda (a121007)
                                          (foldl
                                           kont121102
                                           fun
                                           a121006
                                           a121007))))
                                   (cdr f121103 lst)))))
                          (fun f121104 a121005 acc)))))
                 (car f121105 lst))))))
      (null? f121106 lst)))
  (define (reverse-helper kont121107 lst lst2)
    (let ((f121111
           (lambda (a121008)
             (if a121008
               (kont121107 lst2)
               (let ((f121110
                      (lambda (a121009)
                        (let ((f121109
                               (lambda (a121010)
                                 (let ((f121108
                                        (lambda (a121011)
                                          (reverse-helper
                                           kont121107
                                           a121009
                                           a121011))))
                                   (cons f121108 a121010 lst2)))))
                          (car f121109 lst)))))
                 (cdr f121110 lst))))))
      (null? f121111 lst)))
  (define (reverse kont121112 lst)
    (let ((f121113 (lambda (a121012) (reverse-helper kont121112 lst a121012))))
      (list f121113)))
  (define (take-helper kont121114 lst n lst2)
    (let ((a121013 '0))
      (let ((f121120
             (lambda (a121014)
               (if a121014
                 (let ((f121115 (lambda (x121015) (kont121114 x121015))))
                   (reverse f121115 lst2))
                 (let ((f121119
                        (lambda (a121016)
                          (let ((a121017 '1))
                            (let ((f121118
                                   (lambda (a121018)
                                     (let ((f121117
                                            (lambda (a121019)
                                              (let ((f121116
                                                     (lambda (a121020)
                                                       (take-helper
                                                        kont121114
                                                        a121016
                                                        a121018
                                                        a121020))))
                                                (cons f121116 a121019 lst2)))))
                                       (car f121117 lst)))))
                              (- f121118 n a121017))))))
                   (cdr f121119 lst))))))
        (= f121120 n a121013))))
  (define (take kont121121 lst n)
    (let ((f121122 (lambda (a121021) (take-helper kont121121 lst n a121021))))
      (list f121122)))
  (define (length kont121123 lst)
    (let ((f121126
           (lambda (a121022)
             (if a121022
               (let ((x121023 '0)) (kont121123 x121023))
               (let ((a121024 '1))
                 (let ((f121125
                        (lambda (a121025)
                          (let ((f121124
                                 (lambda (a121026)
                                   (+ kont121123 a121024 a121026))))
                            (length f121124 a121025)))))
                   (cdr f121125 lst)))))))
      (null? f121126 lst)))
  (define (map kont121127 proc lst)
    (let ((f121133
           (lambda (a121027)
             (if a121027
               (let ((f121128 (lambda (x121028) (kont121127 x121028))))
                 (list f121128))
               (let ((f121132
                      (lambda (a121029)
                        (let ((f121131
                               (lambda (a121030)
                                 (let ((f121130
                                        (lambda (a121031)
                                          (let ((f121129
                                                 (lambda (a121032)
                                                   (cons
                                                    kont121127
                                                    a121030
                                                    a121032))))
                                            (map f121129 proc a121031)))))
                                   (cdr f121130 lst)))))
                          (proc f121131 a121029)))))
                 (car f121132 lst))))))
      (null? f121133 lst)))
  (define (filter kont121134 op lst)
    (let ((f121142
           (lambda (a121033)
             (if a121033
               (let ((f121135 (lambda (x121034) (kont121134 x121034))))
                 (list f121135))
               (let ((f121141
                      (lambda (a121035)
                        (let ((f121140
                               (lambda (a121036)
                                 (if a121036
                                   (let ((f121138
                                          (lambda (a121037)
                                            (let ((f121137
                                                   (lambda (a121038)
                                                     (let ((f121136
                                                            (lambda (a121039)
                                                              (cons
                                                               kont121134
                                                               a121037
                                                               a121039))))
                                                       (filter
                                                        f121136
                                                        op
                                                        a121038)))))
                                              (cdr f121137 lst)))))
                                     (car f121138 lst))
                                   (let ((f121139
                                          (lambda (a121040)
                                            (filter kont121134 op a121040))))
                                     (cdr f121139 lst))))))
                          (op f121140 a121035)))))
                 (car f121141 lst))))))
      (null? f121142 lst)))
  (define (drop kont121143 lst n)
    (let ((a121041 '0))
      (let ((f121146
             (lambda (a121042)
               (if a121042
                 (kont121143 lst)
                 (let ((f121145
                        (lambda (a121043)
                          (let ((a121044 '1))
                            (let ((f121144
                                   (lambda (a121045)
                                     (drop kont121143 a121043 a121045))))
                              (- f121144 n a121044))))))
                   (cdr f121145 lst))))))
        (= f121146 n a121041))))
  (define (foldr kont121147 proc acc lst)
    (let ((f121151
           (lambda (a121046)
             (if a121046
               (kont121147 acc)
               (let ((f121150
                      (lambda (a121047)
                        (let ((f121149
                               (lambda (a121048)
                                 (let ((f121148
                                        (lambda (a121049)
                                          (proc kont121147 a121047 a121049))))
                                   (foldr f121148 proc acc a121048)))))
                          (cdr f121149 lst)))))
                 (car f121150 lst))))))
      (null? f121151 lst)))
  (define (append kont121152 lst1 lst2)
    (let ((f121156
           (lambda (a121050)
             (if a121050
               (kont121152 lst2)
               (let ((f121155
                      (lambda (a121051)
                        (let ((f121154
                               (lambda (a121052)
                                 (let ((f121153
                                        (lambda (a121053)
                                          (cons kont121152 a121051 a121053))))
                                   (append f121153 a121052 lst2)))))
                          (cdr f121154 lst1)))))
                 (car f121155 lst1))))))
      (null? f121156 lst1)))
  (define (hash . lst)
    (let ((kont121157 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x121054 (apply-prim hash lst))) (kont121157 x121054)))))
  (define (hash-ref kont121159 h k)
    (let ((x121055 (prim hash-ref h k))) (kont121159 x121055)))
  (define (hash-set kont121160 h k v)
    (let ((x121056 (prim hash-set h k v))) (kont121160 x121056)))
  (define (hash-has-key? kont121161 h k)
    (let ((x121057 (prim hash-has-key? h k))) (kont121161 x121057)))
  (define (hash-count kont121162 h)
    (let ((x121058 (prim hash-count h))) (kont121162 x121058)))
  (define (call kont121163)
    (let ((a121059 '1))
      (let ((a121060 '2))
        (let ((a121061 '3))
          (let ((a121062 '4))
            (let ((a121063 '5))
              (let ((a121064 '100))
                (<
                 kont121163
                 a121059
                 a121060
                 a121061
                 a121062
                 a121063
                 a121064))))))))
  (define (brouhaha_main kont121164)
    (let ((f121165 (lambda (x121065) (kont121164 x121065)))) (call f121165))))
