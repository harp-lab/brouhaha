'((define (+ . lst) (let ((x50412 (apply-prim + lst))) x50412))
  (define (- . lst) (let ((x50413 (apply-prim - lst))) x50413))
  (define (* . lst) (let ((x50414 (apply-prim * lst))) x50414))
  (define (modulo a b) (let ((x50415 (prim modulo a b))) x50415))
  (define (/ . lst) (let ((x50416 (apply-prim / lst))) x50416))
  (define (= . lst) (let ((x50417 (apply-prim = lst))) x50417))
  (define (> . lst) (let ((x50418 (apply-prim > lst))) x50418))
  (define (< . lst) (let ((x50419 (apply-prim < lst))) x50419))
  (define (<= . lst) (let ((x50420 (apply-prim <= lst))) x50420))
  (define (>= . lst) (let ((x50421 (apply-prim >= lst))) x50421))
  (define (null? x) (let ((x50422 (prim null? x))) x50422))
  (define (equal? x y) (let ((x50423 (prim equal? x y))) x50423))
  (define (eq? x y) (let ((x50424 (prim eq? x y))) x50424))
  (define (cons a b) (let ((x50425 (prim cons a b))) x50425))
  (define (car lst) (let ((x50426 (prim car lst))) x50426))
  (define (cdr lst) (let ((x50427 (prim cdr lst))) x50427))
  (define (even? x)
    (let ((a50428 '0))
      (let ((a50429 '2))
        (let ((a50430 (modulo x a50429))) (equal? a50428 a50430)))))
  (define (odd? x)
    (let ((a50431 '1))
      (let ((a50432 '2))
        (let ((a50433 (modulo x a50432))) (equal? a50431 a50433)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a50434 (null? lst)))
      (if a50434
        (let ((x50435 '#f)) x50435)
        (let ((a50436 (car lst)))
          (let ((a50437 (equal? a50436 x)))
            (if a50437
              (let ((x50438 '#t)) x50438)
              (let ((a50439 (cdr lst))) (member? x a50439))))))))
  (define (foldl fun acc lst)
    (let ((a50440 (null? lst)))
      (if a50440
        acc
        (let ((a50441 (car lst)))
          (let ((a50442 (fun a50441 acc)))
            (let ((a50443 (cdr lst))) (foldl fun a50442 a50443)))))))
  (define (reverse-helper lst lst2)
    (let ((a50444 (null? lst)))
      (if a50444
        lst2
        (let ((a50445 (cdr lst)))
          (let ((a50446 (car lst)))
            (let ((a50447 (cons a50446 lst2)))
              (reverse-helper a50445 a50447)))))))
  (define (reverse lst) (let ((a50448 (list))) (reverse-helper lst a50448)))
  (define (take-helper lst n lst2)
    (let ((a50449 '0))
      (let ((a50450 (= n a50449)))
        (if a50450
          (let ((x50451 (reverse lst2))) x50451)
          (let ((a50452 (cdr lst)))
            (let ((a50453 '1))
              (let ((a50454 (- n a50453)))
                (let ((a50455 (car lst)))
                  (let ((a50456 (cons a50455 lst2)))
                    (take-helper a50452 a50454 a50456))))))))))
  (define (take lst n) (let ((a50457 (list))) (take-helper lst n a50457)))
  (define (length lst)
    (let ((a50458 (null? lst)))
      (if a50458
        (let ((x50459 '0)) x50459)
        (let ((a50460 '1))
          (let ((a50461 (cdr lst)))
            (let ((a50462 (length a50461))) (+ a50460 a50462)))))))
  (define (map proc lst)
    (let ((a50463 (null? lst)))
      (if a50463
        (let ((x50464 (list))) x50464)
        (let ((a50465 (car lst)))
          (let ((a50466 (proc a50465)))
            (let ((a50467 (cdr lst)))
              (let ((a50468 (map proc a50467))) (cons a50466 a50468))))))))
  (define (filter op lst)
    (let ((a50469 (null? lst)))
      (if a50469
        (let ((x50470 (list))) x50470)
        (let ((a50471 (car lst)))
          (let ((a50472 (op a50471)))
            (if a50472
              (let ((a50473 (car lst)))
                (let ((a50474 (cdr lst)))
                  (let ((a50475 (filter op a50474))) (cons a50473 a50475))))
              (let ((a50476 (cdr lst))) (filter op a50476))))))))
  (define (drop lst n)
    (let ((a50477 '0))
      (let ((a50478 (= n a50477)))
        (if a50478
          lst
          (let ((a50479 (cdr lst)))
            (let ((a50480 '1))
              (let ((a50481 (- n a50480))) (drop a50479 a50481))))))))
  (define (foldr proc acc lst)
    (let ((a50482 (null? lst)))
      (if a50482
        acc
        (let ((a50483 (car lst)))
          (let ((a50484 (cdr lst)))
            (let ((a50485 (foldr proc acc a50484))) (proc a50483 a50485)))))))
  (define (append lst1 lst2)
    (let ((a50486 (null? lst1)))
      (if a50486
        lst2
        (let ((a50487 (car lst1)))
          (let ((a50488 (cdr lst1)))
            (let ((a50489 (append a50488 lst2))) (cons a50487 a50489)))))))
  (define (hash . lst) (let ((x50490 (apply-prim hash lst))) x50490))
  (define (hash-ref h k) (let ((x50491 (prim hash-ref h k))) x50491))
  (define (hash-set h k v) (let ((x50492 (prim hash-set h k v))) x50492))
  (define (hash-has-key? h k) (let ((x50493 (prim hash-has-key? h k))) x50493))
  (define (hash-count h) (let ((x50494 (prim hash-count h))) x50494))
  (define (call-foldl lst) (let ((a50495 '0)) (foldl + a50495 lst)))
  (define (brouhaha_main)
    (let ((a50496 '1))
      (let ((a50497 '2))
        (let ((a50498 '3))
          (let ((a50499 '4))
            (let ((a50500 (list a50496 a50497 a50498 a50499)))
              (call-foldl a50500))))))))
