'((define (+ . lst)
    (let ((kont50501 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50412 (apply-prim + lst))) (kont50501 x50412)))))
  (define (- . lst)
    (let ((kont50503 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50413 (apply-prim - lst))) (kont50503 x50413)))))
  (define (* . lst)
    (let ((kont50505 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50414 (apply-prim * lst))) (kont50505 x50414)))))
  (define (modulo kont50507 a b)
    (let ((x50415 (prim modulo a b))) (kont50507 x50415)))
  (define (/ . lst)
    (let ((kont50508 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50416 (apply-prim / lst))) (kont50508 x50416)))))
  (define (= . lst)
    (let ((kont50510 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50417 (apply-prim = lst))) (kont50510 x50417)))))
  (define (> . lst)
    (let ((kont50512 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50418 (apply-prim > lst))) (kont50512 x50418)))))
  (define (< . lst)
    (let ((kont50514 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50419 (apply-prim < lst))) (kont50514 x50419)))))
  (define (<= . lst)
    (let ((kont50516 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50420 (apply-prim <= lst))) (kont50516 x50420)))))
  (define (>= . lst)
    (let ((kont50518 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50421 (apply-prim >= lst))) (kont50518 x50421)))))
  (define (null? kont50520 x)
    (let ((x50422 (prim null? x))) (kont50520 x50422)))
  (define (equal? kont50521 x y)
    (let ((x50423 (prim equal? x y))) (kont50521 x50423)))
  (define (eq? kont50522 x y)
    (let ((x50424 (prim eq? x y))) (kont50522 x50424)))
  (define (cons kont50523 a b)
    (let ((x50425 (prim cons a b))) (kont50523 x50425)))
  (define (car kont50524 lst)
    (let ((x50426 (prim car lst))) (kont50524 x50426)))
  (define (cdr kont50525 lst)
    (let ((x50427 (prim cdr lst))) (kont50525 x50427)))
  (define (even? kont50526 x)
    (let ((a50428 '0))
      (let ((a50429 '2))
        (let ((f50527 (lambda (a50430) (equal? kont50526 a50428 a50430))))
          (modulo f50527 x a50429)))))
  (define (odd? kont50528 x)
    (let ((a50431 '1))
      (let ((a50432 '2))
        (let ((f50529 (lambda (a50433) (equal? kont50528 a50431 a50433))))
          (modulo f50529 x a50432)))))
  (define (list . x)
    (let ((kont50530 (prim car x))) (let ((x (prim cdr x))) (kont50530 x))))
  (define (member? kont50532 x lst)
    (let ((f50536
           (lambda (a50434)
             (if a50434
               (let ((x50435 '#f)) (kont50532 x50435))
               (let ((f50535
                      (lambda (a50436)
                        (let ((f50534
                               (lambda (a50437)
                                 (if a50437
                                   (let ((x50438 '#t)) (kont50532 x50438))
                                   (let ((f50533
                                          (lambda (a50439)
                                            (member? kont50532 x a50439))))
                                     (cdr f50533 lst))))))
                          (equal? f50534 a50436 x)))))
                 (car f50535 lst))))))
      (null? f50536 lst)))
  (define (foldl kont50537 fun acc lst)
    (let ((f50541
           (lambda (a50440)
             (if a50440
               (kont50537 acc)
               (let ((f50540
                      (lambda (a50441)
                        (let ((f50539
                               (lambda (a50442)
                                 (let ((f50538
                                        (lambda (a50443)
                                          (foldl
                                           kont50537
                                           fun
                                           a50442
                                           a50443))))
                                   (cdr f50538 lst)))))
                          (fun f50539 a50441 acc)))))
                 (car f50540 lst))))))
      (null? f50541 lst)))
  (define (reverse-helper kont50542 lst lst2)
    (let ((f50546
           (lambda (a50444)
             (if a50444
               (kont50542 lst2)
               (let ((f50545
                      (lambda (a50445)
                        (let ((f50544
                               (lambda (a50446)
                                 (let ((f50543
                                        (lambda (a50447)
                                          (reverse-helper
                                           kont50542
                                           a50445
                                           a50447))))
                                   (cons f50543 a50446 lst2)))))
                          (car f50544 lst)))))
                 (cdr f50545 lst))))))
      (null? f50546 lst)))
  (define (reverse kont50547 lst)
    (let ((f50548 (lambda (a50448) (reverse-helper kont50547 lst a50448))))
      (list f50548)))
  (define (take-helper kont50549 lst n lst2)
    (let ((a50449 '0))
      (let ((f50555
             (lambda (a50450)
               (if a50450
                 (let ((f50550 (lambda (x50451) (kont50549 x50451))))
                   (reverse f50550 lst2))
                 (let ((f50554
                        (lambda (a50452)
                          (let ((a50453 '1))
                            (let ((f50553
                                   (lambda (a50454)
                                     (let ((f50552
                                            (lambda (a50455)
                                              (let ((f50551
                                                     (lambda (a50456)
                                                       (take-helper
                                                        kont50549
                                                        a50452
                                                        a50454
                                                        a50456))))
                                                (cons f50551 a50455 lst2)))))
                                       (car f50552 lst)))))
                              (- f50553 n a50453))))))
                   (cdr f50554 lst))))))
        (= f50555 n a50449))))
  (define (take kont50556 lst n)
    (let ((f50557 (lambda (a50457) (take-helper kont50556 lst n a50457))))
      (list f50557)))
  (define (length kont50558 lst)
    (let ((f50561
           (lambda (a50458)
             (if a50458
               (let ((x50459 '0)) (kont50558 x50459))
               (let ((a50460 '1))
                 (let ((f50560
                        (lambda (a50461)
                          (let ((f50559
                                 (lambda (a50462)
                                   (+ kont50558 a50460 a50462))))
                            (length f50559 a50461)))))
                   (cdr f50560 lst)))))))
      (null? f50561 lst)))
  (define (map kont50562 proc lst)
    (let ((f50568
           (lambda (a50463)
             (if a50463
               (let ((f50563 (lambda (x50464) (kont50562 x50464))))
                 (list f50563))
               (let ((f50567
                      (lambda (a50465)
                        (let ((f50566
                               (lambda (a50466)
                                 (let ((f50565
                                        (lambda (a50467)
                                          (let ((f50564
                                                 (lambda (a50468)
                                                   (cons
                                                    kont50562
                                                    a50466
                                                    a50468))))
                                            (map f50564 proc a50467)))))
                                   (cdr f50565 lst)))))
                          (proc f50566 a50465)))))
                 (car f50567 lst))))))
      (null? f50568 lst)))
  (define (filter kont50569 op lst)
    (let ((f50577
           (lambda (a50469)
             (if a50469
               (let ((f50570 (lambda (x50470) (kont50569 x50470))))
                 (list f50570))
               (let ((f50576
                      (lambda (a50471)
                        (let ((f50575
                               (lambda (a50472)
                                 (if a50472
                                   (let ((f50573
                                          (lambda (a50473)
                                            (let ((f50572
                                                   (lambda (a50474)
                                                     (let ((f50571
                                                            (lambda (a50475)
                                                              (cons
                                                               kont50569
                                                               a50473
                                                               a50475))))
                                                       (filter
                                                        f50571
                                                        op
                                                        a50474)))))
                                              (cdr f50572 lst)))))
                                     (car f50573 lst))
                                   (let ((f50574
                                          (lambda (a50476)
                                            (filter kont50569 op a50476))))
                                     (cdr f50574 lst))))))
                          (op f50575 a50471)))))
                 (car f50576 lst))))))
      (null? f50577 lst)))
  (define (drop kont50578 lst n)
    (let ((a50477 '0))
      (let ((f50581
             (lambda (a50478)
               (if a50478
                 (kont50578 lst)
                 (let ((f50580
                        (lambda (a50479)
                          (let ((a50480 '1))
                            (let ((f50579
                                   (lambda (a50481)
                                     (drop kont50578 a50479 a50481))))
                              (- f50579 n a50480))))))
                   (cdr f50580 lst))))))
        (= f50581 n a50477))))
  (define (foldr kont50582 proc acc lst)
    (let ((f50586
           (lambda (a50482)
             (if a50482
               (kont50582 acc)
               (let ((f50585
                      (lambda (a50483)
                        (let ((f50584
                               (lambda (a50484)
                                 (let ((f50583
                                        (lambda (a50485)
                                          (proc kont50582 a50483 a50485))))
                                   (foldr f50583 proc acc a50484)))))
                          (cdr f50584 lst)))))
                 (car f50585 lst))))))
      (null? f50586 lst)))
  (define (append kont50587 lst1 lst2)
    (let ((f50591
           (lambda (a50486)
             (if a50486
               (kont50587 lst2)
               (let ((f50590
                      (lambda (a50487)
                        (let ((f50589
                               (lambda (a50488)
                                 (let ((f50588
                                        (lambda (a50489)
                                          (cons kont50587 a50487 a50489))))
                                   (append f50588 a50488 lst2)))))
                          (cdr f50589 lst1)))))
                 (car f50590 lst1))))))
      (null? f50591 lst1)))
  (define (hash . lst)
    (let ((kont50592 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50490 (apply-prim hash lst))) (kont50592 x50490)))))
  (define (hash-ref kont50594 h k)
    (let ((x50491 (prim hash-ref h k))) (kont50594 x50491)))
  (define (hash-set kont50595 h k v)
    (let ((x50492 (prim hash-set h k v))) (kont50595 x50492)))
  (define (hash-has-key? kont50596 h k)
    (let ((x50493 (prim hash-has-key? h k))) (kont50596 x50493)))
  (define (hash-count kont50597 h)
    (let ((x50494 (prim hash-count h))) (kont50597 x50494)))
  (define (call-foldl kont50598 lst)
    (let ((a50495 '0)) (foldl kont50598 + a50495 lst)))
  (define (brouhaha_main kont50599)
    (let ((a50496 '1))
      (let ((a50497 '2))
        (let ((a50498 '3))
          (let ((a50499 '4))
            (let ((f50600 (lambda (a50500) (call-foldl kont50599 a50500))))
              (list f50600 a50496 a50497 a50498 a50499))))))))
