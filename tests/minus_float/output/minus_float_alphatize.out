'((define (+ . lst) (let ((x81414 (apply-prim + lst))) x81414))
  (define (- . lst) (let ((x81415 (apply-prim - lst))) x81415))
  (define (* . lst) (let ((x81416 (apply-prim * lst))) x81416))
  (define (modulo a b) (let ((x81417 (prim modulo a b))) x81417))
  (define (/ . lst) (let ((x81418 (apply-prim / lst))) x81418))
  (define (= . lst) (let ((x81419 (apply-prim = lst))) x81419))
  (define (> . lst) (let ((x81420 (apply-prim > lst))) x81420))
  (define (< . lst) (let ((x81421 (apply-prim < lst))) x81421))
  (define (<= . lst) (let ((x81422 (apply-prim <= lst))) x81422))
  (define (>= . lst) (let ((x81423 (apply-prim >= lst))) x81423))
  (define (null? x) (let ((x81424 (prim null? x))) x81424))
  (define (equal? x y) (let ((x81425 (prim equal? x y))) x81425))
  (define (eq? x y) (let ((x81426 (prim eq? x y))) x81426))
  (define (cons a b) (let ((x81427 (prim cons a b))) x81427))
  (define (car lst) (let ((x81428 (prim car lst))) x81428))
  (define (cdr lst) (let ((x81429 (prim cdr lst))) x81429))
  (define (even? x)
    (let ((a81430 '0))
      (let ((a81431 '2))
        (let ((a81432 (modulo x a81431))) (equal? a81430 a81432)))))
  (define (odd? x)
    (let ((a81433 '1))
      (let ((a81434 '2))
        (let ((a81435 (modulo x a81434))) (equal? a81433 a81435)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a81436 (null? lst)))
      (if a81436
        (let ((x81437 '#f)) x81437)
        (let ((a81438 (car lst)))
          (let ((a81439 (equal? a81438 x)))
            (if a81439
              (let ((x81440 '#t)) x81440)
              (let ((a81441 (cdr lst))) (member? x a81441))))))))
  (define (foldl fun acc lst)
    (let ((a81442 (null? lst)))
      (if a81442
        acc
        (let ((a81443 (car lst)))
          (let ((a81444 (fun a81443 acc)))
            (let ((a81445 (cdr lst))) (foldl fun a81444 a81445)))))))
  (define (reverse-helper lst lst2)
    (let ((a81446 (null? lst)))
      (if a81446
        lst2
        (let ((a81447 (cdr lst)))
          (let ((a81448 (car lst)))
            (let ((a81449 (cons a81448 lst2)))
              (reverse-helper a81447 a81449)))))))
  (define (reverse lst) (let ((a81450 (list))) (reverse-helper lst a81450)))
  (define (take-helper lst n lst2)
    (let ((a81451 '0))
      (let ((a81452 (= n a81451)))
        (if a81452
          (let ((x81453 (reverse lst2))) x81453)
          (let ((a81454 (cdr lst)))
            (let ((a81455 '1))
              (let ((a81456 (- n a81455)))
                (let ((a81457 (car lst)))
                  (let ((a81458 (cons a81457 lst2)))
                    (take-helper a81454 a81456 a81458))))))))))
  (define (take lst n) (let ((a81459 (list))) (take-helper lst n a81459)))
  (define (length lst)
    (let ((a81460 (null? lst)))
      (if a81460
        (let ((x81461 '0)) x81461)
        (let ((a81462 '1))
          (let ((a81463 (cdr lst)))
            (let ((a81464 (length a81463))) (+ a81462 a81464)))))))
  (define (map proc lst)
    (let ((a81465 (null? lst)))
      (if a81465
        (let ((x81466 (list))) x81466)
        (let ((a81467 (car lst)))
          (let ((a81468 (proc a81467)))
            (let ((a81469 (cdr lst)))
              (let ((a81470 (map proc a81469))) (cons a81468 a81470))))))))
  (define (filter op lst)
    (let ((a81471 (null? lst)))
      (if a81471
        (let ((x81472 (list))) x81472)
        (let ((a81473 (car lst)))
          (let ((a81474 (op a81473)))
            (if a81474
              (let ((a81475 (car lst)))
                (let ((a81476 (cdr lst)))
                  (let ((a81477 (filter op a81476))) (cons a81475 a81477))))
              (let ((a81478 (cdr lst))) (filter op a81478))))))))
  (define (drop lst n)
    (let ((a81479 '0))
      (let ((a81480 (= n a81479)))
        (if a81480
          lst
          (let ((a81481 (cdr lst)))
            (let ((a81482 '1))
              (let ((a81483 (- n a81482))) (drop a81481 a81483))))))))
  (define (foldr proc acc lst)
    (let ((a81484 (null? lst)))
      (if a81484
        acc
        (let ((a81485 (car lst)))
          (let ((a81486 (cdr lst)))
            (let ((a81487 (foldr proc acc a81486))) (proc a81485 a81487)))))))
  (define (append lst1 lst2)
    (let ((a81488 (null? lst1)))
      (if a81488
        lst2
        (let ((a81489 (car lst1)))
          (let ((a81490 (cdr lst1)))
            (let ((a81491 (append a81490 lst2))) (cons a81489 a81491)))))))
  (define (hash . lst) (let ((x81492 (apply-prim hash lst))) x81492))
  (define (hash-ref h k) (let ((x81493 (prim hash-ref h k))) x81493))
  (define (hash-set h k v) (let ((x81494 (prim hash-set h k v))) x81494))
  (define (hash-has-key? h k) (let ((x81495 (prim hash-has-key? h k))) x81495))
  (define (hash-count h) (let ((x81496 (prim hash-count h))) x81496))
  (define (call)
    (let ((a81497 '100.8))
      (let ((a81498 '80))
        (let ((a81499 '10))
          (let ((a81500 '2.4)) (- a81497 a81498 a81499 a81500))))))
  (define (brouhaha_main) (let ((x81501 (call))) x81501)))
