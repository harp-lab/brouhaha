'((define (+ . lst) (let ((x49228 (apply-prim + lst))) x49228))
  (define (- . lst) (let ((x49229 (apply-prim - lst))) x49229))
  (define (* . lst) (let ((x49230 (apply-prim * lst))) x49230))
  (define (modulo a b) (let ((x49231 (prim modulo a b))) x49231))
  (define (/ . lst) (let ((x49232 (apply-prim / lst))) x49232))
  (define (= . lst) (let ((x49233 (apply-prim = lst))) x49233))
  (define (> . lst) (let ((x49234 (apply-prim > lst))) x49234))
  (define (< . lst) (let ((x49235 (apply-prim < lst))) x49235))
  (define (<= . lst) (let ((x49236 (apply-prim <= lst))) x49236))
  (define (>= . lst) (let ((x49237 (apply-prim >= lst))) x49237))
  (define (null? x) (let ((x49238 (prim null? x))) x49238))
  (define (equal? x y) (let ((x49239 (prim equal? x y))) x49239))
  (define (eq? x y) (let ((x49240 (prim eq? x y))) x49240))
  (define (cons a b) (let ((x49241 (prim cons a b))) x49241))
  (define (car lst) (let ((x49242 (prim car lst))) x49242))
  (define (cdr lst) (let ((x49243 (prim cdr lst))) x49243))
  (define (even? x)
    (let ((a49244 '0))
      (let ((a49245 '2))
        (let ((a49246 (modulo x a49245))) (equal? a49244 a49246)))))
  (define (odd? x)
    (let ((a49247 '1))
      (let ((a49248 '2))
        (let ((a49249 (modulo x a49248))) (equal? a49247 a49249)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a49250 (null? lst)))
      (if a49250
        (let ((x49251 '#f)) x49251)
        (let ((a49252 (car lst)))
          (let ((a49253 (equal? a49252 x)))
            (if a49253
              (let ((x49254 '#t)) x49254)
              (let ((a49255 (cdr lst))) (member? x a49255))))))))
  (define (foldl fun acc lst)
    (let ((a49256 (null? lst)))
      (if a49256
        acc
        (let ((a49257 (car lst)))
          (let ((a49258 (fun a49257 acc)))
            (let ((a49259 (cdr lst))) (foldl fun a49258 a49259)))))))
  (define (reverse-helper lst lst2)
    (let ((a49260 (null? lst)))
      (if a49260
        lst2
        (let ((a49261 (cdr lst)))
          (let ((a49262 (car lst)))
            (let ((a49263 (cons a49262 lst2)))
              (reverse-helper a49261 a49263)))))))
  (define (reverse lst) (let ((a49264 (list))) (reverse-helper lst a49264)))
  (define (take-helper lst n lst2)
    (let ((a49265 '0))
      (let ((a49266 (= n a49265)))
        (if a49266
          (let ((x49267 (reverse lst2))) x49267)
          (let ((a49268 (cdr lst)))
            (let ((a49269 '1))
              (let ((a49270 (- n a49269)))
                (let ((a49271 (car lst)))
                  (let ((a49272 (cons a49271 lst2)))
                    (take-helper a49268 a49270 a49272))))))))))
  (define (take lst n) (let ((a49273 (list))) (take-helper lst n a49273)))
  (define (length lst)
    (let ((a49274 (null? lst)))
      (if a49274
        (let ((x49275 '0)) x49275)
        (let ((a49276 '1))
          (let ((a49277 (cdr lst)))
            (let ((a49278 (length a49277))) (+ a49276 a49278)))))))
  (define (map proc lst)
    (let ((a49279 (null? lst)))
      (if a49279
        (let ((x49280 (list))) x49280)
        (let ((a49281 (car lst)))
          (let ((a49282 (proc a49281)))
            (let ((a49283 (cdr lst)))
              (let ((a49284 (map proc a49283))) (cons a49282 a49284))))))))
  (define (filter op lst)
    (let ((a49285 (null? lst)))
      (if a49285
        (let ((x49286 (list))) x49286)
        (let ((a49287 (car lst)))
          (let ((a49288 (op a49287)))
            (if a49288
              (let ((a49289 (car lst)))
                (let ((a49290 (cdr lst)))
                  (let ((a49291 (filter op a49290))) (cons a49289 a49291))))
              (let ((a49292 (cdr lst))) (filter op a49292))))))))
  (define (drop lst n)
    (let ((a49293 '0))
      (let ((a49294 (= n a49293)))
        (if a49294
          lst
          (let ((a49295 (cdr lst)))
            (let ((a49296 '1))
              (let ((a49297 (- n a49296))) (drop a49295 a49297))))))))
  (define (foldr proc acc lst)
    (let ((a49298 (null? lst)))
      (if a49298
        acc
        (let ((a49299 (car lst)))
          (let ((a49300 (cdr lst)))
            (let ((a49301 (foldr proc acc a49300))) (proc a49299 a49301)))))))
  (define (append lst1 lst2)
    (let ((a49302 (null? lst1)))
      (if a49302
        lst2
        (let ((a49303 (car lst1)))
          (let ((a49304 (cdr lst1)))
            (let ((a49305 (append a49304 lst2))) (cons a49303 a49305)))))))
  (define (hash . lst) (let ((x49306 (apply-prim hash lst))) x49306))
  (define (hash-ref h k) (let ((x49307 (prim hash-ref h k))) x49307))
  (define (hash-set h k v) (let ((x49308 (prim hash-set h k v))) x49308))
  (define (hash-has-key? h k) (let ((x49309 (prim hash-has-key? h k))) x49309))
  (define (hash-count h) (let ((x49310 (prim hash-count h))) x49310))
  (define (call)
    (let ((a49311 '10.3))
      (let ((a49312 '2.4))
        (let ((a49313 '3))
          (let ((a49314 '4.5))
            (let ((a49315 '5))
              (let ((a49316 '6.7))
                (hash a49311 a49312 a49313 a49314 a49315 a49316))))))))
  (define (brouhaha_main) (let ((x49317 (call))) x49317)))
