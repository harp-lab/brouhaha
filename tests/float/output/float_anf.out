'((define (+ . lst)
    (let ((kont47075 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46985 (apply-prim + lst))) (kont47075 x46985)))))
  (define (- . lst)
    (let ((kont47077 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46986 (apply-prim - lst))) (kont47077 x46986)))))
  (define (* . lst)
    (let ((kont47079 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46987 (apply-prim * lst))) (kont47079 x46987)))))
  (define (modulo kont47081 a b)
    (let ((x46988 (prim modulo a b))) (kont47081 x46988)))
  (define (/ . lst)
    (let ((kont47082 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46989 (apply-prim / lst))) (kont47082 x46989)))))
  (define (= . lst)
    (let ((kont47084 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46990 (apply-prim = lst))) (kont47084 x46990)))))
  (define (> . lst)
    (let ((kont47086 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46991 (apply-prim > lst))) (kont47086 x46991)))))
  (define (< . lst)
    (let ((kont47088 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46992 (apply-prim < lst))) (kont47088 x46992)))))
  (define (<= . lst)
    (let ((kont47090 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46993 (apply-prim <= lst))) (kont47090 x46993)))))
  (define (>= . lst)
    (let ((kont47092 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46994 (apply-prim >= lst))) (kont47092 x46994)))))
  (define (null? kont47094 x)
    (let ((x46995 (prim null? x))) (kont47094 x46995)))
  (define (equal? kont47095 x y)
    (let ((x46996 (prim equal? x y))) (kont47095 x46996)))
  (define (eq? kont47096 x y)
    (let ((x46997 (prim eq? x y))) (kont47096 x46997)))
  (define (cons kont47097 a b)
    (let ((x46998 (prim cons a b))) (kont47097 x46998)))
  (define (car kont47098 lst)
    (let ((x46999 (prim car lst))) (kont47098 x46999)))
  (define (cdr kont47099 lst)
    (let ((x47000 (prim cdr lst))) (kont47099 x47000)))
  (define (even? kont47100 x)
    (let ((a47001 '0))
      (let ((a47002 '2))
        (let ((f47101 (lambda (a47003) (equal? kont47100 a47001 a47003))))
          (modulo f47101 x a47002)))))
  (define (odd? kont47102 x)
    (let ((a47004 '1))
      (let ((a47005 '2))
        (let ((f47103 (lambda (a47006) (equal? kont47102 a47004 a47006))))
          (modulo f47103 x a47005)))))
  (define (list . x)
    (let ((kont47104 (prim car x))) (let ((x (prim cdr x))) (kont47104 x))))
  (define (member? kont47106 x lst)
    (let ((f47110
           (lambda (a47007)
             (if a47007
               (let ((x47008 '#f)) (kont47106 x47008))
               (let ((f47109
                      (lambda (a47009)
                        (let ((f47108
                               (lambda (a47010)
                                 (if a47010
                                   (let ((x47011 '#t)) (kont47106 x47011))
                                   (let ((f47107
                                          (lambda (a47012)
                                            (member? kont47106 x a47012))))
                                     (cdr f47107 lst))))))
                          (equal? f47108 a47009 x)))))
                 (car f47109 lst))))))
      (null? f47110 lst)))
  (define (foldl kont47111 fun acc lst)
    (let ((f47115
           (lambda (a47013)
             (if a47013
               (kont47111 acc)
               (let ((f47114
                      (lambda (a47014)
                        (let ((f47113
                               (lambda (a47015)
                                 (let ((f47112
                                        (lambda (a47016)
                                          (foldl
                                           kont47111
                                           fun
                                           a47015
                                           a47016))))
                                   (cdr f47112 lst)))))
                          (fun f47113 a47014 acc)))))
                 (car f47114 lst))))))
      (null? f47115 lst)))
  (define (reverse-helper kont47116 lst lst2)
    (let ((f47120
           (lambda (a47017)
             (if a47017
               (kont47116 lst2)
               (let ((f47119
                      (lambda (a47018)
                        (let ((f47118
                               (lambda (a47019)
                                 (let ((f47117
                                        (lambda (a47020)
                                          (reverse-helper
                                           kont47116
                                           a47018
                                           a47020))))
                                   (cons f47117 a47019 lst2)))))
                          (car f47118 lst)))))
                 (cdr f47119 lst))))))
      (null? f47120 lst)))
  (define (reverse kont47121 lst)
    (let ((f47122 (lambda (a47021) (reverse-helper kont47121 lst a47021))))
      (list f47122)))
  (define (take-helper kont47123 lst n lst2)
    (let ((a47022 '0))
      (let ((f47129
             (lambda (a47023)
               (if a47023
                 (let ((f47124 (lambda (x47024) (kont47123 x47024))))
                   (reverse f47124 lst2))
                 (let ((f47128
                        (lambda (a47025)
                          (let ((a47026 '1))
                            (let ((f47127
                                   (lambda (a47027)
                                     (let ((f47126
                                            (lambda (a47028)
                                              (let ((f47125
                                                     (lambda (a47029)
                                                       (take-helper
                                                        kont47123
                                                        a47025
                                                        a47027
                                                        a47029))))
                                                (cons f47125 a47028 lst2)))))
                                       (car f47126 lst)))))
                              (- f47127 n a47026))))))
                   (cdr f47128 lst))))))
        (= f47129 n a47022))))
  (define (take kont47130 lst n)
    (let ((f47131 (lambda (a47030) (take-helper kont47130 lst n a47030))))
      (list f47131)))
  (define (length kont47132 lst)
    (let ((f47135
           (lambda (a47031)
             (if a47031
               (let ((x47032 '0)) (kont47132 x47032))
               (let ((a47033 '1))
                 (let ((f47134
                        (lambda (a47034)
                          (let ((f47133
                                 (lambda (a47035)
                                   (+ kont47132 a47033 a47035))))
                            (length f47133 a47034)))))
                   (cdr f47134 lst)))))))
      (null? f47135 lst)))
  (define (map kont47136 proc lst)
    (let ((f47142
           (lambda (a47036)
             (if a47036
               (let ((f47137 (lambda (x47037) (kont47136 x47037))))
                 (list f47137))
               (let ((f47141
                      (lambda (a47038)
                        (let ((f47140
                               (lambda (a47039)
                                 (let ((f47139
                                        (lambda (a47040)
                                          (let ((f47138
                                                 (lambda (a47041)
                                                   (cons
                                                    kont47136
                                                    a47039
                                                    a47041))))
                                            (map f47138 proc a47040)))))
                                   (cdr f47139 lst)))))
                          (proc f47140 a47038)))))
                 (car f47141 lst))))))
      (null? f47142 lst)))
  (define (filter kont47143 op lst)
    (let ((f47151
           (lambda (a47042)
             (if a47042
               (let ((f47144 (lambda (x47043) (kont47143 x47043))))
                 (list f47144))
               (let ((f47150
                      (lambda (a47044)
                        (let ((f47149
                               (lambda (a47045)
                                 (if a47045
                                   (let ((f47147
                                          (lambda (a47046)
                                            (let ((f47146
                                                   (lambda (a47047)
                                                     (let ((f47145
                                                            (lambda (a47048)
                                                              (cons
                                                               kont47143
                                                               a47046
                                                               a47048))))
                                                       (filter
                                                        f47145
                                                        op
                                                        a47047)))))
                                              (cdr f47146 lst)))))
                                     (car f47147 lst))
                                   (let ((f47148
                                          (lambda (a47049)
                                            (filter kont47143 op a47049))))
                                     (cdr f47148 lst))))))
                          (op f47149 a47044)))))
                 (car f47150 lst))))))
      (null? f47151 lst)))
  (define (drop kont47152 lst n)
    (let ((a47050 '0))
      (let ((f47155
             (lambda (a47051)
               (if a47051
                 (kont47152 lst)
                 (let ((f47154
                        (lambda (a47052)
                          (let ((a47053 '1))
                            (let ((f47153
                                   (lambda (a47054)
                                     (drop kont47152 a47052 a47054))))
                              (- f47153 n a47053))))))
                   (cdr f47154 lst))))))
        (= f47155 n a47050))))
  (define (foldr kont47156 proc acc lst)
    (let ((f47160
           (lambda (a47055)
             (if a47055
               (kont47156 acc)
               (let ((f47159
                      (lambda (a47056)
                        (let ((f47158
                               (lambda (a47057)
                                 (let ((f47157
                                        (lambda (a47058)
                                          (proc kont47156 a47056 a47058))))
                                   (foldr f47157 proc acc a47057)))))
                          (cdr f47158 lst)))))
                 (car f47159 lst))))))
      (null? f47160 lst)))
  (define (append kont47161 lst1 lst2)
    (let ((f47165
           (lambda (a47059)
             (if a47059
               (kont47161 lst2)
               (let ((f47164
                      (lambda (a47060)
                        (let ((f47163
                               (lambda (a47061)
                                 (let ((f47162
                                        (lambda (a47062)
                                          (cons kont47161 a47060 a47062))))
                                   (append f47162 a47061 lst2)))))
                          (cdr f47163 lst1)))))
                 (car f47164 lst1))))))
      (null? f47165 lst1)))
  (define (hash . lst)
    (let ((kont47166 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47063 (apply-prim hash lst))) (kont47166 x47063)))))
  (define (hash-ref kont47168 h k)
    (let ((x47064 (prim hash-ref h k))) (kont47168 x47064)))
  (define (hash-set kont47169 h k v)
    (let ((x47065 (prim hash-set h k v))) (kont47169 x47065)))
  (define (hash-has-key? kont47170 h k)
    (let ((x47066 (prim hash-has-key? h k))) (kont47170 x47066)))
  (define (hash-count kont47171 h)
    (let ((x47067 (prim hash-count h))) (kont47171 x47067)))
  (define (call kont47172)
    (let ((a47068 '10.3))
      (let ((a47069 '2.4))
        (let ((a47070 '3))
          (let ((a47071 '4.5))
            (let ((a47072 '5))
              (let ((a47073 '6.7))
                (hash
                 kont47172
                 a47068
                 a47069
                 a47070
                 a47071
                 a47072
                 a47073))))))))
  (define (brouhaha_main kont47173)
    (let ((f47174 (lambda (x47074) (kont47173 x47074)))) (call f47174))))
