'((define (+ . lst) (let ((x46985 (apply-prim + lst))) x46985))
  (define (- . lst) (let ((x46986 (apply-prim - lst))) x46986))
  (define (* . lst) (let ((x46987 (apply-prim * lst))) x46987))
  (define (modulo a b) (let ((x46988 (prim modulo a b))) x46988))
  (define (/ . lst) (let ((x46989 (apply-prim / lst))) x46989))
  (define (= . lst) (let ((x46990 (apply-prim = lst))) x46990))
  (define (> . lst) (let ((x46991 (apply-prim > lst))) x46991))
  (define (< . lst) (let ((x46992 (apply-prim < lst))) x46992))
  (define (<= . lst) (let ((x46993 (apply-prim <= lst))) x46993))
  (define (>= . lst) (let ((x46994 (apply-prim >= lst))) x46994))
  (define (null? x) (let ((x46995 (prim null? x))) x46995))
  (define (equal? x y) (let ((x46996 (prim equal? x y))) x46996))
  (define (eq? x y) (let ((x46997 (prim eq? x y))) x46997))
  (define (cons a b) (let ((x46998 (prim cons a b))) x46998))
  (define (car lst) (let ((x46999 (prim car lst))) x46999))
  (define (cdr lst) (let ((x47000 (prim cdr lst))) x47000))
  (define (even? x)
    (let ((a47001 '0))
      (let ((a47002 '2))
        (let ((a47003 (modulo x a47002))) (equal? a47001 a47003)))))
  (define (odd? x)
    (let ((a47004 '1))
      (let ((a47005 '2))
        (let ((a47006 (modulo x a47005))) (equal? a47004 a47006)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a47007 (null? lst)))
      (if a47007
        (let ((x47008 '#f)) x47008)
        (let ((a47009 (car lst)))
          (let ((a47010 (equal? a47009 x)))
            (if a47010
              (let ((x47011 '#t)) x47011)
              (let ((a47012 (cdr lst))) (member? x a47012))))))))
  (define (foldl fun acc lst)
    (let ((a47013 (null? lst)))
      (if a47013
        acc
        (let ((a47014 (car lst)))
          (let ((a47015 (fun a47014 acc)))
            (let ((a47016 (cdr lst))) (foldl fun a47015 a47016)))))))
  (define (reverse-helper lst lst2)
    (let ((a47017 (null? lst)))
      (if a47017
        lst2
        (let ((a47018 (cdr lst)))
          (let ((a47019 (car lst)))
            (let ((a47020 (cons a47019 lst2)))
              (reverse-helper a47018 a47020)))))))
  (define (reverse lst) (let ((a47021 (list))) (reverse-helper lst a47021)))
  (define (take-helper lst n lst2)
    (let ((a47022 '0))
      (let ((a47023 (= n a47022)))
        (if a47023
          (let ((x47024 (reverse lst2))) x47024)
          (let ((a47025 (cdr lst)))
            (let ((a47026 '1))
              (let ((a47027 (- n a47026)))
                (let ((a47028 (car lst)))
                  (let ((a47029 (cons a47028 lst2)))
                    (take-helper a47025 a47027 a47029))))))))))
  (define (take lst n) (let ((a47030 (list))) (take-helper lst n a47030)))
  (define (length lst)
    (let ((a47031 (null? lst)))
      (if a47031
        (let ((x47032 '0)) x47032)
        (let ((a47033 '1))
          (let ((a47034 (cdr lst)))
            (let ((a47035 (length a47034))) (+ a47033 a47035)))))))
  (define (map proc lst)
    (let ((a47036 (null? lst)))
      (if a47036
        (let ((x47037 (list))) x47037)
        (let ((a47038 (car lst)))
          (let ((a47039 (proc a47038)))
            (let ((a47040 (cdr lst)))
              (let ((a47041 (map proc a47040))) (cons a47039 a47041))))))))
  (define (filter op lst)
    (let ((a47042 (null? lst)))
      (if a47042
        (let ((x47043 (list))) x47043)
        (let ((a47044 (car lst)))
          (let ((a47045 (op a47044)))
            (if a47045
              (let ((a47046 (car lst)))
                (let ((a47047 (cdr lst)))
                  (let ((a47048 (filter op a47047))) (cons a47046 a47048))))
              (let ((a47049 (cdr lst))) (filter op a47049))))))))
  (define (drop lst n)
    (let ((a47050 '0))
      (let ((a47051 (= n a47050)))
        (if a47051
          lst
          (let ((a47052 (cdr lst)))
            (let ((a47053 '1))
              (let ((a47054 (- n a47053))) (drop a47052 a47054))))))))
  (define (foldr proc acc lst)
    (let ((a47055 (null? lst)))
      (if a47055
        acc
        (let ((a47056 (car lst)))
          (let ((a47057 (cdr lst)))
            (let ((a47058 (foldr proc acc a47057))) (proc a47056 a47058)))))))
  (define (append lst1 lst2)
    (let ((a47059 (null? lst1)))
      (if a47059
        lst2
        (let ((a47060 (car lst1)))
          (let ((a47061 (cdr lst1)))
            (let ((a47062 (append a47061 lst2))) (cons a47060 a47062)))))))
  (define (hash . lst) (let ((x47063 (apply-prim hash lst))) x47063))
  (define (hash-ref h k) (let ((x47064 (prim hash-ref h k))) x47064))
  (define (hash-set h k v) (let ((x47065 (prim hash-set h k v))) x47065))
  (define (hash-has-key? h k) (let ((x47066 (prim hash-has-key? h k))) x47066))
  (define (hash-count h) (let ((x47067 (prim hash-count h))) x47067))
  (define (call)
    (let ((a47068 '10.3))
      (let ((a47069 '2.4))
        (let ((a47070 '3))
          (let ((a47071 '4.5))
            (let ((a47072 '5))
              (let ((a47073 '6.7))
                (hash a47068 a47069 a47070 a47071 a47072 a47073))))))))
  (define (brouhaha_main) (let ((x47074 (call))) x47074)))
