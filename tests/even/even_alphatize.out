'((define (+ . lst) (let ((x31591 (apply-prim + lst))) x31591))
  (define (- . lst) (let ((x31592 (apply-prim - lst))) x31592))
  (define (* . lst) (let ((x31593 (apply-prim * lst))) x31593))
  (define (modulo a b) (let ((x31594 (prim modulo a b))) x31594))
  (define (/ . lst) (let ((x31595 (apply-prim / lst))) x31595))
  (define (= . lst) (let ((x31596 (apply-prim = lst))) x31596))
  (define (> . lst) (let ((x31597 (apply-prim > lst))) x31597))
  (define (< . lst) (let ((x31598 (apply-prim < lst))) x31598))
  (define (<= . lst) (let ((x31599 (apply-prim <= lst))) x31599))
  (define (>= . lst) (let ((x31600 (apply-prim >= lst))) x31600))
  (define (null? x) (let ((x31601 (prim null? x))) x31601))
  (define (equal? x y) (let ((x31602 (prim equal? x y))) x31602))
  (define (eq? x y) (let ((x31603 (prim eq? x y))) x31603))
  (define (cons a b) (let ((x31604 (prim cons a b))) x31604))
  (define (car lst) (let ((x31605 (prim car lst))) x31605))
  (define (cdr lst) (let ((x31606 (prim cdr lst))) x31606))
  (define (even? x)
    (let ((a31607 '0))
      (let ((a31608 '2))
        (let ((a31609 (modulo x a31608))) (equal? a31607 a31609)))))
  (define (odd? x)
    (let ((a31610 '1))
      (let ((a31611 '2))
        (let ((a31612 (modulo x a31611))) (equal? a31610 a31612)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a31613 (null? lst)))
      (if a31613
        (let ((x31614 '#f)) x31614)
        (let ((a31615 (car lst)))
          (let ((a31616 (equal? a31615 x)))
            (if a31616
              (let ((x31617 '#t)) x31617)
              (let ((a31618 (cdr lst))) (member? x a31618))))))))
  (define (foldl fun acc lst)
    (let ((a31619 (null? lst)))
      (if a31619
        acc
        (let ((a31620 (car lst)))
          (let ((a31621 (fun a31620 acc)))
            (let ((a31622 (cdr lst))) (foldl fun a31621 a31622)))))))
  (define (reverse-helper lst lst2)
    (let ((a31623 (null? lst)))
      (if a31623
        lst2
        (let ((a31624 (cdr lst)))
          (let ((a31625 (car lst)))
            (let ((a31626 (cons a31625 lst2)))
              (reverse-helper a31624 a31626)))))))
  (define (reverse lst) (let ((a31627 (list))) (reverse-helper lst a31627)))
  (define (take-helper lst n lst2)
    (let ((a31628 '0))
      (let ((a31629 (= n a31628)))
        (if a31629
          (let ((x31630 (reverse lst2))) x31630)
          (let ((a31631 (cdr lst)))
            (let ((a31632 '1))
              (let ((a31633 (- n a31632)))
                (let ((a31634 (car lst)))
                  (let ((a31635 (cons a31634 lst2)))
                    (take-helper a31631 a31633 a31635))))))))))
  (define (take lst n) (let ((a31636 (list))) (take-helper lst n a31636)))
  (define (length lst)
    (let ((a31637 (null? lst)))
      (if a31637
        (let ((x31638 '0)) x31638)
        (let ((a31639 '1))
          (let ((a31640 (cdr lst)))
            (let ((a31641 (length a31640))) (+ a31639 a31641)))))))
  (define (map proc lst)
    (let ((a31642 (null? lst)))
      (if a31642
        (let ((x31643 (list))) x31643)
        (let ((a31644 (car lst)))
          (let ((a31645 (proc a31644)))
            (let ((a31646 (cdr lst)))
              (let ((a31647 (map proc a31646))) (cons a31645 a31647))))))))
  (define (filter op lst)
    (let ((a31648 (null? lst)))
      (if a31648
        (let ((x31649 (list))) x31649)
        (let ((a31650 (car lst)))
          (let ((a31651 (op a31650)))
            (if a31651
              (let ((a31652 (car lst)))
                (let ((a31653 (cdr lst)))
                  (let ((a31654 (filter op a31653))) (cons a31652 a31654))))
              (let ((a31655 (cdr lst))) (filter op a31655))))))))
  (define (drop lst n)
    (let ((a31656 '0))
      (let ((a31657 (= n a31656)))
        (if a31657
          lst
          (let ((a31658 (cdr lst)))
            (let ((a31659 '1))
              (let ((a31660 (- n a31659))) (drop a31658 a31660))))))))
  (define (foldr proc acc lst)
    (let ((a31661 (null? lst)))
      (if a31661
        acc
        (let ((a31662 (car lst)))
          (let ((a31663 (cdr lst)))
            (let ((a31664 (foldr proc acc a31663))) (proc a31662 a31664)))))))
  (define (append lst1 lst2)
    (let ((a31665 (null? lst1)))
      (if a31665
        lst2
        (let ((a31666 (car lst1)))
          (let ((a31667 (cdr lst1)))
            (let ((a31668 (append a31667 lst2))) (cons a31666 a31668)))))))
  (define (hash . lst) (let ((x31669 (apply-prim hash lst))) x31669))
  (define (hash-ref h k) (let ((x31670 (prim hash-ref h k))) x31670))
  (define (hash-set h k v) (let ((x31671 (prim hash-set h k v))) x31671))
  (define (hash-has-key? h k) (let ((x31672 (prim hash-has-key? h k))) x31672))
  (define (hash-count h) (let ((x31673 (prim hash-count h))) x31673))
  (define (call) (let ((a31674 '5)) (even? a31674)))
  (define (brouhaha_main) (let ((x31675 (call))) x31675)))
