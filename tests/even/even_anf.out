'((define (+ . lst)
    (let ((kont31676 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31591 (apply-prim + lst))) (kont31676 x31591)))))
  (define (- . lst)
    (let ((kont31678 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31592 (apply-prim - lst))) (kont31678 x31592)))))
  (define (* . lst)
    (let ((kont31680 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31593 (apply-prim * lst))) (kont31680 x31593)))))
  (define (modulo kont31682 a b)
    (let ((x31594 (prim modulo a b))) (kont31682 x31594)))
  (define (/ . lst)
    (let ((kont31683 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31595 (apply-prim / lst))) (kont31683 x31595)))))
  (define (= . lst)
    (let ((kont31685 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31596 (apply-prim = lst))) (kont31685 x31596)))))
  (define (> . lst)
    (let ((kont31687 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31597 (apply-prim > lst))) (kont31687 x31597)))))
  (define (< . lst)
    (let ((kont31689 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31598 (apply-prim < lst))) (kont31689 x31598)))))
  (define (<= . lst)
    (let ((kont31691 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31599 (apply-prim <= lst))) (kont31691 x31599)))))
  (define (>= . lst)
    (let ((kont31693 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31600 (apply-prim >= lst))) (kont31693 x31600)))))
  (define (null? kont31695 x)
    (let ((x31601 (prim null? x))) (kont31695 x31601)))
  (define (equal? kont31696 x y)
    (let ((x31602 (prim equal? x y))) (kont31696 x31602)))
  (define (eq? kont31697 x y)
    (let ((x31603 (prim eq? x y))) (kont31697 x31603)))
  (define (cons kont31698 a b)
    (let ((x31604 (prim cons a b))) (kont31698 x31604)))
  (define (car kont31699 lst)
    (let ((x31605 (prim car lst))) (kont31699 x31605)))
  (define (cdr kont31700 lst)
    (let ((x31606 (prim cdr lst))) (kont31700 x31606)))
  (define (even? kont31701 x)
    (let ((a31607 '0))
      (let ((a31608 '2))
        (let ((f31702 (lambda (a31609) (equal? kont31701 a31607 a31609))))
          (modulo f31702 x a31608)))))
  (define (odd? kont31703 x)
    (let ((a31610 '1))
      (let ((a31611 '2))
        (let ((f31704 (lambda (a31612) (equal? kont31703 a31610 a31612))))
          (modulo f31704 x a31611)))))
  (define (list . x)
    (let ((kont31705 (prim car x))) (let ((x (prim cdr x))) (kont31705 x))))
  (define (member? kont31707 x lst)
    (let ((f31711
           (lambda (a31613)
             (if a31613
               (let ((x31614 '#f)) (kont31707 x31614))
               (let ((f31710
                      (lambda (a31615)
                        (let ((f31709
                               (lambda (a31616)
                                 (if a31616
                                   (let ((x31617 '#t)) (kont31707 x31617))
                                   (let ((f31708
                                          (lambda (a31618)
                                            (member? kont31707 x a31618))))
                                     (cdr f31708 lst))))))
                          (equal? f31709 a31615 x)))))
                 (car f31710 lst))))))
      (null? f31711 lst)))
  (define (foldl kont31712 fun acc lst)
    (let ((f31716
           (lambda (a31619)
             (if a31619
               (kont31712 acc)
               (let ((f31715
                      (lambda (a31620)
                        (let ((f31714
                               (lambda (a31621)
                                 (let ((f31713
                                        (lambda (a31622)
                                          (foldl
                                           kont31712
                                           fun
                                           a31621
                                           a31622))))
                                   (cdr f31713 lst)))))
                          (fun f31714 a31620 acc)))))
                 (car f31715 lst))))))
      (null? f31716 lst)))
  (define (reverse-helper kont31717 lst lst2)
    (let ((f31721
           (lambda (a31623)
             (if a31623
               (kont31717 lst2)
               (let ((f31720
                      (lambda (a31624)
                        (let ((f31719
                               (lambda (a31625)
                                 (let ((f31718
                                        (lambda (a31626)
                                          (reverse-helper
                                           kont31717
                                           a31624
                                           a31626))))
                                   (cons f31718 a31625 lst2)))))
                          (car f31719 lst)))))
                 (cdr f31720 lst))))))
      (null? f31721 lst)))
  (define (reverse kont31722 lst)
    (let ((f31723 (lambda (a31627) (reverse-helper kont31722 lst a31627))))
      (list f31723)))
  (define (take-helper kont31724 lst n lst2)
    (let ((a31628 '0))
      (let ((f31730
             (lambda (a31629)
               (if a31629
                 (let ((f31725 (lambda (x31630) (kont31724 x31630))))
                   (reverse f31725 lst2))
                 (let ((f31729
                        (lambda (a31631)
                          (let ((a31632 '1))
                            (let ((f31728
                                   (lambda (a31633)
                                     (let ((f31727
                                            (lambda (a31634)
                                              (let ((f31726
                                                     (lambda (a31635)
                                                       (take-helper
                                                        kont31724
                                                        a31631
                                                        a31633
                                                        a31635))))
                                                (cons f31726 a31634 lst2)))))
                                       (car f31727 lst)))))
                              (- f31728 n a31632))))))
                   (cdr f31729 lst))))))
        (= f31730 n a31628))))
  (define (take kont31731 lst n)
    (let ((f31732 (lambda (a31636) (take-helper kont31731 lst n a31636))))
      (list f31732)))
  (define (length kont31733 lst)
    (let ((f31736
           (lambda (a31637)
             (if a31637
               (let ((x31638 '0)) (kont31733 x31638))
               (let ((a31639 '1))
                 (let ((f31735
                        (lambda (a31640)
                          (let ((f31734
                                 (lambda (a31641)
                                   (+ kont31733 a31639 a31641))))
                            (length f31734 a31640)))))
                   (cdr f31735 lst)))))))
      (null? f31736 lst)))
  (define (map kont31737 proc lst)
    (let ((f31743
           (lambda (a31642)
             (if a31642
               (let ((f31738 (lambda (x31643) (kont31737 x31643))))
                 (list f31738))
               (let ((f31742
                      (lambda (a31644)
                        (let ((f31741
                               (lambda (a31645)
                                 (let ((f31740
                                        (lambda (a31646)
                                          (let ((f31739
                                                 (lambda (a31647)
                                                   (cons
                                                    kont31737
                                                    a31645
                                                    a31647))))
                                            (map f31739 proc a31646)))))
                                   (cdr f31740 lst)))))
                          (proc f31741 a31644)))))
                 (car f31742 lst))))))
      (null? f31743 lst)))
  (define (filter kont31744 op lst)
    (let ((f31752
           (lambda (a31648)
             (if a31648
               (let ((f31745 (lambda (x31649) (kont31744 x31649))))
                 (list f31745))
               (let ((f31751
                      (lambda (a31650)
                        (let ((f31750
                               (lambda (a31651)
                                 (if a31651
                                   (let ((f31748
                                          (lambda (a31652)
                                            (let ((f31747
                                                   (lambda (a31653)
                                                     (let ((f31746
                                                            (lambda (a31654)
                                                              (cons
                                                               kont31744
                                                               a31652
                                                               a31654))))
                                                       (filter
                                                        f31746
                                                        op
                                                        a31653)))))
                                              (cdr f31747 lst)))))
                                     (car f31748 lst))
                                   (let ((f31749
                                          (lambda (a31655)
                                            (filter kont31744 op a31655))))
                                     (cdr f31749 lst))))))
                          (op f31750 a31650)))))
                 (car f31751 lst))))))
      (null? f31752 lst)))
  (define (drop kont31753 lst n)
    (let ((a31656 '0))
      (let ((f31756
             (lambda (a31657)
               (if a31657
                 (kont31753 lst)
                 (let ((f31755
                        (lambda (a31658)
                          (let ((a31659 '1))
                            (let ((f31754
                                   (lambda (a31660)
                                     (drop kont31753 a31658 a31660))))
                              (- f31754 n a31659))))))
                   (cdr f31755 lst))))))
        (= f31756 n a31656))))
  (define (foldr kont31757 proc acc lst)
    (let ((f31761
           (lambda (a31661)
             (if a31661
               (kont31757 acc)
               (let ((f31760
                      (lambda (a31662)
                        (let ((f31759
                               (lambda (a31663)
                                 (let ((f31758
                                        (lambda (a31664)
                                          (proc kont31757 a31662 a31664))))
                                   (foldr f31758 proc acc a31663)))))
                          (cdr f31759 lst)))))
                 (car f31760 lst))))))
      (null? f31761 lst)))
  (define (append kont31762 lst1 lst2)
    (let ((f31766
           (lambda (a31665)
             (if a31665
               (kont31762 lst2)
               (let ((f31765
                      (lambda (a31666)
                        (let ((f31764
                               (lambda (a31667)
                                 (let ((f31763
                                        (lambda (a31668)
                                          (cons kont31762 a31666 a31668))))
                                   (append f31763 a31667 lst2)))))
                          (cdr f31764 lst1)))))
                 (car f31765 lst1))))))
      (null? f31766 lst1)))
  (define (hash . lst)
    (let ((kont31767 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x31669 (apply-prim hash lst))) (kont31767 x31669)))))
  (define (hash-ref kont31769 h k)
    (let ((x31670 (prim hash-ref h k))) (kont31769 x31670)))
  (define (hash-set kont31770 h k v)
    (let ((x31671 (prim hash-set h k v))) (kont31770 x31671)))
  (define (hash-has-key? kont31771 h k)
    (let ((x31672 (prim hash-has-key? h k))) (kont31771 x31672)))
  (define (hash-count kont31772 h)
    (let ((x31673 (prim hash-count h))) (kont31772 x31673)))
  (define (call kont31773) (let ((a31674 '5)) (even? kont31773 a31674)))
  (define (brouhaha_main kont31774)
    (let ((f31775 (lambda (x31675) (kont31774 x31675)))) (call f31775))))
