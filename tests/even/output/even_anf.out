'((define (+ . lst)
    (let ((kont30481 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30396 (apply-prim + lst))) (kont30481 x30396)))))
  (define (- . lst)
    (let ((kont30483 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30397 (apply-prim - lst))) (kont30483 x30397)))))
  (define (* . lst)
    (let ((kont30485 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30398 (apply-prim * lst))) (kont30485 x30398)))))
  (define (modulo kont30487 a b)
    (let ((x30399 (prim modulo a b))) (kont30487 x30399)))
  (define (/ . lst)
    (let ((kont30488 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30400 (apply-prim / lst))) (kont30488 x30400)))))
  (define (= . lst)
    (let ((kont30490 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30401 (apply-prim = lst))) (kont30490 x30401)))))
  (define (> . lst)
    (let ((kont30492 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30402 (apply-prim > lst))) (kont30492 x30402)))))
  (define (< . lst)
    (let ((kont30494 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30403 (apply-prim < lst))) (kont30494 x30403)))))
  (define (<= . lst)
    (let ((kont30496 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30404 (apply-prim <= lst))) (kont30496 x30404)))))
  (define (>= . lst)
    (let ((kont30498 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30405 (apply-prim >= lst))) (kont30498 x30405)))))
  (define (null? kont30500 x)
    (let ((x30406 (prim null? x))) (kont30500 x30406)))
  (define (equal? kont30501 x y)
    (let ((x30407 (prim equal? x y))) (kont30501 x30407)))
  (define (eq? kont30502 x y)
    (let ((x30408 (prim eq? x y))) (kont30502 x30408)))
  (define (cons kont30503 a b)
    (let ((x30409 (prim cons a b))) (kont30503 x30409)))
  (define (car kont30504 lst)
    (let ((x30410 (prim car lst))) (kont30504 x30410)))
  (define (cdr kont30505 lst)
    (let ((x30411 (prim cdr lst))) (kont30505 x30411)))
  (define (even? kont30506 x)
    (let ((a30412 '0))
      (let ((a30413 '2))
        (let ((f30507 (lambda (a30414) (equal? kont30506 a30412 a30414))))
          (modulo f30507 x a30413)))))
  (define (odd? kont30508 x)
    (let ((a30415 '1))
      (let ((a30416 '2))
        (let ((f30509 (lambda (a30417) (equal? kont30508 a30415 a30417))))
          (modulo f30509 x a30416)))))
  (define (list . x)
    (let ((kont30510 (prim car x))) (let ((x (prim cdr x))) (kont30510 x))))
  (define (member? kont30512 x lst)
    (let ((f30516
           (lambda (a30418)
             (if a30418
               (let ((x30419 '#f)) (kont30512 x30419))
               (let ((f30515
                      (lambda (a30420)
                        (let ((f30514
                               (lambda (a30421)
                                 (if a30421
                                   (let ((x30422 '#t)) (kont30512 x30422))
                                   (let ((f30513
                                          (lambda (a30423)
                                            (member? kont30512 x a30423))))
                                     (cdr f30513 lst))))))
                          (equal? f30514 a30420 x)))))
                 (car f30515 lst))))))
      (null? f30516 lst)))
  (define (foldl kont30517 fun acc lst)
    (let ((f30521
           (lambda (a30424)
             (if a30424
               (kont30517 acc)
               (let ((f30520
                      (lambda (a30425)
                        (let ((f30519
                               (lambda (a30426)
                                 (let ((f30518
                                        (lambda (a30427)
                                          (foldl
                                           kont30517
                                           fun
                                           a30426
                                           a30427))))
                                   (cdr f30518 lst)))))
                          (fun f30519 a30425 acc)))))
                 (car f30520 lst))))))
      (null? f30521 lst)))
  (define (reverse-helper kont30522 lst lst2)
    (let ((f30526
           (lambda (a30428)
             (if a30428
               (kont30522 lst2)
               (let ((f30525
                      (lambda (a30429)
                        (let ((f30524
                               (lambda (a30430)
                                 (let ((f30523
                                        (lambda (a30431)
                                          (reverse-helper
                                           kont30522
                                           a30429
                                           a30431))))
                                   (cons f30523 a30430 lst2)))))
                          (car f30524 lst)))))
                 (cdr f30525 lst))))))
      (null? f30526 lst)))
  (define (reverse kont30527 lst)
    (let ((f30528 (lambda (a30432) (reverse-helper kont30527 lst a30432))))
      (list f30528)))
  (define (take-helper kont30529 lst n lst2)
    (let ((a30433 '0))
      (let ((f30535
             (lambda (a30434)
               (if a30434
                 (let ((f30530 (lambda (x30435) (kont30529 x30435))))
                   (reverse f30530 lst2))
                 (let ((f30534
                        (lambda (a30436)
                          (let ((a30437 '1))
                            (let ((f30533
                                   (lambda (a30438)
                                     (let ((f30532
                                            (lambda (a30439)
                                              (let ((f30531
                                                     (lambda (a30440)
                                                       (take-helper
                                                        kont30529
                                                        a30436
                                                        a30438
                                                        a30440))))
                                                (cons f30531 a30439 lst2)))))
                                       (car f30532 lst)))))
                              (- f30533 n a30437))))))
                   (cdr f30534 lst))))))
        (= f30535 n a30433))))
  (define (take kont30536 lst n)
    (let ((f30537 (lambda (a30441) (take-helper kont30536 lst n a30441))))
      (list f30537)))
  (define (length kont30538 lst)
    (let ((f30541
           (lambda (a30442)
             (if a30442
               (let ((x30443 '0)) (kont30538 x30443))
               (let ((a30444 '1))
                 (let ((f30540
                        (lambda (a30445)
                          (let ((f30539
                                 (lambda (a30446)
                                   (+ kont30538 a30444 a30446))))
                            (length f30539 a30445)))))
                   (cdr f30540 lst)))))))
      (null? f30541 lst)))
  (define (map kont30542 proc lst)
    (let ((f30548
           (lambda (a30447)
             (if a30447
               (let ((f30543 (lambda (x30448) (kont30542 x30448))))
                 (list f30543))
               (let ((f30547
                      (lambda (a30449)
                        (let ((f30546
                               (lambda (a30450)
                                 (let ((f30545
                                        (lambda (a30451)
                                          (let ((f30544
                                                 (lambda (a30452)
                                                   (cons
                                                    kont30542
                                                    a30450
                                                    a30452))))
                                            (map f30544 proc a30451)))))
                                   (cdr f30545 lst)))))
                          (proc f30546 a30449)))))
                 (car f30547 lst))))))
      (null? f30548 lst)))
  (define (filter kont30549 op lst)
    (let ((f30557
           (lambda (a30453)
             (if a30453
               (let ((f30550 (lambda (x30454) (kont30549 x30454))))
                 (list f30550))
               (let ((f30556
                      (lambda (a30455)
                        (let ((f30555
                               (lambda (a30456)
                                 (if a30456
                                   (let ((f30553
                                          (lambda (a30457)
                                            (let ((f30552
                                                   (lambda (a30458)
                                                     (let ((f30551
                                                            (lambda (a30459)
                                                              (cons
                                                               kont30549
                                                               a30457
                                                               a30459))))
                                                       (filter
                                                        f30551
                                                        op
                                                        a30458)))))
                                              (cdr f30552 lst)))))
                                     (car f30553 lst))
                                   (let ((f30554
                                          (lambda (a30460)
                                            (filter kont30549 op a30460))))
                                     (cdr f30554 lst))))))
                          (op f30555 a30455)))))
                 (car f30556 lst))))))
      (null? f30557 lst)))
  (define (drop kont30558 lst n)
    (let ((a30461 '0))
      (let ((f30561
             (lambda (a30462)
               (if a30462
                 (kont30558 lst)
                 (let ((f30560
                        (lambda (a30463)
                          (let ((a30464 '1))
                            (let ((f30559
                                   (lambda (a30465)
                                     (drop kont30558 a30463 a30465))))
                              (- f30559 n a30464))))))
                   (cdr f30560 lst))))))
        (= f30561 n a30461))))
  (define (foldr kont30562 proc acc lst)
    (let ((f30566
           (lambda (a30466)
             (if a30466
               (kont30562 acc)
               (let ((f30565
                      (lambda (a30467)
                        (let ((f30564
                               (lambda (a30468)
                                 (let ((f30563
                                        (lambda (a30469)
                                          (proc kont30562 a30467 a30469))))
                                   (foldr f30563 proc acc a30468)))))
                          (cdr f30564 lst)))))
                 (car f30565 lst))))))
      (null? f30566 lst)))
  (define (append kont30567 lst1 lst2)
    (let ((f30571
           (lambda (a30470)
             (if a30470
               (kont30567 lst2)
               (let ((f30570
                      (lambda (a30471)
                        (let ((f30569
                               (lambda (a30472)
                                 (let ((f30568
                                        (lambda (a30473)
                                          (cons kont30567 a30471 a30473))))
                                   (append f30568 a30472 lst2)))))
                          (cdr f30569 lst1)))))
                 (car f30570 lst1))))))
      (null? f30571 lst1)))
  (define (hash . lst)
    (let ((kont30572 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30474 (apply-prim hash lst))) (kont30572 x30474)))))
  (define (hash-ref kont30574 h k)
    (let ((x30475 (prim hash-ref h k))) (kont30574 x30475)))
  (define (hash-set kont30575 h k v)
    (let ((x30476 (prim hash-set h k v))) (kont30575 x30476)))
  (define (hash-has-key? kont30576 h k)
    (let ((x30477 (prim hash-has-key? h k))) (kont30576 x30477)))
  (define (hash-count kont30577 h)
    (let ((x30478 (prim hash-count h))) (kont30577 x30478)))
  (define (call kont30578) (let ((a30479 '5)) (even? kont30578 a30479)))
  (define (brouhaha_main kont30579)
    (let ((f30580 (lambda (x30480) (kont30579 x30480)))) (call f30580))))
