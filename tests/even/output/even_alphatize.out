'((define (+ . lst) (let ((x30396 (apply-prim + lst))) x30396))
  (define (- . lst) (let ((x30397 (apply-prim - lst))) x30397))
  (define (* . lst) (let ((x30398 (apply-prim * lst))) x30398))
  (define (modulo a b) (let ((x30399 (prim modulo a b))) x30399))
  (define (/ . lst) (let ((x30400 (apply-prim / lst))) x30400))
  (define (= . lst) (let ((x30401 (apply-prim = lst))) x30401))
  (define (> . lst) (let ((x30402 (apply-prim > lst))) x30402))
  (define (< . lst) (let ((x30403 (apply-prim < lst))) x30403))
  (define (<= . lst) (let ((x30404 (apply-prim <= lst))) x30404))
  (define (>= . lst) (let ((x30405 (apply-prim >= lst))) x30405))
  (define (null? x) (let ((x30406 (prim null? x))) x30406))
  (define (equal? x y) (let ((x30407 (prim equal? x y))) x30407))
  (define (eq? x y) (let ((x30408 (prim eq? x y))) x30408))
  (define (cons a b) (let ((x30409 (prim cons a b))) x30409))
  (define (car lst) (let ((x30410 (prim car lst))) x30410))
  (define (cdr lst) (let ((x30411 (prim cdr lst))) x30411))
  (define (even? x)
    (let ((a30412 '0))
      (let ((a30413 '2))
        (let ((a30414 (modulo x a30413))) (equal? a30412 a30414)))))
  (define (odd? x)
    (let ((a30415 '1))
      (let ((a30416 '2))
        (let ((a30417 (modulo x a30416))) (equal? a30415 a30417)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a30418 (null? lst)))
      (if a30418
        (let ((x30419 '#f)) x30419)
        (let ((a30420 (car lst)))
          (let ((a30421 (equal? a30420 x)))
            (if a30421
              (let ((x30422 '#t)) x30422)
              (let ((a30423 (cdr lst))) (member? x a30423))))))))
  (define (foldl fun acc lst)
    (let ((a30424 (null? lst)))
      (if a30424
        acc
        (let ((a30425 (car lst)))
          (let ((a30426 (fun a30425 acc)))
            (let ((a30427 (cdr lst))) (foldl fun a30426 a30427)))))))
  (define (reverse-helper lst lst2)
    (let ((a30428 (null? lst)))
      (if a30428
        lst2
        (let ((a30429 (cdr lst)))
          (let ((a30430 (car lst)))
            (let ((a30431 (cons a30430 lst2)))
              (reverse-helper a30429 a30431)))))))
  (define (reverse lst) (let ((a30432 (list))) (reverse-helper lst a30432)))
  (define (take-helper lst n lst2)
    (let ((a30433 '0))
      (let ((a30434 (= n a30433)))
        (if a30434
          (let ((x30435 (reverse lst2))) x30435)
          (let ((a30436 (cdr lst)))
            (let ((a30437 '1))
              (let ((a30438 (- n a30437)))
                (let ((a30439 (car lst)))
                  (let ((a30440 (cons a30439 lst2)))
                    (take-helper a30436 a30438 a30440))))))))))
  (define (take lst n) (let ((a30441 (list))) (take-helper lst n a30441)))
  (define (length lst)
    (let ((a30442 (null? lst)))
      (if a30442
        (let ((x30443 '0)) x30443)
        (let ((a30444 '1))
          (let ((a30445 (cdr lst)))
            (let ((a30446 (length a30445))) (+ a30444 a30446)))))))
  (define (map proc lst)
    (let ((a30447 (null? lst)))
      (if a30447
        (let ((x30448 (list))) x30448)
        (let ((a30449 (car lst)))
          (let ((a30450 (proc a30449)))
            (let ((a30451 (cdr lst)))
              (let ((a30452 (map proc a30451))) (cons a30450 a30452))))))))
  (define (filter op lst)
    (let ((a30453 (null? lst)))
      (if a30453
        (let ((x30454 (list))) x30454)
        (let ((a30455 (car lst)))
          (let ((a30456 (op a30455)))
            (if a30456
              (let ((a30457 (car lst)))
                (let ((a30458 (cdr lst)))
                  (let ((a30459 (filter op a30458))) (cons a30457 a30459))))
              (let ((a30460 (cdr lst))) (filter op a30460))))))))
  (define (drop lst n)
    (let ((a30461 '0))
      (let ((a30462 (= n a30461)))
        (if a30462
          lst
          (let ((a30463 (cdr lst)))
            (let ((a30464 '1))
              (let ((a30465 (- n a30464))) (drop a30463 a30465))))))))
  (define (foldr proc acc lst)
    (let ((a30466 (null? lst)))
      (if a30466
        acc
        (let ((a30467 (car lst)))
          (let ((a30468 (cdr lst)))
            (let ((a30469 (foldr proc acc a30468))) (proc a30467 a30469)))))))
  (define (append lst1 lst2)
    (let ((a30470 (null? lst1)))
      (if a30470
        lst2
        (let ((a30471 (car lst1)))
          (let ((a30472 (cdr lst1)))
            (let ((a30473 (append a30472 lst2))) (cons a30471 a30473)))))))
  (define (hash . lst) (let ((x30474 (apply-prim hash lst))) x30474))
  (define (hash-ref h k) (let ((x30475 (prim hash-ref h k))) x30475))
  (define (hash-set h k v) (let ((x30476 (prim hash-set h k v))) x30476))
  (define (hash-has-key? h k) (let ((x30477 (prim hash-has-key? h k))) x30477))
  (define (hash-count h) (let ((x30478 (prim hash-count h))) x30478))
  (define (call) (let ((a30479 '5)) (even? a30479)))
  (define (brouhaha_main) (let ((x30480 (call))) x30480)))
