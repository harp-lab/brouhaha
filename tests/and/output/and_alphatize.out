'((define (+ . lst) (let ((x5676 (apply-prim + lst))) x5676))
  (define (- . lst) (let ((x5677 (apply-prim - lst))) x5677))
  (define (* . lst) (let ((x5678 (apply-prim * lst))) x5678))
  (define (modulo a b) (let ((x5679 (prim modulo a b))) x5679))
  (define (/ . lst) (let ((x5680 (apply-prim / lst))) x5680))
  (define (= . lst) (let ((x5681 (apply-prim = lst))) x5681))
  (define (> . lst) (let ((x5682 (apply-prim > lst))) x5682))
  (define (< . lst) (let ((x5683 (apply-prim < lst))) x5683))
  (define (<= . lst) (let ((x5684 (apply-prim <= lst))) x5684))
  (define (>= . lst) (let ((x5685 (apply-prim >= lst))) x5685))
  (define (null? x) (let ((x5686 (prim null? x))) x5686))
  (define (equal? x y) (let ((x5687 (prim equal? x y))) x5687))
  (define (eq? x y) (let ((x5688 (prim eq? x y))) x5688))
  (define (cons a b) (let ((x5689 (prim cons a b))) x5689))
  (define (car lst) (let ((x5690 (prim car lst))) x5690))
  (define (cdr lst) (let ((x5691 (prim cdr lst))) x5691))
  (define (even? x)
    (let ((a5692 '0))
      (let ((a5693 '2))
        (let ((a5694 (modulo x a5693))) (equal? a5692 a5694)))))
  (define (odd? x)
    (let ((a5695 '1))
      (let ((a5696 '2))
        (let ((a5697 (modulo x a5696))) (equal? a5695 a5697)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a5698 (null? lst)))
      (if a5698
        (let ((x5699 '#f)) x5699)
        (let ((a5700 (car lst)))
          (let ((a5701 (equal? a5700 x)))
            (if a5701
              (let ((x5702 '#t)) x5702)
              (let ((a5703 (cdr lst))) (member? x a5703))))))))
  (define (foldl fun acc lst)
    (let ((a5704 (null? lst)))
      (if a5704
        acc
        (let ((a5705 (car lst)))
          (let ((a5706 (fun a5705 acc)))
            (let ((a5707 (cdr lst))) (foldl fun a5706 a5707)))))))
  (define (reverse-helper lst lst2)
    (let ((a5708 (null? lst)))
      (if a5708
        lst2
        (let ((a5709 (cdr lst)))
          (let ((a5710 (car lst)))
            (let ((a5711 (cons a5710 lst2))) (reverse-helper a5709 a5711)))))))
  (define (reverse lst) (let ((a5712 (list))) (reverse-helper lst a5712)))
  (define (take-helper lst n lst2)
    (let ((a5713 '0))
      (let ((a5714 (= n a5713)))
        (if a5714
          (let ((x5715 (reverse lst2))) x5715)
          (let ((a5716 (cdr lst)))
            (let ((a5717 '1))
              (let ((a5718 (- n a5717)))
                (let ((a5719 (car lst)))
                  (let ((a5720 (cons a5719 lst2)))
                    (take-helper a5716 a5718 a5720))))))))))
  (define (take lst n) (let ((a5721 (list))) (take-helper lst n a5721)))
  (define (length lst)
    (let ((a5722 (null? lst)))
      (if a5722
        (let ((x5723 '0)) x5723)
        (let ((a5724 '1))
          (let ((a5725 (cdr lst)))
            (let ((a5726 (length a5725))) (+ a5724 a5726)))))))
  (define (map proc lst)
    (let ((a5727 (null? lst)))
      (if a5727
        (let ((x5728 (list))) x5728)
        (let ((a5729 (car lst)))
          (let ((a5730 (proc a5729)))
            (let ((a5731 (cdr lst)))
              (let ((a5732 (map proc a5731))) (cons a5730 a5732))))))))
  (define (filter op lst)
    (let ((a5733 (null? lst)))
      (if a5733
        (let ((x5734 (list))) x5734)
        (let ((a5735 (car lst)))
          (let ((a5736 (op a5735)))
            (if a5736
              (let ((a5737 (car lst)))
                (let ((a5738 (cdr lst)))
                  (let ((a5739 (filter op a5738))) (cons a5737 a5739))))
              (let ((a5740 (cdr lst))) (filter op a5740))))))))
  (define (drop lst n)
    (let ((a5741 '0))
      (let ((a5742 (= n a5741)))
        (if a5742
          lst
          (let ((a5743 (cdr lst)))
            (let ((a5744 '1))
              (let ((a5745 (- n a5744))) (drop a5743 a5745))))))))
  (define (foldr proc acc lst)
    (let ((a5746 (null? lst)))
      (if a5746
        acc
        (let ((a5747 (car lst)))
          (let ((a5748 (cdr lst)))
            (let ((a5749 (foldr proc acc a5748))) (proc a5747 a5749)))))))
  (define (append lst1 lst2)
    (let ((a5750 (null? lst1)))
      (if a5750
        lst2
        (let ((a5751 (car lst1)))
          (let ((a5752 (cdr lst1)))
            (let ((a5753 (append a5752 lst2))) (cons a5751 a5753)))))))
  (define (hash . lst) (let ((x5754 (apply-prim hash lst))) x5754))
  (define (hash-ref h k) (let ((x5755 (prim hash-ref h k))) x5755))
  (define (hash-set h k v) (let ((x5756 (prim hash-set h k v))) x5756))
  (define (hash-has-key? h k) (let ((x5757 (prim hash-has-key? h k))) x5757))
  (define (hash-count h) (let ((x5758 (prim hash-count h))) x5758))
  (define (call)
    (let ((a5759 '1))
      (let ((a5760 '1))
        (let ((a5761 (equal? a5759 a5760)))
          (if a5761
            (let ((x5762 "wow")) x5762)
            (let ((x5763 "not-wow")) x5763))))))
  (define (brouhaha_main) (let ((x5764 (call))) x5764)))
