'((define (+ . lst)
    (let ((kont5765 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5676 (apply-prim + lst))) (kont5765 x5676)))))
  (define (- . lst)
    (let ((kont5767 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5677 (apply-prim - lst))) (kont5767 x5677)))))
  (define (* . lst)
    (let ((kont5769 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5678 (apply-prim * lst))) (kont5769 x5678)))))
  (define (modulo kont5771 a b)
    (let ((x5679 (prim modulo a b))) (kont5771 x5679)))
  (define (/ . lst)
    (let ((kont5772 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5680 (apply-prim / lst))) (kont5772 x5680)))))
  (define (= . lst)
    (let ((kont5774 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5681 (apply-prim = lst))) (kont5774 x5681)))))
  (define (> . lst)
    (let ((kont5776 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5682 (apply-prim > lst))) (kont5776 x5682)))))
  (define (< . lst)
    (let ((kont5778 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5683 (apply-prim < lst))) (kont5778 x5683)))))
  (define (<= . lst)
    (let ((kont5780 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5684 (apply-prim <= lst))) (kont5780 x5684)))))
  (define (>= . lst)
    (let ((kont5782 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5685 (apply-prim >= lst))) (kont5782 x5685)))))
  (define (null? kont5784 x) (let ((x5686 (prim null? x))) (kont5784 x5686)))
  (define (equal? kont5785 x y)
    (let ((x5687 (prim equal? x y))) (kont5785 x5687)))
  (define (eq? kont5786 x y) (let ((x5688 (prim eq? x y))) (kont5786 x5688)))
  (define (cons kont5787 a b) (let ((x5689 (prim cons a b))) (kont5787 x5689)))
  (define (car kont5788 lst) (let ((x5690 (prim car lst))) (kont5788 x5690)))
  (define (cdr kont5789 lst) (let ((x5691 (prim cdr lst))) (kont5789 x5691)))
  (define (even? kont5790 x)
    (let ((a5692 '0))
      (let ((a5693 '2))
        (let ((f5791 (lambda (a5694) (equal? kont5790 a5692 a5694))))
          (modulo f5791 x a5693)))))
  (define (odd? kont5792 x)
    (let ((a5695 '1))
      (let ((a5696 '2))
        (let ((f5793 (lambda (a5697) (equal? kont5792 a5695 a5697))))
          (modulo f5793 x a5696)))))
  (define (list . x)
    (let ((kont5794 (prim car x))) (let ((x (prim cdr x))) (kont5794 x))))
  (define (member? kont5796 x lst)
    (let ((f5800
           (lambda (a5698)
             (if a5698
               (let ((x5699 '#f)) (kont5796 x5699))
               (let ((f5799
                      (lambda (a5700)
                        (let ((f5798
                               (lambda (a5701)
                                 (if a5701
                                   (let ((x5702 '#t)) (kont5796 x5702))
                                   (let ((f5797
                                          (lambda (a5703)
                                            (member? kont5796 x a5703))))
                                     (cdr f5797 lst))))))
                          (equal? f5798 a5700 x)))))
                 (car f5799 lst))))))
      (null? f5800 lst)))
  (define (foldl kont5801 fun acc lst)
    (let ((f5805
           (lambda (a5704)
             (if a5704
               (kont5801 acc)
               (let ((f5804
                      (lambda (a5705)
                        (let ((f5803
                               (lambda (a5706)
                                 (let ((f5802
                                        (lambda (a5707)
                                          (foldl kont5801 fun a5706 a5707))))
                                   (cdr f5802 lst)))))
                          (fun f5803 a5705 acc)))))
                 (car f5804 lst))))))
      (null? f5805 lst)))
  (define (reverse-helper kont5806 lst lst2)
    (let ((f5810
           (lambda (a5708)
             (if a5708
               (kont5806 lst2)
               (let ((f5809
                      (lambda (a5709)
                        (let ((f5808
                               (lambda (a5710)
                                 (let ((f5807
                                        (lambda (a5711)
                                          (reverse-helper
                                           kont5806
                                           a5709
                                           a5711))))
                                   (cons f5807 a5710 lst2)))))
                          (car f5808 lst)))))
                 (cdr f5809 lst))))))
      (null? f5810 lst)))
  (define (reverse kont5811 lst)
    (let ((f5812 (lambda (a5712) (reverse-helper kont5811 lst a5712))))
      (list f5812)))
  (define (take-helper kont5813 lst n lst2)
    (let ((a5713 '0))
      (let ((f5819
             (lambda (a5714)
               (if a5714
                 (let ((f5814 (lambda (x5715) (kont5813 x5715))))
                   (reverse f5814 lst2))
                 (let ((f5818
                        (lambda (a5716)
                          (let ((a5717 '1))
                            (let ((f5817
                                   (lambda (a5718)
                                     (let ((f5816
                                            (lambda (a5719)
                                              (let ((f5815
                                                     (lambda (a5720)
                                                       (take-helper
                                                        kont5813
                                                        a5716
                                                        a5718
                                                        a5720))))
                                                (cons f5815 a5719 lst2)))))
                                       (car f5816 lst)))))
                              (- f5817 n a5717))))))
                   (cdr f5818 lst))))))
        (= f5819 n a5713))))
  (define (take kont5820 lst n)
    (let ((f5821 (lambda (a5721) (take-helper kont5820 lst n a5721))))
      (list f5821)))
  (define (length kont5822 lst)
    (let ((f5825
           (lambda (a5722)
             (if a5722
               (let ((x5723 '0)) (kont5822 x5723))
               (let ((a5724 '1))
                 (let ((f5824
                        (lambda (a5725)
                          (let ((f5823
                                 (lambda (a5726) (+ kont5822 a5724 a5726))))
                            (length f5823 a5725)))))
                   (cdr f5824 lst)))))))
      (null? f5825 lst)))
  (define (map kont5826 proc lst)
    (let ((f5832
           (lambda (a5727)
             (if a5727
               (let ((f5827 (lambda (x5728) (kont5826 x5728)))) (list f5827))
               (let ((f5831
                      (lambda (a5729)
                        (let ((f5830
                               (lambda (a5730)
                                 (let ((f5829
                                        (lambda (a5731)
                                          (let ((f5828
                                                 (lambda (a5732)
                                                   (cons
                                                    kont5826
                                                    a5730
                                                    a5732))))
                                            (map f5828 proc a5731)))))
                                   (cdr f5829 lst)))))
                          (proc f5830 a5729)))))
                 (car f5831 lst))))))
      (null? f5832 lst)))
  (define (filter kont5833 op lst)
    (let ((f5841
           (lambda (a5733)
             (if a5733
               (let ((f5834 (lambda (x5734) (kont5833 x5734)))) (list f5834))
               (let ((f5840
                      (lambda (a5735)
                        (let ((f5839
                               (lambda (a5736)
                                 (if a5736
                                   (let ((f5837
                                          (lambda (a5737)
                                            (let ((f5836
                                                   (lambda (a5738)
                                                     (let ((f5835
                                                            (lambda (a5739)
                                                              (cons
                                                               kont5833
                                                               a5737
                                                               a5739))))
                                                       (filter
                                                        f5835
                                                        op
                                                        a5738)))))
                                              (cdr f5836 lst)))))
                                     (car f5837 lst))
                                   (let ((f5838
                                          (lambda (a5740)
                                            (filter kont5833 op a5740))))
                                     (cdr f5838 lst))))))
                          (op f5839 a5735)))))
                 (car f5840 lst))))))
      (null? f5841 lst)))
  (define (drop kont5842 lst n)
    (let ((a5741 '0))
      (let ((f5845
             (lambda (a5742)
               (if a5742
                 (kont5842 lst)
                 (let ((f5844
                        (lambda (a5743)
                          (let ((a5744 '1))
                            (let ((f5843
                                   (lambda (a5745)
                                     (drop kont5842 a5743 a5745))))
                              (- f5843 n a5744))))))
                   (cdr f5844 lst))))))
        (= f5845 n a5741))))
  (define (foldr kont5846 proc acc lst)
    (let ((f5850
           (lambda (a5746)
             (if a5746
               (kont5846 acc)
               (let ((f5849
                      (lambda (a5747)
                        (let ((f5848
                               (lambda (a5748)
                                 (let ((f5847
                                        (lambda (a5749)
                                          (proc kont5846 a5747 a5749))))
                                   (foldr f5847 proc acc a5748)))))
                          (cdr f5848 lst)))))
                 (car f5849 lst))))))
      (null? f5850 lst)))
  (define (append kont5851 lst1 lst2)
    (let ((f5855
           (lambda (a5750)
             (if a5750
               (kont5851 lst2)
               (let ((f5854
                      (lambda (a5751)
                        (let ((f5853
                               (lambda (a5752)
                                 (let ((f5852
                                        (lambda (a5753)
                                          (cons kont5851 a5751 a5753))))
                                   (append f5852 a5752 lst2)))))
                          (cdr f5853 lst1)))))
                 (car f5854 lst1))))))
      (null? f5855 lst1)))
  (define (hash . lst)
    (let ((kont5856 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5754 (apply-prim hash lst))) (kont5856 x5754)))))
  (define (hash-ref kont5858 h k)
    (let ((x5755 (prim hash-ref h k))) (kont5858 x5755)))
  (define (hash-set kont5859 h k v)
    (let ((x5756 (prim hash-set h k v))) (kont5859 x5756)))
  (define (hash-has-key? kont5860 h k)
    (let ((x5757 (prim hash-has-key? h k))) (kont5860 x5757)))
  (define (hash-count kont5861 h)
    (let ((x5758 (prim hash-count h))) (kont5861 x5758)))
  (define (call kont5862)
    (let ((a5759 '1))
      (let ((a5760 '1))
        (let ((f5863
               (lambda (a5761)
                 (if a5761
                   (let ((x5762 "wow")) (kont5862 x5762))
                   (let ((x5763 "not-wow")) (kont5862 x5763))))))
          (equal? f5863 a5759 a5760)))))
  (define (brouhaha_main kont5864)
    (let ((f5865 (lambda (x5764) (kont5864 x5764)))) (call f5865))))
