'((define (+ . lst) (let ((x125445 (apply-prim + lst))) x125445))
  (define (- . lst) (let ((x125446 (apply-prim - lst))) x125446))
  (define (* . lst) (let ((x125447 (apply-prim * lst))) x125447))
  (define (modulo a b) (let ((x125448 (prim modulo a b))) x125448))
  (define (/ . lst) (let ((x125449 (apply-prim / lst))) x125449))
  (define (= . lst) (let ((x125450 (apply-prim = lst))) x125450))
  (define (> . lst) (let ((x125451 (apply-prim > lst))) x125451))
  (define (< . lst) (let ((x125452 (apply-prim < lst))) x125452))
  (define (<= . lst) (let ((x125453 (apply-prim <= lst))) x125453))
  (define (>= . lst) (let ((x125454 (apply-prim >= lst))) x125454))
  (define (null? x) (let ((x125455 (prim null? x))) x125455))
  (define (equal? x y) (let ((x125456 (prim equal? x y))) x125456))
  (define (eq? x y) (let ((x125457 (prim eq? x y))) x125457))
  (define (cons a b) (let ((x125458 (prim cons a b))) x125458))
  (define (car lst) (let ((x125459 (prim car lst))) x125459))
  (define (cdr lst) (let ((x125460 (prim cdr lst))) x125460))
  (define (even? x)
    (let ((a125461 '0))
      (let ((a125462 '2))
        (let ((a125463 (modulo x a125462))) (equal? a125461 a125463)))))
  (define (odd? x)
    (let ((a125464 '1))
      (let ((a125465 '2))
        (let ((a125466 (modulo x a125465))) (equal? a125464 a125466)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a125467 (null? lst)))
      (if a125467
        (let ((x125468 '#f)) x125468)
        (let ((a125469 (car lst)))
          (let ((a125470 (equal? a125469 x)))
            (if a125470
              (let ((x125471 '#t)) x125471)
              (let ((a125472 (cdr lst))) (member? x a125472))))))))
  (define (foldl fun acc lst)
    (let ((a125473 (null? lst)))
      (if a125473
        acc
        (let ((a125474 (car lst)))
          (let ((a125475 (fun a125474 acc)))
            (let ((a125476 (cdr lst))) (foldl fun a125475 a125476)))))))
  (define (reverse-helper lst lst2)
    (let ((a125477 (null? lst)))
      (if a125477
        lst2
        (let ((a125478 (cdr lst)))
          (let ((a125479 (car lst)))
            (let ((a125480 (cons a125479 lst2)))
              (reverse-helper a125478 a125480)))))))
  (define (reverse lst) (let ((a125481 (list))) (reverse-helper lst a125481)))
  (define (take-helper lst n lst2)
    (let ((a125482 '0))
      (let ((a125483 (= n a125482)))
        (if a125483
          (let ((x125484 (reverse lst2))) x125484)
          (let ((a125485 (cdr lst)))
            (let ((a125486 '1))
              (let ((a125487 (- n a125486)))
                (let ((a125488 (car lst)))
                  (let ((a125489 (cons a125488 lst2)))
                    (take-helper a125485 a125487 a125489))))))))))
  (define (take lst n) (let ((a125490 (list))) (take-helper lst n a125490)))
  (define (length lst)
    (let ((a125491 (null? lst)))
      (if a125491
        (let ((x125492 '0)) x125492)
        (let ((a125493 '1))
          (let ((a125494 (cdr lst)))
            (let ((a125495 (length a125494))) (+ a125493 a125495)))))))
  (define (map proc lst)
    (let ((a125496 (null? lst)))
      (if a125496
        (let ((x125497 (list))) x125497)
        (let ((a125498 (car lst)))
          (let ((a125499 (proc a125498)))
            (let ((a125500 (cdr lst)))
              (let ((a125501 (map proc a125500))) (cons a125499 a125501))))))))
  (define (filter op lst)
    (let ((a125502 (null? lst)))
      (if a125502
        (let ((x125503 (list))) x125503)
        (let ((a125504 (car lst)))
          (let ((a125505 (op a125504)))
            (if a125505
              (let ((a125506 (car lst)))
                (let ((a125507 (cdr lst)))
                  (let ((a125508 (filter op a125507)))
                    (cons a125506 a125508))))
              (let ((a125509 (cdr lst))) (filter op a125509))))))))
  (define (drop lst n)
    (let ((a125510 '0))
      (let ((a125511 (= n a125510)))
        (if a125511
          lst
          (let ((a125512 (cdr lst)))
            (let ((a125513 '1))
              (let ((a125514 (- n a125513))) (drop a125512 a125514))))))))
  (define (foldr proc acc lst)
    (let ((a125515 (null? lst)))
      (if a125515
        acc
        (let ((a125516 (car lst)))
          (let ((a125517 (cdr lst)))
            (let ((a125518 (foldr proc acc a125517)))
              (proc a125516 a125518)))))))
  (define (append lst1 lst2)
    (let ((a125519 (null? lst1)))
      (if a125519
        lst2
        (let ((a125520 (car lst1)))
          (let ((a125521 (cdr lst1)))
            (let ((a125522 (append a125521 lst2))) (cons a125520 a125522)))))))
  (define (hash . lst) (let ((x125523 (apply-prim hash lst))) x125523))
  (define (hash-ref h k) (let ((x125524 (prim hash-ref h k))) x125524))
  (define (hash-set h k v) (let ((x125525 (prim hash-set h k v))) x125525))
  (define (hash-has-key? h k)
    (let ((x125526 (prim hash-has-key? h k))) x125526))
  (define (hash-count h) (let ((x125527 (prim hash-count h))) x125527))
  (define (call x y z) (let ((x125528 (+ x y z))) x125528))
  (define (brouhaha_main)
    (let ((a125529 '1))
      (let ((a125530 '2))
        (let ((a125531 '3)) (call a125529 a125530 a125531))))))
