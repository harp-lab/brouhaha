'((define (+ . lst) (let ((x131912 (apply-prim + lst))) x131912))
  (define (- . lst) (let ((x131913 (apply-prim - lst))) x131913))
  (define (* . lst) (let ((x131914 (apply-prim * lst))) x131914))
  (define (modulo a b) (let ((x131915 (prim modulo a b))) x131915))
  (define (/ . lst) (let ((x131916 (apply-prim / lst))) x131916))
  (define (= . lst) (let ((x131917 (apply-prim = lst))) x131917))
  (define (> . lst) (let ((x131918 (apply-prim > lst))) x131918))
  (define (< . lst) (let ((x131919 (apply-prim < lst))) x131919))
  (define (<= . lst) (let ((x131920 (apply-prim <= lst))) x131920))
  (define (>= . lst) (let ((x131921 (apply-prim >= lst))) x131921))
  (define (null? x) (let ((x131922 (prim null? x))) x131922))
  (define (equal? x y) (let ((x131923 (prim equal? x y))) x131923))
  (define (eq? x y) (let ((x131924 (prim eq? x y))) x131924))
  (define (cons a b) (let ((x131925 (prim cons a b))) x131925))
  (define (car lst) (let ((x131926 (prim car lst))) x131926))
  (define (cdr lst) (let ((x131927 (prim cdr lst))) x131927))
  (define (even? x)
    (let ((a131928 '0))
      (let ((a131929 '2))
        (let ((a131930 (modulo x a131929))) (equal? a131928 a131930)))))
  (define (odd? x)
    (let ((a131931 '1))
      (let ((a131932 '2))
        (let ((a131933 (modulo x a131932))) (equal? a131931 a131933)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a131934 (null? lst)))
      (if a131934
        (let ((x131935 '#f)) x131935)
        (let ((a131936 (car lst)))
          (let ((a131937 (equal? a131936 x)))
            (if a131937
              (let ((x131938 '#t)) x131938)
              (let ((a131939 (cdr lst))) (member? x a131939))))))))
  (define (foldl fun acc lst)
    (let ((a131940 (null? lst)))
      (if a131940
        acc
        (let ((a131941 (car lst)))
          (let ((a131942 (fun a131941 acc)))
            (let ((a131943 (cdr lst))) (foldl fun a131942 a131943)))))))
  (define (reverse-helper lst lst2)
    (let ((a131944 (null? lst)))
      (if a131944
        lst2
        (let ((a131945 (cdr lst)))
          (let ((a131946 (car lst)))
            (let ((a131947 (cons a131946 lst2)))
              (reverse-helper a131945 a131947)))))))
  (define (reverse lst) (let ((a131948 (list))) (reverse-helper lst a131948)))
  (define (take-helper lst n lst2)
    (let ((a131949 '0))
      (let ((a131950 (= n a131949)))
        (if a131950
          (let ((x131951 (reverse lst2))) x131951)
          (let ((a131952 (cdr lst)))
            (let ((a131953 '1))
              (let ((a131954 (- n a131953)))
                (let ((a131955 (car lst)))
                  (let ((a131956 (cons a131955 lst2)))
                    (take-helper a131952 a131954 a131956))))))))))
  (define (take lst n) (let ((a131957 (list))) (take-helper lst n a131957)))
  (define (length lst)
    (let ((a131958 (null? lst)))
      (if a131958
        (let ((x131959 '0)) x131959)
        (let ((a131960 '1))
          (let ((a131961 (cdr lst)))
            (let ((a131962 (length a131961))) (+ a131960 a131962)))))))
  (define (map proc lst)
    (let ((a131963 (null? lst)))
      (if a131963
        (let ((x131964 (list))) x131964)
        (let ((a131965 (car lst)))
          (let ((a131966 (proc a131965)))
            (let ((a131967 (cdr lst)))
              (let ((a131968 (map proc a131967))) (cons a131966 a131968))))))))
  (define (filter op lst)
    (let ((a131969 (null? lst)))
      (if a131969
        (let ((x131970 (list))) x131970)
        (let ((a131971 (car lst)))
          (let ((a131972 (op a131971)))
            (if a131972
              (let ((a131973 (car lst)))
                (let ((a131974 (cdr lst)))
                  (let ((a131975 (filter op a131974)))
                    (cons a131973 a131975))))
              (let ((a131976 (cdr lst))) (filter op a131976))))))))
  (define (drop lst n)
    (let ((a131977 '0))
      (let ((a131978 (= n a131977)))
        (if a131978
          lst
          (let ((a131979 (cdr lst)))
            (let ((a131980 '1))
              (let ((a131981 (- n a131980))) (drop a131979 a131981))))))))
  (define (foldr proc acc lst)
    (let ((a131982 (null? lst)))
      (if a131982
        acc
        (let ((a131983 (car lst)))
          (let ((a131984 (cdr lst)))
            (let ((a131985 (foldr proc acc a131984)))
              (proc a131983 a131985)))))))
  (define (append lst1 lst2)
    (let ((a131986 (null? lst1)))
      (if a131986
        lst2
        (let ((a131987 (car lst1)))
          (let ((a131988 (cdr lst1)))
            (let ((a131989 (append a131988 lst2))) (cons a131987 a131989)))))))
  (define (hash . lst) (let ((x131990 (apply-prim hash lst))) x131990))
  (define (hash-ref h k) (let ((x131991 (prim hash-ref h k))) x131991))
  (define (hash-set h k v) (let ((x131992 (prim hash-set h k v))) x131992))
  (define (hash-has-key? h k)
    (let ((x131993 (prim hash-has-key? h k))) x131993))
  (define (hash-count h) (let ((x131994 (prim hash-count h))) x131994))
  (define (call x y z) (let ((x131995 (+ x y z))) x131995))
  (define (brouhaha_main)
    (let ((a131996 '1))
      (let ((a131997 '2))
        (let ((a131998 '3)) (call a131996 a131997 a131998))))))
