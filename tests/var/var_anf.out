'((define (+ . lst)
    (let ((kont131999 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131912 (apply-prim + lst))) (kont131999 x131912)))))
  (define (- . lst)
    (let ((kont132001 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131913 (apply-prim - lst))) (kont132001 x131913)))))
  (define (* . lst)
    (let ((kont132003 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131914 (apply-prim * lst))) (kont132003 x131914)))))
  (define (modulo kont132005 a b)
    (let ((x131915 (prim modulo a b))) (kont132005 x131915)))
  (define (/ . lst)
    (let ((kont132006 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131916 (apply-prim / lst))) (kont132006 x131916)))))
  (define (= . lst)
    (let ((kont132008 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131917 (apply-prim = lst))) (kont132008 x131917)))))
  (define (> . lst)
    (let ((kont132010 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131918 (apply-prim > lst))) (kont132010 x131918)))))
  (define (< . lst)
    (let ((kont132012 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131919 (apply-prim < lst))) (kont132012 x131919)))))
  (define (<= . lst)
    (let ((kont132014 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131920 (apply-prim <= lst))) (kont132014 x131920)))))
  (define (>= . lst)
    (let ((kont132016 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131921 (apply-prim >= lst))) (kont132016 x131921)))))
  (define (null? kont132018 x)
    (let ((x131922 (prim null? x))) (kont132018 x131922)))
  (define (equal? kont132019 x y)
    (let ((x131923 (prim equal? x y))) (kont132019 x131923)))
  (define (eq? kont132020 x y)
    (let ((x131924 (prim eq? x y))) (kont132020 x131924)))
  (define (cons kont132021 a b)
    (let ((x131925 (prim cons a b))) (kont132021 x131925)))
  (define (car kont132022 lst)
    (let ((x131926 (prim car lst))) (kont132022 x131926)))
  (define (cdr kont132023 lst)
    (let ((x131927 (prim cdr lst))) (kont132023 x131927)))
  (define (even? kont132024 x)
    (let ((a131928 '0))
      (let ((a131929 '2))
        (let ((f132025 (lambda (a131930) (equal? kont132024 a131928 a131930))))
          (modulo f132025 x a131929)))))
  (define (odd? kont132026 x)
    (let ((a131931 '1))
      (let ((a131932 '2))
        (let ((f132027 (lambda (a131933) (equal? kont132026 a131931 a131933))))
          (modulo f132027 x a131932)))))
  (define (list . x)
    (let ((kont132028 (prim car x))) (let ((x (prim cdr x))) (kont132028 x))))
  (define (member? kont132030 x lst)
    (let ((f132034
           (lambda (a131934)
             (if a131934
               (let ((x131935 '#f)) (kont132030 x131935))
               (let ((f132033
                      (lambda (a131936)
                        (let ((f132032
                               (lambda (a131937)
                                 (if a131937
                                   (let ((x131938 '#t)) (kont132030 x131938))
                                   (let ((f132031
                                          (lambda (a131939)
                                            (member? kont132030 x a131939))))
                                     (cdr f132031 lst))))))
                          (equal? f132032 a131936 x)))))
                 (car f132033 lst))))))
      (null? f132034 lst)))
  (define (foldl kont132035 fun acc lst)
    (let ((f132039
           (lambda (a131940)
             (if a131940
               (kont132035 acc)
               (let ((f132038
                      (lambda (a131941)
                        (let ((f132037
                               (lambda (a131942)
                                 (let ((f132036
                                        (lambda (a131943)
                                          (foldl
                                           kont132035
                                           fun
                                           a131942
                                           a131943))))
                                   (cdr f132036 lst)))))
                          (fun f132037 a131941 acc)))))
                 (car f132038 lst))))))
      (null? f132039 lst)))
  (define (reverse-helper kont132040 lst lst2)
    (let ((f132044
           (lambda (a131944)
             (if a131944
               (kont132040 lst2)
               (let ((f132043
                      (lambda (a131945)
                        (let ((f132042
                               (lambda (a131946)
                                 (let ((f132041
                                        (lambda (a131947)
                                          (reverse-helper
                                           kont132040
                                           a131945
                                           a131947))))
                                   (cons f132041 a131946 lst2)))))
                          (car f132042 lst)))))
                 (cdr f132043 lst))))))
      (null? f132044 lst)))
  (define (reverse kont132045 lst)
    (let ((f132046 (lambda (a131948) (reverse-helper kont132045 lst a131948))))
      (list f132046)))
  (define (take-helper kont132047 lst n lst2)
    (let ((a131949 '0))
      (let ((f132053
             (lambda (a131950)
               (if a131950
                 (let ((f132048 (lambda (x131951) (kont132047 x131951))))
                   (reverse f132048 lst2))
                 (let ((f132052
                        (lambda (a131952)
                          (let ((a131953 '1))
                            (let ((f132051
                                   (lambda (a131954)
                                     (let ((f132050
                                            (lambda (a131955)
                                              (let ((f132049
                                                     (lambda (a131956)
                                                       (take-helper
                                                        kont132047
                                                        a131952
                                                        a131954
                                                        a131956))))
                                                (cons f132049 a131955 lst2)))))
                                       (car f132050 lst)))))
                              (- f132051 n a131953))))))
                   (cdr f132052 lst))))))
        (= f132053 n a131949))))
  (define (take kont132054 lst n)
    (let ((f132055 (lambda (a131957) (take-helper kont132054 lst n a131957))))
      (list f132055)))
  (define (length kont132056 lst)
    (let ((f132059
           (lambda (a131958)
             (if a131958
               (let ((x131959 '0)) (kont132056 x131959))
               (let ((a131960 '1))
                 (let ((f132058
                        (lambda (a131961)
                          (let ((f132057
                                 (lambda (a131962)
                                   (+ kont132056 a131960 a131962))))
                            (length f132057 a131961)))))
                   (cdr f132058 lst)))))))
      (null? f132059 lst)))
  (define (map kont132060 proc lst)
    (let ((f132066
           (lambda (a131963)
             (if a131963
               (let ((f132061 (lambda (x131964) (kont132060 x131964))))
                 (list f132061))
               (let ((f132065
                      (lambda (a131965)
                        (let ((f132064
                               (lambda (a131966)
                                 (let ((f132063
                                        (lambda (a131967)
                                          (let ((f132062
                                                 (lambda (a131968)
                                                   (cons
                                                    kont132060
                                                    a131966
                                                    a131968))))
                                            (map f132062 proc a131967)))))
                                   (cdr f132063 lst)))))
                          (proc f132064 a131965)))))
                 (car f132065 lst))))))
      (null? f132066 lst)))
  (define (filter kont132067 op lst)
    (let ((f132075
           (lambda (a131969)
             (if a131969
               (let ((f132068 (lambda (x131970) (kont132067 x131970))))
                 (list f132068))
               (let ((f132074
                      (lambda (a131971)
                        (let ((f132073
                               (lambda (a131972)
                                 (if a131972
                                   (let ((f132071
                                          (lambda (a131973)
                                            (let ((f132070
                                                   (lambda (a131974)
                                                     (let ((f132069
                                                            (lambda (a131975)
                                                              (cons
                                                               kont132067
                                                               a131973
                                                               a131975))))
                                                       (filter
                                                        f132069
                                                        op
                                                        a131974)))))
                                              (cdr f132070 lst)))))
                                     (car f132071 lst))
                                   (let ((f132072
                                          (lambda (a131976)
                                            (filter kont132067 op a131976))))
                                     (cdr f132072 lst))))))
                          (op f132073 a131971)))))
                 (car f132074 lst))))))
      (null? f132075 lst)))
  (define (drop kont132076 lst n)
    (let ((a131977 '0))
      (let ((f132079
             (lambda (a131978)
               (if a131978
                 (kont132076 lst)
                 (let ((f132078
                        (lambda (a131979)
                          (let ((a131980 '1))
                            (let ((f132077
                                   (lambda (a131981)
                                     (drop kont132076 a131979 a131981))))
                              (- f132077 n a131980))))))
                   (cdr f132078 lst))))))
        (= f132079 n a131977))))
  (define (foldr kont132080 proc acc lst)
    (let ((f132084
           (lambda (a131982)
             (if a131982
               (kont132080 acc)
               (let ((f132083
                      (lambda (a131983)
                        (let ((f132082
                               (lambda (a131984)
                                 (let ((f132081
                                        (lambda (a131985)
                                          (proc kont132080 a131983 a131985))))
                                   (foldr f132081 proc acc a131984)))))
                          (cdr f132082 lst)))))
                 (car f132083 lst))))))
      (null? f132084 lst)))
  (define (append kont132085 lst1 lst2)
    (let ((f132089
           (lambda (a131986)
             (if a131986
               (kont132085 lst2)
               (let ((f132088
                      (lambda (a131987)
                        (let ((f132087
                               (lambda (a131988)
                                 (let ((f132086
                                        (lambda (a131989)
                                          (cons kont132085 a131987 a131989))))
                                   (append f132086 a131988 lst2)))))
                          (cdr f132087 lst1)))))
                 (car f132088 lst1))))))
      (null? f132089 lst1)))
  (define (hash . lst)
    (let ((kont132090 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x131990 (apply-prim hash lst))) (kont132090 x131990)))))
  (define (hash-ref kont132092 h k)
    (let ((x131991 (prim hash-ref h k))) (kont132092 x131991)))
  (define (hash-set kont132093 h k v)
    (let ((x131992 (prim hash-set h k v))) (kont132093 x131992)))
  (define (hash-has-key? kont132094 h k)
    (let ((x131993 (prim hash-has-key? h k))) (kont132094 x131993)))
  (define (hash-count kont132095 h)
    (let ((x131994 (prim hash-count h))) (kont132095 x131994)))
  (define (call kont132096 x y z)
    (let ((f132097 (lambda (x131995) (kont132096 x131995))))
      (+ f132097 x y z)))
  (define (brouhaha_main kont132098)
    (let ((a131996 '1))
      (let ((a131997 '2))
        (let ((a131998 '3)) (call kont132098 a131996 a131997 a131998))))))
