'((define (+ . lst)
    (let ((kont6018460286 (prim car lst)))
      (let ((lst60287 (prim cdr lst)))
        (let ((x6009160288 (apply-prim + lst60287)))
          (kont6018460286 x6009160288)))))
  (define (- . lst)
    (let ((kont6018660289 (prim car lst)))
      (let ((lst60290 (prim cdr lst)))
        (let ((x6009260291 (apply-prim - lst60290)))
          (kont6018660289 x6009260291)))))
  (define (* . lst)
    (let ((kont6018860292 (prim car lst)))
      (let ((lst60293 (prim cdr lst)))
        (let ((x6009360294 (apply-prim * lst60293)))
          (kont6018860292 x6009360294)))))
  (define (modulo kont60190 a b)
    (let ((x6009460295 (prim modulo a b))) (kont60190 x6009460295)))
  (define (/ . lst)
    (let ((kont6019160296 (prim car lst)))
      (let ((lst60297 (prim cdr lst)))
        (let ((x6009560298 (apply-prim / lst60297)))
          (kont6019160296 x6009560298)))))
  (define (= . lst)
    (let ((kont6019360299 (prim car lst)))
      (let ((lst60300 (prim cdr lst)))
        (let ((x6009660301 (apply-prim = lst60300)))
          (kont6019360299 x6009660301)))))
  (define (> . lst)
    (let ((kont6019560302 (prim car lst)))
      (let ((lst60303 (prim cdr lst)))
        (let ((x6009760304 (apply-prim > lst60303)))
          (kont6019560302 x6009760304)))))
  (define (< . lst)
    (let ((kont6019760305 (prim car lst)))
      (let ((lst60306 (prim cdr lst)))
        (let ((x6009860307 (apply-prim < lst60306)))
          (kont6019760305 x6009860307)))))
  (define (<= . lst)
    (let ((kont6019960308 (prim car lst)))
      (let ((lst60309 (prim cdr lst)))
        (let ((x6009960310 (apply-prim <= lst60309)))
          (kont6019960308 x6009960310)))))
  (define (>= . lst)
    (let ((kont6020160311 (prim car lst)))
      (let ((lst60312 (prim cdr lst)))
        (let ((x6010060313 (apply-prim >= lst60312)))
          (kont6020160311 x6010060313)))))
  (define (null? kont60203 x)
    (let ((x6010160314 (prim null? x))) (kont60203 x6010160314)))
  (define (equal? kont60204 x y)
    (let ((x6010260315 (prim equal? x y))) (kont60204 x6010260315)))
  (define (eq? kont60205 x y)
    (let ((x6010360316 (prim eq? x y))) (kont60205 x6010360316)))
  (define (cons kont60206 a b)
    (let ((x6010460317 (prim cons a b))) (kont60206 x6010460317)))
  (define (car kont60207 lst)
    (let ((x6010560318 (prim car lst))) (kont60207 x6010560318)))
  (define (cdr kont60208 lst)
    (let ((x6010660319 (prim cdr lst))) (kont60208 x6010660319)))
  (define (even? kont60209 x)
    (let ((a6010760320 '0))
      (let ((a6010860321 '2))
        (let ((f6021060322
               (lambda (a6010960323)
                 (equal? kont60209 a6010760320 a6010960323))))
          (modulo f6021060322 x a6010860321)))))
  (define (odd? kont60211 x)
    (let ((a6011060324 '1))
      (let ((a6011160325 '2))
        (let ((f6021260326
               (lambda (a6011260327)
                 (equal? kont60211 a6011060324 a6011260327))))
          (modulo f6021260326 x a6011160325)))))
  (define (list . x)
    (let ((kont6021360328 (prim car x)))
      (let ((x60329 (prim cdr x))) (kont6021360328 x60329))))
  (define (member? kont60215 x lst)
    (let ((f6021960330
           (lambda (a6011360331)
             (if a6011360331
               (let ((x6011460332 '#f)) (kont60215 x6011460332))
               (let ((f6021860333
                      (lambda (a6011560334)
                        (let ((f6021760335
                               (lambda (a6011660336)
                                 (if a6011660336
                                   (let ((x6011760337 '#t))
                                     (kont60215 x6011760337))
                                   (let ((f6021660338
                                          (lambda (a6011860339)
                                            (member?
                                             kont60215
                                             x
                                             a6011860339))))
                                     (cdr f6021660338 lst))))))
                          (equal? f6021760335 a6011560334 x)))))
                 (car f6021860333 lst))))))
      (null? f6021960330 lst)))
  (define (foldl kont60220 fun acc lst)
    (let ((f6022460340
           (lambda (a6011960341)
             (if a6011960341
               (kont60220 acc)
               (let ((f6022360342
                      (lambda (a6012060343)
                        (let ((f6022260344
                               (lambda (a6012160345)
                                 (let ((f6022160346
                                        (lambda (a6012260347)
                                          (foldl
                                           kont60220
                                           fun
                                           a6012160345
                                           a6012260347))))
                                   (cdr f6022160346 lst)))))
                          (fun f6022260344 a6012060343 acc)))))
                 (car f6022360342 lst))))))
      (null? f6022460340 lst)))
  (define (reverse-helper kont60225 lst lst2)
    (let ((f6022960348
           (lambda (a6012360349)
             (if a6012360349
               (kont60225 lst2)
               (let ((f6022860350
                      (lambda (a6012460351)
                        (let ((f6022760352
                               (lambda (a6012560353)
                                 (let ((f6022660354
                                        (lambda (a6012660355)
                                          (reverse-helper
                                           kont60225
                                           a6012460351
                                           a6012660355))))
                                   (cons f6022660354 a6012560353 lst2)))))
                          (car f6022760352 lst)))))
                 (cdr f6022860350 lst))))))
      (null? f6022960348 lst)))
  (define (reverse kont60230 lst)
    (let ((f6023160356
           (lambda (a6012760357) (reverse-helper kont60230 lst a6012760357))))
      (list f6023160356)))
  (define (take-helper kont60232 lst n lst2)
    (let ((a6012860358 '0))
      (let ((f6023860359
             (lambda (a6012960360)
               (if a6012960360
                 (let ((f6023360361
                        (lambda (x6013060362) (kont60232 x6013060362))))
                   (reverse f6023360361 lst2))
                 (let ((f6023760363
                        (lambda (a6013160364)
                          (let ((a6013260365 '1))
                            (let ((f6023660366
                                   (lambda (a6013360367)
                                     (let ((f6023560368
                                            (lambda (a6013460369)
                                              (let ((f6023460370
                                                     (lambda (a6013560371)
                                                       (take-helper
                                                        kont60232
                                                        a6013160364
                                                        a6013360367
                                                        a6013560371))))
                                                (cons
                                                 f6023460370
                                                 a6013460369
                                                 lst2)))))
                                       (car f6023560368 lst)))))
                              (- f6023660366 n a6013260365))))))
                   (cdr f6023760363 lst))))))
        (= f6023860359 n a6012860358))))
  (define (take kont60239 lst n)
    (let ((f6024060372
           (lambda (a6013660373) (take-helper kont60239 lst n a6013660373))))
      (list f6024060372)))
  (define (length kont60241 lst)
    (let ((f6024460374
           (lambda (a6013760375)
             (if a6013760375
               (let ((x6013860376 '0)) (kont60241 x6013860376))
               (let ((a6013960377 '1))
                 (let ((f6024360378
                        (lambda (a6014060379)
                          (let ((f6024260380
                                 (lambda (a6014160381)
                                   (+ kont60241 a6013960377 a6014160381))))
                            (length f6024260380 a6014060379)))))
                   (cdr f6024360378 lst)))))))
      (null? f6024460374 lst)))
  (define (map kont60245 proc lst)
    (let ((f6025160382
           (lambda (a6014260383)
             (if a6014260383
               (let ((f6024660384
                      (lambda (x6014360385) (kont60245 x6014360385))))
                 (list f6024660384))
               (let ((f6025060386
                      (lambda (a6014460387)
                        (let ((f6024960388
                               (lambda (a6014560389)
                                 (let ((f6024860390
                                        (lambda (a6014660391)
                                          (let ((f6024760392
                                                 (lambda (a6014760393)
                                                   (cons
                                                    kont60245
                                                    a6014560389
                                                    a6014760393))))
                                            (map
                                             f6024760392
                                             proc
                                             a6014660391)))))
                                   (cdr f6024860390 lst)))))
                          (proc f6024960388 a6014460387)))))
                 (car f6025060386 lst))))))
      (null? f6025160382 lst)))
  (define (filter kont60252 op lst)
    (let ((f6026060394
           (lambda (a6014860395)
             (if a6014860395
               (let ((f6025360396
                      (lambda (x6014960397) (kont60252 x6014960397))))
                 (list f6025360396))
               (let ((f6025960398
                      (lambda (a6015060399)
                        (let ((f6025860400
                               (lambda (a6015160401)
                                 (if a6015160401
                                   (let ((f6025660402
                                          (lambda (a6015260403)
                                            (let ((f6025560404
                                                   (lambda (a6015360405)
                                                     (let ((f6025460406
                                                            (lambda (a6015460407)
                                                              (cons
                                                               kont60252
                                                               a6015260403
                                                               a6015460407))))
                                                       (filter
                                                        f6025460406
                                                        op
                                                        a6015360405)))))
                                              (cdr f6025560404 lst)))))
                                     (car f6025660402 lst))
                                   (let ((f6025760408
                                          (lambda (a6015560409)
                                            (filter
                                             kont60252
                                             op
                                             a6015560409))))
                                     (cdr f6025760408 lst))))))
                          (op f6025860400 a6015060399)))))
                 (car f6025960398 lst))))))
      (null? f6026060394 lst)))
  (define (drop kont60261 lst n)
    (let ((a6015660410 '0))
      (let ((f6026460411
             (lambda (a6015760412)
               (if a6015760412
                 (kont60261 lst)
                 (let ((f6026360413
                        (lambda (a6015860414)
                          (let ((a6015960415 '1))
                            (let ((f6026260416
                                   (lambda (a6016060417)
                                     (drop
                                      kont60261
                                      a6015860414
                                      a6016060417))))
                              (- f6026260416 n a6015960415))))))
                   (cdr f6026360413 lst))))))
        (= f6026460411 n a6015660410))))
  (define (foldr kont60265 proc acc lst)
    (let ((f6026960418
           (lambda (a6016160419)
             (if a6016160419
               (kont60265 acc)
               (let ((f6026860420
                      (lambda (a6016260421)
                        (let ((f6026760422
                               (lambda (a6016360423)
                                 (let ((f6026660424
                                        (lambda (a6016460425)
                                          (proc
                                           kont60265
                                           a6016260421
                                           a6016460425))))
                                   (foldr f6026660424 proc acc a6016360423)))))
                          (cdr f6026760422 lst)))))
                 (car f6026860420 lst))))))
      (null? f6026960418 lst)))
  (define (append kont60270 lst1 lst2)
    (let ((f6027460426
           (lambda (a6016560427)
             (if a6016560427
               (kont60270 lst2)
               (let ((f6027360428
                      (lambda (a6016660429)
                        (let ((f6027260430
                               (lambda (a6016760431)
                                 (let ((f6027160432
                                        (lambda (a6016860433)
                                          (cons
                                           kont60270
                                           a6016660429
                                           a6016860433))))
                                   (append f6027160432 a6016760431 lst2)))))
                          (cdr f6027260430 lst1)))))
                 (car f6027360428 lst1))))))
      (null? f6027460426 lst1)))
  (define (hash . lst)
    (let ((kont6027560434 (prim car lst)))
      (let ((lst60435 (prim cdr lst)))
        (let ((x6016960436 (apply-prim hash lst60435)))
          (kont6027560434 x6016960436)))))
  (define (hash-ref kont60277 h k)
    (let ((x6017060437 (prim hash-ref h k))) (kont60277 x6017060437)))
  (define (hash-set kont60278 h k v)
    (let ((x6017160438 (prim hash-set h k v))) (kont60278 x6017160438)))
  (define (hash-has-key? kont60279 h k)
    (let ((x6017260439 (prim hash-has-key? h k))) (kont60279 x6017260439)))
  (define (hash-count kont60280 h)
    (let ((x6017360440 (prim hash-count h))) (kont60280 x6017360440)))
  (define (call kont60281)
    (let ((a6017460441 "work"))
      (let ((a6017560442 '80))
        (let ((a6017660443 '10))
          (let ((a6017760444 "lmao"))
            (let ((f6028360445
                   (lambda (a6017860446)
                     (let ((a6017960447 "work"))
                       (let ((a6018060448 '90))
                         (let ((f6028260449
                                (lambda (a6018160450)
                                  (let ((a6018260451 "work"))
                                    (hash-ref
                                     kont60281
                                     a6018160450
                                     a6018260451)))))
                           (hash-set
                            f6028260449
                            a6017860446
                            a6017960447
                            a6018060448)))))))
              (hash
               f6028360445
               a6017460441
               a6017560442
               a6017660443
               a6017760444)))))))
  (define (brouhaha_main kont60284)
    (let ((f6028560452 (lambda (x6018360453) (kont60284 x6018360453))))
      (call f6028560452))))
