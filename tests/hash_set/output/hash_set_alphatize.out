'((define (+ . lst) (let ((x60091 (apply-prim + lst))) x60091))
  (define (- . lst) (let ((x60092 (apply-prim - lst))) x60092))
  (define (* . lst) (let ((x60093 (apply-prim * lst))) x60093))
  (define (modulo a b) (let ((x60094 (prim modulo a b))) x60094))
  (define (/ . lst) (let ((x60095 (apply-prim / lst))) x60095))
  (define (= . lst) (let ((x60096 (apply-prim = lst))) x60096))
  (define (> . lst) (let ((x60097 (apply-prim > lst))) x60097))
  (define (< . lst) (let ((x60098 (apply-prim < lst))) x60098))
  (define (<= . lst) (let ((x60099 (apply-prim <= lst))) x60099))
  (define (>= . lst) (let ((x60100 (apply-prim >= lst))) x60100))
  (define (null? x) (let ((x60101 (prim null? x))) x60101))
  (define (equal? x y) (let ((x60102 (prim equal? x y))) x60102))
  (define (eq? x y) (let ((x60103 (prim eq? x y))) x60103))
  (define (cons a b) (let ((x60104 (prim cons a b))) x60104))
  (define (car lst) (let ((x60105 (prim car lst))) x60105))
  (define (cdr lst) (let ((x60106 (prim cdr lst))) x60106))
  (define (even? x)
    (let ((a60107 '0))
      (let ((a60108 '2))
        (let ((a60109 (modulo x a60108))) (equal? a60107 a60109)))))
  (define (odd? x)
    (let ((a60110 '1))
      (let ((a60111 '2))
        (let ((a60112 (modulo x a60111))) (equal? a60110 a60112)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a60113 (null? lst)))
      (if a60113
        (let ((x60114 '#f)) x60114)
        (let ((a60115 (car lst)))
          (let ((a60116 (equal? a60115 x)))
            (if a60116
              (let ((x60117 '#t)) x60117)
              (let ((a60118 (cdr lst))) (member? x a60118))))))))
  (define (foldl fun acc lst)
    (let ((a60119 (null? lst)))
      (if a60119
        acc
        (let ((a60120 (car lst)))
          (let ((a60121 (fun a60120 acc)))
            (let ((a60122 (cdr lst))) (foldl fun a60121 a60122)))))))
  (define (reverse-helper lst lst2)
    (let ((a60123 (null? lst)))
      (if a60123
        lst2
        (let ((a60124 (cdr lst)))
          (let ((a60125 (car lst)))
            (let ((a60126 (cons a60125 lst2)))
              (reverse-helper a60124 a60126)))))))
  (define (reverse lst) (let ((a60127 (list))) (reverse-helper lst a60127)))
  (define (take-helper lst n lst2)
    (let ((a60128 '0))
      (let ((a60129 (= n a60128)))
        (if a60129
          (let ((x60130 (reverse lst2))) x60130)
          (let ((a60131 (cdr lst)))
            (let ((a60132 '1))
              (let ((a60133 (- n a60132)))
                (let ((a60134 (car lst)))
                  (let ((a60135 (cons a60134 lst2)))
                    (take-helper a60131 a60133 a60135))))))))))
  (define (take lst n) (let ((a60136 (list))) (take-helper lst n a60136)))
  (define (length lst)
    (let ((a60137 (null? lst)))
      (if a60137
        (let ((x60138 '0)) x60138)
        (let ((a60139 '1))
          (let ((a60140 (cdr lst)))
            (let ((a60141 (length a60140))) (+ a60139 a60141)))))))
  (define (map proc lst)
    (let ((a60142 (null? lst)))
      (if a60142
        (let ((x60143 (list))) x60143)
        (let ((a60144 (car lst)))
          (let ((a60145 (proc a60144)))
            (let ((a60146 (cdr lst)))
              (let ((a60147 (map proc a60146))) (cons a60145 a60147))))))))
  (define (filter op lst)
    (let ((a60148 (null? lst)))
      (if a60148
        (let ((x60149 (list))) x60149)
        (let ((a60150 (car lst)))
          (let ((a60151 (op a60150)))
            (if a60151
              (let ((a60152 (car lst)))
                (let ((a60153 (cdr lst)))
                  (let ((a60154 (filter op a60153))) (cons a60152 a60154))))
              (let ((a60155 (cdr lst))) (filter op a60155))))))))
  (define (drop lst n)
    (let ((a60156 '0))
      (let ((a60157 (= n a60156)))
        (if a60157
          lst
          (let ((a60158 (cdr lst)))
            (let ((a60159 '1))
              (let ((a60160 (- n a60159))) (drop a60158 a60160))))))))
  (define (foldr proc acc lst)
    (let ((a60161 (null? lst)))
      (if a60161
        acc
        (let ((a60162 (car lst)))
          (let ((a60163 (cdr lst)))
            (let ((a60164 (foldr proc acc a60163))) (proc a60162 a60164)))))))
  (define (append lst1 lst2)
    (let ((a60165 (null? lst1)))
      (if a60165
        lst2
        (let ((a60166 (car lst1)))
          (let ((a60167 (cdr lst1)))
            (let ((a60168 (append a60167 lst2))) (cons a60166 a60168)))))))
  (define (hash . lst) (let ((x60169 (apply-prim hash lst))) x60169))
  (define (hash-ref h k) (let ((x60170 (prim hash-ref h k))) x60170))
  (define (hash-set h k v) (let ((x60171 (prim hash-set h k v))) x60171))
  (define (hash-has-key? h k) (let ((x60172 (prim hash-has-key? h k))) x60172))
  (define (hash-count h) (let ((x60173 (prim hash-count h))) x60173))
  (define (call)
    (let ((a60174 "work"))
      (let ((a60175 '80))
        (let ((a60176 '10))
          (let ((a60177 "lmao"))
            (let ((a60178 (hash a60174 a60175 a60176 a60177)))
              (let ((a60179 "work"))
                (let ((a60180 '90))
                  (let ((a60181 (hash-set a60178 a60179 a60180)))
                    (let ((a60182 "work")) (hash-ref a60181 a60182)))))))))))
  (define (brouhaha_main) (let ((x60183 (call))) x60183)))
