'((define (+ . lst) (let ((x84381 (apply-prim + lst))) x84381))
  (define (- . lst) (let ((x84382 (apply-prim - lst))) x84382))
  (define (* . lst) (let ((x84383 (apply-prim * lst))) x84383))
  (define (modulo a b) (let ((x84384 (prim modulo a b))) x84384))
  (define (/ . lst) (let ((x84385 (apply-prim / lst))) x84385))
  (define (= . lst) (let ((x84386 (apply-prim = lst))) x84386))
  (define (> . lst) (let ((x84387 (apply-prim > lst))) x84387))
  (define (< . lst) (let ((x84388 (apply-prim < lst))) x84388))
  (define (<= . lst) (let ((x84389 (apply-prim <= lst))) x84389))
  (define (>= . lst) (let ((x84390 (apply-prim >= lst))) x84390))
  (define (null? x) (let ((x84391 (prim null? x))) x84391))
  (define (equal? x y) (let ((x84392 (prim equal? x y))) x84392))
  (define (eq? x y) (let ((x84393 (prim eq? x y))) x84393))
  (define (cons a b) (let ((x84394 (prim cons a b))) x84394))
  (define (car lst) (let ((x84395 (prim car lst))) x84395))
  (define (cdr lst) (let ((x84396 (prim cdr lst))) x84396))
  (define (even? x)
    (let ((a84397 '0))
      (let ((a84398 '2))
        (let ((a84399 (modulo x a84398))) (equal? a84397 a84399)))))
  (define (odd? x)
    (let ((a84400 '1))
      (let ((a84401 '2))
        (let ((a84402 (modulo x a84401))) (equal? a84400 a84402)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a84403 (null? lst)))
      (if a84403
        (let ((x84404 '#f)) x84404)
        (let ((a84405 (car lst)))
          (let ((a84406 (equal? a84405 x)))
            (if a84406
              (let ((x84407 '#t)) x84407)
              (let ((a84408 (cdr lst))) (member? x a84408))))))))
  (define (foldl fun acc lst)
    (let ((a84409 (null? lst)))
      (if a84409
        acc
        (let ((a84410 (car lst)))
          (let ((a84411 (fun a84410 acc)))
            (let ((a84412 (cdr lst))) (foldl fun a84411 a84412)))))))
  (define (reverse-helper lst lst2)
    (let ((a84413 (null? lst)))
      (if a84413
        lst2
        (let ((a84414 (cdr lst)))
          (let ((a84415 (car lst)))
            (let ((a84416 (cons a84415 lst2)))
              (reverse-helper a84414 a84416)))))))
  (define (reverse lst) (let ((a84417 (list))) (reverse-helper lst a84417)))
  (define (take-helper lst n lst2)
    (let ((a84418 '0))
      (let ((a84419 (= n a84418)))
        (if a84419
          (let ((x84420 (reverse lst2))) x84420)
          (let ((a84421 (cdr lst)))
            (let ((a84422 '1))
              (let ((a84423 (- n a84422)))
                (let ((a84424 (car lst)))
                  (let ((a84425 (cons a84424 lst2)))
                    (take-helper a84421 a84423 a84425))))))))))
  (define (take lst n) (let ((a84426 (list))) (take-helper lst n a84426)))
  (define (length lst)
    (let ((a84427 (null? lst)))
      (if a84427
        (let ((x84428 '0)) x84428)
        (let ((a84429 '1))
          (let ((a84430 (cdr lst)))
            (let ((a84431 (length a84430))) (+ a84429 a84431)))))))
  (define (map proc lst)
    (let ((a84432 (null? lst)))
      (if a84432
        (let ((x84433 (list))) x84433)
        (let ((a84434 (car lst)))
          (let ((a84435 (proc a84434)))
            (let ((a84436 (cdr lst)))
              (let ((a84437 (map proc a84436))) (cons a84435 a84437))))))))
  (define (filter op lst)
    (let ((a84438 (null? lst)))
      (if a84438
        (let ((x84439 (list))) x84439)
        (let ((a84440 (car lst)))
          (let ((a84441 (op a84440)))
            (if a84441
              (let ((a84442 (car lst)))
                (let ((a84443 (cdr lst)))
                  (let ((a84444 (filter op a84443))) (cons a84442 a84444))))
              (let ((a84445 (cdr lst))) (filter op a84445))))))))
  (define (drop lst n)
    (let ((a84446 '0))
      (let ((a84447 (= n a84446)))
        (if a84447
          lst
          (let ((a84448 (cdr lst)))
            (let ((a84449 '1))
              (let ((a84450 (- n a84449))) (drop a84448 a84450))))))))
  (define (foldr proc acc lst)
    (let ((a84451 (null? lst)))
      (if a84451
        acc
        (let ((a84452 (car lst)))
          (let ((a84453 (cdr lst)))
            (let ((a84454 (foldr proc acc a84453))) (proc a84452 a84454)))))))
  (define (append lst1 lst2)
    (let ((a84455 (null? lst1)))
      (if a84455
        lst2
        (let ((a84456 (car lst1)))
          (let ((a84457 (cdr lst1)))
            (let ((a84458 (append a84457 lst2))) (cons a84456 a84458)))))))
  (define (hash . lst) (let ((x84459 (apply-prim hash lst))) x84459))
  (define (hash-ref h k) (let ((x84460 (prim hash-ref h k))) x84460))
  (define (hash-set h k v) (let ((x84461 (prim hash-set h k v))) x84461))
  (define (hash-has-key? h k) (let ((x84462 (prim hash-has-key? h k))) x84462))
  (define (hash-count h) (let ((x84463 (prim hash-count h))) x84463))
  (define (call)
    (let ((a84464 '100.8))
      (let ((a84465 '80))
        (let ((a84466 '10))
          (let ((a84467 '2.4)) (- a84464 a84465 a84466 a84467))))))
  (define (brouhaha_main) (let ((x84468 (call))) x84468)))
