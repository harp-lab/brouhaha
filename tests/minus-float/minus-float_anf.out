'((define (+ . lst)
    (let ((kont84469 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84381 (apply-prim + lst))) (kont84469 x84381)))))
  (define (- . lst)
    (let ((kont84471 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84382 (apply-prim - lst))) (kont84471 x84382)))))
  (define (* . lst)
    (let ((kont84473 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84383 (apply-prim * lst))) (kont84473 x84383)))))
  (define (modulo kont84475 a b)
    (let ((x84384 (prim modulo a b))) (kont84475 x84384)))
  (define (/ . lst)
    (let ((kont84476 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84385 (apply-prim / lst))) (kont84476 x84385)))))
  (define (= . lst)
    (let ((kont84478 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84386 (apply-prim = lst))) (kont84478 x84386)))))
  (define (> . lst)
    (let ((kont84480 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84387 (apply-prim > lst))) (kont84480 x84387)))))
  (define (< . lst)
    (let ((kont84482 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84388 (apply-prim < lst))) (kont84482 x84388)))))
  (define (<= . lst)
    (let ((kont84484 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84389 (apply-prim <= lst))) (kont84484 x84389)))))
  (define (>= . lst)
    (let ((kont84486 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84390 (apply-prim >= lst))) (kont84486 x84390)))))
  (define (null? kont84488 x)
    (let ((x84391 (prim null? x))) (kont84488 x84391)))
  (define (equal? kont84489 x y)
    (let ((x84392 (prim equal? x y))) (kont84489 x84392)))
  (define (eq? kont84490 x y)
    (let ((x84393 (prim eq? x y))) (kont84490 x84393)))
  (define (cons kont84491 a b)
    (let ((x84394 (prim cons a b))) (kont84491 x84394)))
  (define (car kont84492 lst)
    (let ((x84395 (prim car lst))) (kont84492 x84395)))
  (define (cdr kont84493 lst)
    (let ((x84396 (prim cdr lst))) (kont84493 x84396)))
  (define (even? kont84494 x)
    (let ((a84397 '0))
      (let ((a84398 '2))
        (let ((f84495 (lambda (a84399) (equal? kont84494 a84397 a84399))))
          (modulo f84495 x a84398)))))
  (define (odd? kont84496 x)
    (let ((a84400 '1))
      (let ((a84401 '2))
        (let ((f84497 (lambda (a84402) (equal? kont84496 a84400 a84402))))
          (modulo f84497 x a84401)))))
  (define (list . x)
    (let ((kont84498 (prim car x))) (let ((x (prim cdr x))) (kont84498 x))))
  (define (member? kont84500 x lst)
    (let ((f84504
           (lambda (a84403)
             (if a84403
               (let ((x84404 '#f)) (kont84500 x84404))
               (let ((f84503
                      (lambda (a84405)
                        (let ((f84502
                               (lambda (a84406)
                                 (if a84406
                                   (let ((x84407 '#t)) (kont84500 x84407))
                                   (let ((f84501
                                          (lambda (a84408)
                                            (member? kont84500 x a84408))))
                                     (cdr f84501 lst))))))
                          (equal? f84502 a84405 x)))))
                 (car f84503 lst))))))
      (null? f84504 lst)))
  (define (foldl kont84505 fun acc lst)
    (let ((f84509
           (lambda (a84409)
             (if a84409
               (kont84505 acc)
               (let ((f84508
                      (lambda (a84410)
                        (let ((f84507
                               (lambda (a84411)
                                 (let ((f84506
                                        (lambda (a84412)
                                          (foldl
                                           kont84505
                                           fun
                                           a84411
                                           a84412))))
                                   (cdr f84506 lst)))))
                          (fun f84507 a84410 acc)))))
                 (car f84508 lst))))))
      (null? f84509 lst)))
  (define (reverse-helper kont84510 lst lst2)
    (let ((f84514
           (lambda (a84413)
             (if a84413
               (kont84510 lst2)
               (let ((f84513
                      (lambda (a84414)
                        (let ((f84512
                               (lambda (a84415)
                                 (let ((f84511
                                        (lambda (a84416)
                                          (reverse-helper
                                           kont84510
                                           a84414
                                           a84416))))
                                   (cons f84511 a84415 lst2)))))
                          (car f84512 lst)))))
                 (cdr f84513 lst))))))
      (null? f84514 lst)))
  (define (reverse kont84515 lst)
    (let ((f84516 (lambda (a84417) (reverse-helper kont84515 lst a84417))))
      (list f84516)))
  (define (take-helper kont84517 lst n lst2)
    (let ((a84418 '0))
      (let ((f84523
             (lambda (a84419)
               (if a84419
                 (let ((f84518 (lambda (x84420) (kont84517 x84420))))
                   (reverse f84518 lst2))
                 (let ((f84522
                        (lambda (a84421)
                          (let ((a84422 '1))
                            (let ((f84521
                                   (lambda (a84423)
                                     (let ((f84520
                                            (lambda (a84424)
                                              (let ((f84519
                                                     (lambda (a84425)
                                                       (take-helper
                                                        kont84517
                                                        a84421
                                                        a84423
                                                        a84425))))
                                                (cons f84519 a84424 lst2)))))
                                       (car f84520 lst)))))
                              (- f84521 n a84422))))))
                   (cdr f84522 lst))))))
        (= f84523 n a84418))))
  (define (take kont84524 lst n)
    (let ((f84525 (lambda (a84426) (take-helper kont84524 lst n a84426))))
      (list f84525)))
  (define (length kont84526 lst)
    (let ((f84529
           (lambda (a84427)
             (if a84427
               (let ((x84428 '0)) (kont84526 x84428))
               (let ((a84429 '1))
                 (let ((f84528
                        (lambda (a84430)
                          (let ((f84527
                                 (lambda (a84431)
                                   (+ kont84526 a84429 a84431))))
                            (length f84527 a84430)))))
                   (cdr f84528 lst)))))))
      (null? f84529 lst)))
  (define (map kont84530 proc lst)
    (let ((f84536
           (lambda (a84432)
             (if a84432
               (let ((f84531 (lambda (x84433) (kont84530 x84433))))
                 (list f84531))
               (let ((f84535
                      (lambda (a84434)
                        (let ((f84534
                               (lambda (a84435)
                                 (let ((f84533
                                        (lambda (a84436)
                                          (let ((f84532
                                                 (lambda (a84437)
                                                   (cons
                                                    kont84530
                                                    a84435
                                                    a84437))))
                                            (map f84532 proc a84436)))))
                                   (cdr f84533 lst)))))
                          (proc f84534 a84434)))))
                 (car f84535 lst))))))
      (null? f84536 lst)))
  (define (filter kont84537 op lst)
    (let ((f84545
           (lambda (a84438)
             (if a84438
               (let ((f84538 (lambda (x84439) (kont84537 x84439))))
                 (list f84538))
               (let ((f84544
                      (lambda (a84440)
                        (let ((f84543
                               (lambda (a84441)
                                 (if a84441
                                   (let ((f84541
                                          (lambda (a84442)
                                            (let ((f84540
                                                   (lambda (a84443)
                                                     (let ((f84539
                                                            (lambda (a84444)
                                                              (cons
                                                               kont84537
                                                               a84442
                                                               a84444))))
                                                       (filter
                                                        f84539
                                                        op
                                                        a84443)))))
                                              (cdr f84540 lst)))))
                                     (car f84541 lst))
                                   (let ((f84542
                                          (lambda (a84445)
                                            (filter kont84537 op a84445))))
                                     (cdr f84542 lst))))))
                          (op f84543 a84440)))))
                 (car f84544 lst))))))
      (null? f84545 lst)))
  (define (drop kont84546 lst n)
    (let ((a84446 '0))
      (let ((f84549
             (lambda (a84447)
               (if a84447
                 (kont84546 lst)
                 (let ((f84548
                        (lambda (a84448)
                          (let ((a84449 '1))
                            (let ((f84547
                                   (lambda (a84450)
                                     (drop kont84546 a84448 a84450))))
                              (- f84547 n a84449))))))
                   (cdr f84548 lst))))))
        (= f84549 n a84446))))
  (define (foldr kont84550 proc acc lst)
    (let ((f84554
           (lambda (a84451)
             (if a84451
               (kont84550 acc)
               (let ((f84553
                      (lambda (a84452)
                        (let ((f84552
                               (lambda (a84453)
                                 (let ((f84551
                                        (lambda (a84454)
                                          (proc kont84550 a84452 a84454))))
                                   (foldr f84551 proc acc a84453)))))
                          (cdr f84552 lst)))))
                 (car f84553 lst))))))
      (null? f84554 lst)))
  (define (append kont84555 lst1 lst2)
    (let ((f84559
           (lambda (a84455)
             (if a84455
               (kont84555 lst2)
               (let ((f84558
                      (lambda (a84456)
                        (let ((f84557
                               (lambda (a84457)
                                 (let ((f84556
                                        (lambda (a84458)
                                          (cons kont84555 a84456 a84458))))
                                   (append f84556 a84457 lst2)))))
                          (cdr f84557 lst1)))))
                 (car f84558 lst1))))))
      (null? f84559 lst1)))
  (define (hash . lst)
    (let ((kont84560 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x84459 (apply-prim hash lst))) (kont84560 x84459)))))
  (define (hash-ref kont84562 h k)
    (let ((x84460 (prim hash-ref h k))) (kont84562 x84460)))
  (define (hash-set kont84563 h k v)
    (let ((x84461 (prim hash-set h k v))) (kont84563 x84461)))
  (define (hash-has-key? kont84564 h k)
    (let ((x84462 (prim hash-has-key? h k))) (kont84564 x84462)))
  (define (hash-count kont84565 h)
    (let ((x84463 (prim hash-count h))) (kont84565 x84463)))
  (define (call kont84566)
    (let ((a84464 '100.8))
      (let ((a84465 '80))
        (let ((a84466 '10))
          (let ((a84467 '2.4)) (- kont84566 a84464 a84465 a84466 a84467))))))
  (define (brouhaha_main kont84567)
    (let ((f84568 (lambda (x84468) (kont84567 x84468)))) (call f84568))))
