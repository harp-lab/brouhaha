'((define (+ . lst) (let ((x116257 (apply-prim + lst))) x116257))
  (define (- . lst) (let ((x116258 (apply-prim - lst))) x116258))
  (define (* . lst) (let ((x116259 (apply-prim * lst))) x116259))
  (define (modulo a b) (let ((x116260 (prim modulo a b))) x116260))
  (define (/ . lst) (let ((x116261 (apply-prim / lst))) x116261))
  (define (= . lst) (let ((x116262 (apply-prim = lst))) x116262))
  (define (> . lst) (let ((x116263 (apply-prim > lst))) x116263))
  (define (< . lst) (let ((x116264 (apply-prim < lst))) x116264))
  (define (<= . lst) (let ((x116265 (apply-prim <= lst))) x116265))
  (define (>= . lst) (let ((x116266 (apply-prim >= lst))) x116266))
  (define (null? x) (let ((x116267 (prim null? x))) x116267))
  (define (equal? x y) (let ((x116268 (prim equal? x y))) x116268))
  (define (eq? x y) (let ((x116269 (prim eq? x y))) x116269))
  (define (cons a b) (let ((x116270 (prim cons a b))) x116270))
  (define (car lst) (let ((x116271 (prim car lst))) x116271))
  (define (cdr lst) (let ((x116272 (prim cdr lst))) x116272))
  (define (even? x)
    (let ((a116273 '0))
      (let ((a116274 '2))
        (let ((a116275 (modulo x a116274))) (equal? a116273 a116275)))))
  (define (odd? x)
    (let ((a116276 '1))
      (let ((a116277 '2))
        (let ((a116278 (modulo x a116277))) (equal? a116276 a116278)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a116279 (null? lst)))
      (if a116279
        (let ((x116280 '#f)) x116280)
        (let ((a116281 (car lst)))
          (let ((a116282 (equal? a116281 x)))
            (if a116282
              (let ((x116283 '#t)) x116283)
              (let ((a116284 (cdr lst))) (member? x a116284))))))))
  (define (foldl fun acc lst)
    (let ((a116285 (null? lst)))
      (if a116285
        acc
        (let ((a116286 (car lst)))
          (let ((a116287 (fun a116286 acc)))
            (let ((a116288 (cdr lst))) (foldl fun a116287 a116288)))))))
  (define (reverse-helper lst lst2)
    (let ((a116289 (null? lst)))
      (if a116289
        lst2
        (let ((a116290 (cdr lst)))
          (let ((a116291 (car lst)))
            (let ((a116292 (cons a116291 lst2)))
              (reverse-helper a116290 a116292)))))))
  (define (reverse lst) (let ((a116293 (list))) (reverse-helper lst a116293)))
  (define (take-helper lst n lst2)
    (let ((a116294 '0))
      (let ((a116295 (= n a116294)))
        (if a116295
          (let ((x116296 (reverse lst2))) x116296)
          (let ((a116297 (cdr lst)))
            (let ((a116298 '1))
              (let ((a116299 (- n a116298)))
                (let ((a116300 (car lst)))
                  (let ((a116301 (cons a116300 lst2)))
                    (take-helper a116297 a116299 a116301))))))))))
  (define (take lst n) (let ((a116302 (list))) (take-helper lst n a116302)))
  (define (length lst)
    (let ((a116303 (null? lst)))
      (if a116303
        (let ((x116304 '0)) x116304)
        (let ((a116305 '1))
          (let ((a116306 (cdr lst)))
            (let ((a116307 (length a116306))) (+ a116305 a116307)))))))
  (define (map proc lst)
    (let ((a116308 (null? lst)))
      (if a116308
        (let ((x116309 (list))) x116309)
        (let ((a116310 (car lst)))
          (let ((a116311 (proc a116310)))
            (let ((a116312 (cdr lst)))
              (let ((a116313 (map proc a116312))) (cons a116311 a116313))))))))
  (define (filter op lst)
    (let ((a116314 (null? lst)))
      (if a116314
        (let ((x116315 (list))) x116315)
        (let ((a116316 (car lst)))
          (let ((a116317 (op a116316)))
            (if a116317
              (let ((a116318 (car lst)))
                (let ((a116319 (cdr lst)))
                  (let ((a116320 (filter op a116319)))
                    (cons a116318 a116320))))
              (let ((a116321 (cdr lst))) (filter op a116321))))))))
  (define (drop lst n)
    (let ((a116322 '0))
      (let ((a116323 (= n a116322)))
        (if a116323
          lst
          (let ((a116324 (cdr lst)))
            (let ((a116325 '1))
              (let ((a116326 (- n a116325))) (drop a116324 a116326))))))))
  (define (foldr proc acc lst)
    (let ((a116327 (null? lst)))
      (if a116327
        acc
        (let ((a116328 (car lst)))
          (let ((a116329 (cdr lst)))
            (let ((a116330 (foldr proc acc a116329)))
              (proc a116328 a116330)))))))
  (define (append lst1 lst2)
    (let ((a116331 (null? lst1)))
      (if a116331
        lst2
        (let ((a116332 (car lst1)))
          (let ((a116333 (cdr lst1)))
            (let ((a116334 (append a116333 lst2))) (cons a116332 a116334)))))))
  (define (hash . lst) (let ((x116335 (apply-prim hash lst))) x116335))
  (define (hash-ref h k) (let ((x116336 (prim hash-ref h k))) x116336))
  (define (hash-set h k v) (let ((x116337 (prim hash-set h k v))) x116337))
  (define (hash-has-key? h k)
    (let ((x116338 (prim hash-has-key? h k))) x116338))
  (define (hash-count h) (let ((x116339 (prim hash-count h))) x116339))
  (define (call)
    (let ((a116340 '1))
      (let ((a116341 '2))
        (let ((a116342 '3))
          (let ((a116343 '4))
            (let ((a116344 '5))
              (let ((a116345 '100))
                (<= a116340 a116341 a116342 a116343 a116344 a116345))))))))
  (define (brouhaha_main) (let ((x116346 (call))) x116346)))
