'((define (+ . lst)
    (let ((kont122250 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122160 (apply-prim + lst))) (kont122250 x122160)))))
  (define (- . lst)
    (let ((kont122252 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122161 (apply-prim - lst))) (kont122252 x122161)))))
  (define (* . lst)
    (let ((kont122254 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122162 (apply-prim * lst))) (kont122254 x122162)))))
  (define (modulo kont122256 a b)
    (let ((x122163 (prim modulo a b))) (kont122256 x122163)))
  (define (/ . lst)
    (let ((kont122257 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122164 (apply-prim / lst))) (kont122257 x122164)))))
  (define (= . lst)
    (let ((kont122259 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122165 (apply-prim = lst))) (kont122259 x122165)))))
  (define (> . lst)
    (let ((kont122261 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122166 (apply-prim > lst))) (kont122261 x122166)))))
  (define (< . lst)
    (let ((kont122263 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122167 (apply-prim < lst))) (kont122263 x122167)))))
  (define (<= . lst)
    (let ((kont122265 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122168 (apply-prim <= lst))) (kont122265 x122168)))))
  (define (>= . lst)
    (let ((kont122267 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122169 (apply-prim >= lst))) (kont122267 x122169)))))
  (define (null? kont122269 x)
    (let ((x122170 (prim null? x))) (kont122269 x122170)))
  (define (equal? kont122270 x y)
    (let ((x122171 (prim equal? x y))) (kont122270 x122171)))
  (define (eq? kont122271 x y)
    (let ((x122172 (prim eq? x y))) (kont122271 x122172)))
  (define (cons kont122272 a b)
    (let ((x122173 (prim cons a b))) (kont122272 x122173)))
  (define (car kont122273 lst)
    (let ((x122174 (prim car lst))) (kont122273 x122174)))
  (define (cdr kont122274 lst)
    (let ((x122175 (prim cdr lst))) (kont122274 x122175)))
  (define (even? kont122275 x)
    (let ((a122176 '0))
      (let ((a122177 '2))
        (let ((f122276 (lambda (a122178) (equal? kont122275 a122176 a122178))))
          (modulo f122276 x a122177)))))
  (define (odd? kont122277 x)
    (let ((a122179 '1))
      (let ((a122180 '2))
        (let ((f122278 (lambda (a122181) (equal? kont122277 a122179 a122181))))
          (modulo f122278 x a122180)))))
  (define (list . x)
    (let ((kont122279 (prim car x))) (let ((x (prim cdr x))) (kont122279 x))))
  (define (member? kont122281 x lst)
    (let ((f122285
           (lambda (a122182)
             (if a122182
               (let ((x122183 '#f)) (kont122281 x122183))
               (let ((f122284
                      (lambda (a122184)
                        (let ((f122283
                               (lambda (a122185)
                                 (if a122185
                                   (let ((x122186 '#t)) (kont122281 x122186))
                                   (let ((f122282
                                          (lambda (a122187)
                                            (member? kont122281 x a122187))))
                                     (cdr f122282 lst))))))
                          (equal? f122283 a122184 x)))))
                 (car f122284 lst))))))
      (null? f122285 lst)))
  (define (foldl kont122286 fun acc lst)
    (let ((f122290
           (lambda (a122188)
             (if a122188
               (kont122286 acc)
               (let ((f122289
                      (lambda (a122189)
                        (let ((f122288
                               (lambda (a122190)
                                 (let ((f122287
                                        (lambda (a122191)
                                          (foldl
                                           kont122286
                                           fun
                                           a122190
                                           a122191))))
                                   (cdr f122287 lst)))))
                          (fun f122288 a122189 acc)))))
                 (car f122289 lst))))))
      (null? f122290 lst)))
  (define (reverse-helper kont122291 lst lst2)
    (let ((f122295
           (lambda (a122192)
             (if a122192
               (kont122291 lst2)
               (let ((f122294
                      (lambda (a122193)
                        (let ((f122293
                               (lambda (a122194)
                                 (let ((f122292
                                        (lambda (a122195)
                                          (reverse-helper
                                           kont122291
                                           a122193
                                           a122195))))
                                   (cons f122292 a122194 lst2)))))
                          (car f122293 lst)))))
                 (cdr f122294 lst))))))
      (null? f122295 lst)))
  (define (reverse kont122296 lst)
    (let ((f122297 (lambda (a122196) (reverse-helper kont122296 lst a122196))))
      (list f122297)))
  (define (take-helper kont122298 lst n lst2)
    (let ((a122197 '0))
      (let ((f122304
             (lambda (a122198)
               (if a122198
                 (let ((f122299 (lambda (x122199) (kont122298 x122199))))
                   (reverse f122299 lst2))
                 (let ((f122303
                        (lambda (a122200)
                          (let ((a122201 '1))
                            (let ((f122302
                                   (lambda (a122202)
                                     (let ((f122301
                                            (lambda (a122203)
                                              (let ((f122300
                                                     (lambda (a122204)
                                                       (take-helper
                                                        kont122298
                                                        a122200
                                                        a122202
                                                        a122204))))
                                                (cons f122300 a122203 lst2)))))
                                       (car f122301 lst)))))
                              (- f122302 n a122201))))))
                   (cdr f122303 lst))))))
        (= f122304 n a122197))))
  (define (take kont122305 lst n)
    (let ((f122306 (lambda (a122205) (take-helper kont122305 lst n a122205))))
      (list f122306)))
  (define (length kont122307 lst)
    (let ((f122310
           (lambda (a122206)
             (if a122206
               (let ((x122207 '0)) (kont122307 x122207))
               (let ((a122208 '1))
                 (let ((f122309
                        (lambda (a122209)
                          (let ((f122308
                                 (lambda (a122210)
                                   (+ kont122307 a122208 a122210))))
                            (length f122308 a122209)))))
                   (cdr f122309 lst)))))))
      (null? f122310 lst)))
  (define (map kont122311 proc lst)
    (let ((f122317
           (lambda (a122211)
             (if a122211
               (let ((f122312 (lambda (x122212) (kont122311 x122212))))
                 (list f122312))
               (let ((f122316
                      (lambda (a122213)
                        (let ((f122315
                               (lambda (a122214)
                                 (let ((f122314
                                        (lambda (a122215)
                                          (let ((f122313
                                                 (lambda (a122216)
                                                   (cons
                                                    kont122311
                                                    a122214
                                                    a122216))))
                                            (map f122313 proc a122215)))))
                                   (cdr f122314 lst)))))
                          (proc f122315 a122213)))))
                 (car f122316 lst))))))
      (null? f122317 lst)))
  (define (filter kont122318 op lst)
    (let ((f122326
           (lambda (a122217)
             (if a122217
               (let ((f122319 (lambda (x122218) (kont122318 x122218))))
                 (list f122319))
               (let ((f122325
                      (lambda (a122219)
                        (let ((f122324
                               (lambda (a122220)
                                 (if a122220
                                   (let ((f122322
                                          (lambda (a122221)
                                            (let ((f122321
                                                   (lambda (a122222)
                                                     (let ((f122320
                                                            (lambda (a122223)
                                                              (cons
                                                               kont122318
                                                               a122221
                                                               a122223))))
                                                       (filter
                                                        f122320
                                                        op
                                                        a122222)))))
                                              (cdr f122321 lst)))))
                                     (car f122322 lst))
                                   (let ((f122323
                                          (lambda (a122224)
                                            (filter kont122318 op a122224))))
                                     (cdr f122323 lst))))))
                          (op f122324 a122219)))))
                 (car f122325 lst))))))
      (null? f122326 lst)))
  (define (drop kont122327 lst n)
    (let ((a122225 '0))
      (let ((f122330
             (lambda (a122226)
               (if a122226
                 (kont122327 lst)
                 (let ((f122329
                        (lambda (a122227)
                          (let ((a122228 '1))
                            (let ((f122328
                                   (lambda (a122229)
                                     (drop kont122327 a122227 a122229))))
                              (- f122328 n a122228))))))
                   (cdr f122329 lst))))))
        (= f122330 n a122225))))
  (define (foldr kont122331 proc acc lst)
    (let ((f122335
           (lambda (a122230)
             (if a122230
               (kont122331 acc)
               (let ((f122334
                      (lambda (a122231)
                        (let ((f122333
                               (lambda (a122232)
                                 (let ((f122332
                                        (lambda (a122233)
                                          (proc kont122331 a122231 a122233))))
                                   (foldr f122332 proc acc a122232)))))
                          (cdr f122333 lst)))))
                 (car f122334 lst))))))
      (null? f122335 lst)))
  (define (append kont122336 lst1 lst2)
    (let ((f122340
           (lambda (a122234)
             (if a122234
               (kont122336 lst2)
               (let ((f122339
                      (lambda (a122235)
                        (let ((f122338
                               (lambda (a122236)
                                 (let ((f122337
                                        (lambda (a122237)
                                          (cons kont122336 a122235 a122237))))
                                   (append f122337 a122236 lst2)))))
                          (cdr f122338 lst1)))))
                 (car f122339 lst1))))))
      (null? f122340 lst1)))
  (define (hash . lst)
    (let ((kont122341 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x122238 (apply-prim hash lst))) (kont122341 x122238)))))
  (define (hash-ref kont122343 h k)
    (let ((x122239 (prim hash-ref h k))) (kont122343 x122239)))
  (define (hash-set kont122344 h k v)
    (let ((x122240 (prim hash-set h k v))) (kont122344 x122240)))
  (define (hash-has-key? kont122345 h k)
    (let ((x122241 (prim hash-has-key? h k))) (kont122345 x122241)))
  (define (hash-count kont122346 h)
    (let ((x122242 (prim hash-count h))) (kont122346 x122242)))
  (define (call kont122347)
    (let ((a122243 '1))
      (let ((a122244 '2))
        (let ((a122245 '3))
          (let ((a122246 '4))
            (let ((a122247 '5))
              (let ((a122248 '100))
                (<=
                 kont122347
                 a122243
                 a122244
                 a122245
                 a122246
                 a122247
                 a122248))))))))
  (define (brouhaha_main kont122348)
    (let ((f122349 (lambda (x122249) (kont122348 x122249)))) (call f122349))))
