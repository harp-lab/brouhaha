'((define (+ . lst) (let ((x122160 (apply-prim + lst))) x122160))
  (define (- . lst) (let ((x122161 (apply-prim - lst))) x122161))
  (define (* . lst) (let ((x122162 (apply-prim * lst))) x122162))
  (define (modulo a b) (let ((x122163 (prim modulo a b))) x122163))
  (define (/ . lst) (let ((x122164 (apply-prim / lst))) x122164))
  (define (= . lst) (let ((x122165 (apply-prim = lst))) x122165))
  (define (> . lst) (let ((x122166 (apply-prim > lst))) x122166))
  (define (< . lst) (let ((x122167 (apply-prim < lst))) x122167))
  (define (<= . lst) (let ((x122168 (apply-prim <= lst))) x122168))
  (define (>= . lst) (let ((x122169 (apply-prim >= lst))) x122169))
  (define (null? x) (let ((x122170 (prim null? x))) x122170))
  (define (equal? x y) (let ((x122171 (prim equal? x y))) x122171))
  (define (eq? x y) (let ((x122172 (prim eq? x y))) x122172))
  (define (cons a b) (let ((x122173 (prim cons a b))) x122173))
  (define (car lst) (let ((x122174 (prim car lst))) x122174))
  (define (cdr lst) (let ((x122175 (prim cdr lst))) x122175))
  (define (even? x)
    (let ((a122176 '0))
      (let ((a122177 '2))
        (let ((a122178 (modulo x a122177))) (equal? a122176 a122178)))))
  (define (odd? x)
    (let ((a122179 '1))
      (let ((a122180 '2))
        (let ((a122181 (modulo x a122180))) (equal? a122179 a122181)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a122182 (null? lst)))
      (if a122182
        (let ((x122183 '#f)) x122183)
        (let ((a122184 (car lst)))
          (let ((a122185 (equal? a122184 x)))
            (if a122185
              (let ((x122186 '#t)) x122186)
              (let ((a122187 (cdr lst))) (member? x a122187))))))))
  (define (foldl fun acc lst)
    (let ((a122188 (null? lst)))
      (if a122188
        acc
        (let ((a122189 (car lst)))
          (let ((a122190 (fun a122189 acc)))
            (let ((a122191 (cdr lst))) (foldl fun a122190 a122191)))))))
  (define (reverse-helper lst lst2)
    (let ((a122192 (null? lst)))
      (if a122192
        lst2
        (let ((a122193 (cdr lst)))
          (let ((a122194 (car lst)))
            (let ((a122195 (cons a122194 lst2)))
              (reverse-helper a122193 a122195)))))))
  (define (reverse lst) (let ((a122196 (list))) (reverse-helper lst a122196)))
  (define (take-helper lst n lst2)
    (let ((a122197 '0))
      (let ((a122198 (= n a122197)))
        (if a122198
          (let ((x122199 (reverse lst2))) x122199)
          (let ((a122200 (cdr lst)))
            (let ((a122201 '1))
              (let ((a122202 (- n a122201)))
                (let ((a122203 (car lst)))
                  (let ((a122204 (cons a122203 lst2)))
                    (take-helper a122200 a122202 a122204))))))))))
  (define (take lst n) (let ((a122205 (list))) (take-helper lst n a122205)))
  (define (length lst)
    (let ((a122206 (null? lst)))
      (if a122206
        (let ((x122207 '0)) x122207)
        (let ((a122208 '1))
          (let ((a122209 (cdr lst)))
            (let ((a122210 (length a122209))) (+ a122208 a122210)))))))
  (define (map proc lst)
    (let ((a122211 (null? lst)))
      (if a122211
        (let ((x122212 (list))) x122212)
        (let ((a122213 (car lst)))
          (let ((a122214 (proc a122213)))
            (let ((a122215 (cdr lst)))
              (let ((a122216 (map proc a122215))) (cons a122214 a122216))))))))
  (define (filter op lst)
    (let ((a122217 (null? lst)))
      (if a122217
        (let ((x122218 (list))) x122218)
        (let ((a122219 (car lst)))
          (let ((a122220 (op a122219)))
            (if a122220
              (let ((a122221 (car lst)))
                (let ((a122222 (cdr lst)))
                  (let ((a122223 (filter op a122222)))
                    (cons a122221 a122223))))
              (let ((a122224 (cdr lst))) (filter op a122224))))))))
  (define (drop lst n)
    (let ((a122225 '0))
      (let ((a122226 (= n a122225)))
        (if a122226
          lst
          (let ((a122227 (cdr lst)))
            (let ((a122228 '1))
              (let ((a122229 (- n a122228))) (drop a122227 a122229))))))))
  (define (foldr proc acc lst)
    (let ((a122230 (null? lst)))
      (if a122230
        acc
        (let ((a122231 (car lst)))
          (let ((a122232 (cdr lst)))
            (let ((a122233 (foldr proc acc a122232)))
              (proc a122231 a122233)))))))
  (define (append lst1 lst2)
    (let ((a122234 (null? lst1)))
      (if a122234
        lst2
        (let ((a122235 (car lst1)))
          (let ((a122236 (cdr lst1)))
            (let ((a122237 (append a122236 lst2))) (cons a122235 a122237)))))))
  (define (hash . lst) (let ((x122238 (apply-prim hash lst))) x122238))
  (define (hash-ref h k) (let ((x122239 (prim hash-ref h k))) x122239))
  (define (hash-set h k v) (let ((x122240 (prim hash-set h k v))) x122240))
  (define (hash-has-key? h k)
    (let ((x122241 (prim hash-has-key? h k))) x122241))
  (define (hash-count h) (let ((x122242 (prim hash-count h))) x122242))
  (define (call)
    (let ((a122243 '1))
      (let ((a122244 '2))
        (let ((a122245 '3))
          (let ((a122246 '4))
            (let ((a122247 '5))
              (let ((a122248 '100))
                (<= a122243 a122244 a122245 a122246 a122247 a122248))))))))
  (define (brouhaha_main) (let ((x122249 (call))) x122249)))
