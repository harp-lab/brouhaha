(define (graph? glst)
  (let ((results (map (lambda (element)
                        (and (list? element)
                             (= 2 (length element))
                             (symbol? (car element))
                             (symbol? (car (cdr element)))))
                      glst)))
    (and (list? glst)
         (apply and results))))


(define (pagerank? pr)
  (and (hash? pr)
       (andmap symbol? (hash-keys pr))
       (andmap rational? (hash-values pr))
       (= 1 (foldl + 0 (hash-values pr)))))

(define uniques (set->list (apply set-union graph)))

(define (num-pages graph [nodes #f])
  (if (equal? nodes #t) 
    uniques
    (length uniques)))

(define (counter node)
  (if (equal? (car node) page) 
      1
      0))

(define (num-links graph page)
  (if (null? graph) 
      0
      (+ (counter (car graph)) (num-links (rest graph) page))))

(define (backlink? node page)
  (if (equal? (list-ref node 1) page) 
      #t
      #f))

(define (get-backlinks graph page [backlinks (set)])
  (if (null? graph) 
      backlinks
      (if (backlink? (car graph) page)
          (get-backlinks (rest graph) page (set-add backlinks (car (car graph))))
          (get-backlinks (rest graph) page backlinks))))

(define N (num-pages graph))
(define rhs (/ 1 N))
(define pages (apply set-union graph))
(define pr (make-immutable-hash (map (lambda (page) (cons page rhs)) pages)))

(define (mk-initial-pagerank graph)
  (if (pagerank? pr) 
      pr
      (error "Unexpected value: " pr)))

(define N (num-pages graph))

(define (sum-eq page)
  (define p (hash-ref pr page))
  (define l (num-links graph page))
  (/ p l))

(define (msum page)
  (foldl (lambda (x acc) (+ (sum-eq x) acc)) 0 (set->list (get-backlinks graph page))))

(define (step-pagerank pr d graph)
  (make-immutable-hash
   (map (lambda (page) `(,page . ,(+ (/ (- 1 d) N) (* d (msum page))))) (hash-keys pr))))

(define (ranker page)
  (list page (hash-ref pr page)))

(define pages (hash-keys pr))
(define pairs (map ranker pages))
(define ranked (sort pairs (lambda (a b) (< (cadr a) (cadr b)))))

(define (rank-pages pr)
  (map car ranked))

(define new-pr (step-pagerank pr d graph))
(define largest-change
  (foldl max 0 (map (lambda (x) (abs (- (hash-ref pr x) (hash-ref new-pr x)))) (hash-keys pr))))

(define (loop pr)
  (if (<= largest-change delta) 
      new-pr
      (loop new-pr)))

(define (iterate-pagerank-until pr d graph delta)
  (loop pr))

; move