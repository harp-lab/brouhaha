'((define (+ . lst) (let ((x42108 (apply-prim + lst))) x42108))
  (define (- . lst) (let ((x42109 (apply-prim - lst))) x42109))
  (define (* . lst) (let ((x42110 (apply-prim * lst))) x42110))
  (define (modulo a b) (let ((x42111 (prim modulo a b))) x42111))
  (define (/ . lst) (let ((x42112 (apply-prim / lst))) x42112))
  (define (= . lst) (let ((x42113 (apply-prim = lst))) x42113))
  (define (> . lst) (let ((x42114 (apply-prim > lst))) x42114))
  (define (< . lst) (let ((x42115 (apply-prim < lst))) x42115))
  (define (<= . lst) (let ((x42116 (apply-prim <= lst))) x42116))
  (define (>= . lst) (let ((x42117 (apply-prim >= lst))) x42117))
  (define (null? x) (let ((x42118 (prim null? x))) x42118))
  (define (equal? x y) (let ((x42119 (prim equal? x y))) x42119))
  (define (eq? x y) (let ((x42120 (prim eq? x y))) x42120))
  (define (cons a b) (let ((x42121 (prim cons a b))) x42121))
  (define (car lst) (let ((x42122 (prim car lst))) x42122))
  (define (cdr lst) (let ((x42123 (prim cdr lst))) x42123))
  (define (even? x)
    (let ((a42124 '0))
      (let ((a42125 '2))
        (let ((a42126 (modulo x a42125))) (equal? a42124 a42126)))))
  (define (odd? x)
    (let ((a42127 '1))
      (let ((a42128 '2))
        (let ((a42129 (modulo x a42128))) (equal? a42127 a42129)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a42130 (null? lst)))
      (if a42130
        (let ((x42131 '#f)) x42131)
        (let ((a42132 (car lst)))
          (let ((a42133 (equal? a42132 x)))
            (if a42133
              (let ((x42134 '#t)) x42134)
              (let ((a42135 (cdr lst))) (member? x a42135))))))))
  (define (foldl fun acc lst)
    (let ((a42136 (null? lst)))
      (if a42136
        acc
        (let ((a42137 (car lst)))
          (let ((a42138 (fun a42137 acc)))
            (let ((a42139 (cdr lst))) (foldl fun a42138 a42139)))))))
  (define (reverse-helper lst lst2)
    (let ((a42140 (null? lst)))
      (if a42140
        lst2
        (let ((a42141 (cdr lst)))
          (let ((a42142 (car lst)))
            (let ((a42143 (cons a42142 lst2)))
              (reverse-helper a42141 a42143)))))))
  (define (reverse lst) (let ((a42144 (list))) (reverse-helper lst a42144)))
  (define (take-helper lst n lst2)
    (let ((a42145 '0))
      (let ((a42146 (= n a42145)))
        (if a42146
          (let ((x42147 (reverse lst2))) x42147)
          (let ((a42148 (cdr lst)))
            (let ((a42149 '1))
              (let ((a42150 (- n a42149)))
                (let ((a42151 (car lst)))
                  (let ((a42152 (cons a42151 lst2)))
                    (take-helper a42148 a42150 a42152))))))))))
  (define (take lst n) (let ((a42153 (list))) (take-helper lst n a42153)))
  (define (length lst)
    (let ((a42154 (null? lst)))
      (if a42154
        (let ((x42155 '0)) x42155)
        (let ((a42156 '1))
          (let ((a42157 (cdr lst)))
            (let ((a42158 (length a42157))) (+ a42156 a42158)))))))
  (define (map proc lst)
    (let ((a42159 (null? lst)))
      (if a42159
        (let ((x42160 (list))) x42160)
        (let ((a42161 (car lst)))
          (let ((a42162 (proc a42161)))
            (let ((a42163 (cdr lst)))
              (let ((a42164 (map proc a42163))) (cons a42162 a42164))))))))
  (define (filter op lst)
    (let ((a42165 (null? lst)))
      (if a42165
        (let ((x42166 (list))) x42166)
        (let ((a42167 (car lst)))
          (let ((a42168 (op a42167)))
            (if a42168
              (let ((a42169 (car lst)))
                (let ((a42170 (cdr lst)))
                  (let ((a42171 (filter op a42170))) (cons a42169 a42171))))
              (let ((a42172 (cdr lst))) (filter op a42172))))))))
  (define (drop lst n)
    (let ((a42173 '0))
      (let ((a42174 (= n a42173)))
        (if a42174
          lst
          (let ((a42175 (cdr lst)))
            (let ((a42176 '1))
              (let ((a42177 (- n a42176))) (drop a42175 a42177))))))))
  (define (foldr proc acc lst)
    (let ((a42178 (null? lst)))
      (if a42178
        acc
        (let ((a42179 (car lst)))
          (let ((a42180 (cdr lst)))
            (let ((a42181 (foldr proc acc a42180))) (proc a42179 a42181)))))))
  (define (append lst1 lst2)
    (let ((a42182 (null? lst1)))
      (if a42182
        lst2
        (let ((a42183 (car lst1)))
          (let ((a42184 (cdr lst1)))
            (let ((a42185 (append a42184 lst2))) (cons a42183 a42185)))))))
  (define (hash . lst) (let ((x42186 (apply-prim hash lst))) x42186))
  (define (hash-ref h k) (let ((x42187 (prim hash-ref h k))) x42187))
  (define (hash-set h k v) (let ((x42188 (prim hash-set h k v))) x42188))
  (define (hash-has-key? h k) (let ((x42189 (prim hash-has-key? h k))) x42189))
  (define (hash-count h) (let ((x42190 (prim hash-count h))) x42190))
  (define (call)
    (let ((a42191 '1))
      (let ((a42192 '2))
        (let ((a42193 '3))
          (let ((a42194 (list a42191 a42192 a42193))) (filter odd? a42194))))))
  (define (brouhaha_main) (let ((x42195 (call))) x42195)))
