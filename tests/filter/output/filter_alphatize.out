'((define (+ . lst) (let ((x40297 (apply-prim + lst))) x40297))
  (define (- . lst) (let ((x40298 (apply-prim - lst))) x40298))
  (define (* . lst) (let ((x40299 (apply-prim * lst))) x40299))
  (define (modulo a b) (let ((x40300 (prim modulo a b))) x40300))
  (define (/ . lst) (let ((x40301 (apply-prim / lst))) x40301))
  (define (= . lst) (let ((x40302 (apply-prim = lst))) x40302))
  (define (> . lst) (let ((x40303 (apply-prim > lst))) x40303))
  (define (< . lst) (let ((x40304 (apply-prim < lst))) x40304))
  (define (<= . lst) (let ((x40305 (apply-prim <= lst))) x40305))
  (define (>= . lst) (let ((x40306 (apply-prim >= lst))) x40306))
  (define (null? x) (let ((x40307 (prim null? x))) x40307))
  (define (equal? x y) (let ((x40308 (prim equal? x y))) x40308))
  (define (eq? x y) (let ((x40309 (prim eq? x y))) x40309))
  (define (cons a b) (let ((x40310 (prim cons a b))) x40310))
  (define (car lst) (let ((x40311 (prim car lst))) x40311))
  (define (cdr lst) (let ((x40312 (prim cdr lst))) x40312))
  (define (even? x)
    (let ((a40313 '0))
      (let ((a40314 '2))
        (let ((a40315 (modulo x a40314))) (equal? a40313 a40315)))))
  (define (odd? x)
    (let ((a40316 '1))
      (let ((a40317 '2))
        (let ((a40318 (modulo x a40317))) (equal? a40316 a40318)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a40319 (null? lst)))
      (if a40319
        (let ((x40320 '#f)) x40320)
        (let ((a40321 (car lst)))
          (let ((a40322 (equal? a40321 x)))
            (if a40322
              (let ((x40323 '#t)) x40323)
              (let ((a40324 (cdr lst))) (member? x a40324))))))))
  (define (foldl fun acc lst)
    (let ((a40325 (null? lst)))
      (if a40325
        acc
        (let ((a40326 (car lst)))
          (let ((a40327 (fun a40326 acc)))
            (let ((a40328 (cdr lst))) (foldl fun a40327 a40328)))))))
  (define (reverse-helper lst lst2)
    (let ((a40329 (null? lst)))
      (if a40329
        lst2
        (let ((a40330 (cdr lst)))
          (let ((a40331 (car lst)))
            (let ((a40332 (cons a40331 lst2)))
              (reverse-helper a40330 a40332)))))))
  (define (reverse lst) (let ((a40333 (list))) (reverse-helper lst a40333)))
  (define (take-helper lst n lst2)
    (let ((a40334 '0))
      (let ((a40335 (= n a40334)))
        (if a40335
          (let ((x40336 (reverse lst2))) x40336)
          (let ((a40337 (cdr lst)))
            (let ((a40338 '1))
              (let ((a40339 (- n a40338)))
                (let ((a40340 (car lst)))
                  (let ((a40341 (cons a40340 lst2)))
                    (take-helper a40337 a40339 a40341))))))))))
  (define (take lst n) (let ((a40342 (list))) (take-helper lst n a40342)))
  (define (length lst)
    (let ((a40343 (null? lst)))
      (if a40343
        (let ((x40344 '0)) x40344)
        (let ((a40345 '1))
          (let ((a40346 (cdr lst)))
            (let ((a40347 (length a40346))) (+ a40345 a40347)))))))
  (define (map proc lst)
    (let ((a40348 (null? lst)))
      (if a40348
        (let ((x40349 (list))) x40349)
        (let ((a40350 (car lst)))
          (let ((a40351 (proc a40350)))
            (let ((a40352 (cdr lst)))
              (let ((a40353 (map proc a40352))) (cons a40351 a40353))))))))
  (define (filter op lst)
    (let ((a40354 (null? lst)))
      (if a40354
        (let ((x40355 (list))) x40355)
        (let ((a40356 (car lst)))
          (let ((a40357 (op a40356)))
            (if a40357
              (let ((a40358 (car lst)))
                (let ((a40359 (cdr lst)))
                  (let ((a40360 (filter op a40359))) (cons a40358 a40360))))
              (let ((a40361 (cdr lst))) (filter op a40361))))))))
  (define (drop lst n)
    (let ((a40362 '0))
      (let ((a40363 (= n a40362)))
        (if a40363
          lst
          (let ((a40364 (cdr lst)))
            (let ((a40365 '1))
              (let ((a40366 (- n a40365))) (drop a40364 a40366))))))))
  (define (foldr proc acc lst)
    (let ((a40367 (null? lst)))
      (if a40367
        acc
        (let ((a40368 (car lst)))
          (let ((a40369 (cdr lst)))
            (let ((a40370 (foldr proc acc a40369))) (proc a40368 a40370)))))))
  (define (append lst1 lst2)
    (let ((a40371 (null? lst1)))
      (if a40371
        lst2
        (let ((a40372 (car lst1)))
          (let ((a40373 (cdr lst1)))
            (let ((a40374 (append a40373 lst2))) (cons a40372 a40374)))))))
  (define (hash . lst) (let ((x40375 (apply-prim hash lst))) x40375))
  (define (hash-ref h k) (let ((x40376 (prim hash-ref h k))) x40376))
  (define (hash-set h k v) (let ((x40377 (prim hash-set h k v))) x40377))
  (define (hash-has-key? h k) (let ((x40378 (prim hash-has-key? h k))) x40378))
  (define (hash-count h) (let ((x40379 (prim hash-count h))) x40379))
  (define (call)
    (let ((a40380 '1))
      (let ((a40381 '2))
        (let ((a40382 '3))
          (let ((a40383 (list a40380 a40381 a40382))) (filter odd? a40383))))))
  (define (brouhaha_main) (let ((x40384 (call))) x40384)))
