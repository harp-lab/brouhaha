'((define (+ . lst)
    (let ((kont42196 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42108 (apply-prim + lst))) (kont42196 x42108)))))
  (define (- . lst)
    (let ((kont42198 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42109 (apply-prim - lst))) (kont42198 x42109)))))
  (define (* . lst)
    (let ((kont42200 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42110 (apply-prim * lst))) (kont42200 x42110)))))
  (define (modulo kont42202 a b)
    (let ((x42111 (prim modulo a b))) (kont42202 x42111)))
  (define (/ . lst)
    (let ((kont42203 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42112 (apply-prim / lst))) (kont42203 x42112)))))
  (define (= . lst)
    (let ((kont42205 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42113 (apply-prim = lst))) (kont42205 x42113)))))
  (define (> . lst)
    (let ((kont42207 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42114 (apply-prim > lst))) (kont42207 x42114)))))
  (define (< . lst)
    (let ((kont42209 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42115 (apply-prim < lst))) (kont42209 x42115)))))
  (define (<= . lst)
    (let ((kont42211 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42116 (apply-prim <= lst))) (kont42211 x42116)))))
  (define (>= . lst)
    (let ((kont42213 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42117 (apply-prim >= lst))) (kont42213 x42117)))))
  (define (null? kont42215 x)
    (let ((x42118 (prim null? x))) (kont42215 x42118)))
  (define (equal? kont42216 x y)
    (let ((x42119 (prim equal? x y))) (kont42216 x42119)))
  (define (eq? kont42217 x y)
    (let ((x42120 (prim eq? x y))) (kont42217 x42120)))
  (define (cons kont42218 a b)
    (let ((x42121 (prim cons a b))) (kont42218 x42121)))
  (define (car kont42219 lst)
    (let ((x42122 (prim car lst))) (kont42219 x42122)))
  (define (cdr kont42220 lst)
    (let ((x42123 (prim cdr lst))) (kont42220 x42123)))
  (define (even? kont42221 x)
    (let ((a42124 '0))
      (let ((a42125 '2))
        (let ((f42222 (lambda (a42126) (equal? kont42221 a42124 a42126))))
          (modulo f42222 x a42125)))))
  (define (odd? kont42223 x)
    (let ((a42127 '1))
      (let ((a42128 '2))
        (let ((f42224 (lambda (a42129) (equal? kont42223 a42127 a42129))))
          (modulo f42224 x a42128)))))
  (define (list . x)
    (let ((kont42225 (prim car x))) (let ((x (prim cdr x))) (kont42225 x))))
  (define (member? kont42227 x lst)
    (let ((f42231
           (lambda (a42130)
             (if a42130
               (let ((x42131 '#f)) (kont42227 x42131))
               (let ((f42230
                      (lambda (a42132)
                        (let ((f42229
                               (lambda (a42133)
                                 (if a42133
                                   (let ((x42134 '#t)) (kont42227 x42134))
                                   (let ((f42228
                                          (lambda (a42135)
                                            (member? kont42227 x a42135))))
                                     (cdr f42228 lst))))))
                          (equal? f42229 a42132 x)))))
                 (car f42230 lst))))))
      (null? f42231 lst)))
  (define (foldl kont42232 fun acc lst)
    (let ((f42236
           (lambda (a42136)
             (if a42136
               (kont42232 acc)
               (let ((f42235
                      (lambda (a42137)
                        (let ((f42234
                               (lambda (a42138)
                                 (let ((f42233
                                        (lambda (a42139)
                                          (foldl
                                           kont42232
                                           fun
                                           a42138
                                           a42139))))
                                   (cdr f42233 lst)))))
                          (fun f42234 a42137 acc)))))
                 (car f42235 lst))))))
      (null? f42236 lst)))
  (define (reverse-helper kont42237 lst lst2)
    (let ((f42241
           (lambda (a42140)
             (if a42140
               (kont42237 lst2)
               (let ((f42240
                      (lambda (a42141)
                        (let ((f42239
                               (lambda (a42142)
                                 (let ((f42238
                                        (lambda (a42143)
                                          (reverse-helper
                                           kont42237
                                           a42141
                                           a42143))))
                                   (cons f42238 a42142 lst2)))))
                          (car f42239 lst)))))
                 (cdr f42240 lst))))))
      (null? f42241 lst)))
  (define (reverse kont42242 lst)
    (let ((f42243 (lambda (a42144) (reverse-helper kont42242 lst a42144))))
      (list f42243)))
  (define (take-helper kont42244 lst n lst2)
    (let ((a42145 '0))
      (let ((f42250
             (lambda (a42146)
               (if a42146
                 (let ((f42245 (lambda (x42147) (kont42244 x42147))))
                   (reverse f42245 lst2))
                 (let ((f42249
                        (lambda (a42148)
                          (let ((a42149 '1))
                            (let ((f42248
                                   (lambda (a42150)
                                     (let ((f42247
                                            (lambda (a42151)
                                              (let ((f42246
                                                     (lambda (a42152)
                                                       (take-helper
                                                        kont42244
                                                        a42148
                                                        a42150
                                                        a42152))))
                                                (cons f42246 a42151 lst2)))))
                                       (car f42247 lst)))))
                              (- f42248 n a42149))))))
                   (cdr f42249 lst))))))
        (= f42250 n a42145))))
  (define (take kont42251 lst n)
    (let ((f42252 (lambda (a42153) (take-helper kont42251 lst n a42153))))
      (list f42252)))
  (define (length kont42253 lst)
    (let ((f42256
           (lambda (a42154)
             (if a42154
               (let ((x42155 '0)) (kont42253 x42155))
               (let ((a42156 '1))
                 (let ((f42255
                        (lambda (a42157)
                          (let ((f42254
                                 (lambda (a42158)
                                   (+ kont42253 a42156 a42158))))
                            (length f42254 a42157)))))
                   (cdr f42255 lst)))))))
      (null? f42256 lst)))
  (define (map kont42257 proc lst)
    (let ((f42263
           (lambda (a42159)
             (if a42159
               (let ((f42258 (lambda (x42160) (kont42257 x42160))))
                 (list f42258))
               (let ((f42262
                      (lambda (a42161)
                        (let ((f42261
                               (lambda (a42162)
                                 (let ((f42260
                                        (lambda (a42163)
                                          (let ((f42259
                                                 (lambda (a42164)
                                                   (cons
                                                    kont42257
                                                    a42162
                                                    a42164))))
                                            (map f42259 proc a42163)))))
                                   (cdr f42260 lst)))))
                          (proc f42261 a42161)))))
                 (car f42262 lst))))))
      (null? f42263 lst)))
  (define (filter kont42264 op lst)
    (let ((f42272
           (lambda (a42165)
             (if a42165
               (let ((f42265 (lambda (x42166) (kont42264 x42166))))
                 (list f42265))
               (let ((f42271
                      (lambda (a42167)
                        (let ((f42270
                               (lambda (a42168)
                                 (if a42168
                                   (let ((f42268
                                          (lambda (a42169)
                                            (let ((f42267
                                                   (lambda (a42170)
                                                     (let ((f42266
                                                            (lambda (a42171)
                                                              (cons
                                                               kont42264
                                                               a42169
                                                               a42171))))
                                                       (filter
                                                        f42266
                                                        op
                                                        a42170)))))
                                              (cdr f42267 lst)))))
                                     (car f42268 lst))
                                   (let ((f42269
                                          (lambda (a42172)
                                            (filter kont42264 op a42172))))
                                     (cdr f42269 lst))))))
                          (op f42270 a42167)))))
                 (car f42271 lst))))))
      (null? f42272 lst)))
  (define (drop kont42273 lst n)
    (let ((a42173 '0))
      (let ((f42276
             (lambda (a42174)
               (if a42174
                 (kont42273 lst)
                 (let ((f42275
                        (lambda (a42175)
                          (let ((a42176 '1))
                            (let ((f42274
                                   (lambda (a42177)
                                     (drop kont42273 a42175 a42177))))
                              (- f42274 n a42176))))))
                   (cdr f42275 lst))))))
        (= f42276 n a42173))))
  (define (foldr kont42277 proc acc lst)
    (let ((f42281
           (lambda (a42178)
             (if a42178
               (kont42277 acc)
               (let ((f42280
                      (lambda (a42179)
                        (let ((f42279
                               (lambda (a42180)
                                 (let ((f42278
                                        (lambda (a42181)
                                          (proc kont42277 a42179 a42181))))
                                   (foldr f42278 proc acc a42180)))))
                          (cdr f42279 lst)))))
                 (car f42280 lst))))))
      (null? f42281 lst)))
  (define (append kont42282 lst1 lst2)
    (let ((f42286
           (lambda (a42182)
             (if a42182
               (kont42282 lst2)
               (let ((f42285
                      (lambda (a42183)
                        (let ((f42284
                               (lambda (a42184)
                                 (let ((f42283
                                        (lambda (a42185)
                                          (cons kont42282 a42183 a42185))))
                                   (append f42283 a42184 lst2)))))
                          (cdr f42284 lst1)))))
                 (car f42285 lst1))))))
      (null? f42286 lst1)))
  (define (hash . lst)
    (let ((kont42287 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42186 (apply-prim hash lst))) (kont42287 x42186)))))
  (define (hash-ref kont42289 h k)
    (let ((x42187 (prim hash-ref h k))) (kont42289 x42187)))
  (define (hash-set kont42290 h k v)
    (let ((x42188 (prim hash-set h k v))) (kont42290 x42188)))
  (define (hash-has-key? kont42291 h k)
    (let ((x42189 (prim hash-has-key? h k))) (kont42291 x42189)))
  (define (hash-count kont42292 h)
    (let ((x42190 (prim hash-count h))) (kont42292 x42190)))
  (define (call kont42293)
    (let ((a42191 '1))
      (let ((a42192 '2))
        (let ((a42193 '3))
          (let ((f42294 (lambda (a42194) (filter kont42293 odd? a42194))))
            (list f42294 a42191 a42192 a42193))))))
  (define (brouhaha_main kont42295)
    (let ((f42296 (lambda (x42195) (kont42295 x42195)))) (call f42296))))
