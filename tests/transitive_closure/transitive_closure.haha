(define (g) (hash 0 (set 0 2 4 7 8 10 13 18 21) 1 (set 0 3 4 5 6 9 11 13) 2 (set 7 8 9 17 21 22) 3 (set 24 11 15) 4 (set 3 8 9 13 15 21 24) 5 (set 1 4 8 12 14 16 18 20) 6 (set 18 3 20) 7 (set 21) 8 (set 8) 9 (set 0 14 7) 10 (set 16 17) 11 (set 0 20 22) 12 (set 16 3 15) 13 (set 0 1 5 7 13 14 16 19 22) 14 (set 0 21 14) 15 (set 1 17 9 15) 16 (set 0 2 6 16 19 22 23 24) 17 (set 2 3 5 6 7 14 15 16 18 20 21 24) 18 (set 1 5 7 11 13 14 15 17 20 22 24) 19 (set 0 2 3 11 15 17 18 20 21) 20 (set 24) 21 (set 8 14 16 21 23) 22 (set 7 8 18 21 23 24) 23 (set 16) 24 (set 14)))

(define (iter-to-fixpoint f x)
  (let ([x+ (f x)])
    (if (equal? x x+)
        x
        (iter-to-fixpoint f x+))))

(define (add-edge g x y)
  (hash-set g x (set-add 
                      (if (hash-has-key? g x)
                            (hash-ref g x)
                            (set))
                    ; (hash-ref g x set) 
                                y)))

(define (f g)
  (foldl (lambda (a g+)
           (foldl (lambda (b g+)
                    (foldl (lambda (c g+)
                             (add-edge g+ a c))
                           g+
                           (if (hash-has-key? g b)
                            (set->list (hash-ref g b))
                            (set->list (set)))
                          ;  (set->list (hash-ref g b set))
                           ))
                  g+
                  (set->list (hash-ref g a))))
         g
         (hash-keys g)))

(define (transitive-closure g)
  (iter-to-fixpoint f g))

(define (call)
    (transitive-closure (g)))

(define (brouhaha_main)
    (call))