'((define (+ . lst) (let ((x29479 (apply-prim + lst))) x29479))
  (define (- . lst) (let ((x29480 (apply-prim - lst))) x29480))
  (define (* . lst) (let ((x29481 (apply-prim * lst))) x29481))
  (define (modulo a b) (let ((x29482 (prim modulo a b))) x29482))
  (define (/ . lst) (let ((x29483 (apply-prim / lst))) x29483))
  (define (= . lst) (let ((x29484 (apply-prim = lst))) x29484))
  (define (> . lst) (let ((x29485 (apply-prim > lst))) x29485))
  (define (< . lst) (let ((x29486 (apply-prim < lst))) x29486))
  (define (<= . lst) (let ((x29487 (apply-prim <= lst))) x29487))
  (define (>= . lst) (let ((x29488 (apply-prim >= lst))) x29488))
  (define (null? x) (let ((x29489 (prim null? x))) x29489))
  (define (equal? x y) (let ((x29490 (prim equal? x y))) x29490))
  (define (eq? x y) (let ((x29491 (prim eq? x y))) x29491))
  (define (cons a b) (let ((x29492 (prim cons a b))) x29492))
  (define (car lst) (let ((x29493 (prim car lst))) x29493))
  (define (cdr lst) (let ((x29494 (prim cdr lst))) x29494))
  (define (even? x)
    (let ((a29495 '0))
      (let ((a29496 '2))
        (let ((a29497 (modulo x a29496))) (equal? a29495 a29497)))))
  (define (odd? x)
    (let ((a29498 '1))
      (let ((a29499 '2))
        (let ((a29500 (modulo x a29499))) (equal? a29498 a29500)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a29501 (null? lst)))
      (if a29501
        (let ((x29502 '#f)) x29502)
        (let ((a29503 (car lst)))
          (let ((a29504 (equal? a29503 x)))
            (if a29504
              (let ((x29505 '#t)) x29505)
              (let ((a29506 (cdr lst))) (member? x a29506))))))))
  (define (foldl fun acc lst)
    (let ((a29507 (null? lst)))
      (if a29507
        acc
        (let ((a29508 (car lst)))
          (let ((a29509 (fun a29508 acc)))
            (let ((a29510 (cdr lst))) (foldl fun a29509 a29510)))))))
  (define (reverse-helper lst lst2)
    (let ((a29511 (null? lst)))
      (if a29511
        lst2
        (let ((a29512 (cdr lst)))
          (let ((a29513 (car lst)))
            (let ((a29514 (cons a29513 lst2)))
              (reverse-helper a29512 a29514)))))))
  (define (reverse lst) (let ((a29515 (list))) (reverse-helper lst a29515)))
  (define (take-helper lst n lst2)
    (let ((a29516 '0))
      (let ((a29517 (= n a29516)))
        (if a29517
          (let ((x29518 (reverse lst2))) x29518)
          (let ((a29519 (cdr lst)))
            (let ((a29520 '1))
              (let ((a29521 (- n a29520)))
                (let ((a29522 (car lst)))
                  (let ((a29523 (cons a29522 lst2)))
                    (take-helper a29519 a29521 a29523))))))))))
  (define (take lst n) (let ((a29524 (list))) (take-helper lst n a29524)))
  (define (length lst)
    (let ((a29525 (null? lst)))
      (if a29525
        (let ((x29526 '0)) x29526)
        (let ((a29527 '1))
          (let ((a29528 (cdr lst)))
            (let ((a29529 (length a29528))) (+ a29527 a29529)))))))
  (define (map proc lst)
    (let ((a29530 (null? lst)))
      (if a29530
        (let ((x29531 (list))) x29531)
        (let ((a29532 (car lst)))
          (let ((a29533 (proc a29532)))
            (let ((a29534 (cdr lst)))
              (let ((a29535 (map proc a29534))) (cons a29533 a29535))))))))
  (define (filter op lst)
    (let ((a29536 (null? lst)))
      (if a29536
        (let ((x29537 (list))) x29537)
        (let ((a29538 (car lst)))
          (let ((a29539 (op a29538)))
            (if a29539
              (let ((a29540 (car lst)))
                (let ((a29541 (cdr lst)))
                  (let ((a29542 (filter op a29541))) (cons a29540 a29542))))
              (let ((a29543 (cdr lst))) (filter op a29543))))))))
  (define (drop lst n)
    (let ((a29544 '0))
      (let ((a29545 (= n a29544)))
        (if a29545
          lst
          (let ((a29546 (cdr lst)))
            (let ((a29547 '1))
              (let ((a29548 (- n a29547))) (drop a29546 a29548))))))))
  (define (foldr proc acc lst)
    (let ((a29549 (null? lst)))
      (if a29549
        acc
        (let ((a29550 (car lst)))
          (let ((a29551 (cdr lst)))
            (let ((a29552 (foldr proc acc a29551))) (proc a29550 a29552)))))))
  (define (append lst1 lst2)
    (let ((a29553 (null? lst1)))
      (if a29553
        lst2
        (let ((a29554 (car lst1)))
          (let ((a29555 (cdr lst1)))
            (let ((a29556 (append a29555 lst2))) (cons a29554 a29556)))))))
  (define (hash . lst) (let ((x29557 (apply-prim hash lst))) x29557))
  (define (hash-ref h k) (let ((x29558 (prim hash-ref h k))) x29558))
  (define (hash-set h k v) (let ((x29559 (prim hash-set h k v))) x29559))
  (define (hash-has-key? h k) (let ((x29560 (prim hash-has-key? h k))) x29560))
  (define (hash-count h) (let ((x29561 (prim hash-count h))) x29561))
  (define (eq-test x y)
    (let ((a29562 (eq? x y)))
      (if a29562 (let ((x29563 '1)) x29563) (let ((x29564 '2)) x29564))))
  (define (brouhaha_main)
    (let ((a29565 '1)) (let ((a29566 '1)) (eq-test a29565 a29566)))))
