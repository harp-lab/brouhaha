'((define (+ . lst)
    (let ((kont30742 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30654 (apply-prim + lst))) (kont30742 x30654)))))
  (define (- . lst)
    (let ((kont30744 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30655 (apply-prim - lst))) (kont30744 x30655)))))
  (define (* . lst)
    (let ((kont30746 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30656 (apply-prim * lst))) (kont30746 x30656)))))
  (define (modulo kont30748 a b)
    (let ((x30657 (prim modulo a b))) (kont30748 x30657)))
  (define (/ . lst)
    (let ((kont30749 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30658 (apply-prim / lst))) (kont30749 x30658)))))
  (define (= . lst)
    (let ((kont30751 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30659 (apply-prim = lst))) (kont30751 x30659)))))
  (define (> . lst)
    (let ((kont30753 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30660 (apply-prim > lst))) (kont30753 x30660)))))
  (define (< . lst)
    (let ((kont30755 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30661 (apply-prim < lst))) (kont30755 x30661)))))
  (define (<= . lst)
    (let ((kont30757 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30662 (apply-prim <= lst))) (kont30757 x30662)))))
  (define (>= . lst)
    (let ((kont30759 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30663 (apply-prim >= lst))) (kont30759 x30663)))))
  (define (null? kont30761 x)
    (let ((x30664 (prim null? x))) (kont30761 x30664)))
  (define (equal? kont30762 x y)
    (let ((x30665 (prim equal? x y))) (kont30762 x30665)))
  (define (eq? kont30763 x y)
    (let ((x30666 (prim eq? x y))) (kont30763 x30666)))
  (define (cons kont30764 a b)
    (let ((x30667 (prim cons a b))) (kont30764 x30667)))
  (define (car kont30765 lst)
    (let ((x30668 (prim car lst))) (kont30765 x30668)))
  (define (cdr kont30766 lst)
    (let ((x30669 (prim cdr lst))) (kont30766 x30669)))
  (define (even? kont30767 x)
    (let ((a30670 '0))
      (let ((a30671 '2))
        (let ((f30768 (lambda (a30672) (equal? kont30767 a30670 a30672))))
          (modulo f30768 x a30671)))))
  (define (odd? kont30769 x)
    (let ((a30673 '1))
      (let ((a30674 '2))
        (let ((f30770 (lambda (a30675) (equal? kont30769 a30673 a30675))))
          (modulo f30770 x a30674)))))
  (define (list . x)
    (let ((kont30771 (prim car x))) (let ((x (prim cdr x))) (kont30771 x))))
  (define (member? kont30773 x lst)
    (let ((f30777
           (lambda (a30676)
             (if a30676
               (let ((x30677 '#f)) (kont30773 x30677))
               (let ((f30776
                      (lambda (a30678)
                        (let ((f30775
                               (lambda (a30679)
                                 (if a30679
                                   (let ((x30680 '#t)) (kont30773 x30680))
                                   (let ((f30774
                                          (lambda (a30681)
                                            (member? kont30773 x a30681))))
                                     (cdr f30774 lst))))))
                          (equal? f30775 a30678 x)))))
                 (car f30776 lst))))))
      (null? f30777 lst)))
  (define (foldl kont30778 fun acc lst)
    (let ((f30782
           (lambda (a30682)
             (if a30682
               (kont30778 acc)
               (let ((f30781
                      (lambda (a30683)
                        (let ((f30780
                               (lambda (a30684)
                                 (let ((f30779
                                        (lambda (a30685)
                                          (foldl
                                           kont30778
                                           fun
                                           a30684
                                           a30685))))
                                   (cdr f30779 lst)))))
                          (fun f30780 a30683 acc)))))
                 (car f30781 lst))))))
      (null? f30782 lst)))
  (define (reverse-helper kont30783 lst lst2)
    (let ((f30787
           (lambda (a30686)
             (if a30686
               (kont30783 lst2)
               (let ((f30786
                      (lambda (a30687)
                        (let ((f30785
                               (lambda (a30688)
                                 (let ((f30784
                                        (lambda (a30689)
                                          (reverse-helper
                                           kont30783
                                           a30687
                                           a30689))))
                                   (cons f30784 a30688 lst2)))))
                          (car f30785 lst)))))
                 (cdr f30786 lst))))))
      (null? f30787 lst)))
  (define (reverse kont30788 lst)
    (let ((f30789 (lambda (a30690) (reverse-helper kont30788 lst a30690))))
      (list f30789)))
  (define (take-helper kont30790 lst n lst2)
    (let ((a30691 '0))
      (let ((f30796
             (lambda (a30692)
               (if a30692
                 (let ((f30791 (lambda (x30693) (kont30790 x30693))))
                   (reverse f30791 lst2))
                 (let ((f30795
                        (lambda (a30694)
                          (let ((a30695 '1))
                            (let ((f30794
                                   (lambda (a30696)
                                     (let ((f30793
                                            (lambda (a30697)
                                              (let ((f30792
                                                     (lambda (a30698)
                                                       (take-helper
                                                        kont30790
                                                        a30694
                                                        a30696
                                                        a30698))))
                                                (cons f30792 a30697 lst2)))))
                                       (car f30793 lst)))))
                              (- f30794 n a30695))))))
                   (cdr f30795 lst))))))
        (= f30796 n a30691))))
  (define (take kont30797 lst n)
    (let ((f30798 (lambda (a30699) (take-helper kont30797 lst n a30699))))
      (list f30798)))
  (define (length kont30799 lst)
    (let ((f30802
           (lambda (a30700)
             (if a30700
               (let ((x30701 '0)) (kont30799 x30701))
               (let ((a30702 '1))
                 (let ((f30801
                        (lambda (a30703)
                          (let ((f30800
                                 (lambda (a30704)
                                   (+ kont30799 a30702 a30704))))
                            (length f30800 a30703)))))
                   (cdr f30801 lst)))))))
      (null? f30802 lst)))
  (define (map kont30803 proc lst)
    (let ((f30809
           (lambda (a30705)
             (if a30705
               (let ((f30804 (lambda (x30706) (kont30803 x30706))))
                 (list f30804))
               (let ((f30808
                      (lambda (a30707)
                        (let ((f30807
                               (lambda (a30708)
                                 (let ((f30806
                                        (lambda (a30709)
                                          (let ((f30805
                                                 (lambda (a30710)
                                                   (cons
                                                    kont30803
                                                    a30708
                                                    a30710))))
                                            (map f30805 proc a30709)))))
                                   (cdr f30806 lst)))))
                          (proc f30807 a30707)))))
                 (car f30808 lst))))))
      (null? f30809 lst)))
  (define (filter kont30810 op lst)
    (let ((f30818
           (lambda (a30711)
             (if a30711
               (let ((f30811 (lambda (x30712) (kont30810 x30712))))
                 (list f30811))
               (let ((f30817
                      (lambda (a30713)
                        (let ((f30816
                               (lambda (a30714)
                                 (if a30714
                                   (let ((f30814
                                          (lambda (a30715)
                                            (let ((f30813
                                                   (lambda (a30716)
                                                     (let ((f30812
                                                            (lambda (a30717)
                                                              (cons
                                                               kont30810
                                                               a30715
                                                               a30717))))
                                                       (filter
                                                        f30812
                                                        op
                                                        a30716)))))
                                              (cdr f30813 lst)))))
                                     (car f30814 lst))
                                   (let ((f30815
                                          (lambda (a30718)
                                            (filter kont30810 op a30718))))
                                     (cdr f30815 lst))))))
                          (op f30816 a30713)))))
                 (car f30817 lst))))))
      (null? f30818 lst)))
  (define (drop kont30819 lst n)
    (let ((a30719 '0))
      (let ((f30822
             (lambda (a30720)
               (if a30720
                 (kont30819 lst)
                 (let ((f30821
                        (lambda (a30721)
                          (let ((a30722 '1))
                            (let ((f30820
                                   (lambda (a30723)
                                     (drop kont30819 a30721 a30723))))
                              (- f30820 n a30722))))))
                   (cdr f30821 lst))))))
        (= f30822 n a30719))))
  (define (foldr kont30823 proc acc lst)
    (let ((f30827
           (lambda (a30724)
             (if a30724
               (kont30823 acc)
               (let ((f30826
                      (lambda (a30725)
                        (let ((f30825
                               (lambda (a30726)
                                 (let ((f30824
                                        (lambda (a30727)
                                          (proc kont30823 a30725 a30727))))
                                   (foldr f30824 proc acc a30726)))))
                          (cdr f30825 lst)))))
                 (car f30826 lst))))))
      (null? f30827 lst)))
  (define (append kont30828 lst1 lst2)
    (let ((f30832
           (lambda (a30728)
             (if a30728
               (kont30828 lst2)
               (let ((f30831
                      (lambda (a30729)
                        (let ((f30830
                               (lambda (a30730)
                                 (let ((f30829
                                        (lambda (a30731)
                                          (cons kont30828 a30729 a30731))))
                                   (append f30829 a30730 lst2)))))
                          (cdr f30830 lst1)))))
                 (car f30831 lst1))))))
      (null? f30832 lst1)))
  (define (hash . lst)
    (let ((kont30833 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30732 (apply-prim hash lst))) (kont30833 x30732)))))
  (define (hash-ref kont30835 h k)
    (let ((x30733 (prim hash-ref h k))) (kont30835 x30733)))
  (define (hash-set kont30836 h k v)
    (let ((x30734 (prim hash-set h k v))) (kont30836 x30734)))
  (define (hash-has-key? kont30837 h k)
    (let ((x30735 (prim hash-has-key? h k))) (kont30837 x30735)))
  (define (hash-count kont30838 h)
    (let ((x30736 (prim hash-count h))) (kont30838 x30736)))
  (define (eq-test kont30839 x y)
    (let ((f30840
           (lambda (a30737)
             (if a30737
               (let ((x30738 '1)) (kont30839 x30738))
               (let ((x30739 '2)) (kont30839 x30739))))))
      (eq? f30840 x y)))
  (define (brouhaha_main kont30841)
    (let ((a30740 '1)) (let ((a30741 '1)) (eq-test kont30841 a30740 a30741)))))
