'((define (+ . lst) (let ((x30654 (apply-prim + lst))) x30654))
  (define (- . lst) (let ((x30655 (apply-prim - lst))) x30655))
  (define (* . lst) (let ((x30656 (apply-prim * lst))) x30656))
  (define (modulo a b) (let ((x30657 (prim modulo a b))) x30657))
  (define (/ . lst) (let ((x30658 (apply-prim / lst))) x30658))
  (define (= . lst) (let ((x30659 (apply-prim = lst))) x30659))
  (define (> . lst) (let ((x30660 (apply-prim > lst))) x30660))
  (define (< . lst) (let ((x30661 (apply-prim < lst))) x30661))
  (define (<= . lst) (let ((x30662 (apply-prim <= lst))) x30662))
  (define (>= . lst) (let ((x30663 (apply-prim >= lst))) x30663))
  (define (null? x) (let ((x30664 (prim null? x))) x30664))
  (define (equal? x y) (let ((x30665 (prim equal? x y))) x30665))
  (define (eq? x y) (let ((x30666 (prim eq? x y))) x30666))
  (define (cons a b) (let ((x30667 (prim cons a b))) x30667))
  (define (car lst) (let ((x30668 (prim car lst))) x30668))
  (define (cdr lst) (let ((x30669 (prim cdr lst))) x30669))
  (define (even? x)
    (let ((a30670 '0))
      (let ((a30671 '2))
        (let ((a30672 (modulo x a30671))) (equal? a30670 a30672)))))
  (define (odd? x)
    (let ((a30673 '1))
      (let ((a30674 '2))
        (let ((a30675 (modulo x a30674))) (equal? a30673 a30675)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a30676 (null? lst)))
      (if a30676
        (let ((x30677 '#f)) x30677)
        (let ((a30678 (car lst)))
          (let ((a30679 (equal? a30678 x)))
            (if a30679
              (let ((x30680 '#t)) x30680)
              (let ((a30681 (cdr lst))) (member? x a30681))))))))
  (define (foldl fun acc lst)
    (let ((a30682 (null? lst)))
      (if a30682
        acc
        (let ((a30683 (car lst)))
          (let ((a30684 (fun a30683 acc)))
            (let ((a30685 (cdr lst))) (foldl fun a30684 a30685)))))))
  (define (reverse-helper lst lst2)
    (let ((a30686 (null? lst)))
      (if a30686
        lst2
        (let ((a30687 (cdr lst)))
          (let ((a30688 (car lst)))
            (let ((a30689 (cons a30688 lst2)))
              (reverse-helper a30687 a30689)))))))
  (define (reverse lst) (let ((a30690 (list))) (reverse-helper lst a30690)))
  (define (take-helper lst n lst2)
    (let ((a30691 '0))
      (let ((a30692 (= n a30691)))
        (if a30692
          (let ((x30693 (reverse lst2))) x30693)
          (let ((a30694 (cdr lst)))
            (let ((a30695 '1))
              (let ((a30696 (- n a30695)))
                (let ((a30697 (car lst)))
                  (let ((a30698 (cons a30697 lst2)))
                    (take-helper a30694 a30696 a30698))))))))))
  (define (take lst n) (let ((a30699 (list))) (take-helper lst n a30699)))
  (define (length lst)
    (let ((a30700 (null? lst)))
      (if a30700
        (let ((x30701 '0)) x30701)
        (let ((a30702 '1))
          (let ((a30703 (cdr lst)))
            (let ((a30704 (length a30703))) (+ a30702 a30704)))))))
  (define (map proc lst)
    (let ((a30705 (null? lst)))
      (if a30705
        (let ((x30706 (list))) x30706)
        (let ((a30707 (car lst)))
          (let ((a30708 (proc a30707)))
            (let ((a30709 (cdr lst)))
              (let ((a30710 (map proc a30709))) (cons a30708 a30710))))))))
  (define (filter op lst)
    (let ((a30711 (null? lst)))
      (if a30711
        (let ((x30712 (list))) x30712)
        (let ((a30713 (car lst)))
          (let ((a30714 (op a30713)))
            (if a30714
              (let ((a30715 (car lst)))
                (let ((a30716 (cdr lst)))
                  (let ((a30717 (filter op a30716))) (cons a30715 a30717))))
              (let ((a30718 (cdr lst))) (filter op a30718))))))))
  (define (drop lst n)
    (let ((a30719 '0))
      (let ((a30720 (= n a30719)))
        (if a30720
          lst
          (let ((a30721 (cdr lst)))
            (let ((a30722 '1))
              (let ((a30723 (- n a30722))) (drop a30721 a30723))))))))
  (define (foldr proc acc lst)
    (let ((a30724 (null? lst)))
      (if a30724
        acc
        (let ((a30725 (car lst)))
          (let ((a30726 (cdr lst)))
            (let ((a30727 (foldr proc acc a30726))) (proc a30725 a30727)))))))
  (define (append lst1 lst2)
    (let ((a30728 (null? lst1)))
      (if a30728
        lst2
        (let ((a30729 (car lst1)))
          (let ((a30730 (cdr lst1)))
            (let ((a30731 (append a30730 lst2))) (cons a30729 a30731)))))))
  (define (hash . lst) (let ((x30732 (apply-prim hash lst))) x30732))
  (define (hash-ref h k) (let ((x30733 (prim hash-ref h k))) x30733))
  (define (hash-set h k v) (let ((x30734 (prim hash-set h k v))) x30734))
  (define (hash-has-key? h k) (let ((x30735 (prim hash-has-key? h k))) x30735))
  (define (hash-count h) (let ((x30736 (prim hash-count h))) x30736))
  (define (eq-test x y)
    (let ((a30737 (eq? x y)))
      (if a30737 (let ((x30738 '1)) x30738) (let ((x30739 '2)) x30739))))
  (define (brouhaha_main)
    (let ((a30740 '1)) (let ((a30741 '1)) (eq-test a30740 a30741)))))
