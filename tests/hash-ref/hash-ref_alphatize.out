'((define (+ . lst) (let ((x60332 (apply-prim + lst))) x60332))
  (define (- . lst) (let ((x60333 (apply-prim - lst))) x60333))
  (define (* . lst) (let ((x60334 (apply-prim * lst))) x60334))
  (define (modulo a b) (let ((x60335 (prim modulo a b))) x60335))
  (define (/ . lst) (let ((x60336 (apply-prim / lst))) x60336))
  (define (= . lst) (let ((x60337 (apply-prim = lst))) x60337))
  (define (> . lst) (let ((x60338 (apply-prim > lst))) x60338))
  (define (< . lst) (let ((x60339 (apply-prim < lst))) x60339))
  (define (<= . lst) (let ((x60340 (apply-prim <= lst))) x60340))
  (define (>= . lst) (let ((x60341 (apply-prim >= lst))) x60341))
  (define (null? x) (let ((x60342 (prim null? x))) x60342))
  (define (equal? x y) (let ((x60343 (prim equal? x y))) x60343))
  (define (eq? x y) (let ((x60344 (prim eq? x y))) x60344))
  (define (cons a b) (let ((x60345 (prim cons a b))) x60345))
  (define (car lst) (let ((x60346 (prim car lst))) x60346))
  (define (cdr lst) (let ((x60347 (prim cdr lst))) x60347))
  (define (even? x)
    (let ((a60348 '0))
      (let ((a60349 '2))
        (let ((a60350 (modulo x a60349))) (equal? a60348 a60350)))))
  (define (odd? x)
    (let ((a60351 '1))
      (let ((a60352 '2))
        (let ((a60353 (modulo x a60352))) (equal? a60351 a60353)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a60354 (null? lst)))
      (if a60354
        (let ((x60355 '#f)) x60355)
        (let ((a60356 (car lst)))
          (let ((a60357 (equal? a60356 x)))
            (if a60357
              (let ((x60358 '#t)) x60358)
              (let ((a60359 (cdr lst))) (member? x a60359))))))))
  (define (foldl fun acc lst)
    (let ((a60360 (null? lst)))
      (if a60360
        acc
        (let ((a60361 (car lst)))
          (let ((a60362 (fun a60361 acc)))
            (let ((a60363 (cdr lst))) (foldl fun a60362 a60363)))))))
  (define (reverse-helper lst lst2)
    (let ((a60364 (null? lst)))
      (if a60364
        lst2
        (let ((a60365 (cdr lst)))
          (let ((a60366 (car lst)))
            (let ((a60367 (cons a60366 lst2)))
              (reverse-helper a60365 a60367)))))))
  (define (reverse lst) (let ((a60368 (list))) (reverse-helper lst a60368)))
  (define (take-helper lst n lst2)
    (let ((a60369 '0))
      (let ((a60370 (= n a60369)))
        (if a60370
          (let ((x60371 (reverse lst2))) x60371)
          (let ((a60372 (cdr lst)))
            (let ((a60373 '1))
              (let ((a60374 (- n a60373)))
                (let ((a60375 (car lst)))
                  (let ((a60376 (cons a60375 lst2)))
                    (take-helper a60372 a60374 a60376))))))))))
  (define (take lst n) (let ((a60377 (list))) (take-helper lst n a60377)))
  (define (length lst)
    (let ((a60378 (null? lst)))
      (if a60378
        (let ((x60379 '0)) x60379)
        (let ((a60380 '1))
          (let ((a60381 (cdr lst)))
            (let ((a60382 (length a60381))) (+ a60380 a60382)))))))
  (define (map proc lst)
    (let ((a60383 (null? lst)))
      (if a60383
        (let ((x60384 (list))) x60384)
        (let ((a60385 (car lst)))
          (let ((a60386 (proc a60385)))
            (let ((a60387 (cdr lst)))
              (let ((a60388 (map proc a60387))) (cons a60386 a60388))))))))
  (define (filter op lst)
    (let ((a60389 (null? lst)))
      (if a60389
        (let ((x60390 (list))) x60390)
        (let ((a60391 (car lst)))
          (let ((a60392 (op a60391)))
            (if a60392
              (let ((a60393 (car lst)))
                (let ((a60394 (cdr lst)))
                  (let ((a60395 (filter op a60394))) (cons a60393 a60395))))
              (let ((a60396 (cdr lst))) (filter op a60396))))))))
  (define (drop lst n)
    (let ((a60397 '0))
      (let ((a60398 (= n a60397)))
        (if a60398
          lst
          (let ((a60399 (cdr lst)))
            (let ((a60400 '1))
              (let ((a60401 (- n a60400))) (drop a60399 a60401))))))))
  (define (foldr proc acc lst)
    (let ((a60402 (null? lst)))
      (if a60402
        acc
        (let ((a60403 (car lst)))
          (let ((a60404 (cdr lst)))
            (let ((a60405 (foldr proc acc a60404))) (proc a60403 a60405)))))))
  (define (append lst1 lst2)
    (let ((a60406 (null? lst1)))
      (if a60406
        lst2
        (let ((a60407 (car lst1)))
          (let ((a60408 (cdr lst1)))
            (let ((a60409 (append a60408 lst2))) (cons a60407 a60409)))))))
  (define (hash . lst) (let ((x60410 (apply-prim hash lst))) x60410))
  (define (hash-ref h k) (let ((x60411 (prim hash-ref h k))) x60411))
  (define (hash-set h k v) (let ((x60412 (prim hash-set h k v))) x60412))
  (define (hash-has-key? h k) (let ((x60413 (prim hash-has-key? h k))) x60413))
  (define (hash-count h) (let ((x60414 (prim hash-count h))) x60414))
  (define (call)
    (let ((a60415 "work"))
      (let ((a60416 '80))
        (let ((a60417 '10))
          (let ((a60418 "lmao"))
            (let ((a60419 (hash a60415 a60416 a60417 a60418)))
              (let ((a60420 '10)) (hash-ref a60419 a60420))))))))
  (define (brouhaha_main) (let ((x60421 (call))) x60421)))
