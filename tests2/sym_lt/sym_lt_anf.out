'((define (+ . lst)
    (let ((kont58224 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58134 (apply-prim + lst))) (kont58224 x58134)))))
  (define (- . lst)
    (let ((kont58226 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58135 (apply-prim - lst))) (kont58226 x58135)))))
  (define (* . lst)
    (let ((kont58228 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58136 (apply-prim * lst))) (kont58228 x58136)))))
  (define (modulo kont58230 a b)
    (let ((x58137 (prim modulo a b))) (kont58230 x58137)))
  (define (/ . lst)
    (let ((kont58231 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58138 (apply-prim / lst))) (kont58231 x58138)))))
  (define (= . lst)
    (let ((kont58233 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58139 (apply-prim = lst))) (kont58233 x58139)))))
  (define (> . lst)
    (let ((kont58235 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58140 (apply-prim > lst))) (kont58235 x58140)))))
  (define (< . lst)
    (let ((kont58237 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58141 (apply-prim < lst))) (kont58237 x58141)))))
  (define (<= . lst)
    (let ((kont58239 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58142 (apply-prim <= lst))) (kont58239 x58142)))))
  (define (>= . lst)
    (let ((kont58241 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58143 (apply-prim >= lst))) (kont58241 x58143)))))
  (define (null? kont58243 x)
    (let ((x58144 (prim null? x))) (kont58243 x58144)))
  (define (equal? kont58244 x y)
    (let ((x58145 (prim equal? x y))) (kont58244 x58145)))
  (define (eq? kont58245 x y)
    (let ((x58146 (prim eq? x y))) (kont58245 x58146)))
  (define (cons kont58246 a b)
    (let ((x58147 (prim cons a b))) (kont58246 x58147)))
  (define (car kont58247 lst)
    (let ((x58148 (prim car lst))) (kont58247 x58148)))
  (define (cdr kont58248 lst)
    (let ((x58149 (prim cdr lst))) (kont58248 x58149)))
  (define (even? kont58249 x)
    (let ((a58150 '0))
      (let ((a58151 '2))
        (let ((f58250 (lambda (a58152) (equal? kont58249 a58150 a58152))))
          (modulo f58250 x a58151)))))
  (define (odd? kont58251 x)
    (let ((a58153 '1))
      (let ((a58154 '2))
        (let ((f58252 (lambda (a58155) (equal? kont58251 a58153 a58155))))
          (modulo f58252 x a58154)))))
  (define (list . x)
    (let ((kont58253 (prim car x))) (let ((x (prim cdr x))) (kont58253 x))))
  (define (member? kont58255 x lst)
    (let ((f58259
           (lambda (a58156)
             (if a58156
               (let ((x58157 '#f)) (kont58255 x58157))
               (let ((f58258
                      (lambda (a58158)
                        (let ((f58257
                               (lambda (a58159)
                                 (if a58159
                                   (let ((x58160 '#t)) (kont58255 x58160))
                                   (let ((f58256
                                          (lambda (a58161)
                                            (member? kont58255 x a58161))))
                                     (cdr f58256 lst))))))
                          (equal? f58257 a58158 x)))))
                 (car f58258 lst))))))
      (null? f58259 lst)))
  (define (foldl kont58260 fun acc lst)
    (let ((f58264
           (lambda (a58162)
             (if a58162
               (kont58260 acc)
               (let ((f58263
                      (lambda (a58163)
                        (let ((f58262
                               (lambda (a58164)
                                 (let ((f58261
                                        (lambda (a58165)
                                          (foldl
                                           kont58260
                                           fun
                                           a58164
                                           a58165))))
                                   (cdr f58261 lst)))))
                          (fun f58262 a58163 acc)))))
                 (car f58263 lst))))))
      (null? f58264 lst)))
  (define (reverse-helper kont58265 lst lst2)
    (let ((f58269
           (lambda (a58166)
             (if a58166
               (kont58265 lst2)
               (let ((f58268
                      (lambda (a58167)
                        (let ((f58267
                               (lambda (a58168)
                                 (let ((f58266
                                        (lambda (a58169)
                                          (reverse-helper
                                           kont58265
                                           a58167
                                           a58169))))
                                   (cons f58266 a58168 lst2)))))
                          (car f58267 lst)))))
                 (cdr f58268 lst))))))
      (null? f58269 lst)))
  (define (reverse kont58270 lst)
    (let ((f58271 (lambda (a58170) (reverse-helper kont58270 lst a58170))))
      (list f58271)))
  (define (take-helper kont58272 lst n lst2)
    (let ((a58171 '0))
      (let ((f58278
             (lambda (a58172)
               (if a58172
                 (let ((f58273 (lambda (x58173) (kont58272 x58173))))
                   (reverse f58273 lst2))
                 (let ((f58277
                        (lambda (a58174)
                          (let ((a58175 '1))
                            (let ((f58276
                                   (lambda (a58176)
                                     (let ((f58275
                                            (lambda (a58177)
                                              (let ((f58274
                                                     (lambda (a58178)
                                                       (take-helper
                                                        kont58272
                                                        a58174
                                                        a58176
                                                        a58178))))
                                                (cons f58274 a58177 lst2)))))
                                       (car f58275 lst)))))
                              (- f58276 n a58175))))))
                   (cdr f58277 lst))))))
        (= f58278 n a58171))))
  (define (take kont58279 lst n)
    (let ((f58280 (lambda (a58179) (take-helper kont58279 lst n a58179))))
      (list f58280)))
  (define (length kont58281 lst)
    (let ((f58284
           (lambda (a58180)
             (if a58180
               (let ((x58181 '0)) (kont58281 x58181))
               (let ((a58182 '1))
                 (let ((f58283
                        (lambda (a58183)
                          (let ((f58282
                                 (lambda (a58184)
                                   (+ kont58281 a58182 a58184))))
                            (length f58282 a58183)))))
                   (cdr f58283 lst)))))))
      (null? f58284 lst)))
  (define (map kont58285 proc lst)
    (let ((f58291
           (lambda (a58185)
             (if a58185
               (let ((f58286 (lambda (x58186) (kont58285 x58186))))
                 (list f58286))
               (let ((f58290
                      (lambda (a58187)
                        (let ((f58289
                               (lambda (a58188)
                                 (let ((f58288
                                        (lambda (a58189)
                                          (let ((f58287
                                                 (lambda (a58190)
                                                   (cons
                                                    kont58285
                                                    a58188
                                                    a58190))))
                                            (map f58287 proc a58189)))))
                                   (cdr f58288 lst)))))
                          (proc f58289 a58187)))))
                 (car f58290 lst))))))
      (null? f58291 lst)))
  (define (filter kont58292 op lst)
    (let ((f58300
           (lambda (a58191)
             (if a58191
               (let ((f58293 (lambda (x58192) (kont58292 x58192))))
                 (list f58293))
               (let ((f58299
                      (lambda (a58193)
                        (let ((f58298
                               (lambda (a58194)
                                 (if a58194
                                   (let ((f58296
                                          (lambda (a58195)
                                            (let ((f58295
                                                   (lambda (a58196)
                                                     (let ((f58294
                                                            (lambda (a58197)
                                                              (cons
                                                               kont58292
                                                               a58195
                                                               a58197))))
                                                       (filter
                                                        f58294
                                                        op
                                                        a58196)))))
                                              (cdr f58295 lst)))))
                                     (car f58296 lst))
                                   (let ((f58297
                                          (lambda (a58198)
                                            (filter kont58292 op a58198))))
                                     (cdr f58297 lst))))))
                          (op f58298 a58193)))))
                 (car f58299 lst))))))
      (null? f58300 lst)))
  (define (drop kont58301 lst n)
    (let ((a58199 '0))
      (let ((f58304
             (lambda (a58200)
               (if a58200
                 (kont58301 lst)
                 (let ((f58303
                        (lambda (a58201)
                          (let ((a58202 '1))
                            (let ((f58302
                                   (lambda (a58203)
                                     (drop kont58301 a58201 a58203))))
                              (- f58302 n a58202))))))
                   (cdr f58303 lst))))))
        (= f58304 n a58199))))
  (define (foldr kont58305 proc acc lst)
    (let ((f58309
           (lambda (a58204)
             (if a58204
               (kont58305 acc)
               (let ((f58308
                      (lambda (a58205)
                        (let ((f58307
                               (lambda (a58206)
                                 (let ((f58306
                                        (lambda (a58207)
                                          (proc kont58305 a58205 a58207))))
                                   (foldr f58306 proc acc a58206)))))
                          (cdr f58307 lst)))))
                 (car f58308 lst))))))
      (null? f58309 lst)))
  (define (append kont58310 lst1 lst2)
    (let ((f58314
           (lambda (a58208)
             (if a58208
               (kont58310 lst2)
               (let ((f58313
                      (lambda (a58209)
                        (let ((f58312
                               (lambda (a58210)
                                 (let ((f58311
                                        (lambda (a58211)
                                          (cons kont58310 a58209 a58211))))
                                   (append f58311 a58210 lst2)))))
                          (cdr f58312 lst1)))))
                 (car f58313 lst1))))))
      (null? f58314 lst1)))
  (define (hash . lst)
    (let ((kont58315 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x58212 (apply-prim hash lst))) (kont58315 x58212)))))
  (define (hash-ref kont58317 h k)
    (let ((x58213 (prim hash-ref h k))) (kont58317 x58213)))
  (define (hash-set kont58318 h k v)
    (let ((x58214 (prim hash-set h k v))) (kont58318 x58214)))
  (define (hash-has-key? kont58319 h k)
    (let ((x58215 (prim hash-has-key? h k))) (kont58319 x58215)))
  (define (hash-count kont58320 h)
    (let ((x58216 (prim hash-count h))) (kont58320 x58216)))
  (define (call kont58321)
    (let ((a58217 '1))
      (let ((a58218 '2))
        (let ((a58219 '3))
          (let ((a58220 '4))
            (let ((a58221 '5))
              (let ((a58222 '100))
                (< kont58321 a58217 a58218 a58219 a58220 a58221 a58222))))))))
  (define (brouhaha_main kont58322)
    (let ((f58323 (lambda (x58223) (kont58322 x58223)))) (call f58323))))
