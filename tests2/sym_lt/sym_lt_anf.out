'((define (+ . lst)
    (let ((kont54688 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54598 (apply-prim + lst))) (kont54688 x54598)))))
  (define (- . lst)
    (let ((kont54690 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54599 (apply-prim - lst))) (kont54690 x54599)))))
  (define (* . lst)
    (let ((kont54692 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54600 (apply-prim * lst))) (kont54692 x54600)))))
  (define (modulo kont54694 a b)
    (let ((x54601 (prim modulo a b))) (kont54694 x54601)))
  (define (/ . lst)
    (let ((kont54695 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54602 (apply-prim / lst))) (kont54695 x54602)))))
  (define (= . lst)
    (let ((kont54697 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54603 (apply-prim = lst))) (kont54697 x54603)))))
  (define (> . lst)
    (let ((kont54699 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54604 (apply-prim > lst))) (kont54699 x54604)))))
  (define (< . lst)
    (let ((kont54701 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54605 (apply-prim < lst))) (kont54701 x54605)))))
  (define (<= . lst)
    (let ((kont54703 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54606 (apply-prim <= lst))) (kont54703 x54606)))))
  (define (>= . lst)
    (let ((kont54705 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54607 (apply-prim >= lst))) (kont54705 x54607)))))
  (define (null? kont54707 x)
    (let ((x54608 (prim null? x))) (kont54707 x54608)))
  (define (equal? kont54708 x y)
    (let ((x54609 (prim equal? x y))) (kont54708 x54609)))
  (define (eq? kont54709 x y)
    (let ((x54610 (prim eq? x y))) (kont54709 x54610)))
  (define (cons kont54710 a b)
    (let ((x54611 (prim cons a b))) (kont54710 x54611)))
  (define (car kont54711 lst)
    (let ((x54612 (prim car lst))) (kont54711 x54612)))
  (define (cdr kont54712 lst)
    (let ((x54613 (prim cdr lst))) (kont54712 x54613)))
  (define (even? kont54713 x)
    (let ((a54614 '0))
      (let ((a54615 '2))
        (let ((f54714 (lambda (a54616) (equal? kont54713 a54614 a54616))))
          (modulo f54714 x a54615)))))
  (define (odd? kont54715 x)
    (let ((a54617 '1))
      (let ((a54618 '2))
        (let ((f54716 (lambda (a54619) (equal? kont54715 a54617 a54619))))
          (modulo f54716 x a54618)))))
  (define (list . x)
    (let ((kont54717 (prim car x))) (let ((x (prim cdr x))) (kont54717 x))))
  (define (member? kont54719 x lst)
    (let ((f54723
           (lambda (a54620)
             (if a54620
               (let ((x54621 '#f)) (kont54719 x54621))
               (let ((f54722
                      (lambda (a54622)
                        (let ((f54721
                               (lambda (a54623)
                                 (if a54623
                                   (let ((x54624 '#t)) (kont54719 x54624))
                                   (let ((f54720
                                          (lambda (a54625)
                                            (member? kont54719 x a54625))))
                                     (cdr f54720 lst))))))
                          (equal? f54721 a54622 x)))))
                 (car f54722 lst))))))
      (null? f54723 lst)))
  (define (foldl kont54724 fun acc lst)
    (let ((f54728
           (lambda (a54626)
             (if a54626
               (kont54724 acc)
               (let ((f54727
                      (lambda (a54627)
                        (let ((f54726
                               (lambda (a54628)
                                 (let ((f54725
                                        (lambda (a54629)
                                          (foldl
                                           kont54724
                                           fun
                                           a54628
                                           a54629))))
                                   (cdr f54725 lst)))))
                          (fun f54726 a54627 acc)))))
                 (car f54727 lst))))))
      (null? f54728 lst)))
  (define (reverse-helper kont54729 lst lst2)
    (let ((f54733
           (lambda (a54630)
             (if a54630
               (kont54729 lst2)
               (let ((f54732
                      (lambda (a54631)
                        (let ((f54731
                               (lambda (a54632)
                                 (let ((f54730
                                        (lambda (a54633)
                                          (reverse-helper
                                           kont54729
                                           a54631
                                           a54633))))
                                   (cons f54730 a54632 lst2)))))
                          (car f54731 lst)))))
                 (cdr f54732 lst))))))
      (null? f54733 lst)))
  (define (reverse kont54734 lst)
    (let ((f54735 (lambda (a54634) (reverse-helper kont54734 lst a54634))))
      (list f54735)))
  (define (take-helper kont54736 lst n lst2)
    (let ((a54635 '0))
      (let ((f54742
             (lambda (a54636)
               (if a54636
                 (let ((f54737 (lambda (x54637) (kont54736 x54637))))
                   (reverse f54737 lst2))
                 (let ((f54741
                        (lambda (a54638)
                          (let ((a54639 '1))
                            (let ((f54740
                                   (lambda (a54640)
                                     (let ((f54739
                                            (lambda (a54641)
                                              (let ((f54738
                                                     (lambda (a54642)
                                                       (take-helper
                                                        kont54736
                                                        a54638
                                                        a54640
                                                        a54642))))
                                                (cons f54738 a54641 lst2)))))
                                       (car f54739 lst)))))
                              (- f54740 n a54639))))))
                   (cdr f54741 lst))))))
        (= f54742 n a54635))))
  (define (take kont54743 lst n)
    (let ((f54744 (lambda (a54643) (take-helper kont54743 lst n a54643))))
      (list f54744)))
  (define (length kont54745 lst)
    (let ((f54748
           (lambda (a54644)
             (if a54644
               (let ((x54645 '0)) (kont54745 x54645))
               (let ((a54646 '1))
                 (let ((f54747
                        (lambda (a54647)
                          (let ((f54746
                                 (lambda (a54648)
                                   (+ kont54745 a54646 a54648))))
                            (length f54746 a54647)))))
                   (cdr f54747 lst)))))))
      (null? f54748 lst)))
  (define (map kont54749 proc lst)
    (let ((f54755
           (lambda (a54649)
             (if a54649
               (let ((f54750 (lambda (x54650) (kont54749 x54650))))
                 (list f54750))
               (let ((f54754
                      (lambda (a54651)
                        (let ((f54753
                               (lambda (a54652)
                                 (let ((f54752
                                        (lambda (a54653)
                                          (let ((f54751
                                                 (lambda (a54654)
                                                   (cons
                                                    kont54749
                                                    a54652
                                                    a54654))))
                                            (map f54751 proc a54653)))))
                                   (cdr f54752 lst)))))
                          (proc f54753 a54651)))))
                 (car f54754 lst))))))
      (null? f54755 lst)))
  (define (filter kont54756 op lst)
    (let ((f54764
           (lambda (a54655)
             (if a54655
               (let ((f54757 (lambda (x54656) (kont54756 x54656))))
                 (list f54757))
               (let ((f54763
                      (lambda (a54657)
                        (let ((f54762
                               (lambda (a54658)
                                 (if a54658
                                   (let ((f54760
                                          (lambda (a54659)
                                            (let ((f54759
                                                   (lambda (a54660)
                                                     (let ((f54758
                                                            (lambda (a54661)
                                                              (cons
                                                               kont54756
                                                               a54659
                                                               a54661))))
                                                       (filter
                                                        f54758
                                                        op
                                                        a54660)))))
                                              (cdr f54759 lst)))))
                                     (car f54760 lst))
                                   (let ((f54761
                                          (lambda (a54662)
                                            (filter kont54756 op a54662))))
                                     (cdr f54761 lst))))))
                          (op f54762 a54657)))))
                 (car f54763 lst))))))
      (null? f54764 lst)))
  (define (drop kont54765 lst n)
    (let ((a54663 '0))
      (let ((f54768
             (lambda (a54664)
               (if a54664
                 (kont54765 lst)
                 (let ((f54767
                        (lambda (a54665)
                          (let ((a54666 '1))
                            (let ((f54766
                                   (lambda (a54667)
                                     (drop kont54765 a54665 a54667))))
                              (- f54766 n a54666))))))
                   (cdr f54767 lst))))))
        (= f54768 n a54663))))
  (define (foldr kont54769 proc acc lst)
    (let ((f54773
           (lambda (a54668)
             (if a54668
               (kont54769 acc)
               (let ((f54772
                      (lambda (a54669)
                        (let ((f54771
                               (lambda (a54670)
                                 (let ((f54770
                                        (lambda (a54671)
                                          (proc kont54769 a54669 a54671))))
                                   (foldr f54770 proc acc a54670)))))
                          (cdr f54771 lst)))))
                 (car f54772 lst))))))
      (null? f54773 lst)))
  (define (append kont54774 lst1 lst2)
    (let ((f54778
           (lambda (a54672)
             (if a54672
               (kont54774 lst2)
               (let ((f54777
                      (lambda (a54673)
                        (let ((f54776
                               (lambda (a54674)
                                 (let ((f54775
                                        (lambda (a54675)
                                          (cons kont54774 a54673 a54675))))
                                   (append f54775 a54674 lst2)))))
                          (cdr f54776 lst1)))))
                 (car f54777 lst1))))))
      (null? f54778 lst1)))
  (define (hash . lst)
    (let ((kont54779 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54676 (apply-prim hash lst))) (kont54779 x54676)))))
  (define (hash-ref kont54781 h k)
    (let ((x54677 (prim hash-ref h k))) (kont54781 x54677)))
  (define (hash-set kont54782 h k v)
    (let ((x54678 (prim hash-set h k v))) (kont54782 x54678)))
  (define (hash-has-key? kont54783 h k)
    (let ((x54679 (prim hash-has-key? h k))) (kont54783 x54679)))
  (define (hash-count kont54784 h)
    (let ((x54680 (prim hash-count h))) (kont54784 x54680)))
  (define (call kont54785)
    (let ((a54681 '1))
      (let ((a54682 '2))
        (let ((a54683 '3))
          (let ((a54684 '4))
            (let ((a54685 '5))
              (let ((a54686 '100))
                (< kont54785 a54681 a54682 a54683 a54684 a54685 a54686))))))))
  (define (brouhaha_main kont54786)
    (let ((f54787 (lambda (x54687) (kont54786 x54687)))) (call f54787))))
