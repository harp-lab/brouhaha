'((define (+ . lst)
    (let ((kont56212 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56122 (apply-prim + lst))) (kont56212 x56122)))))
  (define (- . lst)
    (let ((kont56214 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56123 (apply-prim - lst))) (kont56214 x56123)))))
  (define (* . lst)
    (let ((kont56216 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56124 (apply-prim * lst))) (kont56216 x56124)))))
  (define (modulo kont56218 a b)
    (let ((x56125 (prim modulo a b))) (kont56218 x56125)))
  (define (/ . lst)
    (let ((kont56219 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56126 (apply-prim / lst))) (kont56219 x56126)))))
  (define (= . lst)
    (let ((kont56221 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56127 (apply-prim = lst))) (kont56221 x56127)))))
  (define (> . lst)
    (let ((kont56223 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56128 (apply-prim > lst))) (kont56223 x56128)))))
  (define (< . lst)
    (let ((kont56225 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56129 (apply-prim < lst))) (kont56225 x56129)))))
  (define (<= . lst)
    (let ((kont56227 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56130 (apply-prim <= lst))) (kont56227 x56130)))))
  (define (>= . lst)
    (let ((kont56229 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56131 (apply-prim >= lst))) (kont56229 x56131)))))
  (define (null? kont56231 x)
    (let ((x56132 (prim null? x))) (kont56231 x56132)))
  (define (equal? kont56232 x y)
    (let ((x56133 (prim equal? x y))) (kont56232 x56133)))
  (define (eq? kont56233 x y)
    (let ((x56134 (prim eq? x y))) (kont56233 x56134)))
  (define (cons kont56234 a b)
    (let ((x56135 (prim cons a b))) (kont56234 x56135)))
  (define (car kont56235 lst)
    (let ((x56136 (prim car lst))) (kont56235 x56136)))
  (define (cdr kont56236 lst)
    (let ((x56137 (prim cdr lst))) (kont56236 x56137)))
  (define (even? kont56237 x)
    (let ((a56138 '0))
      (let ((a56139 '2))
        (let ((f56238 (lambda (a56140) (equal? kont56237 a56138 a56140))))
          (modulo f56238 x a56139)))))
  (define (odd? kont56239 x)
    (let ((a56141 '1))
      (let ((a56142 '2))
        (let ((f56240 (lambda (a56143) (equal? kont56239 a56141 a56143))))
          (modulo f56240 x a56142)))))
  (define (list . x)
    (let ((kont56241 (prim car x))) (let ((x (prim cdr x))) (kont56241 x))))
  (define (member? kont56243 x lst)
    (let ((f56247
           (lambda (a56144)
             (if a56144
               (let ((x56145 '#f)) (kont56243 x56145))
               (let ((f56246
                      (lambda (a56146)
                        (let ((f56245
                               (lambda (a56147)
                                 (if a56147
                                   (let ((x56148 '#t)) (kont56243 x56148))
                                   (let ((f56244
                                          (lambda (a56149)
                                            (member? kont56243 x a56149))))
                                     (cdr f56244 lst))))))
                          (equal? f56245 a56146 x)))))
                 (car f56246 lst))))))
      (null? f56247 lst)))
  (define (foldl kont56248 fun acc lst)
    (let ((f56252
           (lambda (a56150)
             (if a56150
               (kont56248 acc)
               (let ((f56251
                      (lambda (a56151)
                        (let ((f56250
                               (lambda (a56152)
                                 (let ((f56249
                                        (lambda (a56153)
                                          (foldl
                                           kont56248
                                           fun
                                           a56152
                                           a56153))))
                                   (cdr f56249 lst)))))
                          (fun f56250 a56151 acc)))))
                 (car f56251 lst))))))
      (null? f56252 lst)))
  (define (reverse-helper kont56253 lst lst2)
    (let ((f56257
           (lambda (a56154)
             (if a56154
               (kont56253 lst2)
               (let ((f56256
                      (lambda (a56155)
                        (let ((f56255
                               (lambda (a56156)
                                 (let ((f56254
                                        (lambda (a56157)
                                          (reverse-helper
                                           kont56253
                                           a56155
                                           a56157))))
                                   (cons f56254 a56156 lst2)))))
                          (car f56255 lst)))))
                 (cdr f56256 lst))))))
      (null? f56257 lst)))
  (define (reverse kont56258 lst)
    (let ((f56259 (lambda (a56158) (reverse-helper kont56258 lst a56158))))
      (list f56259)))
  (define (take-helper kont56260 lst n lst2)
    (let ((a56159 '0))
      (let ((f56266
             (lambda (a56160)
               (if a56160
                 (let ((f56261 (lambda (x56161) (kont56260 x56161))))
                   (reverse f56261 lst2))
                 (let ((f56265
                        (lambda (a56162)
                          (let ((a56163 '1))
                            (let ((f56264
                                   (lambda (a56164)
                                     (let ((f56263
                                            (lambda (a56165)
                                              (let ((f56262
                                                     (lambda (a56166)
                                                       (take-helper
                                                        kont56260
                                                        a56162
                                                        a56164
                                                        a56166))))
                                                (cons f56262 a56165 lst2)))))
                                       (car f56263 lst)))))
                              (- f56264 n a56163))))))
                   (cdr f56265 lst))))))
        (= f56266 n a56159))))
  (define (take kont56267 lst n)
    (let ((f56268 (lambda (a56167) (take-helper kont56267 lst n a56167))))
      (list f56268)))
  (define (length kont56269 lst)
    (let ((f56272
           (lambda (a56168)
             (if a56168
               (let ((x56169 '0)) (kont56269 x56169))
               (let ((a56170 '1))
                 (let ((f56271
                        (lambda (a56171)
                          (let ((f56270
                                 (lambda (a56172)
                                   (+ kont56269 a56170 a56172))))
                            (length f56270 a56171)))))
                   (cdr f56271 lst)))))))
      (null? f56272 lst)))
  (define (map kont56273 proc lst)
    (let ((f56279
           (lambda (a56173)
             (if a56173
               (let ((f56274 (lambda (x56174) (kont56273 x56174))))
                 (list f56274))
               (let ((f56278
                      (lambda (a56175)
                        (let ((f56277
                               (lambda (a56176)
                                 (let ((f56276
                                        (lambda (a56177)
                                          (let ((f56275
                                                 (lambda (a56178)
                                                   (cons
                                                    kont56273
                                                    a56176
                                                    a56178))))
                                            (map f56275 proc a56177)))))
                                   (cdr f56276 lst)))))
                          (proc f56277 a56175)))))
                 (car f56278 lst))))))
      (null? f56279 lst)))
  (define (filter kont56280 op lst)
    (let ((f56288
           (lambda (a56179)
             (if a56179
               (let ((f56281 (lambda (x56180) (kont56280 x56180))))
                 (list f56281))
               (let ((f56287
                      (lambda (a56181)
                        (let ((f56286
                               (lambda (a56182)
                                 (if a56182
                                   (let ((f56284
                                          (lambda (a56183)
                                            (let ((f56283
                                                   (lambda (a56184)
                                                     (let ((f56282
                                                            (lambda (a56185)
                                                              (cons
                                                               kont56280
                                                               a56183
                                                               a56185))))
                                                       (filter
                                                        f56282
                                                        op
                                                        a56184)))))
                                              (cdr f56283 lst)))))
                                     (car f56284 lst))
                                   (let ((f56285
                                          (lambda (a56186)
                                            (filter kont56280 op a56186))))
                                     (cdr f56285 lst))))))
                          (op f56286 a56181)))))
                 (car f56287 lst))))))
      (null? f56288 lst)))
  (define (drop kont56289 lst n)
    (let ((a56187 '0))
      (let ((f56292
             (lambda (a56188)
               (if a56188
                 (kont56289 lst)
                 (let ((f56291
                        (lambda (a56189)
                          (let ((a56190 '1))
                            (let ((f56290
                                   (lambda (a56191)
                                     (drop kont56289 a56189 a56191))))
                              (- f56290 n a56190))))))
                   (cdr f56291 lst))))))
        (= f56292 n a56187))))
  (define (foldr kont56293 proc acc lst)
    (let ((f56297
           (lambda (a56192)
             (if a56192
               (kont56293 acc)
               (let ((f56296
                      (lambda (a56193)
                        (let ((f56295
                               (lambda (a56194)
                                 (let ((f56294
                                        (lambda (a56195)
                                          (proc kont56293 a56193 a56195))))
                                   (foldr f56294 proc acc a56194)))))
                          (cdr f56295 lst)))))
                 (car f56296 lst))))))
      (null? f56297 lst)))
  (define (append kont56298 lst1 lst2)
    (let ((f56302
           (lambda (a56196)
             (if a56196
               (kont56298 lst2)
               (let ((f56301
                      (lambda (a56197)
                        (let ((f56300
                               (lambda (a56198)
                                 (let ((f56299
                                        (lambda (a56199)
                                          (cons kont56298 a56197 a56199))))
                                   (append f56299 a56198 lst2)))))
                          (cdr f56300 lst1)))))
                 (car f56301 lst1))))))
      (null? f56302 lst1)))
  (define (hash . lst)
    (let ((kont56303 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56200 (apply-prim hash lst))) (kont56303 x56200)))))
  (define (hash-ref kont56305 h k)
    (let ((x56201 (prim hash-ref h k))) (kont56305 x56201)))
  (define (hash-set kont56306 h k v)
    (let ((x56202 (prim hash-set h k v))) (kont56306 x56202)))
  (define (hash-has-key? kont56307 h k)
    (let ((x56203 (prim hash-has-key? h k))) (kont56307 x56203)))
  (define (hash-count kont56308 h)
    (let ((x56204 (prim hash-count h))) (kont56308 x56204)))
  (define (call kont56309)
    (let ((a56205 '1))
      (let ((a56206 '2))
        (let ((a56207 '3))
          (let ((a56208 '4))
            (let ((a56209 '5))
              (let ((a56210 '100))
                (< kont56309 a56205 a56206 a56207 a56208 a56209 a56210))))))))
  (define (brouhaha_main kont56310)
    (let ((f56311 (lambda (x56211) (kont56310 x56211)))) (call f56311))))
