'((proc
   (+ _58487 . lst)
   (let ((kont5822458324 (prim car lst)))
     (let ((lst58325 (prim cdr lst)))
       (let ((x5813458326 (apply-prim + lst58325)))
         (clo-app kont5822458324 x5813458326)))))
  (proc
   (- _58488 . lst)
   (let ((kont5822658327 (prim car lst)))
     (let ((lst58328 (prim cdr lst)))
       (let ((x5813558329 (apply-prim - lst58328)))
         (clo-app kont5822658327 x5813558329)))))
  (proc
   (* _58489 . lst)
   (let ((kont5822858330 (prim car lst)))
     (let ((lst58331 (prim cdr lst)))
       (let ((x5813658332 (apply-prim * lst58331)))
         (clo-app kont5822858330 x5813658332)))))
  (proc
   (modulo _58490 kont58230 a b)
   (let ((x5813758333 (prim modulo a b))) (clo-app kont58230 x5813758333)))
  (proc
   (/ _58491 . lst)
   (let ((kont5823158334 (prim car lst)))
     (let ((lst58335 (prim cdr lst)))
       (let ((x5813858336 (apply-prim / lst58335)))
         (clo-app kont5823158334 x5813858336)))))
  (proc
   (= _58492 . lst)
   (let ((kont5823358337 (prim car lst)))
     (let ((lst58338 (prim cdr lst)))
       (let ((x5813958339 (apply-prim = lst58338)))
         (clo-app kont5823358337 x5813958339)))))
  (proc
   (> _58493 . lst)
   (let ((kont5823558340 (prim car lst)))
     (let ((lst58341 (prim cdr lst)))
       (let ((x5814058342 (apply-prim > lst58341)))
         (clo-app kont5823558340 x5814058342)))))
  (proc
   (< _58494 . lst)
   (let ((kont5823758343 (prim car lst)))
     (let ((lst58344 (prim cdr lst)))
       (let ((x5814158345 (apply-prim < lst58344)))
         (clo-app kont5823758343 x5814158345)))))
  (proc
   (<= _58495 . lst)
   (let ((kont5823958346 (prim car lst)))
     (let ((lst58347 (prim cdr lst)))
       (let ((x5814258348 (apply-prim <= lst58347)))
         (clo-app kont5823958346 x5814258348)))))
  (proc
   (>= _58496 . lst)
   (let ((kont5824158349 (prim car lst)))
     (let ((lst58350 (prim cdr lst)))
       (let ((x5814358351 (apply-prim >= lst58350)))
         (clo-app kont5824158349 x5814358351)))))
  (proc
   (null? _58497 kont58243 x)
   (let ((x5814458352 (prim null? x))) (clo-app kont58243 x5814458352)))
  (proc
   (equal? _58498 kont58244 x y)
   (let ((x5814558353 (prim equal? x y))) (clo-app kont58244 x5814558353)))
  (proc
   (eq? _58499 kont58245 x y)
   (let ((x5814658354 (prim eq? x y))) (clo-app kont58245 x5814658354)))
  (proc
   (cons _58500 kont58246 a b)
   (let ((x5814758355 (prim cons a b))) (clo-app kont58246 x5814758355)))
  (proc
   (car _58501 kont58247 lst)
   (let ((x5814858356 (prim car lst))) (clo-app kont58247 x5814858356)))
  (proc
   (cdr _58502 kont58248 lst)
   (let ((x5814958357 (prim cdr lst))) (clo-app kont58248 x5814958357)))
  (proc
   (lam58503 env58504 a5815258361)
   (let ((a5815058358 (env-ref env58504 3)))
     (let ((kont58249 (env-ref env58504 2)))
       (let ((equal? (env-ref env58504 1)))
         (clo-app equal? kont58249 a5815058358 a5815258361)))))
  (proc
   (even? _58507 kont58249 x)
   (let ((a5815058358 '0))
     (let ((a5815158359 '2))
       (let ((f5825058360
              (make-closure lam58503 equal? kont58249 a5815058358)))
         (clo-app modulo f5825058360 x a5815158359)))))
  (proc
   (lam58508 env58509 a5815558365)
   (let ((a5815358362 (env-ref env58509 3)))
     (let ((kont58251 (env-ref env58509 2)))
       (let ((equal? (env-ref env58509 1)))
         (clo-app equal? kont58251 a5815358362 a5815558365)))))
  (proc
   (odd? _58512 kont58251 x)
   (let ((a5815358362 '1))
     (let ((a5815458363 '2))
       (let ((f5825258364
              (make-closure lam58508 equal? kont58251 a5815358362)))
         (clo-app modulo f5825258364 x a5815458363)))))
  (proc
   (list _58513 . x)
   (let ((kont5825358366 (prim car x)))
     (let ((x58367 (prim cdr x))) (clo-app kont5825358366 x58367))))
  (proc
   (lam58516 env58517 a5816158377)
   (let ((kont58255 (env-ref env58517 3)))
     (let ((x (env-ref env58517 2)))
       (let ((member? (env-ref env58517 1)))
         (clo-app member? kont58255 x a5816158377)))))
  (proc
   (lam58518 env58519 a5815958374)
   (let ((cdr (env-ref env58519 5)))
     (let ((lst (env-ref env58519 4)))
       (let ((kont58255 (env-ref env58519 3)))
         (let ((x (env-ref env58519 2)))
           (let ((member? (env-ref env58519 1)))
             (if a5815958374
               (let ((x5816058375 '#t)) (clo-app kont58255 x5816058375))
               (let ((f5825658376 (make-closure lam58516 member? x kont58255)))
                 (clo-app cdr f5825658376 lst)))))))))
  (proc
   (lam58520 env58521 a5815858372)
   (let ((cdr (env-ref env58521 6)))
     (let ((lst (env-ref env58521 5)))
       (let ((equal? (env-ref env58521 4)))
         (let ((kont58255 (env-ref env58521 3)))
           (let ((x (env-ref env58521 2)))
             (let ((member? (env-ref env58521 1)))
               (let ((f5825758373
                      (make-closure lam58518 member? x kont58255 lst cdr)))
                 (clo-app equal? f5825758373 a5815858372 x)))))))))
  (proc
   (lam58522 env58523 a5815658369)
   (let ((cdr (env-ref env58523 7)))
     (let ((lst (env-ref env58523 6)))
       (let ((equal? (env-ref env58523 5)))
         (let ((kont58255 (env-ref env58523 4)))
           (let ((x (env-ref env58523 3)))
             (let ((car (env-ref env58523 2)))
               (let ((member? (env-ref env58523 1)))
                 (if a5815658369
                   (let ((x5815758370 '#f)) (clo-app kont58255 x5815758370))
                   (let ((f5825858371
                          (make-closure
                           lam58520
                           member?
                           x
                           kont58255
                           equal?
                           lst
                           cdr)))
                     (clo-app car f5825858371 lst)))))))))))
  (proc
   (member? _58524 kont58255 x lst)
   (let ((f5825958368
          (make-closure lam58522 member? car x kont58255 equal? lst cdr)))
     (clo-app null? f5825958368 lst)))
  (proc
   (lam58525 env58526 a5816558385)
   (let ((foldl (env-ref env58526 4)))
     (let ((kont58260 (env-ref env58526 3)))
       (let ((a5816458383 (env-ref env58526 2)))
         (let ((fun (env-ref env58526 1)))
           (clo-app foldl kont58260 fun a5816458383 a5816558385))))))
  (proc
   (lam58527 env58528 a5816458383)
   (let ((cdr (env-ref env58528 5)))
     (let ((lst (env-ref env58528 4)))
       (let ((fun (env-ref env58528 3)))
         (let ((foldl (env-ref env58528 2)))
           (let ((kont58260 (env-ref env58528 1)))
             (let ((f5826158384
                    (make-closure lam58525 fun a5816458383 kont58260 foldl)))
               (clo-app cdr f5826158384 lst))))))))
  (proc
   (lam58529 env58530 a5816358381)
   (let ((cdr (env-ref env58530 6)))
     (let ((lst (env-ref env58530 5)))
       (let ((fun (env-ref env58530 4)))
         (let ((acc (env-ref env58530 3)))
           (let ((foldl (env-ref env58530 2)))
             (let ((kont58260 (env-ref env58530 1)))
               (let ((f5826258382
                      (make-closure lam58527 kont58260 foldl fun lst cdr)))
                 (clo-app fun f5826258382 a5816358381 acc)))))))))
  (proc
   (lam58531 env58532 a5816258379)
   (let ((cdr (env-ref env58532 7)))
     (let ((lst (env-ref env58532 6)))
       (let ((fun (env-ref env58532 5)))
         (let ((acc (env-ref env58532 4)))
           (let ((car (env-ref env58532 3)))
             (let ((foldl (env-ref env58532 2)))
               (let ((kont58260 (env-ref env58532 1)))
                 (if a5816258379
                   (clo-app kont58260 acc)
                   (let ((f5826358380
                          (make-closure
                           lam58529
                           kont58260
                           foldl
                           acc
                           fun
                           lst
                           cdr)))
                     (clo-app car f5826358380 lst)))))))))))
  (proc
   (foldl _58533 kont58260 fun acc lst)
   (let ((f5826458378
          (make-closure lam58531 kont58260 foldl car acc fun lst cdr)))
     (clo-app null? f5826458378 lst)))
  (proc
   (lam58534 env58535 a5816958393)
   (let ((a5816758389 (env-ref env58535 3)))
     (let ((kont58265 (env-ref env58535 2)))
       (let ((reverse-helper (env-ref env58535 1)))
         (clo-app reverse-helper kont58265 a5816758389 a5816958393)))))
  (proc
   (lam58536 env58537 a5816858391)
   (let ((a5816758389 (env-ref env58537 5)))
     (let ((kont58265 (env-ref env58537 4)))
       (let ((reverse-helper (env-ref env58537 3)))
         (let ((lst2 (env-ref env58537 2)))
           (let ((cons (env-ref env58537 1)))
             (let ((f5826658392
                    (make-closure
                     lam58534
                     reverse-helper
                     kont58265
                     a5816758389)))
               (clo-app cons f5826658392 a5816858391 lst2))))))))
  (proc
   (lam58538 env58539 a5816758389)
   (let ((reverse-helper (env-ref env58539 6)))
     (let ((lst2 (env-ref env58539 5)))
       (let ((car (env-ref env58539 4)))
         (let ((cons (env-ref env58539 3)))
           (let ((kont58265 (env-ref env58539 2)))
             (let ((lst (env-ref env58539 1)))
               (let ((f5826758390
                      (make-closure
                       lam58536
                       cons
                       lst2
                       reverse-helper
                       kont58265
                       a5816758389)))
                 (clo-app car f5826758390 lst)))))))))
  (proc
   (lam58540 env58541 a5816658387)
   (let ((cdr (env-ref env58541 7)))
     (let ((reverse-helper (env-ref env58541 6)))
       (let ((lst2 (env-ref env58541 5)))
         (let ((car (env-ref env58541 4)))
           (let ((cons (env-ref env58541 3)))
             (let ((kont58265 (env-ref env58541 2)))
               (let ((lst (env-ref env58541 1)))
                 (if a5816658387
                   (clo-app kont58265 lst2)
                   (let ((f5826858388
                          (make-closure
                           lam58538
                           lst
                           kont58265
                           cons
                           car
                           lst2
                           reverse-helper)))
                     (clo-app cdr f5826858388 lst)))))))))))
  (proc
   (reverse-helper _58542 kont58265 lst lst2)
   (let ((f5826958386
          (make-closure
           lam58540
           lst
           kont58265
           cons
           car
           lst2
           reverse-helper
           cdr)))
     (clo-app null? f5826958386 lst)))
  (proc
   (lam58543 env58544 a5817058395)
   (let ((lst (env-ref env58544 3)))
     (let ((reverse-helper (env-ref env58544 2)))
       (let ((kont58270 (env-ref env58544 1)))
         (clo-app reverse-helper kont58270 lst a5817058395)))))
  (proc
   (reverse _58545 kont58270 lst)
   (let ((f5827158394 (make-closure lam58543 kont58270 reverse-helper lst)))
     (clo-app list f5827158394)))
  (proc
   (lam58546 env58547 x5817358400)
   (let ((kont58272 (env-ref env58547 1))) (clo-app kont58272 x5817358400)))
  (proc
   (lam58548 env58549 a5817858409)
   (let ((a5817658405 (env-ref env58549 4)))
     (let ((kont58272 (env-ref env58549 3)))
       (let ((take-helper (env-ref env58549 2)))
         (let ((a5817458402 (env-ref env58549 1)))
           (clo-app
            take-helper
            kont58272
            a5817458402
            a5817658405
            a5817858409))))))
  (proc
   (lam58550 env58551 a5817758407)
   (let ((a5817658405 (env-ref env58551 6)))
     (let ((kont58272 (env-ref env58551 5)))
       (let ((a5817458402 (env-ref env58551 4)))
         (let ((cons (env-ref env58551 3)))
           (let ((take-helper (env-ref env58551 2)))
             (let ((lst2 (env-ref env58551 1)))
               (let ((f5827458408
                      (make-closure
                       lam58548
                       a5817458402
                       take-helper
                       kont58272
                       a5817658405)))
                 (clo-app cons f5827458408 a5817758407 lst2)))))))))
  (proc
   (lam58552 env58553 a5817658405)
   (let ((lst (env-ref env58553 7)))
     (let ((kont58272 (env-ref env58553 6)))
       (let ((cons (env-ref env58553 5)))
         (let ((take-helper (env-ref env58553 4)))
           (let ((lst2 (env-ref env58553 3)))
             (let ((a5817458402 (env-ref env58553 2)))
               (let ((car (env-ref env58553 1)))
                 (let ((f5827558406
                        (make-closure
                         lam58550
                         lst2
                         take-helper
                         cons
                         a5817458402
                         kont58272
                         a5817658405)))
                   (clo-app car f5827558406 lst))))))))))
  (proc
   (lam58555 env58556 a5817458402)
   (let ((lst (env-ref env58556 8)))
     (let ((kont58272 (env-ref env58556 7)))
       (let ((cons (env-ref env58556 6)))
         (let ((- (env-ref env58556 5)))
           (let ((take-helper (env-ref env58556 4)))
             (let ((lst2 (env-ref env58556 3)))
               (let ((n (env-ref env58556 2)))
                 (let ((car (env-ref env58556 1)))
                   (let ((a5817558403 '1))
                     (let ((f5827658404
                            (make-closure
                             lam58552
                             car
                             a5817458402
                             lst2
                             take-helper
                             cons
                             kont58272
                             lst)))
                       (clo-app - f5827658404 n a5817558403))))))))))))
  (proc
   (lam58557 env58558 a5817258398)
   (let ((cdr (env-ref env58558 10)))
     (let ((lst (env-ref env58558 9)))
       (let ((reverse (env-ref env58558 8)))
         (let ((kont58272 (env-ref env58558 7)))
           (let ((cons (env-ref env58558 6)))
             (let ((- (env-ref env58558 5)))
               (let ((take-helper (env-ref env58558 4)))
                 (let ((lst2 (env-ref env58558 3)))
                   (let ((n (env-ref env58558 2)))
                     (let ((car (env-ref env58558 1)))
                       (if a5817258398
                         (let ((f5827358399 (make-closure lam58546 kont58272)))
                           (clo-app reverse f5827358399 lst2))
                         (let ((f5827758401
                                (make-closure
                                 lam58555
                                 car
                                 n
                                 lst2
                                 take-helper
                                 -
                                 cons
                                 kont58272
                                 lst)))
                           (clo-app cdr f5827758401 lst))))))))))))))
  (proc
   (take-helper _58560 kont58272 lst n lst2)
   (let ((a5817158396 '0))
     (let ((f5827858397
            (make-closure
             lam58557
             car
             n
             lst2
             take-helper
             -
             cons
             kont58272
             reverse
             lst
             cdr)))
       (clo-app = f5827858397 n a5817158396))))
  (proc
   (lam58561 env58562 a5817958411)
   (let ((kont58279 (env-ref env58562 4)))
     (let ((lst (env-ref env58562 3)))
       (let ((take-helper (env-ref env58562 2)))
         (let ((n (env-ref env58562 1)))
           (clo-app take-helper kont58279 lst n a5817958411))))))
  (proc
   (take _58563 kont58279 lst n)
   (let ((f5828058410 (make-closure lam58561 n take-helper lst kont58279)))
     (clo-app list f5828058410)))
  (proc
   (lam58565 env58566 a5818458419)
   (let ((kont58281 (env-ref env58566 3)))
     (let ((+ (env-ref env58566 2)))
       (let ((a5818258415 (env-ref env58566 1)))
         (clo-app + kont58281 a5818258415 a5818458419)))))
  (proc
   (lam58567 env58568 a5818358417)
   (let ((kont58281 (env-ref env58568 4)))
     (let ((length (env-ref env58568 3)))
       (let ((+ (env-ref env58568 2)))
         (let ((a5818258415 (env-ref env58568 1)))
           (let ((f5828258418 (make-closure lam58565 a5818258415 + kont58281)))
             (clo-app length f5828258418 a5818358417)))))))
  (proc
   (lam58570 env58571 a5818058413)
   (let ((cdr (env-ref env58571 5)))
     (let ((length (env-ref env58571 4)))
       (let ((+ (env-ref env58571 3)))
         (let ((kont58281 (env-ref env58571 2)))
           (let ((lst (env-ref env58571 1)))
             (if a5818058413
               (let ((x5818158414 '0)) (clo-app kont58281 x5818158414))
               (let ((a5818258415 '1))
                 (let ((f5828358416
                        (make-closure
                         lam58567
                         a5818258415
                         +
                         length
                         kont58281)))
                   (clo-app cdr f5828358416 lst))))))))))
  (proc
   (length _58572 kont58281 lst)
   (let ((f5828458412 (make-closure lam58570 lst kont58281 + length cdr)))
     (clo-app null? f5828458412 lst)))
  (proc
   (lam58573 env58574 x5818658423)
   (let ((kont58285 (env-ref env58574 1))) (clo-app kont58285 x5818658423)))
  (proc
   (lam58575 env58576 a5819058431)
   (let ((a5818858427 (env-ref env58576 3)))
     (let ((kont58285 (env-ref env58576 2)))
       (let ((cons (env-ref env58576 1)))
         (clo-app cons kont58285 a5818858427 a5819058431)))))
  (proc
   (lam58577 env58578 a5818958429)
   (let ((map (env-ref env58578 5)))
     (let ((a5818858427 (env-ref env58578 4)))
       (let ((kont58285 (env-ref env58578 3)))
         (let ((proc (env-ref env58578 2)))
           (let ((cons (env-ref env58578 1)))
             (let ((f5828758430
                    (make-closure lam58575 cons kont58285 a5818858427)))
               (clo-app map f5828758430 proc a5818958429))))))))
  (proc
   (lam58579 env58580 a5818858427)
   (let ((cdr (env-ref env58580 6)))
     (let ((lst (env-ref env58580 5)))
       (let ((map (env-ref env58580 4)))
         (let ((kont58285 (env-ref env58580 3)))
           (let ((proc (env-ref env58580 2)))
             (let ((cons (env-ref env58580 1)))
               (let ((f5828858428
                      (make-closure
                       lam58577
                       cons
                       proc
                       kont58285
                       a5818858427
                       map)))
                 (clo-app cdr f5828858428 lst)))))))))
  (proc
   (lam58581 env58582 a5818758425)
   (let ((cdr (env-ref env58582 6)))
     (let ((lst (env-ref env58582 5)))
       (let ((map (env-ref env58582 4)))
         (let ((kont58285 (env-ref env58582 3)))
           (let ((proc (env-ref env58582 2)))
             (let ((cons (env-ref env58582 1)))
               (let ((f5828958426
                      (make-closure lam58579 cons proc kont58285 map lst cdr)))
                 (clo-app proc f5828958426 a5818758425)))))))))
  (proc
   (lam58583 env58584 a5818558421)
   (let ((lst (env-ref env58584 8)))
     (let ((map (env-ref env58584 7)))
       (let ((kont58285 (env-ref env58584 6)))
         (let ((proc (env-ref env58584 5)))
           (let ((car (env-ref env58584 4)))
             (let ((cons (env-ref env58584 3)))
               (let ((list (env-ref env58584 2)))
                 (let ((cdr (env-ref env58584 1)))
                   (if a5818558421
                     (let ((f5828658422 (make-closure lam58573 kont58285)))
                       (clo-app list f5828658422))
                     (let ((f5829058424
                            (make-closure
                             lam58581
                             cons
                             proc
                             kont58285
                             map
                             lst
                             cdr)))
                       (clo-app car f5829058424 lst))))))))))))
  (proc
   (map _58585 kont58285 proc lst)
   (let ((f5829158420
          (make-closure lam58583 cdr list cons car proc kont58285 map lst)))
     (clo-app null? f5829158420 lst)))
  (proc
   (lam58586 env58587 x5819258435)
   (let ((kont58292 (env-ref env58587 1))) (clo-app kont58292 x5819258435)))
  (proc
   (lam58588 env58589 a5819758445)
   (let ((a5819558441 (env-ref env58589 3)))
     (let ((cons (env-ref env58589 2)))
       (let ((kont58292 (env-ref env58589 1)))
         (clo-app cons kont58292 a5819558441 a5819758445)))))
  (proc
   (lam58590 env58591 a5819658443)
   (let ((a5819558441 (env-ref env58591 5)))
     (let ((op (env-ref env58591 4)))
       (let ((filter (env-ref env58591 3)))
         (let ((cons (env-ref env58591 2)))
           (let ((kont58292 (env-ref env58591 1)))
             (let ((f5829458444
                    (make-closure lam58588 kont58292 cons a5819558441)))
               (clo-app filter f5829458444 op a5819658443))))))))
  (proc
   (lam58592 env58593 a5819558441)
   (let ((cdr (env-ref env58593 6)))
     (let ((lst (env-ref env58593 5)))
       (let ((op (env-ref env58593 4)))
         (let ((filter (env-ref env58593 3)))
           (let ((cons (env-ref env58593 2)))
             (let ((kont58292 (env-ref env58593 1)))
               (let ((f5829558442
                      (make-closure
                       lam58590
                       kont58292
                       cons
                       filter
                       op
                       a5819558441)))
                 (clo-app cdr f5829558442 lst)))))))))
  (proc
   (lam58594 env58595 a5819858447)
   (let ((op (env-ref env58595 3)))
     (let ((filter (env-ref env58595 2)))
       (let ((kont58292 (env-ref env58595 1)))
         (clo-app filter kont58292 op a5819858447)))))
  (proc
   (lam58596 env58597 a5819458439)
   (let ((cdr (env-ref env58597 7)))
     (let ((lst (env-ref env58597 6)))
       (let ((op (env-ref env58597 5)))
         (let ((cons (env-ref env58597 4)))
           (let ((kont58292 (env-ref env58597 3)))
             (let ((filter (env-ref env58597 2)))
               (let ((car (env-ref env58597 1)))
                 (if a5819458439
                   (let ((f5829658440
                          (make-closure
                           lam58592
                           kont58292
                           cons
                           filter
                           op
                           lst
                           cdr)))
                     (clo-app car f5829658440 lst))
                   (let ((f5829758446
                          (make-closure lam58594 kont58292 filter op)))
                     (clo-app cdr f5829758446 lst)))))))))))
  (proc
   (lam58598 env58599 a5819358437)
   (let ((cdr (env-ref env58599 7)))
     (let ((lst (env-ref env58599 6)))
       (let ((op (env-ref env58599 5)))
         (let ((cons (env-ref env58599 4)))
           (let ((kont58292 (env-ref env58599 3)))
             (let ((filter (env-ref env58599 2)))
               (let ((car (env-ref env58599 1)))
                 (let ((f5829858438
                        (make-closure
                         lam58596
                         car
                         filter
                         kont58292
                         cons
                         op
                         lst
                         cdr)))
                   (clo-app op f5829858438 a5819358437))))))))))
  (proc
   (lam58600 env58601 a5819158433)
   (let ((lst (env-ref env58601 8)))
     (let ((op (env-ref env58601 7)))
       (let ((cons (env-ref env58601 6)))
         (let ((kont58292 (env-ref env58601 5)))
           (let ((list (env-ref env58601 4)))
             (let ((cdr (env-ref env58601 3)))
               (let ((filter (env-ref env58601 2)))
                 (let ((car (env-ref env58601 1)))
                   (if a5819158433
                     (let ((f5829358434 (make-closure lam58586 kont58292)))
                       (clo-app list f5829358434))
                     (let ((f5829958436
                            (make-closure
                             lam58598
                             car
                             filter
                             kont58292
                             cons
                             op
                             lst
                             cdr)))
                       (clo-app car f5829958436 lst))))))))))))
  (proc
   (filter _58602 kont58292 op lst)
   (let ((f5830058432
          (make-closure lam58600 car filter cdr list kont58292 cons op lst)))
     (clo-app null? f5830058432 lst)))
  (proc
   (lam58603 env58604 a5820358455)
   (let ((drop (env-ref env58604 3)))
     (let ((kont58301 (env-ref env58604 2)))
       (let ((a5820158452 (env-ref env58604 1)))
         (clo-app drop kont58301 a5820158452 a5820358455)))))
  (proc
   (lam58606 env58607 a5820158452)
   (let ((drop (env-ref env58607 4)))
     (let ((kont58301 (env-ref env58607 3)))
       (let ((n (env-ref env58607 2)))
         (let ((- (env-ref env58607 1)))
           (let ((a5820258453 '1))
             (let ((f5830258454
                    (make-closure lam58603 a5820158452 kont58301 drop)))
               (clo-app - f5830258454 n a5820258453))))))))
  (proc
   (lam58608 env58609 a5820058450)
   (let ((cdr (env-ref env58609 6)))
     (let ((kont58301 (env-ref env58609 5)))
       (let ((n (env-ref env58609 4)))
         (let ((- (env-ref env58609 3)))
           (let ((lst (env-ref env58609 2)))
             (let ((drop (env-ref env58609 1)))
               (if a5820058450
                 (clo-app kont58301 lst)
                 (let ((f5830358451
                        (make-closure lam58606 - n kont58301 drop)))
                   (clo-app cdr f5830358451 lst))))))))))
  (proc
   (drop _58611 kont58301 lst n)
   (let ((a5819958448 '0))
     (let ((f5830458449 (make-closure lam58608 drop lst - n kont58301 cdr)))
       (clo-app = f5830458449 n a5819958448))))
  (proc
   (lam58612 env58613 a5820758463)
   (let ((a5820558459 (env-ref env58613 3)))
     (let ((proc (env-ref env58613 2)))
       (let ((kont58305 (env-ref env58613 1)))
         (clo-app proc kont58305 a5820558459 a5820758463)))))
  (proc
   (lam58614 env58615 a5820658461)
   (let ((foldr (env-ref env58615 5)))
     (let ((a5820558459 (env-ref env58615 4)))
       (let ((kont58305 (env-ref env58615 3)))
         (let ((proc (env-ref env58615 2)))
           (let ((acc (env-ref env58615 1)))
             (let ((f5830658462
                    (make-closure lam58612 kont58305 proc a5820558459)))
               (clo-app foldr f5830658462 proc acc a5820658461))))))))
  (proc
   (lam58616 env58617 a5820558459)
   (let ((cdr (env-ref env58617 6)))
     (let ((kont58305 (env-ref env58617 5)))
       (let ((foldr (env-ref env58617 4)))
         (let ((lst (env-ref env58617 3)))
           (let ((proc (env-ref env58617 2)))
             (let ((acc (env-ref env58617 1)))
               (let ((f5830758460
                      (make-closure
                       lam58614
                       acc
                       proc
                       kont58305
                       a5820558459
                       foldr)))
                 (clo-app cdr f5830758460 lst)))))))))
  (proc
   (lam58618 env58619 a5820458457)
   (let ((cdr (env-ref env58619 7)))
     (let ((kont58305 (env-ref env58619 6)))
       (let ((car (env-ref env58619 5)))
         (let ((foldr (env-ref env58619 4)))
           (let ((lst (env-ref env58619 3)))
             (let ((proc (env-ref env58619 2)))
               (let ((acc (env-ref env58619 1)))
                 (if a5820458457
                   (clo-app kont58305 acc)
                   (let ((f5830858458
                          (make-closure
                           lam58616
                           acc
                           proc
                           lst
                           foldr
                           kont58305
                           cdr)))
                     (clo-app car f5830858458 lst)))))))))))
  (proc
   (foldr _58620 kont58305 proc acc lst)
   (let ((f5830958456
          (make-closure lam58618 acc proc lst foldr car kont58305 cdr)))
     (clo-app null? f5830958456 lst)))
  (proc
   (lam58621 env58622 a5821158471)
   (let ((kont58310 (env-ref env58622 3)))
     (let ((cons (env-ref env58622 2)))
       (let ((a5820958467 (env-ref env58622 1)))
         (clo-app cons kont58310 a5820958467 a5821158471)))))
  (proc
   (lam58623 env58624 a5821058469)
   (let ((kont58310 (env-ref env58624 5)))
     (let ((append (env-ref env58624 4)))
       (let ((lst2 (env-ref env58624 3)))
         (let ((cons (env-ref env58624 2)))
           (let ((a5820958467 (env-ref env58624 1)))
             (let ((f5831158470
                    (make-closure lam58621 a5820958467 cons kont58310)))
               (clo-app append f5831158470 a5821058469 lst2))))))))
  (proc
   (lam58625 env58626 a5820958467)
   (let ((cdr (env-ref env58626 6)))
     (let ((kont58310 (env-ref env58626 5)))
       (let ((append (env-ref env58626 4)))
         (let ((lst2 (env-ref env58626 3)))
           (let ((lst1 (env-ref env58626 2)))
             (let ((cons (env-ref env58626 1)))
               (let ((f5831258468
                      (make-closure
                       lam58623
                       a5820958467
                       cons
                       lst2
                       append
                       kont58310)))
                 (clo-app cdr f5831258468 lst1)))))))))
  (proc
   (lam58627 env58628 a5820858465)
   (let ((cdr (env-ref env58628 7)))
     (let ((kont58310 (env-ref env58628 6)))
       (let ((append (env-ref env58628 5)))
         (let ((lst2 (env-ref env58628 4)))
           (let ((cons (env-ref env58628 3)))
             (let ((lst1 (env-ref env58628 2)))
               (let ((car (env-ref env58628 1)))
                 (if a5820858465
                   (clo-app kont58310 lst2)
                   (let ((f5831358466
                          (make-closure
                           lam58625
                           cons
                           lst1
                           lst2
                           append
                           kont58310
                           cdr)))
                     (clo-app car f5831358466 lst1)))))))))))
  (proc
   (append _58629 kont58310 lst1 lst2)
   (let ((f5831458464
          (make-closure lam58627 car lst1 cons lst2 append kont58310 cdr)))
     (clo-app null? f5831458464 lst1)))
  (proc
   (hash _58630 . lst)
   (let ((kont5831558472 (prim car lst)))
     (let ((lst58473 (prim cdr lst)))
       (let ((x5821258474 (apply-prim hash lst58473)))
         (clo-app kont5831558472 x5821258474)))))
  (proc
   (hash-ref _58631 kont58317 h k)
   (let ((x5821358475 (prim hash-ref h k))) (clo-app kont58317 x5821358475)))
  (proc
   (hash-set _58632 kont58318 h k v)
   (let ((x5821458476 (prim hash-set h k v))) (clo-app kont58318 x5821458476)))
  (proc
   (hash-has-key? _58633 kont58319 h k)
   (let ((x5821558477 (prim hash-has-key? h k)))
     (clo-app kont58319 x5821558477)))
  (proc
   (hash-count _58634 kont58320 h)
   (let ((x5821658478 (prim hash-count h))) (clo-app kont58320 x5821658478)))
  (proc
   (call _58641 kont58321)
   (let ((a5821758479 '1))
     (let ((a5821858480 '2))
       (let ((a5821958481 '3))
         (let ((a5822058482 '4))
           (let ((a5822158483 '5))
             (let ((a5822258484 '100))
               (clo-app
                <
                kont58321
                a5821758479
                a5821858480
                a5821958481
                a5822058482
                a5822158483
                a5822258484))))))))
  (proc
   (lam58642 env58643 x5822358486)
   (let ((kont58322 (env-ref env58643 1))) (clo-app kont58322 x5822358486)))
  (proc
   (brouhaha_main _58644 kont58322)
   (let ((f5832358485 (make-closure lam58642 kont58322)))
     (clo-app call f5832358485))))
