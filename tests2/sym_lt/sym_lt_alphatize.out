'((define (+ . lst) (let ((x56122 (apply-prim + lst))) x56122))
  (define (- . lst) (let ((x56123 (apply-prim - lst))) x56123))
  (define (* . lst) (let ((x56124 (apply-prim * lst))) x56124))
  (define (modulo a b) (let ((x56125 (prim modulo a b))) x56125))
  (define (/ . lst) (let ((x56126 (apply-prim / lst))) x56126))
  (define (= . lst) (let ((x56127 (apply-prim = lst))) x56127))
  (define (> . lst) (let ((x56128 (apply-prim > lst))) x56128))
  (define (< . lst) (let ((x56129 (apply-prim < lst))) x56129))
  (define (<= . lst) (let ((x56130 (apply-prim <= lst))) x56130))
  (define (>= . lst) (let ((x56131 (apply-prim >= lst))) x56131))
  (define (null? x) (let ((x56132 (prim null? x))) x56132))
  (define (equal? x y) (let ((x56133 (prim equal? x y))) x56133))
  (define (eq? x y) (let ((x56134 (prim eq? x y))) x56134))
  (define (cons a b) (let ((x56135 (prim cons a b))) x56135))
  (define (car lst) (let ((x56136 (prim car lst))) x56136))
  (define (cdr lst) (let ((x56137 (prim cdr lst))) x56137))
  (define (even? x)
    (let ((a56138 '0))
      (let ((a56139 '2))
        (let ((a56140 (modulo x a56139))) (equal? a56138 a56140)))))
  (define (odd? x)
    (let ((a56141 '1))
      (let ((a56142 '2))
        (let ((a56143 (modulo x a56142))) (equal? a56141 a56143)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a56144 (null? lst)))
      (if a56144
        (let ((x56145 '#f)) x56145)
        (let ((a56146 (car lst)))
          (let ((a56147 (equal? a56146 x)))
            (if a56147
              (let ((x56148 '#t)) x56148)
              (let ((a56149 (cdr lst))) (member? x a56149))))))))
  (define (foldl fun acc lst)
    (let ((a56150 (null? lst)))
      (if a56150
        acc
        (let ((a56151 (car lst)))
          (let ((a56152 (fun a56151 acc)))
            (let ((a56153 (cdr lst))) (foldl fun a56152 a56153)))))))
  (define (reverse-helper lst lst2)
    (let ((a56154 (null? lst)))
      (if a56154
        lst2
        (let ((a56155 (cdr lst)))
          (let ((a56156 (car lst)))
            (let ((a56157 (cons a56156 lst2)))
              (reverse-helper a56155 a56157)))))))
  (define (reverse lst) (let ((a56158 (list))) (reverse-helper lst a56158)))
  (define (take-helper lst n lst2)
    (let ((a56159 '0))
      (let ((a56160 (= n a56159)))
        (if a56160
          (let ((x56161 (reverse lst2))) x56161)
          (let ((a56162 (cdr lst)))
            (let ((a56163 '1))
              (let ((a56164 (- n a56163)))
                (let ((a56165 (car lst)))
                  (let ((a56166 (cons a56165 lst2)))
                    (take-helper a56162 a56164 a56166))))))))))
  (define (take lst n) (let ((a56167 (list))) (take-helper lst n a56167)))
  (define (length lst)
    (let ((a56168 (null? lst)))
      (if a56168
        (let ((x56169 '0)) x56169)
        (let ((a56170 '1))
          (let ((a56171 (cdr lst)))
            (let ((a56172 (length a56171))) (+ a56170 a56172)))))))
  (define (map proc lst)
    (let ((a56173 (null? lst)))
      (if a56173
        (let ((x56174 (list))) x56174)
        (let ((a56175 (car lst)))
          (let ((a56176 (proc a56175)))
            (let ((a56177 (cdr lst)))
              (let ((a56178 (map proc a56177))) (cons a56176 a56178))))))))
  (define (filter op lst)
    (let ((a56179 (null? lst)))
      (if a56179
        (let ((x56180 (list))) x56180)
        (let ((a56181 (car lst)))
          (let ((a56182 (op a56181)))
            (if a56182
              (let ((a56183 (car lst)))
                (let ((a56184 (cdr lst)))
                  (let ((a56185 (filter op a56184))) (cons a56183 a56185))))
              (let ((a56186 (cdr lst))) (filter op a56186))))))))
  (define (drop lst n)
    (let ((a56187 '0))
      (let ((a56188 (= n a56187)))
        (if a56188
          lst
          (let ((a56189 (cdr lst)))
            (let ((a56190 '1))
              (let ((a56191 (- n a56190))) (drop a56189 a56191))))))))
  (define (foldr proc acc lst)
    (let ((a56192 (null? lst)))
      (if a56192
        acc
        (let ((a56193 (car lst)))
          (let ((a56194 (cdr lst)))
            (let ((a56195 (foldr proc acc a56194))) (proc a56193 a56195)))))))
  (define (append lst1 lst2)
    (let ((a56196 (null? lst1)))
      (if a56196
        lst2
        (let ((a56197 (car lst1)))
          (let ((a56198 (cdr lst1)))
            (let ((a56199 (append a56198 lst2))) (cons a56197 a56199)))))))
  (define (hash . lst) (let ((x56200 (apply-prim hash lst))) x56200))
  (define (hash-ref h k) (let ((x56201 (prim hash-ref h k))) x56201))
  (define (hash-set h k v) (let ((x56202 (prim hash-set h k v))) x56202))
  (define (hash-has-key? h k) (let ((x56203 (prim hash-has-key? h k))) x56203))
  (define (hash-count h) (let ((x56204 (prim hash-count h))) x56204))
  (define (call)
    (let ((a56205 '1))
      (let ((a56206 '2))
        (let ((a56207 '3))
          (let ((a56208 '4))
            (let ((a56209 '5))
              (let ((a56210 '100))
                (< a56205 a56206 a56207 a56208 a56209 a56210))))))))
  (define (brouhaha_main) (let ((x56211 (call))) x56211)))
