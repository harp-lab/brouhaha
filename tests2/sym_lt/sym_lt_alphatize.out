'((define (+ . lst) (let ((x54598 (apply-prim + lst))) x54598))
  (define (- . lst) (let ((x54599 (apply-prim - lst))) x54599))
  (define (* . lst) (let ((x54600 (apply-prim * lst))) x54600))
  (define (modulo a b) (let ((x54601 (prim modulo a b))) x54601))
  (define (/ . lst) (let ((x54602 (apply-prim / lst))) x54602))
  (define (= . lst) (let ((x54603 (apply-prim = lst))) x54603))
  (define (> . lst) (let ((x54604 (apply-prim > lst))) x54604))
  (define (< . lst) (let ((x54605 (apply-prim < lst))) x54605))
  (define (<= . lst) (let ((x54606 (apply-prim <= lst))) x54606))
  (define (>= . lst) (let ((x54607 (apply-prim >= lst))) x54607))
  (define (null? x) (let ((x54608 (prim null? x))) x54608))
  (define (equal? x y) (let ((x54609 (prim equal? x y))) x54609))
  (define (eq? x y) (let ((x54610 (prim eq? x y))) x54610))
  (define (cons a b) (let ((x54611 (prim cons a b))) x54611))
  (define (car lst) (let ((x54612 (prim car lst))) x54612))
  (define (cdr lst) (let ((x54613 (prim cdr lst))) x54613))
  (define (even? x)
    (let ((a54614 '0))
      (let ((a54615 '2))
        (let ((a54616 (modulo x a54615))) (equal? a54614 a54616)))))
  (define (odd? x)
    (let ((a54617 '1))
      (let ((a54618 '2))
        (let ((a54619 (modulo x a54618))) (equal? a54617 a54619)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a54620 (null? lst)))
      (if a54620
        (let ((x54621 '#f)) x54621)
        (let ((a54622 (car lst)))
          (let ((a54623 (equal? a54622 x)))
            (if a54623
              (let ((x54624 '#t)) x54624)
              (let ((a54625 (cdr lst))) (member? x a54625))))))))
  (define (foldl fun acc lst)
    (let ((a54626 (null? lst)))
      (if a54626
        acc
        (let ((a54627 (car lst)))
          (let ((a54628 (fun a54627 acc)))
            (let ((a54629 (cdr lst))) (foldl fun a54628 a54629)))))))
  (define (reverse-helper lst lst2)
    (let ((a54630 (null? lst)))
      (if a54630
        lst2
        (let ((a54631 (cdr lst)))
          (let ((a54632 (car lst)))
            (let ((a54633 (cons a54632 lst2)))
              (reverse-helper a54631 a54633)))))))
  (define (reverse lst) (let ((a54634 (list))) (reverse-helper lst a54634)))
  (define (take-helper lst n lst2)
    (let ((a54635 '0))
      (let ((a54636 (= n a54635)))
        (if a54636
          (let ((x54637 (reverse lst2))) x54637)
          (let ((a54638 (cdr lst)))
            (let ((a54639 '1))
              (let ((a54640 (- n a54639)))
                (let ((a54641 (car lst)))
                  (let ((a54642 (cons a54641 lst2)))
                    (take-helper a54638 a54640 a54642))))))))))
  (define (take lst n) (let ((a54643 (list))) (take-helper lst n a54643)))
  (define (length lst)
    (let ((a54644 (null? lst)))
      (if a54644
        (let ((x54645 '0)) x54645)
        (let ((a54646 '1))
          (let ((a54647 (cdr lst)))
            (let ((a54648 (length a54647))) (+ a54646 a54648)))))))
  (define (map proc lst)
    (let ((a54649 (null? lst)))
      (if a54649
        (let ((x54650 (list))) x54650)
        (let ((a54651 (car lst)))
          (let ((a54652 (proc a54651)))
            (let ((a54653 (cdr lst)))
              (let ((a54654 (map proc a54653))) (cons a54652 a54654))))))))
  (define (filter op lst)
    (let ((a54655 (null? lst)))
      (if a54655
        (let ((x54656 (list))) x54656)
        (let ((a54657 (car lst)))
          (let ((a54658 (op a54657)))
            (if a54658
              (let ((a54659 (car lst)))
                (let ((a54660 (cdr lst)))
                  (let ((a54661 (filter op a54660))) (cons a54659 a54661))))
              (let ((a54662 (cdr lst))) (filter op a54662))))))))
  (define (drop lst n)
    (let ((a54663 '0))
      (let ((a54664 (= n a54663)))
        (if a54664
          lst
          (let ((a54665 (cdr lst)))
            (let ((a54666 '1))
              (let ((a54667 (- n a54666))) (drop a54665 a54667))))))))
  (define (foldr proc acc lst)
    (let ((a54668 (null? lst)))
      (if a54668
        acc
        (let ((a54669 (car lst)))
          (let ((a54670 (cdr lst)))
            (let ((a54671 (foldr proc acc a54670))) (proc a54669 a54671)))))))
  (define (append lst1 lst2)
    (let ((a54672 (null? lst1)))
      (if a54672
        lst2
        (let ((a54673 (car lst1)))
          (let ((a54674 (cdr lst1)))
            (let ((a54675 (append a54674 lst2))) (cons a54673 a54675)))))))
  (define (hash . lst) (let ((x54676 (apply-prim hash lst))) x54676))
  (define (hash-ref h k) (let ((x54677 (prim hash-ref h k))) x54677))
  (define (hash-set h k v) (let ((x54678 (prim hash-set h k v))) x54678))
  (define (hash-has-key? h k) (let ((x54679 (prim hash-has-key? h k))) x54679))
  (define (hash-count h) (let ((x54680 (prim hash-count h))) x54680))
  (define (call)
    (let ((a54681 '1))
      (let ((a54682 '2))
        (let ((a54683 '3))
          (let ((a54684 '4))
            (let ((a54685 '5))
              (let ((a54686 '100))
                (< a54681 a54682 a54683 a54684 a54685 a54686))))))))
  (define (brouhaha_main) (let ((x54687 (call))) x54687)))
