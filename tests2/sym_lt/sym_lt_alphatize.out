'((define (+ . lst) (let ((x57287 (apply-prim + lst))) x57287))
  (define (- . lst) (let ((x57288 (apply-prim - lst))) x57288))
  (define (* . lst) (let ((x57289 (apply-prim * lst))) x57289))
  (define (modulo a b) (let ((x57290 (prim modulo a b))) x57290))
  (define (/ . lst) (let ((x57291 (apply-prim / lst))) x57291))
  (define (= . lst) (let ((x57292 (apply-prim = lst))) x57292))
  (define (> . lst) (let ((x57293 (apply-prim > lst))) x57293))
  (define (< . lst) (let ((x57294 (apply-prim < lst))) x57294))
  (define (<= . lst) (let ((x57295 (apply-prim <= lst))) x57295))
  (define (>= . lst) (let ((x57296 (apply-prim >= lst))) x57296))
  (define (null? x) (let ((x57297 (prim null? x))) x57297))
  (define (equal? x y) (let ((x57298 (prim equal? x y))) x57298))
  (define (eq? x y) (let ((x57299 (prim eq? x y))) x57299))
  (define (cons a b) (let ((x57300 (prim cons a b))) x57300))
  (define (car lst) (let ((x57301 (prim car lst))) x57301))
  (define (cdr lst) (let ((x57302 (prim cdr lst))) x57302))
  (define (even? x)
    (let ((a57303 '0))
      (let ((a57304 '2))
        (let ((a57305 (modulo x a57304))) (equal? a57303 a57305)))))
  (define (odd? x)
    (let ((a57306 '1))
      (let ((a57307 '2))
        (let ((a57308 (modulo x a57307))) (equal? a57306 a57308)))))
  (define (list . x) x)
  (define (and . lst) (let ((x57309 (apply-prim and lst))) x57309))
  (define (or . lst) (let ((x57310 (apply-prim or lst))) x57310))
  (define (member? x lst)
    (let ((a57311 (null? lst)))
      (if a57311
        (let ((x57312 '#f)) x57312)
        (let ((a57313 (car lst)))
          (let ((a57314 (equal? a57313 x)))
            (if a57314
              (let ((x57315 '#t)) x57315)
              (let ((a57316 (cdr lst))) (member? x a57316))))))))
  (define (foldl fun acc lst)
    (let ((a57317 (null? lst)))
      (if a57317
        acc
        (let ((a57318 (car lst)))
          (let ((a57319 (fun a57318 acc)))
            (let ((a57320 (cdr lst))) (foldl fun a57319 a57320)))))))
  (define (reverse-helper lst lst2)
    (let ((a57321 (null? lst)))
      (if a57321
        lst2
        (let ((a57322 (cdr lst)))
          (let ((a57323 (car lst)))
            (let ((a57324 (cons a57323 lst2)))
              (reverse-helper a57322 a57324)))))))
  (define (reverse lst) (let ((a57325 (list))) (reverse-helper lst a57325)))
  (define (take-helper lst n lst2)
    (let ((a57326 '0))
      (let ((a57327 (= n a57326)))
        (if a57327
          (let ((x57328 (reverse lst2))) x57328)
          (let ((a57329 (cdr lst)))
            (let ((a57330 '1))
              (let ((a57331 (- n a57330)))
                (let ((a57332 (car lst)))
                  (let ((a57333 (cons a57332 lst2)))
                    (take-helper a57329 a57331 a57333))))))))))
  (define (take lst n) (let ((a57334 (list))) (take-helper lst n a57334)))
  (define (length lst)
    (let ((a57335 (null? lst)))
      (if a57335
        (let ((x57336 '0)) x57336)
        (let ((a57337 '1))
          (let ((a57338 (cdr lst)))
            (let ((a57339 (length a57338))) (+ a57337 a57339)))))))
  (define (map proc lst)
    (let ((a57340 (null? lst)))
      (if a57340
        (let ((x57341 (list))) x57341)
        (let ((a57342 (car lst)))
          (let ((a57343 (proc a57342)))
            (let ((a57344 (cdr lst)))
              (let ((a57345 (map proc a57344))) (cons a57343 a57345))))))))
  (define (filter op lst)
    (let ((a57346 (null? lst)))
      (if a57346
        (let ((x57347 (list))) x57347)
        (let ((a57348 (car lst)))
          (let ((a57349 (op a57348)))
            (if a57349
              (let ((a57350 (car lst)))
                (let ((a57351 (cdr lst)))
                  (let ((a57352 (filter op a57351))) (cons a57350 a57352))))
              (let ((a57353 (cdr lst))) (filter op a57353))))))))
  (define (drop lst n)
    (let ((a57354 '0))
      (let ((a57355 (= n a57354)))
        (if a57355
          lst
          (let ((a57356 (cdr lst)))
            (let ((a57357 '1))
              (let ((a57358 (- n a57357))) (drop a57356 a57358))))))))
  (define (foldr proc acc lst)
    (let ((a57359 (null? lst)))
      (if a57359
        acc
        (let ((a57360 (car lst)))
          (let ((a57361 (cdr lst)))
            (let ((a57362 (foldr proc acc a57361))) (proc a57360 a57362)))))))
  (define (append lst1 lst2)
    (let ((a57363 (null? lst1)))
      (if a57363
        lst2
        (let ((a57364 (car lst1)))
          (let ((a57365 (cdr lst1)))
            (let ((a57366 (append a57365 lst2))) (cons a57364 a57366)))))))
  (define (hash . lst) (let ((x57367 (apply-prim hash lst))) x57367))
  (define (hash-ref h k) (let ((x57368 (prim hash-ref h k))) x57368))
  (define (hash-set h k v) (let ((x57369 (prim hash-set h k v))) x57369))
  (define (hash-has-key? h k) (let ((x57370 (prim hash-has-key? h k))) x57370))
  (define (hash-count h) (let ((x57371 (prim hash-count h))) x57371))
  (define (call)
    (let ((a57372 '1))
      (let ((a57373 '2))
        (let ((a57374 '3))
          (let ((a57375 '4))
            (let ((a57376 '5))
              (let ((a57377 '100))
                (< a57372 a57373 a57374 a57375 a57376 a57377))))))))
  (define (brouhaha_main) (let ((x57378 (call))) x57378)))
