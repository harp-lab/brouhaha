'((define (+ . lst) (let ((x58134 (apply-prim + lst))) x58134))
  (define (- . lst) (let ((x58135 (apply-prim - lst))) x58135))
  (define (* . lst) (let ((x58136 (apply-prim * lst))) x58136))
  (define (modulo a b) (let ((x58137 (prim modulo a b))) x58137))
  (define (/ . lst) (let ((x58138 (apply-prim / lst))) x58138))
  (define (= . lst) (let ((x58139 (apply-prim = lst))) x58139))
  (define (> . lst) (let ((x58140 (apply-prim > lst))) x58140))
  (define (< . lst) (let ((x58141 (apply-prim < lst))) x58141))
  (define (<= . lst) (let ((x58142 (apply-prim <= lst))) x58142))
  (define (>= . lst) (let ((x58143 (apply-prim >= lst))) x58143))
  (define (null? x) (let ((x58144 (prim null? x))) x58144))
  (define (equal? x y) (let ((x58145 (prim equal? x y))) x58145))
  (define (eq? x y) (let ((x58146 (prim eq? x y))) x58146))
  (define (cons a b) (let ((x58147 (prim cons a b))) x58147))
  (define (car lst) (let ((x58148 (prim car lst))) x58148))
  (define (cdr lst) (let ((x58149 (prim cdr lst))) x58149))
  (define (even? x)
    (let ((a58150 '0))
      (let ((a58151 '2))
        (let ((a58152 (modulo x a58151))) (equal? a58150 a58152)))))
  (define (odd? x)
    (let ((a58153 '1))
      (let ((a58154 '2))
        (let ((a58155 (modulo x a58154))) (equal? a58153 a58155)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a58156 (null? lst)))
      (if a58156
        (let ((x58157 '#f)) x58157)
        (let ((a58158 (car lst)))
          (let ((a58159 (equal? a58158 x)))
            (if a58159
              (let ((x58160 '#t)) x58160)
              (let ((a58161 (cdr lst))) (member? x a58161))))))))
  (define (foldl fun acc lst)
    (let ((a58162 (null? lst)))
      (if a58162
        acc
        (let ((a58163 (car lst)))
          (let ((a58164 (fun a58163 acc)))
            (let ((a58165 (cdr lst))) (foldl fun a58164 a58165)))))))
  (define (reverse-helper lst lst2)
    (let ((a58166 (null? lst)))
      (if a58166
        lst2
        (let ((a58167 (cdr lst)))
          (let ((a58168 (car lst)))
            (let ((a58169 (cons a58168 lst2)))
              (reverse-helper a58167 a58169)))))))
  (define (reverse lst) (let ((a58170 (list))) (reverse-helper lst a58170)))
  (define (take-helper lst n lst2)
    (let ((a58171 '0))
      (let ((a58172 (= n a58171)))
        (if a58172
          (let ((x58173 (reverse lst2))) x58173)
          (let ((a58174 (cdr lst)))
            (let ((a58175 '1))
              (let ((a58176 (- n a58175)))
                (let ((a58177 (car lst)))
                  (let ((a58178 (cons a58177 lst2)))
                    (take-helper a58174 a58176 a58178))))))))))
  (define (take lst n) (let ((a58179 (list))) (take-helper lst n a58179)))
  (define (length lst)
    (let ((a58180 (null? lst)))
      (if a58180
        (let ((x58181 '0)) x58181)
        (let ((a58182 '1))
          (let ((a58183 (cdr lst)))
            (let ((a58184 (length a58183))) (+ a58182 a58184)))))))
  (define (map proc lst)
    (let ((a58185 (null? lst)))
      (if a58185
        (let ((x58186 (list))) x58186)
        (let ((a58187 (car lst)))
          (let ((a58188 (proc a58187)))
            (let ((a58189 (cdr lst)))
              (let ((a58190 (map proc a58189))) (cons a58188 a58190))))))))
  (define (filter op lst)
    (let ((a58191 (null? lst)))
      (if a58191
        (let ((x58192 (list))) x58192)
        (let ((a58193 (car lst)))
          (let ((a58194 (op a58193)))
            (if a58194
              (let ((a58195 (car lst)))
                (let ((a58196 (cdr lst)))
                  (let ((a58197 (filter op a58196))) (cons a58195 a58197))))
              (let ((a58198 (cdr lst))) (filter op a58198))))))))
  (define (drop lst n)
    (let ((a58199 '0))
      (let ((a58200 (= n a58199)))
        (if a58200
          lst
          (let ((a58201 (cdr lst)))
            (let ((a58202 '1))
              (let ((a58203 (- n a58202))) (drop a58201 a58203))))))))
  (define (foldr proc acc lst)
    (let ((a58204 (null? lst)))
      (if a58204
        acc
        (let ((a58205 (car lst)))
          (let ((a58206 (cdr lst)))
            (let ((a58207 (foldr proc acc a58206))) (proc a58205 a58207)))))))
  (define (append lst1 lst2)
    (let ((a58208 (null? lst1)))
      (if a58208
        lst2
        (let ((a58209 (car lst1)))
          (let ((a58210 (cdr lst1)))
            (let ((a58211 (append a58210 lst2))) (cons a58209 a58211)))))))
  (define (hash . lst) (let ((x58212 (apply-prim hash lst))) x58212))
  (define (hash-ref h k) (let ((x58213 (prim hash-ref h k))) x58213))
  (define (hash-set h k v) (let ((x58214 (prim hash-set h k v))) x58214))
  (define (hash-has-key? h k) (let ((x58215 (prim hash-has-key? h k))) x58215))
  (define (hash-count h) (let ((x58216 (prim hash-count h))) x58216))
  (define (call)
    (let ((a58217 '1))
      (let ((a58218 '2))
        (let ((a58219 '3))
          (let ((a58220 '4))
            (let ((a58221 '5))
              (let ((a58222 '100))
                (< a58217 a58218 a58219 a58220 a58221 a58222))))))))
  (define (brouhaha_main) (let ((x58223 (call))) x58223)))
