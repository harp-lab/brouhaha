'((define (+ . lst)
    (let ((kont5822458324 (prim car lst)))
      (let ((lst58325 (prim cdr lst)))
        (let ((x5813458326 (apply-prim + lst58325)))
          (kont5822458324 x5813458326)))))
  (define (- . lst)
    (let ((kont5822658327 (prim car lst)))
      (let ((lst58328 (prim cdr lst)))
        (let ((x5813558329 (apply-prim - lst58328)))
          (kont5822658327 x5813558329)))))
  (define (* . lst)
    (let ((kont5822858330 (prim car lst)))
      (let ((lst58331 (prim cdr lst)))
        (let ((x5813658332 (apply-prim * lst58331)))
          (kont5822858330 x5813658332)))))
  (define (modulo kont58230 a b)
    (let ((x5813758333 (prim modulo a b))) (kont58230 x5813758333)))
  (define (/ . lst)
    (let ((kont5823158334 (prim car lst)))
      (let ((lst58335 (prim cdr lst)))
        (let ((x5813858336 (apply-prim / lst58335)))
          (kont5823158334 x5813858336)))))
  (define (= . lst)
    (let ((kont5823358337 (prim car lst)))
      (let ((lst58338 (prim cdr lst)))
        (let ((x5813958339 (apply-prim = lst58338)))
          (kont5823358337 x5813958339)))))
  (define (> . lst)
    (let ((kont5823558340 (prim car lst)))
      (let ((lst58341 (prim cdr lst)))
        (let ((x5814058342 (apply-prim > lst58341)))
          (kont5823558340 x5814058342)))))
  (define (< . lst)
    (let ((kont5823758343 (prim car lst)))
      (let ((lst58344 (prim cdr lst)))
        (let ((x5814158345 (apply-prim < lst58344)))
          (kont5823758343 x5814158345)))))
  (define (<= . lst)
    (let ((kont5823958346 (prim car lst)))
      (let ((lst58347 (prim cdr lst)))
        (let ((x5814258348 (apply-prim <= lst58347)))
          (kont5823958346 x5814258348)))))
  (define (>= . lst)
    (let ((kont5824158349 (prim car lst)))
      (let ((lst58350 (prim cdr lst)))
        (let ((x5814358351 (apply-prim >= lst58350)))
          (kont5824158349 x5814358351)))))
  (define (null? kont58243 x)
    (let ((x5814458352 (prim null? x))) (kont58243 x5814458352)))
  (define (equal? kont58244 x y)
    (let ((x5814558353 (prim equal? x y))) (kont58244 x5814558353)))
  (define (eq? kont58245 x y)
    (let ((x5814658354 (prim eq? x y))) (kont58245 x5814658354)))
  (define (cons kont58246 a b)
    (let ((x5814758355 (prim cons a b))) (kont58246 x5814758355)))
  (define (car kont58247 lst)
    (let ((x5814858356 (prim car lst))) (kont58247 x5814858356)))
  (define (cdr kont58248 lst)
    (let ((x5814958357 (prim cdr lst))) (kont58248 x5814958357)))
  (define (even? kont58249 x)
    (let ((a5815058358 '0))
      (let ((a5815158359 '2))
        (let ((f5825058360
               (lambda (a5815258361)
                 (equal? kont58249 a5815058358 a5815258361))))
          (modulo f5825058360 x a5815158359)))))
  (define (odd? kont58251 x)
    (let ((a5815358362 '1))
      (let ((a5815458363 '2))
        (let ((f5825258364
               (lambda (a5815558365)
                 (equal? kont58251 a5815358362 a5815558365))))
          (modulo f5825258364 x a5815458363)))))
  (define (list . x)
    (let ((kont5825358366 (prim car x)))
      (let ((x58367 (prim cdr x))) (kont5825358366 x58367))))
  (define (member? kont58255 x lst)
    (let ((f5825958368
           (lambda (a5815658369)
             (if a5815658369
               (let ((x5815758370 '#f)) (kont58255 x5815758370))
               (let ((f5825858371
                      (lambda (a5815858372)
                        (let ((f5825758373
                               (lambda (a5815958374)
                                 (if a5815958374
                                   (let ((x5816058375 '#t))
                                     (kont58255 x5816058375))
                                   (let ((f5825658376
                                          (lambda (a5816158377)
                                            (member?
                                             kont58255
                                             x
                                             a5816158377))))
                                     (cdr f5825658376 lst))))))
                          (equal? f5825758373 a5815858372 x)))))
                 (car f5825858371 lst))))))
      (null? f5825958368 lst)))
  (define (foldl kont58260 fun acc lst)
    (let ((f5826458378
           (lambda (a5816258379)
             (if a5816258379
               (kont58260 acc)
               (let ((f5826358380
                      (lambda (a5816358381)
                        (let ((f5826258382
                               (lambda (a5816458383)
                                 (let ((f5826158384
                                        (lambda (a5816558385)
                                          (foldl
                                           kont58260
                                           fun
                                           a5816458383
                                           a5816558385))))
                                   (cdr f5826158384 lst)))))
                          (fun f5826258382 a5816358381 acc)))))
                 (car f5826358380 lst))))))
      (null? f5826458378 lst)))
  (define (reverse-helper kont58265 lst lst2)
    (let ((f5826958386
           (lambda (a5816658387)
             (if a5816658387
               (kont58265 lst2)
               (let ((f5826858388
                      (lambda (a5816758389)
                        (let ((f5826758390
                               (lambda (a5816858391)
                                 (let ((f5826658392
                                        (lambda (a5816958393)
                                          (reverse-helper
                                           kont58265
                                           a5816758389
                                           a5816958393))))
                                   (cons f5826658392 a5816858391 lst2)))))
                          (car f5826758390 lst)))))
                 (cdr f5826858388 lst))))))
      (null? f5826958386 lst)))
  (define (reverse kont58270 lst)
    (let ((f5827158394
           (lambda (a5817058395) (reverse-helper kont58270 lst a5817058395))))
      (list f5827158394)))
  (define (take-helper kont58272 lst n lst2)
    (let ((a5817158396 '0))
      (let ((f5827858397
             (lambda (a5817258398)
               (if a5817258398
                 (let ((f5827358399
                        (lambda (x5817358400) (kont58272 x5817358400))))
                   (reverse f5827358399 lst2))
                 (let ((f5827758401
                        (lambda (a5817458402)
                          (let ((a5817558403 '1))
                            (let ((f5827658404
                                   (lambda (a5817658405)
                                     (let ((f5827558406
                                            (lambda (a5817758407)
                                              (let ((f5827458408
                                                     (lambda (a5817858409)
                                                       (take-helper
                                                        kont58272
                                                        a5817458402
                                                        a5817658405
                                                        a5817858409))))
                                                (cons
                                                 f5827458408
                                                 a5817758407
                                                 lst2)))))
                                       (car f5827558406 lst)))))
                              (- f5827658404 n a5817558403))))))
                   (cdr f5827758401 lst))))))
        (= f5827858397 n a5817158396))))
  (define (take kont58279 lst n)
    (let ((f5828058410
           (lambda (a5817958411) (take-helper kont58279 lst n a5817958411))))
      (list f5828058410)))
  (define (length kont58281 lst)
    (let ((f5828458412
           (lambda (a5818058413)
             (if a5818058413
               (let ((x5818158414 '0)) (kont58281 x5818158414))
               (let ((a5818258415 '1))
                 (let ((f5828358416
                        (lambda (a5818358417)
                          (let ((f5828258418
                                 (lambda (a5818458419)
                                   (+ kont58281 a5818258415 a5818458419))))
                            (length f5828258418 a5818358417)))))
                   (cdr f5828358416 lst)))))))
      (null? f5828458412 lst)))
  (define (map kont58285 proc lst)
    (let ((f5829158420
           (lambda (a5818558421)
             (if a5818558421
               (let ((f5828658422
                      (lambda (x5818658423) (kont58285 x5818658423))))
                 (list f5828658422))
               (let ((f5829058424
                      (lambda (a5818758425)
                        (let ((f5828958426
                               (lambda (a5818858427)
                                 (let ((f5828858428
                                        (lambda (a5818958429)
                                          (let ((f5828758430
                                                 (lambda (a5819058431)
                                                   (cons
                                                    kont58285
                                                    a5818858427
                                                    a5819058431))))
                                            (map
                                             f5828758430
                                             proc
                                             a5818958429)))))
                                   (cdr f5828858428 lst)))))
                          (proc f5828958426 a5818758425)))))
                 (car f5829058424 lst))))))
      (null? f5829158420 lst)))
  (define (filter kont58292 op lst)
    (let ((f5830058432
           (lambda (a5819158433)
             (if a5819158433
               (let ((f5829358434
                      (lambda (x5819258435) (kont58292 x5819258435))))
                 (list f5829358434))
               (let ((f5829958436
                      (lambda (a5819358437)
                        (let ((f5829858438
                               (lambda (a5819458439)
                                 (if a5819458439
                                   (let ((f5829658440
                                          (lambda (a5819558441)
                                            (let ((f5829558442
                                                   (lambda (a5819658443)
                                                     (let ((f5829458444
                                                            (lambda (a5819758445)
                                                              (cons
                                                               kont58292
                                                               a5819558441
                                                               a5819758445))))
                                                       (filter
                                                        f5829458444
                                                        op
                                                        a5819658443)))))
                                              (cdr f5829558442 lst)))))
                                     (car f5829658440 lst))
                                   (let ((f5829758446
                                          (lambda (a5819858447)
                                            (filter
                                             kont58292
                                             op
                                             a5819858447))))
                                     (cdr f5829758446 lst))))))
                          (op f5829858438 a5819358437)))))
                 (car f5829958436 lst))))))
      (null? f5830058432 lst)))
  (define (drop kont58301 lst n)
    (let ((a5819958448 '0))
      (let ((f5830458449
             (lambda (a5820058450)
               (if a5820058450
                 (kont58301 lst)
                 (let ((f5830358451
                        (lambda (a5820158452)
                          (let ((a5820258453 '1))
                            (let ((f5830258454
                                   (lambda (a5820358455)
                                     (drop
                                      kont58301
                                      a5820158452
                                      a5820358455))))
                              (- f5830258454 n a5820258453))))))
                   (cdr f5830358451 lst))))))
        (= f5830458449 n a5819958448))))
  (define (foldr kont58305 proc acc lst)
    (let ((f5830958456
           (lambda (a5820458457)
             (if a5820458457
               (kont58305 acc)
               (let ((f5830858458
                      (lambda (a5820558459)
                        (let ((f5830758460
                               (lambda (a5820658461)
                                 (let ((f5830658462
                                        (lambda (a5820758463)
                                          (proc
                                           kont58305
                                           a5820558459
                                           a5820758463))))
                                   (foldr f5830658462 proc acc a5820658461)))))
                          (cdr f5830758460 lst)))))
                 (car f5830858458 lst))))))
      (null? f5830958456 lst)))
  (define (append kont58310 lst1 lst2)
    (let ((f5831458464
           (lambda (a5820858465)
             (if a5820858465
               (kont58310 lst2)
               (let ((f5831358466
                      (lambda (a5820958467)
                        (let ((f5831258468
                               (lambda (a5821058469)
                                 (let ((f5831158470
                                        (lambda (a5821158471)
                                          (cons
                                           kont58310
                                           a5820958467
                                           a5821158471))))
                                   (append f5831158470 a5821058469 lst2)))))
                          (cdr f5831258468 lst1)))))
                 (car f5831358466 lst1))))))
      (null? f5831458464 lst1)))
  (define (hash . lst)
    (let ((kont5831558472 (prim car lst)))
      (let ((lst58473 (prim cdr lst)))
        (let ((x5821258474 (apply-prim hash lst58473)))
          (kont5831558472 x5821258474)))))
  (define (hash-ref kont58317 h k)
    (let ((x5821358475 (prim hash-ref h k))) (kont58317 x5821358475)))
  (define (hash-set kont58318 h k v)
    (let ((x5821458476 (prim hash-set h k v))) (kont58318 x5821458476)))
  (define (hash-has-key? kont58319 h k)
    (let ((x5821558477 (prim hash-has-key? h k))) (kont58319 x5821558477)))
  (define (hash-count kont58320 h)
    (let ((x5821658478 (prim hash-count h))) (kont58320 x5821658478)))
  (define (call kont58321)
    (let ((a5821758479 '1))
      (let ((a5821858480 '2))
        (let ((a5821958481 '3))
          (let ((a5822058482 '4))
            (let ((a5822158483 '5))
              (let ((a5822258484 '100))
                (<
                 kont58321
                 a5821758479
                 a5821858480
                 a5821958481
                 a5822058482
                 a5822158483
                 a5822258484))))))))
  (define (brouhaha_main kont58322)
    (let ((f5832358485 (lambda (x5822358486) (kont58322 x5822358486))))
      (call f5832358485))))
