'((define (+ . lst)
    (let ((kont52152 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52067 (apply-prim + lst))) (kont52152 x52067)))))
  (define (- . lst)
    (let ((kont52154 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52068 (apply-prim - lst))) (kont52154 x52068)))))
  (define (* . lst)
    (let ((kont52156 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52069 (apply-prim * lst))) (kont52156 x52069)))))
  (define (modulo kont52158 a b)
    (let ((x52070 (prim modulo a b))) (kont52158 x52070)))
  (define (/ . lst)
    (let ((kont52159 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52071 (apply-prim / lst))) (kont52159 x52071)))))
  (define (= . lst)
    (let ((kont52161 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52072 (apply-prim = lst))) (kont52161 x52072)))))
  (define (> . lst)
    (let ((kont52163 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52073 (apply-prim > lst))) (kont52163 x52073)))))
  (define (< . lst)
    (let ((kont52165 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52074 (apply-prim < lst))) (kont52165 x52074)))))
  (define (<= . lst)
    (let ((kont52167 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52075 (apply-prim <= lst))) (kont52167 x52075)))))
  (define (>= . lst)
    (let ((kont52169 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52076 (apply-prim >= lst))) (kont52169 x52076)))))
  (define (null? kont52171 x)
    (let ((x52077 (prim null? x))) (kont52171 x52077)))
  (define (equal? kont52172 x y)
    (let ((x52078 (prim equal? x y))) (kont52172 x52078)))
  (define (eq? kont52173 x y)
    (let ((x52079 (prim eq? x y))) (kont52173 x52079)))
  (define (cons kont52174 a b)
    (let ((x52080 (prim cons a b))) (kont52174 x52080)))
  (define (car kont52175 lst)
    (let ((x52081 (prim car lst))) (kont52175 x52081)))
  (define (cdr kont52176 lst)
    (let ((x52082 (prim cdr lst))) (kont52176 x52082)))
  (define (even? kont52177 x)
    (let ((a52083 '0))
      (let ((a52084 '2))
        (let ((f52178 (lambda (a52085) (equal? kont52177 a52083 a52085))))
          (modulo f52178 x a52084)))))
  (define (odd? kont52179 x)
    (let ((a52086 '1))
      (let ((a52087 '2))
        (let ((f52180 (lambda (a52088) (equal? kont52179 a52086 a52088))))
          (modulo f52180 x a52087)))))
  (define (list . x)
    (let ((kont52181 (prim car x))) (let ((x (prim cdr x))) (kont52181 x))))
  (define (member? kont52183 x lst)
    (let ((f52187
           (lambda (a52089)
             (if a52089
               (let ((x52090 '#f)) (kont52183 x52090))
               (let ((f52186
                      (lambda (a52091)
                        (let ((f52185
                               (lambda (a52092)
                                 (if a52092
                                   (let ((x52093 '#t)) (kont52183 x52093))
                                   (let ((f52184
                                          (lambda (a52094)
                                            (member? kont52183 x a52094))))
                                     (cdr f52184 lst))))))
                          (equal? f52185 a52091 x)))))
                 (car f52186 lst))))))
      (null? f52187 lst)))
  (define (foldl kont52188 fun acc lst)
    (let ((f52192
           (lambda (a52095)
             (if a52095
               (kont52188 acc)
               (let ((f52191
                      (lambda (a52096)
                        (let ((f52190
                               (lambda (a52097)
                                 (let ((f52189
                                        (lambda (a52098)
                                          (foldl
                                           kont52188
                                           fun
                                           a52097
                                           a52098))))
                                   (cdr f52189 lst)))))
                          (fun f52190 a52096 acc)))))
                 (car f52191 lst))))))
      (null? f52192 lst)))
  (define (reverse-helper kont52193 lst lst2)
    (let ((f52197
           (lambda (a52099)
             (if a52099
               (kont52193 lst2)
               (let ((f52196
                      (lambda (a52100)
                        (let ((f52195
                               (lambda (a52101)
                                 (let ((f52194
                                        (lambda (a52102)
                                          (reverse-helper
                                           kont52193
                                           a52100
                                           a52102))))
                                   (cons f52194 a52101 lst2)))))
                          (car f52195 lst)))))
                 (cdr f52196 lst))))))
      (null? f52197 lst)))
  (define (reverse kont52198 lst)
    (let ((f52199 (lambda (a52103) (reverse-helper kont52198 lst a52103))))
      (list f52199)))
  (define (take-helper kont52200 lst n lst2)
    (let ((a52104 '0))
      (let ((f52206
             (lambda (a52105)
               (if a52105
                 (let ((f52201 (lambda (x52106) (kont52200 x52106))))
                   (reverse f52201 lst2))
                 (let ((f52205
                        (lambda (a52107)
                          (let ((a52108 '1))
                            (let ((f52204
                                   (lambda (a52109)
                                     (let ((f52203
                                            (lambda (a52110)
                                              (let ((f52202
                                                     (lambda (a52111)
                                                       (take-helper
                                                        kont52200
                                                        a52107
                                                        a52109
                                                        a52111))))
                                                (cons f52202 a52110 lst2)))))
                                       (car f52203 lst)))))
                              (- f52204 n a52108))))))
                   (cdr f52205 lst))))))
        (= f52206 n a52104))))
  (define (take kont52207 lst n)
    (let ((f52208 (lambda (a52112) (take-helper kont52207 lst n a52112))))
      (list f52208)))
  (define (length kont52209 lst)
    (let ((f52212
           (lambda (a52113)
             (if a52113
               (let ((x52114 '0)) (kont52209 x52114))
               (let ((a52115 '1))
                 (let ((f52211
                        (lambda (a52116)
                          (let ((f52210
                                 (lambda (a52117)
                                   (+ kont52209 a52115 a52117))))
                            (length f52210 a52116)))))
                   (cdr f52211 lst)))))))
      (null? f52212 lst)))
  (define (map kont52213 proc lst)
    (let ((f52219
           (lambda (a52118)
             (if a52118
               (let ((f52214 (lambda (x52119) (kont52213 x52119))))
                 (list f52214))
               (let ((f52218
                      (lambda (a52120)
                        (let ((f52217
                               (lambda (a52121)
                                 (let ((f52216
                                        (lambda (a52122)
                                          (let ((f52215
                                                 (lambda (a52123)
                                                   (cons
                                                    kont52213
                                                    a52121
                                                    a52123))))
                                            (map f52215 proc a52122)))))
                                   (cdr f52216 lst)))))
                          (proc f52217 a52120)))))
                 (car f52218 lst))))))
      (null? f52219 lst)))
  (define (filter kont52220 op lst)
    (let ((f52228
           (lambda (a52124)
             (if a52124
               (let ((f52221 (lambda (x52125) (kont52220 x52125))))
                 (list f52221))
               (let ((f52227
                      (lambda (a52126)
                        (let ((f52226
                               (lambda (a52127)
                                 (if a52127
                                   (let ((f52224
                                          (lambda (a52128)
                                            (let ((f52223
                                                   (lambda (a52129)
                                                     (let ((f52222
                                                            (lambda (a52130)
                                                              (cons
                                                               kont52220
                                                               a52128
                                                               a52130))))
                                                       (filter
                                                        f52222
                                                        op
                                                        a52129)))))
                                              (cdr f52223 lst)))))
                                     (car f52224 lst))
                                   (let ((f52225
                                          (lambda (a52131)
                                            (filter kont52220 op a52131))))
                                     (cdr f52225 lst))))))
                          (op f52226 a52126)))))
                 (car f52227 lst))))))
      (null? f52228 lst)))
  (define (drop kont52229 lst n)
    (let ((a52132 '0))
      (let ((f52232
             (lambda (a52133)
               (if a52133
                 (kont52229 lst)
                 (let ((f52231
                        (lambda (a52134)
                          (let ((a52135 '1))
                            (let ((f52230
                                   (lambda (a52136)
                                     (drop kont52229 a52134 a52136))))
                              (- f52230 n a52135))))))
                   (cdr f52231 lst))))))
        (= f52232 n a52132))))
  (define (foldr kont52233 proc acc lst)
    (let ((f52237
           (lambda (a52137)
             (if a52137
               (kont52233 acc)
               (let ((f52236
                      (lambda (a52138)
                        (let ((f52235
                               (lambda (a52139)
                                 (let ((f52234
                                        (lambda (a52140)
                                          (proc kont52233 a52138 a52140))))
                                   (foldr f52234 proc acc a52139)))))
                          (cdr f52235 lst)))))
                 (car f52236 lst))))))
      (null? f52237 lst)))
  (define (append kont52238 lst1 lst2)
    (let ((f52242
           (lambda (a52141)
             (if a52141
               (kont52238 lst2)
               (let ((f52241
                      (lambda (a52142)
                        (let ((f52240
                               (lambda (a52143)
                                 (let ((f52239
                                        (lambda (a52144)
                                          (cons kont52238 a52142 a52144))))
                                   (append f52239 a52143 lst2)))))
                          (cdr f52240 lst1)))))
                 (car f52241 lst1))))))
      (null? f52242 lst1)))
  (define (hash . lst)
    (let ((kont52243 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52145 (apply-prim hash lst))) (kont52243 x52145)))))
  (define (hash-ref kont52245 h k)
    (let ((x52146 (prim hash-ref h k))) (kont52245 x52146)))
  (define (hash-set kont52246 h k v)
    (let ((x52147 (prim hash-set h k v))) (kont52246 x52147)))
  (define (hash-has-key? kont52247 h k)
    (let ((x52148 (prim hash-has-key? h k))) (kont52247 x52148)))
  (define (hash-count kont52248 h)
    (let ((x52149 (prim hash-count h))) (kont52248 x52149)))
  (define (call kont52249) (let ((x52150 "random")) (kont52249 x52150)))
  (define (brouhaha_main kont52250)
    (let ((f52251 (lambda (x52151) (kont52250 x52151)))) (call f52251))))
