'((define (+ . lst)
    (let ((kont50520 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50435 (apply-prim + lst))) (kont50520 x50435)))))
  (define (- . lst)
    (let ((kont50522 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50436 (apply-prim - lst))) (kont50522 x50436)))))
  (define (* . lst)
    (let ((kont50524 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50437 (apply-prim * lst))) (kont50524 x50437)))))
  (define (modulo kont50526 a b)
    (let ((x50438 (prim modulo a b))) (kont50526 x50438)))
  (define (/ . lst)
    (let ((kont50527 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50439 (apply-prim / lst))) (kont50527 x50439)))))
  (define (= . lst)
    (let ((kont50529 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50440 (apply-prim = lst))) (kont50529 x50440)))))
  (define (> . lst)
    (let ((kont50531 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50441 (apply-prim > lst))) (kont50531 x50441)))))
  (define (< . lst)
    (let ((kont50533 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50442 (apply-prim < lst))) (kont50533 x50442)))))
  (define (<= . lst)
    (let ((kont50535 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50443 (apply-prim <= lst))) (kont50535 x50443)))))
  (define (>= . lst)
    (let ((kont50537 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50444 (apply-prim >= lst))) (kont50537 x50444)))))
  (define (null? kont50539 x)
    (let ((x50445 (prim null? x))) (kont50539 x50445)))
  (define (equal? kont50540 x y)
    (let ((x50446 (prim equal? x y))) (kont50540 x50446)))
  (define (eq? kont50541 x y)
    (let ((x50447 (prim eq? x y))) (kont50541 x50447)))
  (define (cons kont50542 a b)
    (let ((x50448 (prim cons a b))) (kont50542 x50448)))
  (define (car kont50543 lst)
    (let ((x50449 (prim car lst))) (kont50543 x50449)))
  (define (cdr kont50544 lst)
    (let ((x50450 (prim cdr lst))) (kont50544 x50450)))
  (define (even? kont50545 x)
    (let ((a50451 '0))
      (let ((a50452 '2))
        (let ((f50546 (lambda (a50453) (equal? kont50545 a50451 a50453))))
          (modulo f50546 x a50452)))))
  (define (odd? kont50547 x)
    (let ((a50454 '1))
      (let ((a50455 '2))
        (let ((f50548 (lambda (a50456) (equal? kont50547 a50454 a50456))))
          (modulo f50548 x a50455)))))
  (define (list . x)
    (let ((kont50549 (prim car x))) (let ((x (prim cdr x))) (kont50549 x))))
  (define (member? kont50551 x lst)
    (let ((f50555
           (lambda (a50457)
             (if a50457
               (let ((x50458 '#f)) (kont50551 x50458))
               (let ((f50554
                      (lambda (a50459)
                        (let ((f50553
                               (lambda (a50460)
                                 (if a50460
                                   (let ((x50461 '#t)) (kont50551 x50461))
                                   (let ((f50552
                                          (lambda (a50462)
                                            (member? kont50551 x a50462))))
                                     (cdr f50552 lst))))))
                          (equal? f50553 a50459 x)))))
                 (car f50554 lst))))))
      (null? f50555 lst)))
  (define (foldl kont50556 fun acc lst)
    (let ((f50560
           (lambda (a50463)
             (if a50463
               (kont50556 acc)
               (let ((f50559
                      (lambda (a50464)
                        (let ((f50558
                               (lambda (a50465)
                                 (let ((f50557
                                        (lambda (a50466)
                                          (foldl
                                           kont50556
                                           fun
                                           a50465
                                           a50466))))
                                   (cdr f50557 lst)))))
                          (fun f50558 a50464 acc)))))
                 (car f50559 lst))))))
      (null? f50560 lst)))
  (define (reverse-helper kont50561 lst lst2)
    (let ((f50565
           (lambda (a50467)
             (if a50467
               (kont50561 lst2)
               (let ((f50564
                      (lambda (a50468)
                        (let ((f50563
                               (lambda (a50469)
                                 (let ((f50562
                                        (lambda (a50470)
                                          (reverse-helper
                                           kont50561
                                           a50468
                                           a50470))))
                                   (cons f50562 a50469 lst2)))))
                          (car f50563 lst)))))
                 (cdr f50564 lst))))))
      (null? f50565 lst)))
  (define (reverse kont50566 lst)
    (let ((f50567 (lambda (a50471) (reverse-helper kont50566 lst a50471))))
      (list f50567)))
  (define (take-helper kont50568 lst n lst2)
    (let ((a50472 '0))
      (let ((f50574
             (lambda (a50473)
               (if a50473
                 (let ((f50569 (lambda (x50474) (kont50568 x50474))))
                   (reverse f50569 lst2))
                 (let ((f50573
                        (lambda (a50475)
                          (let ((a50476 '1))
                            (let ((f50572
                                   (lambda (a50477)
                                     (let ((f50571
                                            (lambda (a50478)
                                              (let ((f50570
                                                     (lambda (a50479)
                                                       (take-helper
                                                        kont50568
                                                        a50475
                                                        a50477
                                                        a50479))))
                                                (cons f50570 a50478 lst2)))))
                                       (car f50571 lst)))))
                              (- f50572 n a50476))))))
                   (cdr f50573 lst))))))
        (= f50574 n a50472))))
  (define (take kont50575 lst n)
    (let ((f50576 (lambda (a50480) (take-helper kont50575 lst n a50480))))
      (list f50576)))
  (define (length kont50577 lst)
    (let ((f50580
           (lambda (a50481)
             (if a50481
               (let ((x50482 '0)) (kont50577 x50482))
               (let ((a50483 '1))
                 (let ((f50579
                        (lambda (a50484)
                          (let ((f50578
                                 (lambda (a50485)
                                   (+ kont50577 a50483 a50485))))
                            (length f50578 a50484)))))
                   (cdr f50579 lst)))))))
      (null? f50580 lst)))
  (define (map kont50581 proc lst)
    (let ((f50587
           (lambda (a50486)
             (if a50486
               (let ((f50582 (lambda (x50487) (kont50581 x50487))))
                 (list f50582))
               (let ((f50586
                      (lambda (a50488)
                        (let ((f50585
                               (lambda (a50489)
                                 (let ((f50584
                                        (lambda (a50490)
                                          (let ((f50583
                                                 (lambda (a50491)
                                                   (cons
                                                    kont50581
                                                    a50489
                                                    a50491))))
                                            (map f50583 proc a50490)))))
                                   (cdr f50584 lst)))))
                          (proc f50585 a50488)))))
                 (car f50586 lst))))))
      (null? f50587 lst)))
  (define (filter kont50588 op lst)
    (let ((f50596
           (lambda (a50492)
             (if a50492
               (let ((f50589 (lambda (x50493) (kont50588 x50493))))
                 (list f50589))
               (let ((f50595
                      (lambda (a50494)
                        (let ((f50594
                               (lambda (a50495)
                                 (if a50495
                                   (let ((f50592
                                          (lambda (a50496)
                                            (let ((f50591
                                                   (lambda (a50497)
                                                     (let ((f50590
                                                            (lambda (a50498)
                                                              (cons
                                                               kont50588
                                                               a50496
                                                               a50498))))
                                                       (filter
                                                        f50590
                                                        op
                                                        a50497)))))
                                              (cdr f50591 lst)))))
                                     (car f50592 lst))
                                   (let ((f50593
                                          (lambda (a50499)
                                            (filter kont50588 op a50499))))
                                     (cdr f50593 lst))))))
                          (op f50594 a50494)))))
                 (car f50595 lst))))))
      (null? f50596 lst)))
  (define (drop kont50597 lst n)
    (let ((a50500 '0))
      (let ((f50600
             (lambda (a50501)
               (if a50501
                 (kont50597 lst)
                 (let ((f50599
                        (lambda (a50502)
                          (let ((a50503 '1))
                            (let ((f50598
                                   (lambda (a50504)
                                     (drop kont50597 a50502 a50504))))
                              (- f50598 n a50503))))))
                   (cdr f50599 lst))))))
        (= f50600 n a50500))))
  (define (foldr kont50601 proc acc lst)
    (let ((f50605
           (lambda (a50505)
             (if a50505
               (kont50601 acc)
               (let ((f50604
                      (lambda (a50506)
                        (let ((f50603
                               (lambda (a50507)
                                 (let ((f50602
                                        (lambda (a50508)
                                          (proc kont50601 a50506 a50508))))
                                   (foldr f50602 proc acc a50507)))))
                          (cdr f50603 lst)))))
                 (car f50604 lst))))))
      (null? f50605 lst)))
  (define (append kont50606 lst1 lst2)
    (let ((f50610
           (lambda (a50509)
             (if a50509
               (kont50606 lst2)
               (let ((f50609
                      (lambda (a50510)
                        (let ((f50608
                               (lambda (a50511)
                                 (let ((f50607
                                        (lambda (a50512)
                                          (cons kont50606 a50510 a50512))))
                                   (append f50607 a50511 lst2)))))
                          (cdr f50608 lst1)))))
                 (car f50609 lst1))))))
      (null? f50610 lst1)))
  (define (hash . lst)
    (let ((kont50611 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50513 (apply-prim hash lst))) (kont50611 x50513)))))
  (define (hash-ref kont50613 h k)
    (let ((x50514 (prim hash-ref h k))) (kont50613 x50514)))
  (define (hash-set kont50614 h k v)
    (let ((x50515 (prim hash-set h k v))) (kont50614 x50515)))
  (define (hash-has-key? kont50615 h k)
    (let ((x50516 (prim hash-has-key? h k))) (kont50615 x50516)))
  (define (hash-count kont50616 h)
    (let ((x50517 (prim hash-count h))) (kont50616 x50517)))
  (define (call kont50617) (let ((x50518 "random")) (kont50617 x50518)))
  (define (brouhaha_main kont50618)
    (let ((f50619 (lambda (x50519) (kont50618 x50519)))) (call f50619))))
