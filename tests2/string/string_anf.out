'((define (+ . lst)
    (let ((kont54056 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53971 (apply-prim + lst))) (kont54056 x53971)))))
  (define (- . lst)
    (let ((kont54058 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53972 (apply-prim - lst))) (kont54058 x53972)))))
  (define (* . lst)
    (let ((kont54060 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53973 (apply-prim * lst))) (kont54060 x53973)))))
  (define (modulo kont54062 a b)
    (let ((x53974 (prim modulo a b))) (kont54062 x53974)))
  (define (/ . lst)
    (let ((kont54063 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53975 (apply-prim / lst))) (kont54063 x53975)))))
  (define (= . lst)
    (let ((kont54065 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53976 (apply-prim = lst))) (kont54065 x53976)))))
  (define (> . lst)
    (let ((kont54067 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53977 (apply-prim > lst))) (kont54067 x53977)))))
  (define (< . lst)
    (let ((kont54069 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53978 (apply-prim < lst))) (kont54069 x53978)))))
  (define (<= . lst)
    (let ((kont54071 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53979 (apply-prim <= lst))) (kont54071 x53979)))))
  (define (>= . lst)
    (let ((kont54073 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53980 (apply-prim >= lst))) (kont54073 x53980)))))
  (define (null? kont54075 x)
    (let ((x53981 (prim null? x))) (kont54075 x53981)))
  (define (equal? kont54076 x y)
    (let ((x53982 (prim equal? x y))) (kont54076 x53982)))
  (define (eq? kont54077 x y)
    (let ((x53983 (prim eq? x y))) (kont54077 x53983)))
  (define (cons kont54078 a b)
    (let ((x53984 (prim cons a b))) (kont54078 x53984)))
  (define (car kont54079 lst)
    (let ((x53985 (prim car lst))) (kont54079 x53985)))
  (define (cdr kont54080 lst)
    (let ((x53986 (prim cdr lst))) (kont54080 x53986)))
  (define (even? kont54081 x)
    (let ((a53987 '0))
      (let ((a53988 '2))
        (let ((f54082 (lambda (a53989) (equal? kont54081 a53987 a53989))))
          (modulo f54082 x a53988)))))
  (define (odd? kont54083 x)
    (let ((a53990 '1))
      (let ((a53991 '2))
        (let ((f54084 (lambda (a53992) (equal? kont54083 a53990 a53992))))
          (modulo f54084 x a53991)))))
  (define (list . x)
    (let ((kont54085 (prim car x))) (let ((x (prim cdr x))) (kont54085 x))))
  (define (member? kont54087 x lst)
    (let ((f54091
           (lambda (a53993)
             (if a53993
               (let ((x53994 '#f)) (kont54087 x53994))
               (let ((f54090
                      (lambda (a53995)
                        (let ((f54089
                               (lambda (a53996)
                                 (if a53996
                                   (let ((x53997 '#t)) (kont54087 x53997))
                                   (let ((f54088
                                          (lambda (a53998)
                                            (member? kont54087 x a53998))))
                                     (cdr f54088 lst))))))
                          (equal? f54089 a53995 x)))))
                 (car f54090 lst))))))
      (null? f54091 lst)))
  (define (foldl kont54092 fun acc lst)
    (let ((f54096
           (lambda (a53999)
             (if a53999
               (kont54092 acc)
               (let ((f54095
                      (lambda (a54000)
                        (let ((f54094
                               (lambda (a54001)
                                 (let ((f54093
                                        (lambda (a54002)
                                          (foldl
                                           kont54092
                                           fun
                                           a54001
                                           a54002))))
                                   (cdr f54093 lst)))))
                          (fun f54094 a54000 acc)))))
                 (car f54095 lst))))))
      (null? f54096 lst)))
  (define (reverse-helper kont54097 lst lst2)
    (let ((f54101
           (lambda (a54003)
             (if a54003
               (kont54097 lst2)
               (let ((f54100
                      (lambda (a54004)
                        (let ((f54099
                               (lambda (a54005)
                                 (let ((f54098
                                        (lambda (a54006)
                                          (reverse-helper
                                           kont54097
                                           a54004
                                           a54006))))
                                   (cons f54098 a54005 lst2)))))
                          (car f54099 lst)))))
                 (cdr f54100 lst))))))
      (null? f54101 lst)))
  (define (reverse kont54102 lst)
    (let ((f54103 (lambda (a54007) (reverse-helper kont54102 lst a54007))))
      (list f54103)))
  (define (take-helper kont54104 lst n lst2)
    (let ((a54008 '0))
      (let ((f54110
             (lambda (a54009)
               (if a54009
                 (let ((f54105 (lambda (x54010) (kont54104 x54010))))
                   (reverse f54105 lst2))
                 (let ((f54109
                        (lambda (a54011)
                          (let ((a54012 '1))
                            (let ((f54108
                                   (lambda (a54013)
                                     (let ((f54107
                                            (lambda (a54014)
                                              (let ((f54106
                                                     (lambda (a54015)
                                                       (take-helper
                                                        kont54104
                                                        a54011
                                                        a54013
                                                        a54015))))
                                                (cons f54106 a54014 lst2)))))
                                       (car f54107 lst)))))
                              (- f54108 n a54012))))))
                   (cdr f54109 lst))))))
        (= f54110 n a54008))))
  (define (take kont54111 lst n)
    (let ((f54112 (lambda (a54016) (take-helper kont54111 lst n a54016))))
      (list f54112)))
  (define (length kont54113 lst)
    (let ((f54116
           (lambda (a54017)
             (if a54017
               (let ((x54018 '0)) (kont54113 x54018))
               (let ((a54019 '1))
                 (let ((f54115
                        (lambda (a54020)
                          (let ((f54114
                                 (lambda (a54021)
                                   (+ kont54113 a54019 a54021))))
                            (length f54114 a54020)))))
                   (cdr f54115 lst)))))))
      (null? f54116 lst)))
  (define (map kont54117 proc lst)
    (let ((f54123
           (lambda (a54022)
             (if a54022
               (let ((f54118 (lambda (x54023) (kont54117 x54023))))
                 (list f54118))
               (let ((f54122
                      (lambda (a54024)
                        (let ((f54121
                               (lambda (a54025)
                                 (let ((f54120
                                        (lambda (a54026)
                                          (let ((f54119
                                                 (lambda (a54027)
                                                   (cons
                                                    kont54117
                                                    a54025
                                                    a54027))))
                                            (map f54119 proc a54026)))))
                                   (cdr f54120 lst)))))
                          (proc f54121 a54024)))))
                 (car f54122 lst))))))
      (null? f54123 lst)))
  (define (filter kont54124 op lst)
    (let ((f54132
           (lambda (a54028)
             (if a54028
               (let ((f54125 (lambda (x54029) (kont54124 x54029))))
                 (list f54125))
               (let ((f54131
                      (lambda (a54030)
                        (let ((f54130
                               (lambda (a54031)
                                 (if a54031
                                   (let ((f54128
                                          (lambda (a54032)
                                            (let ((f54127
                                                   (lambda (a54033)
                                                     (let ((f54126
                                                            (lambda (a54034)
                                                              (cons
                                                               kont54124
                                                               a54032
                                                               a54034))))
                                                       (filter
                                                        f54126
                                                        op
                                                        a54033)))))
                                              (cdr f54127 lst)))))
                                     (car f54128 lst))
                                   (let ((f54129
                                          (lambda (a54035)
                                            (filter kont54124 op a54035))))
                                     (cdr f54129 lst))))))
                          (op f54130 a54030)))))
                 (car f54131 lst))))))
      (null? f54132 lst)))
  (define (drop kont54133 lst n)
    (let ((a54036 '0))
      (let ((f54136
             (lambda (a54037)
               (if a54037
                 (kont54133 lst)
                 (let ((f54135
                        (lambda (a54038)
                          (let ((a54039 '1))
                            (let ((f54134
                                   (lambda (a54040)
                                     (drop kont54133 a54038 a54040))))
                              (- f54134 n a54039))))))
                   (cdr f54135 lst))))))
        (= f54136 n a54036))))
  (define (foldr kont54137 proc acc lst)
    (let ((f54141
           (lambda (a54041)
             (if a54041
               (kont54137 acc)
               (let ((f54140
                      (lambda (a54042)
                        (let ((f54139
                               (lambda (a54043)
                                 (let ((f54138
                                        (lambda (a54044)
                                          (proc kont54137 a54042 a54044))))
                                   (foldr f54138 proc acc a54043)))))
                          (cdr f54139 lst)))))
                 (car f54140 lst))))))
      (null? f54141 lst)))
  (define (append kont54142 lst1 lst2)
    (let ((f54146
           (lambda (a54045)
             (if a54045
               (kont54142 lst2)
               (let ((f54145
                      (lambda (a54046)
                        (let ((f54144
                               (lambda (a54047)
                                 (let ((f54143
                                        (lambda (a54048)
                                          (cons kont54142 a54046 a54048))))
                                   (append f54143 a54047 lst2)))))
                          (cdr f54144 lst1)))))
                 (car f54145 lst1))))))
      (null? f54146 lst1)))
  (define (hash . lst)
    (let ((kont54147 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54049 (apply-prim hash lst))) (kont54147 x54049)))))
  (define (hash-ref kont54149 h k)
    (let ((x54050 (prim hash-ref h k))) (kont54149 x54050)))
  (define (hash-set kont54150 h k v)
    (let ((x54051 (prim hash-set h k v))) (kont54150 x54051)))
  (define (hash-has-key? kont54151 h k)
    (let ((x54052 (prim hash-has-key? h k))) (kont54151 x54052)))
  (define (hash-count kont54152 h)
    (let ((x54053 (prim hash-count h))) (kont54152 x54053)))
  (define (call kont54153) (let ((x54054 "random")) (kont54153 x54054)))
  (define (brouhaha_main kont54154)
    (let ((f54155 (lambda (x54055) (kont54154 x54055)))) (call f54155))))
