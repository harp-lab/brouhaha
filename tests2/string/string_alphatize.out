'((define (+ . lst) (let ((x53068 (apply-prim + lst))) x53068))
  (define (- . lst) (let ((x53069 (apply-prim - lst))) x53069))
  (define (* . lst) (let ((x53070 (apply-prim * lst))) x53070))
  (define (modulo a b) (let ((x53071 (prim modulo a b))) x53071))
  (define (/ . lst) (let ((x53072 (apply-prim / lst))) x53072))
  (define (= . lst) (let ((x53073 (apply-prim = lst))) x53073))
  (define (> . lst) (let ((x53074 (apply-prim > lst))) x53074))
  (define (< . lst) (let ((x53075 (apply-prim < lst))) x53075))
  (define (<= . lst) (let ((x53076 (apply-prim <= lst))) x53076))
  (define (>= . lst) (let ((x53077 (apply-prim >= lst))) x53077))
  (define (null? x) (let ((x53078 (prim null? x))) x53078))
  (define (equal? x y) (let ((x53079 (prim equal? x y))) x53079))
  (define (eq? x y) (let ((x53080 (prim eq? x y))) x53080))
  (define (cons a b) (let ((x53081 (prim cons a b))) x53081))
  (define (car lst) (let ((x53082 (prim car lst))) x53082))
  (define (cdr lst) (let ((x53083 (prim cdr lst))) x53083))
  (define (even? x)
    (let ((a53084 '0))
      (let ((a53085 '2))
        (let ((a53086 (modulo x a53085))) (equal? a53084 a53086)))))
  (define (odd? x)
    (let ((a53087 '1))
      (let ((a53088 '2))
        (let ((a53089 (modulo x a53088))) (equal? a53087 a53089)))))
  (define (list . x) x)
  (define (and . lst) (let ((x53090 (apply-prim and lst))) x53090))
  (define (or . lst) (let ((x53091 (apply-prim or lst))) x53091))
  (define (member? x lst)
    (let ((a53092 (null? lst)))
      (if a53092
        (let ((x53093 '#f)) x53093)
        (let ((a53094 (car lst)))
          (let ((a53095 (equal? a53094 x)))
            (if a53095
              (let ((x53096 '#t)) x53096)
              (let ((a53097 (cdr lst))) (member? x a53097))))))))
  (define (foldl fun acc lst)
    (let ((a53098 (null? lst)))
      (if a53098
        acc
        (let ((a53099 (car lst)))
          (let ((a53100 (fun a53099 acc)))
            (let ((a53101 (cdr lst))) (foldl fun a53100 a53101)))))))
  (define (reverse-helper lst lst2)
    (let ((a53102 (null? lst)))
      (if a53102
        lst2
        (let ((a53103 (cdr lst)))
          (let ((a53104 (car lst)))
            (let ((a53105 (cons a53104 lst2)))
              (reverse-helper a53103 a53105)))))))
  (define (reverse lst) (let ((a53106 (list))) (reverse-helper lst a53106)))
  (define (take-helper lst n lst2)
    (let ((a53107 '0))
      (let ((a53108 (= n a53107)))
        (if a53108
          (let ((x53109 (reverse lst2))) x53109)
          (let ((a53110 (cdr lst)))
            (let ((a53111 '1))
              (let ((a53112 (- n a53111)))
                (let ((a53113 (car lst)))
                  (let ((a53114 (cons a53113 lst2)))
                    (take-helper a53110 a53112 a53114))))))))))
  (define (take lst n) (let ((a53115 (list))) (take-helper lst n a53115)))
  (define (length lst)
    (let ((a53116 (null? lst)))
      (if a53116
        (let ((x53117 '0)) x53117)
        (let ((a53118 '1))
          (let ((a53119 (cdr lst)))
            (let ((a53120 (length a53119))) (+ a53118 a53120)))))))
  (define (map proc lst)
    (let ((a53121 (null? lst)))
      (if a53121
        (let ((x53122 (list))) x53122)
        (let ((a53123 (car lst)))
          (let ((a53124 (proc a53123)))
            (let ((a53125 (cdr lst)))
              (let ((a53126 (map proc a53125))) (cons a53124 a53126))))))))
  (define (filter op lst)
    (let ((a53127 (null? lst)))
      (if a53127
        (let ((x53128 (list))) x53128)
        (let ((a53129 (car lst)))
          (let ((a53130 (op a53129)))
            (if a53130
              (let ((a53131 (car lst)))
                (let ((a53132 (cdr lst)))
                  (let ((a53133 (filter op a53132))) (cons a53131 a53133))))
              (let ((a53134 (cdr lst))) (filter op a53134))))))))
  (define (drop lst n)
    (let ((a53135 '0))
      (let ((a53136 (= n a53135)))
        (if a53136
          lst
          (let ((a53137 (cdr lst)))
            (let ((a53138 '1))
              (let ((a53139 (- n a53138))) (drop a53137 a53139))))))))
  (define (foldr proc acc lst)
    (let ((a53140 (null? lst)))
      (if a53140
        acc
        (let ((a53141 (car lst)))
          (let ((a53142 (cdr lst)))
            (let ((a53143 (foldr proc acc a53142))) (proc a53141 a53143)))))))
  (define (append lst1 lst2)
    (let ((a53144 (null? lst1)))
      (if a53144
        lst2
        (let ((a53145 (car lst1)))
          (let ((a53146 (cdr lst1)))
            (let ((a53147 (append a53146 lst2))) (cons a53145 a53147)))))))
  (define (hash . lst) (let ((x53148 (apply-prim hash lst))) x53148))
  (define (hash-ref h k) (let ((x53149 (prim hash-ref h k))) x53149))
  (define (hash-set h k v) (let ((x53150 (prim hash-set h k v))) x53150))
  (define (hash-has-key? h k) (let ((x53151 (prim hash-has-key? h k))) x53151))
  (define (hash-count h) (let ((x53152 (prim hash-count h))) x53152))
  (define (call) (let ((x53153 "random")) x53153))
  (define (brouhaha_main) (let ((x53154 (call))) x53154)))
