'((define (+ . lst) (let ((x52067 (apply-prim + lst))) x52067))
  (define (- . lst) (let ((x52068 (apply-prim - lst))) x52068))
  (define (* . lst) (let ((x52069 (apply-prim * lst))) x52069))
  (define (modulo a b) (let ((x52070 (prim modulo a b))) x52070))
  (define (/ . lst) (let ((x52071 (apply-prim / lst))) x52071))
  (define (= . lst) (let ((x52072 (apply-prim = lst))) x52072))
  (define (> . lst) (let ((x52073 (apply-prim > lst))) x52073))
  (define (< . lst) (let ((x52074 (apply-prim < lst))) x52074))
  (define (<= . lst) (let ((x52075 (apply-prim <= lst))) x52075))
  (define (>= . lst) (let ((x52076 (apply-prim >= lst))) x52076))
  (define (null? x) (let ((x52077 (prim null? x))) x52077))
  (define (equal? x y) (let ((x52078 (prim equal? x y))) x52078))
  (define (eq? x y) (let ((x52079 (prim eq? x y))) x52079))
  (define (cons a b) (let ((x52080 (prim cons a b))) x52080))
  (define (car lst) (let ((x52081 (prim car lst))) x52081))
  (define (cdr lst) (let ((x52082 (prim cdr lst))) x52082))
  (define (even? x)
    (let ((a52083 '0))
      (let ((a52084 '2))
        (let ((a52085 (modulo x a52084))) (equal? a52083 a52085)))))
  (define (odd? x)
    (let ((a52086 '1))
      (let ((a52087 '2))
        (let ((a52088 (modulo x a52087))) (equal? a52086 a52088)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a52089 (null? lst)))
      (if a52089
        (let ((x52090 '#f)) x52090)
        (let ((a52091 (car lst)))
          (let ((a52092 (equal? a52091 x)))
            (if a52092
              (let ((x52093 '#t)) x52093)
              (let ((a52094 (cdr lst))) (member? x a52094))))))))
  (define (foldl fun acc lst)
    (let ((a52095 (null? lst)))
      (if a52095
        acc
        (let ((a52096 (car lst)))
          (let ((a52097 (fun a52096 acc)))
            (let ((a52098 (cdr lst))) (foldl fun a52097 a52098)))))))
  (define (reverse-helper lst lst2)
    (let ((a52099 (null? lst)))
      (if a52099
        lst2
        (let ((a52100 (cdr lst)))
          (let ((a52101 (car lst)))
            (let ((a52102 (cons a52101 lst2)))
              (reverse-helper a52100 a52102)))))))
  (define (reverse lst) (let ((a52103 (list))) (reverse-helper lst a52103)))
  (define (take-helper lst n lst2)
    (let ((a52104 '0))
      (let ((a52105 (= n a52104)))
        (if a52105
          (let ((x52106 (reverse lst2))) x52106)
          (let ((a52107 (cdr lst)))
            (let ((a52108 '1))
              (let ((a52109 (- n a52108)))
                (let ((a52110 (car lst)))
                  (let ((a52111 (cons a52110 lst2)))
                    (take-helper a52107 a52109 a52111))))))))))
  (define (take lst n) (let ((a52112 (list))) (take-helper lst n a52112)))
  (define (length lst)
    (let ((a52113 (null? lst)))
      (if a52113
        (let ((x52114 '0)) x52114)
        (let ((a52115 '1))
          (let ((a52116 (cdr lst)))
            (let ((a52117 (length a52116))) (+ a52115 a52117)))))))
  (define (map proc lst)
    (let ((a52118 (null? lst)))
      (if a52118
        (let ((x52119 (list))) x52119)
        (let ((a52120 (car lst)))
          (let ((a52121 (proc a52120)))
            (let ((a52122 (cdr lst)))
              (let ((a52123 (map proc a52122))) (cons a52121 a52123))))))))
  (define (filter op lst)
    (let ((a52124 (null? lst)))
      (if a52124
        (let ((x52125 (list))) x52125)
        (let ((a52126 (car lst)))
          (let ((a52127 (op a52126)))
            (if a52127
              (let ((a52128 (car lst)))
                (let ((a52129 (cdr lst)))
                  (let ((a52130 (filter op a52129))) (cons a52128 a52130))))
              (let ((a52131 (cdr lst))) (filter op a52131))))))))
  (define (drop lst n)
    (let ((a52132 '0))
      (let ((a52133 (= n a52132)))
        (if a52133
          lst
          (let ((a52134 (cdr lst)))
            (let ((a52135 '1))
              (let ((a52136 (- n a52135))) (drop a52134 a52136))))))))
  (define (foldr proc acc lst)
    (let ((a52137 (null? lst)))
      (if a52137
        acc
        (let ((a52138 (car lst)))
          (let ((a52139 (cdr lst)))
            (let ((a52140 (foldr proc acc a52139))) (proc a52138 a52140)))))))
  (define (append lst1 lst2)
    (let ((a52141 (null? lst1)))
      (if a52141
        lst2
        (let ((a52142 (car lst1)))
          (let ((a52143 (cdr lst1)))
            (let ((a52144 (append a52143 lst2))) (cons a52142 a52144)))))))
  (define (hash . lst) (let ((x52145 (apply-prim hash lst))) x52145))
  (define (hash-ref h k) (let ((x52146 (prim hash-ref h k))) x52146))
  (define (hash-set h k v) (let ((x52147 (prim hash-set h k v))) x52147))
  (define (hash-has-key? h k) (let ((x52148 (prim hash-has-key? h k))) x52148))
  (define (hash-count h) (let ((x52149 (prim hash-count h))) x52149))
  (define (call) (let ((x52150 "random")) x52150))
  (define (brouhaha_main) (let ((x52151 (call))) x52151)))
