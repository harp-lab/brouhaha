'((define (+ . lst) (let ((x53971 (apply-prim + lst))) x53971))
  (define (- . lst) (let ((x53972 (apply-prim - lst))) x53972))
  (define (* . lst) (let ((x53973 (apply-prim * lst))) x53973))
  (define (modulo a b) (let ((x53974 (prim modulo a b))) x53974))
  (define (/ . lst) (let ((x53975 (apply-prim / lst))) x53975))
  (define (= . lst) (let ((x53976 (apply-prim = lst))) x53976))
  (define (> . lst) (let ((x53977 (apply-prim > lst))) x53977))
  (define (< . lst) (let ((x53978 (apply-prim < lst))) x53978))
  (define (<= . lst) (let ((x53979 (apply-prim <= lst))) x53979))
  (define (>= . lst) (let ((x53980 (apply-prim >= lst))) x53980))
  (define (null? x) (let ((x53981 (prim null? x))) x53981))
  (define (equal? x y) (let ((x53982 (prim equal? x y))) x53982))
  (define (eq? x y) (let ((x53983 (prim eq? x y))) x53983))
  (define (cons a b) (let ((x53984 (prim cons a b))) x53984))
  (define (car lst) (let ((x53985 (prim car lst))) x53985))
  (define (cdr lst) (let ((x53986 (prim cdr lst))) x53986))
  (define (even? x)
    (let ((a53987 '0))
      (let ((a53988 '2))
        (let ((a53989 (modulo x a53988))) (equal? a53987 a53989)))))
  (define (odd? x)
    (let ((a53990 '1))
      (let ((a53991 '2))
        (let ((a53992 (modulo x a53991))) (equal? a53990 a53992)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a53993 (null? lst)))
      (if a53993
        (let ((x53994 '#f)) x53994)
        (let ((a53995 (car lst)))
          (let ((a53996 (equal? a53995 x)))
            (if a53996
              (let ((x53997 '#t)) x53997)
              (let ((a53998 (cdr lst))) (member? x a53998))))))))
  (define (foldl fun acc lst)
    (let ((a53999 (null? lst)))
      (if a53999
        acc
        (let ((a54000 (car lst)))
          (let ((a54001 (fun a54000 acc)))
            (let ((a54002 (cdr lst))) (foldl fun a54001 a54002)))))))
  (define (reverse-helper lst lst2)
    (let ((a54003 (null? lst)))
      (if a54003
        lst2
        (let ((a54004 (cdr lst)))
          (let ((a54005 (car lst)))
            (let ((a54006 (cons a54005 lst2)))
              (reverse-helper a54004 a54006)))))))
  (define (reverse lst) (let ((a54007 (list))) (reverse-helper lst a54007)))
  (define (take-helper lst n lst2)
    (let ((a54008 '0))
      (let ((a54009 (= n a54008)))
        (if a54009
          (let ((x54010 (reverse lst2))) x54010)
          (let ((a54011 (cdr lst)))
            (let ((a54012 '1))
              (let ((a54013 (- n a54012)))
                (let ((a54014 (car lst)))
                  (let ((a54015 (cons a54014 lst2)))
                    (take-helper a54011 a54013 a54015))))))))))
  (define (take lst n) (let ((a54016 (list))) (take-helper lst n a54016)))
  (define (length lst)
    (let ((a54017 (null? lst)))
      (if a54017
        (let ((x54018 '0)) x54018)
        (let ((a54019 '1))
          (let ((a54020 (cdr lst)))
            (let ((a54021 (length a54020))) (+ a54019 a54021)))))))
  (define (map proc lst)
    (let ((a54022 (null? lst)))
      (if a54022
        (let ((x54023 (list))) x54023)
        (let ((a54024 (car lst)))
          (let ((a54025 (proc a54024)))
            (let ((a54026 (cdr lst)))
              (let ((a54027 (map proc a54026))) (cons a54025 a54027))))))))
  (define (filter op lst)
    (let ((a54028 (null? lst)))
      (if a54028
        (let ((x54029 (list))) x54029)
        (let ((a54030 (car lst)))
          (let ((a54031 (op a54030)))
            (if a54031
              (let ((a54032 (car lst)))
                (let ((a54033 (cdr lst)))
                  (let ((a54034 (filter op a54033))) (cons a54032 a54034))))
              (let ((a54035 (cdr lst))) (filter op a54035))))))))
  (define (drop lst n)
    (let ((a54036 '0))
      (let ((a54037 (= n a54036)))
        (if a54037
          lst
          (let ((a54038 (cdr lst)))
            (let ((a54039 '1))
              (let ((a54040 (- n a54039))) (drop a54038 a54040))))))))
  (define (foldr proc acc lst)
    (let ((a54041 (null? lst)))
      (if a54041
        acc
        (let ((a54042 (car lst)))
          (let ((a54043 (cdr lst)))
            (let ((a54044 (foldr proc acc a54043))) (proc a54042 a54044)))))))
  (define (append lst1 lst2)
    (let ((a54045 (null? lst1)))
      (if a54045
        lst2
        (let ((a54046 (car lst1)))
          (let ((a54047 (cdr lst1)))
            (let ((a54048 (append a54047 lst2))) (cons a54046 a54048)))))))
  (define (hash . lst) (let ((x54049 (apply-prim hash lst))) x54049))
  (define (hash-ref h k) (let ((x54050 (prim hash-ref h k))) x54050))
  (define (hash-set h k v) (let ((x54051 (prim hash-set h k v))) x54051))
  (define (hash-has-key? h k) (let ((x54052 (prim hash-has-key? h k))) x54052))
  (define (hash-count h) (let ((x54053 (prim hash-count h))) x54053))
  (define (call) (let ((x54054 "random")) x54054))
  (define (brouhaha_main) (let ((x54055 (call))) x54055)))
