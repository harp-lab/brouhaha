'((define (+ . lst) (let ((x50435 (apply-prim + lst))) x50435))
  (define (- . lst) (let ((x50436 (apply-prim - lst))) x50436))
  (define (* . lst) (let ((x50437 (apply-prim * lst))) x50437))
  (define (modulo a b) (let ((x50438 (prim modulo a b))) x50438))
  (define (/ . lst) (let ((x50439 (apply-prim / lst))) x50439))
  (define (= . lst) (let ((x50440 (apply-prim = lst))) x50440))
  (define (> . lst) (let ((x50441 (apply-prim > lst))) x50441))
  (define (< . lst) (let ((x50442 (apply-prim < lst))) x50442))
  (define (<= . lst) (let ((x50443 (apply-prim <= lst))) x50443))
  (define (>= . lst) (let ((x50444 (apply-prim >= lst))) x50444))
  (define (null? x) (let ((x50445 (prim null? x))) x50445))
  (define (equal? x y) (let ((x50446 (prim equal? x y))) x50446))
  (define (eq? x y) (let ((x50447 (prim eq? x y))) x50447))
  (define (cons a b) (let ((x50448 (prim cons a b))) x50448))
  (define (car lst) (let ((x50449 (prim car lst))) x50449))
  (define (cdr lst) (let ((x50450 (prim cdr lst))) x50450))
  (define (even? x)
    (let ((a50451 '0))
      (let ((a50452 '2))
        (let ((a50453 (modulo x a50452))) (equal? a50451 a50453)))))
  (define (odd? x)
    (let ((a50454 '1))
      (let ((a50455 '2))
        (let ((a50456 (modulo x a50455))) (equal? a50454 a50456)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a50457 (null? lst)))
      (if a50457
        (let ((x50458 '#f)) x50458)
        (let ((a50459 (car lst)))
          (let ((a50460 (equal? a50459 x)))
            (if a50460
              (let ((x50461 '#t)) x50461)
              (let ((a50462 (cdr lst))) (member? x a50462))))))))
  (define (foldl fun acc lst)
    (let ((a50463 (null? lst)))
      (if a50463
        acc
        (let ((a50464 (car lst)))
          (let ((a50465 (fun a50464 acc)))
            (let ((a50466 (cdr lst))) (foldl fun a50465 a50466)))))))
  (define (reverse-helper lst lst2)
    (let ((a50467 (null? lst)))
      (if a50467
        lst2
        (let ((a50468 (cdr lst)))
          (let ((a50469 (car lst)))
            (let ((a50470 (cons a50469 lst2)))
              (reverse-helper a50468 a50470)))))))
  (define (reverse lst) (let ((a50471 (list))) (reverse-helper lst a50471)))
  (define (take-helper lst n lst2)
    (let ((a50472 '0))
      (let ((a50473 (= n a50472)))
        (if a50473
          (let ((x50474 (reverse lst2))) x50474)
          (let ((a50475 (cdr lst)))
            (let ((a50476 '1))
              (let ((a50477 (- n a50476)))
                (let ((a50478 (car lst)))
                  (let ((a50479 (cons a50478 lst2)))
                    (take-helper a50475 a50477 a50479))))))))))
  (define (take lst n) (let ((a50480 (list))) (take-helper lst n a50480)))
  (define (length lst)
    (let ((a50481 (null? lst)))
      (if a50481
        (let ((x50482 '0)) x50482)
        (let ((a50483 '1))
          (let ((a50484 (cdr lst)))
            (let ((a50485 (length a50484))) (+ a50483 a50485)))))))
  (define (map proc lst)
    (let ((a50486 (null? lst)))
      (if a50486
        (let ((x50487 (list))) x50487)
        (let ((a50488 (car lst)))
          (let ((a50489 (proc a50488)))
            (let ((a50490 (cdr lst)))
              (let ((a50491 (map proc a50490))) (cons a50489 a50491))))))))
  (define (filter op lst)
    (let ((a50492 (null? lst)))
      (if a50492
        (let ((x50493 (list))) x50493)
        (let ((a50494 (car lst)))
          (let ((a50495 (op a50494)))
            (if a50495
              (let ((a50496 (car lst)))
                (let ((a50497 (cdr lst)))
                  (let ((a50498 (filter op a50497))) (cons a50496 a50498))))
              (let ((a50499 (cdr lst))) (filter op a50499))))))))
  (define (drop lst n)
    (let ((a50500 '0))
      (let ((a50501 (= n a50500)))
        (if a50501
          lst
          (let ((a50502 (cdr lst)))
            (let ((a50503 '1))
              (let ((a50504 (- n a50503))) (drop a50502 a50504))))))))
  (define (foldr proc acc lst)
    (let ((a50505 (null? lst)))
      (if a50505
        acc
        (let ((a50506 (car lst)))
          (let ((a50507 (cdr lst)))
            (let ((a50508 (foldr proc acc a50507))) (proc a50506 a50508)))))))
  (define (append lst1 lst2)
    (let ((a50509 (null? lst1)))
      (if a50509
        lst2
        (let ((a50510 (car lst1)))
          (let ((a50511 (cdr lst1)))
            (let ((a50512 (append a50511 lst2))) (cons a50510 a50512)))))))
  (define (hash . lst) (let ((x50513 (apply-prim hash lst))) x50513))
  (define (hash-ref h k) (let ((x50514 (prim hash-ref h k))) x50514))
  (define (hash-set h k v) (let ((x50515 (prim hash-set h k v))) x50515))
  (define (hash-has-key? h k) (let ((x50516 (prim hash-has-key? h k))) x50516))
  (define (hash-count h) (let ((x50517 (prim hash-count h))) x50517))
  (define (call) (let ((x50518 "random")) x50518))
  (define (brouhaha_main) (let ((x50519 (call))) x50519)))
