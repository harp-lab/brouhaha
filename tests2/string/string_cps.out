'((define (+ . lst)
    (let ((kont5052050620 (prim car lst)))
      (let ((lst50621 (prim cdr lst)))
        (let ((x5043550622 (apply-prim + lst50621)))
          (kont5052050620 x5043550622)))))
  (define (- . lst)
    (let ((kont5052250623 (prim car lst)))
      (let ((lst50624 (prim cdr lst)))
        (let ((x5043650625 (apply-prim - lst50624)))
          (kont5052250623 x5043650625)))))
  (define (* . lst)
    (let ((kont5052450626 (prim car lst)))
      (let ((lst50627 (prim cdr lst)))
        (let ((x5043750628 (apply-prim * lst50627)))
          (kont5052450626 x5043750628)))))
  (define (modulo kont50526 a b)
    (let ((x5043850629 (prim modulo a b))) (kont50526 x5043850629)))
  (define (/ . lst)
    (let ((kont5052750630 (prim car lst)))
      (let ((lst50631 (prim cdr lst)))
        (let ((x5043950632 (apply-prim / lst50631)))
          (kont5052750630 x5043950632)))))
  (define (= . lst)
    (let ((kont5052950633 (prim car lst)))
      (let ((lst50634 (prim cdr lst)))
        (let ((x5044050635 (apply-prim = lst50634)))
          (kont5052950633 x5044050635)))))
  (define (> . lst)
    (let ((kont5053150636 (prim car lst)))
      (let ((lst50637 (prim cdr lst)))
        (let ((x5044150638 (apply-prim > lst50637)))
          (kont5053150636 x5044150638)))))
  (define (< . lst)
    (let ((kont5053350639 (prim car lst)))
      (let ((lst50640 (prim cdr lst)))
        (let ((x5044250641 (apply-prim < lst50640)))
          (kont5053350639 x5044250641)))))
  (define (<= . lst)
    (let ((kont5053550642 (prim car lst)))
      (let ((lst50643 (prim cdr lst)))
        (let ((x5044350644 (apply-prim <= lst50643)))
          (kont5053550642 x5044350644)))))
  (define (>= . lst)
    (let ((kont5053750645 (prim car lst)))
      (let ((lst50646 (prim cdr lst)))
        (let ((x5044450647 (apply-prim >= lst50646)))
          (kont5053750645 x5044450647)))))
  (define (null? kont50539 x)
    (let ((x5044550648 (prim null? x))) (kont50539 x5044550648)))
  (define (equal? kont50540 x y)
    (let ((x5044650649 (prim equal? x y))) (kont50540 x5044650649)))
  (define (eq? kont50541 x y)
    (let ((x5044750650 (prim eq? x y))) (kont50541 x5044750650)))
  (define (cons kont50542 a b)
    (let ((x5044850651 (prim cons a b))) (kont50542 x5044850651)))
  (define (car kont50543 lst)
    (let ((x5044950652 (prim car lst))) (kont50543 x5044950652)))
  (define (cdr kont50544 lst)
    (let ((x5045050653 (prim cdr lst))) (kont50544 x5045050653)))
  (define (even? kont50545 x)
    (let ((a5045150654 '0))
      (let ((a5045250655 '2))
        (let ((f5054650656
               (lambda (a5045350657)
                 (equal? kont50545 a5045150654 a5045350657))))
          (modulo f5054650656 x a5045250655)))))
  (define (odd? kont50547 x)
    (let ((a5045450658 '1))
      (let ((a5045550659 '2))
        (let ((f5054850660
               (lambda (a5045650661)
                 (equal? kont50547 a5045450658 a5045650661))))
          (modulo f5054850660 x a5045550659)))))
  (define (list . x)
    (let ((kont5054950662 (prim car x)))
      (let ((x50663 (prim cdr x))) (kont5054950662 x50663))))
  (define (member? kont50551 x lst)
    (let ((f5055550664
           (lambda (a5045750665)
             (if a5045750665
               (let ((x5045850666 '#f)) (kont50551 x5045850666))
               (let ((f5055450667
                      (lambda (a5045950668)
                        (let ((f5055350669
                               (lambda (a5046050670)
                                 (if a5046050670
                                   (let ((x5046150671 '#t))
                                     (kont50551 x5046150671))
                                   (let ((f5055250672
                                          (lambda (a5046250673)
                                            (member?
                                             kont50551
                                             x
                                             a5046250673))))
                                     (cdr f5055250672 lst))))))
                          (equal? f5055350669 a5045950668 x)))))
                 (car f5055450667 lst))))))
      (null? f5055550664 lst)))
  (define (foldl kont50556 fun acc lst)
    (let ((f5056050674
           (lambda (a5046350675)
             (if a5046350675
               (kont50556 acc)
               (let ((f5055950676
                      (lambda (a5046450677)
                        (let ((f5055850678
                               (lambda (a5046550679)
                                 (let ((f5055750680
                                        (lambda (a5046650681)
                                          (foldl
                                           kont50556
                                           fun
                                           a5046550679
                                           a5046650681))))
                                   (cdr f5055750680 lst)))))
                          (fun f5055850678 a5046450677 acc)))))
                 (car f5055950676 lst))))))
      (null? f5056050674 lst)))
  (define (reverse-helper kont50561 lst lst2)
    (let ((f5056550682
           (lambda (a5046750683)
             (if a5046750683
               (kont50561 lst2)
               (let ((f5056450684
                      (lambda (a5046850685)
                        (let ((f5056350686
                               (lambda (a5046950687)
                                 (let ((f5056250688
                                        (lambda (a5047050689)
                                          (reverse-helper
                                           kont50561
                                           a5046850685
                                           a5047050689))))
                                   (cons f5056250688 a5046950687 lst2)))))
                          (car f5056350686 lst)))))
                 (cdr f5056450684 lst))))))
      (null? f5056550682 lst)))
  (define (reverse kont50566 lst)
    (let ((f5056750690
           (lambda (a5047150691) (reverse-helper kont50566 lst a5047150691))))
      (list f5056750690)))
  (define (take-helper kont50568 lst n lst2)
    (let ((a5047250692 '0))
      (let ((f5057450693
             (lambda (a5047350694)
               (if a5047350694
                 (let ((f5056950695
                        (lambda (x5047450696) (kont50568 x5047450696))))
                   (reverse f5056950695 lst2))
                 (let ((f5057350697
                        (lambda (a5047550698)
                          (let ((a5047650699 '1))
                            (let ((f5057250700
                                   (lambda (a5047750701)
                                     (let ((f5057150702
                                            (lambda (a5047850703)
                                              (let ((f5057050704
                                                     (lambda (a5047950705)
                                                       (take-helper
                                                        kont50568
                                                        a5047550698
                                                        a5047750701
                                                        a5047950705))))
                                                (cons
                                                 f5057050704
                                                 a5047850703
                                                 lst2)))))
                                       (car f5057150702 lst)))))
                              (- f5057250700 n a5047650699))))))
                   (cdr f5057350697 lst))))))
        (= f5057450693 n a5047250692))))
  (define (take kont50575 lst n)
    (let ((f5057650706
           (lambda (a5048050707) (take-helper kont50575 lst n a5048050707))))
      (list f5057650706)))
  (define (length kont50577 lst)
    (let ((f5058050708
           (lambda (a5048150709)
             (if a5048150709
               (let ((x5048250710 '0)) (kont50577 x5048250710))
               (let ((a5048350711 '1))
                 (let ((f5057950712
                        (lambda (a5048450713)
                          (let ((f5057850714
                                 (lambda (a5048550715)
                                   (+ kont50577 a5048350711 a5048550715))))
                            (length f5057850714 a5048450713)))))
                   (cdr f5057950712 lst)))))))
      (null? f5058050708 lst)))
  (define (map kont50581 proc lst)
    (let ((f5058750716
           (lambda (a5048650717)
             (if a5048650717
               (let ((f5058250718
                      (lambda (x5048750719) (kont50581 x5048750719))))
                 (list f5058250718))
               (let ((f5058650720
                      (lambda (a5048850721)
                        (let ((f5058550722
                               (lambda (a5048950723)
                                 (let ((f5058450724
                                        (lambda (a5049050725)
                                          (let ((f5058350726
                                                 (lambda (a5049150727)
                                                   (cons
                                                    kont50581
                                                    a5048950723
                                                    a5049150727))))
                                            (map
                                             f5058350726
                                             proc
                                             a5049050725)))))
                                   (cdr f5058450724 lst)))))
                          (proc f5058550722 a5048850721)))))
                 (car f5058650720 lst))))))
      (null? f5058750716 lst)))
  (define (filter kont50588 op lst)
    (let ((f5059650728
           (lambda (a5049250729)
             (if a5049250729
               (let ((f5058950730
                      (lambda (x5049350731) (kont50588 x5049350731))))
                 (list f5058950730))
               (let ((f5059550732
                      (lambda (a5049450733)
                        (let ((f5059450734
                               (lambda (a5049550735)
                                 (if a5049550735
                                   (let ((f5059250736
                                          (lambda (a5049650737)
                                            (let ((f5059150738
                                                   (lambda (a5049750739)
                                                     (let ((f5059050740
                                                            (lambda (a5049850741)
                                                              (cons
                                                               kont50588
                                                               a5049650737
                                                               a5049850741))))
                                                       (filter
                                                        f5059050740
                                                        op
                                                        a5049750739)))))
                                              (cdr f5059150738 lst)))))
                                     (car f5059250736 lst))
                                   (let ((f5059350742
                                          (lambda (a5049950743)
                                            (filter
                                             kont50588
                                             op
                                             a5049950743))))
                                     (cdr f5059350742 lst))))))
                          (op f5059450734 a5049450733)))))
                 (car f5059550732 lst))))))
      (null? f5059650728 lst)))
  (define (drop kont50597 lst n)
    (let ((a5050050744 '0))
      (let ((f5060050745
             (lambda (a5050150746)
               (if a5050150746
                 (kont50597 lst)
                 (let ((f5059950747
                        (lambda (a5050250748)
                          (let ((a5050350749 '1))
                            (let ((f5059850750
                                   (lambda (a5050450751)
                                     (drop
                                      kont50597
                                      a5050250748
                                      a5050450751))))
                              (- f5059850750 n a5050350749))))))
                   (cdr f5059950747 lst))))))
        (= f5060050745 n a5050050744))))
  (define (foldr kont50601 proc acc lst)
    (let ((f5060550752
           (lambda (a5050550753)
             (if a5050550753
               (kont50601 acc)
               (let ((f5060450754
                      (lambda (a5050650755)
                        (let ((f5060350756
                               (lambda (a5050750757)
                                 (let ((f5060250758
                                        (lambda (a5050850759)
                                          (proc
                                           kont50601
                                           a5050650755
                                           a5050850759))))
                                   (foldr f5060250758 proc acc a5050750757)))))
                          (cdr f5060350756 lst)))))
                 (car f5060450754 lst))))))
      (null? f5060550752 lst)))
  (define (append kont50606 lst1 lst2)
    (let ((f5061050760
           (lambda (a5050950761)
             (if a5050950761
               (kont50606 lst2)
               (let ((f5060950762
                      (lambda (a5051050763)
                        (let ((f5060850764
                               (lambda (a5051150765)
                                 (let ((f5060750766
                                        (lambda (a5051250767)
                                          (cons
                                           kont50606
                                           a5051050763
                                           a5051250767))))
                                   (append f5060750766 a5051150765 lst2)))))
                          (cdr f5060850764 lst1)))))
                 (car f5060950762 lst1))))))
      (null? f5061050760 lst1)))
  (define (hash . lst)
    (let ((kont5061150768 (prim car lst)))
      (let ((lst50769 (prim cdr lst)))
        (let ((x5051350770 (apply-prim hash lst50769)))
          (kont5061150768 x5051350770)))))
  (define (hash-ref kont50613 h k)
    (let ((x5051450771 (prim hash-ref h k))) (kont50613 x5051450771)))
  (define (hash-set kont50614 h k v)
    (let ((x5051550772 (prim hash-set h k v))) (kont50614 x5051550772)))
  (define (hash-has-key? kont50615 h k)
    (let ((x5051650773 (prim hash-has-key? h k))) (kont50615 x5051650773)))
  (define (hash-count kont50616 h)
    (let ((x5051750774 (prim hash-count h))) (kont50616 x5051750774)))
  (define (call kont50617)
    (let ((x5051850775 "random")) (kont50617 x5051850775)))
  (define (brouhaha_main kont50618)
    (let ((f5061950776 (lambda (x5051950777) (kont50618 x5051950777))))
      (call f5061950776))))
