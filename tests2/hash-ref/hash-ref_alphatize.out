'((define (+ . lst) (let ((x40473 (apply-prim + lst))) x40473))
  (define (- . lst) (let ((x40474 (apply-prim - lst))) x40474))
  (define (* . lst) (let ((x40475 (apply-prim * lst))) x40475))
  (define (modulo a b) (let ((x40476 (prim modulo a b))) x40476))
  (define (/ . lst) (let ((x40477 (apply-prim / lst))) x40477))
  (define (= . lst) (let ((x40478 (apply-prim = lst))) x40478))
  (define (> . lst) (let ((x40479 (apply-prim > lst))) x40479))
  (define (< . lst) (let ((x40480 (apply-prim < lst))) x40480))
  (define (<= . lst) (let ((x40481 (apply-prim <= lst))) x40481))
  (define (>= . lst) (let ((x40482 (apply-prim >= lst))) x40482))
  (define (null? x) (let ((x40483 (prim null? x))) x40483))
  (define (equal? x y) (let ((x40484 (prim equal? x y))) x40484))
  (define (eq? x y) (let ((x40485 (prim eq? x y))) x40485))
  (define (cons a b) (let ((x40486 (prim cons a b))) x40486))
  (define (car lst) (let ((x40487 (prim car lst))) x40487))
  (define (cdr lst) (let ((x40488 (prim cdr lst))) x40488))
  (define (even? x)
    (let ((a40489 '0))
      (let ((a40490 '2))
        (let ((a40491 (modulo x a40490))) (equal? a40489 a40491)))))
  (define (odd? x)
    (let ((a40492 '1))
      (let ((a40493 '2))
        (let ((a40494 (modulo x a40493))) (equal? a40492 a40494)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a40495 (null? lst)))
      (if a40495
        (let ((x40496 '#f)) x40496)
        (let ((a40497 (car lst)))
          (let ((a40498 (equal? a40497 x)))
            (if a40498
              (let ((x40499 '#t)) x40499)
              (let ((a40500 (cdr lst))) (member? x a40500))))))))
  (define (foldl fun acc lst)
    (let ((a40501 (null? lst)))
      (if a40501
        acc
        (let ((a40502 (car lst)))
          (let ((a40503 (fun a40502 acc)))
            (let ((a40504 (cdr lst))) (foldl fun a40503 a40504)))))))
  (define (reverse-helper lst lst2)
    (let ((a40505 (null? lst)))
      (if a40505
        lst2
        (let ((a40506 (cdr lst)))
          (let ((a40507 (car lst)))
            (let ((a40508 (cons a40507 lst2)))
              (reverse-helper a40506 a40508)))))))
  (define (reverse lst) (let ((a40509 (list))) (reverse-helper lst a40509)))
  (define (take-helper lst n lst2)
    (let ((a40510 '0))
      (let ((a40511 (= n a40510)))
        (if a40511
          (let ((x40512 (reverse lst2))) x40512)
          (let ((a40513 (cdr lst)))
            (let ((a40514 '1))
              (let ((a40515 (- n a40514)))
                (let ((a40516 (car lst)))
                  (let ((a40517 (cons a40516 lst2)))
                    (take-helper a40513 a40515 a40517))))))))))
  (define (take lst n) (let ((a40518 (list))) (take-helper lst n a40518)))
  (define (length lst)
    (let ((a40519 (null? lst)))
      (if a40519
        (let ((x40520 '0)) x40520)
        (let ((a40521 '1))
          (let ((a40522 (cdr lst)))
            (let ((a40523 (length a40522))) (+ a40521 a40523)))))))
  (define (map proc lst)
    (let ((a40524 (null? lst)))
      (if a40524
        (let ((x40525 (list))) x40525)
        (let ((a40526 (car lst)))
          (let ((a40527 (proc a40526)))
            (let ((a40528 (cdr lst)))
              (let ((a40529 (map proc a40528))) (cons a40527 a40529))))))))
  (define (filter op lst)
    (let ((a40530 (null? lst)))
      (if a40530
        (let ((x40531 (list))) x40531)
        (let ((a40532 (car lst)))
          (let ((a40533 (op a40532)))
            (if a40533
              (let ((a40534 (car lst)))
                (let ((a40535 (cdr lst)))
                  (let ((a40536 (filter op a40535))) (cons a40534 a40536))))
              (let ((a40537 (cdr lst))) (filter op a40537))))))))
  (define (drop lst n)
    (let ((a40538 '0))
      (let ((a40539 (= n a40538)))
        (if a40539
          lst
          (let ((a40540 (cdr lst)))
            (let ((a40541 '1))
              (let ((a40542 (- n a40541))) (drop a40540 a40542))))))))
  (define (foldr proc acc lst)
    (let ((a40543 (null? lst)))
      (if a40543
        acc
        (let ((a40544 (car lst)))
          (let ((a40545 (cdr lst)))
            (let ((a40546 (foldr proc acc a40545))) (proc a40544 a40546)))))))
  (define (append lst1 lst2)
    (let ((a40547 (null? lst1)))
      (if a40547
        lst2
        (let ((a40548 (car lst1)))
          (let ((a40549 (cdr lst1)))
            (let ((a40550 (append a40549 lst2))) (cons a40548 a40550)))))))
  (define (hash . lst) (let ((x40551 (apply-prim hash lst))) x40551))
  (define (hash-ref h k) (let ((x40552 (prim hash-ref h k))) x40552))
  (define (hash-set h k v) (let ((x40553 (prim hash-set h k v))) x40553))
  (define (hash-has-key? h k) (let ((x40554 (prim hash-has-key? h k))) x40554))
  (define (hash-count h) (let ((x40555 (prim hash-count h))) x40555))
  (define (call)
    (let ((a40556 "work"))
      (let ((a40557 '80))
        (let ((a40558 '10))
          (let ((a40559 "lmao"))
            (let ((a40560 (hash a40556 a40557 a40558 a40559)))
              (let ((a40561 '10)) (hash-ref a40560 a40561))))))))
  (define (brouhaha_main) (let ((x40562 (call))) x40562)))
