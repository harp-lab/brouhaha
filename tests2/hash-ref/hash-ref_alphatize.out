'((define (+ . lst) (let ((x41325 (apply-prim + lst))) x41325))
  (define (- . lst) (let ((x41326 (apply-prim - lst))) x41326))
  (define (* . lst) (let ((x41327 (apply-prim * lst))) x41327))
  (define (modulo a b) (let ((x41328 (prim modulo a b))) x41328))
  (define (/ . lst) (let ((x41329 (apply-prim / lst))) x41329))
  (define (= . lst) (let ((x41330 (apply-prim = lst))) x41330))
  (define (> . lst) (let ((x41331 (apply-prim > lst))) x41331))
  (define (< . lst) (let ((x41332 (apply-prim < lst))) x41332))
  (define (<= . lst) (let ((x41333 (apply-prim <= lst))) x41333))
  (define (>= . lst) (let ((x41334 (apply-prim >= lst))) x41334))
  (define (null? x) (let ((x41335 (prim null? x))) x41335))
  (define (equal? x y) (let ((x41336 (prim equal? x y))) x41336))
  (define (eq? x y) (let ((x41337 (prim eq? x y))) x41337))
  (define (cons a b) (let ((x41338 (prim cons a b))) x41338))
  (define (car lst) (let ((x41339 (prim car lst))) x41339))
  (define (cdr lst) (let ((x41340 (prim cdr lst))) x41340))
  (define (even? x)
    (let ((a41341 '0))
      (let ((a41342 '2))
        (let ((a41343 (modulo x a41342))) (equal? a41341 a41343)))))
  (define (odd? x)
    (let ((a41344 '1))
      (let ((a41345 '2))
        (let ((a41346 (modulo x a41345))) (equal? a41344 a41346)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a41347 (null? lst)))
      (if a41347
        (let ((x41348 '#f)) x41348)
        (let ((a41349 (car lst)))
          (let ((a41350 (equal? a41349 x)))
            (if a41350
              (let ((x41351 '#t)) x41351)
              (let ((a41352 (cdr lst))) (member? x a41352))))))))
  (define (foldl fun acc lst)
    (let ((a41353 (null? lst)))
      (if a41353
        acc
        (let ((a41354 (car lst)))
          (let ((a41355 (fun a41354 acc)))
            (let ((a41356 (cdr lst))) (foldl fun a41355 a41356)))))))
  (define (reverse-helper lst lst2)
    (let ((a41357 (null? lst)))
      (if a41357
        lst2
        (let ((a41358 (cdr lst)))
          (let ((a41359 (car lst)))
            (let ((a41360 (cons a41359 lst2)))
              (reverse-helper a41358 a41360)))))))
  (define (reverse lst) (let ((a41361 (list))) (reverse-helper lst a41361)))
  (define (take-helper lst n lst2)
    (let ((a41362 '0))
      (let ((a41363 (= n a41362)))
        (if a41363
          (let ((x41364 (reverse lst2))) x41364)
          (let ((a41365 (cdr lst)))
            (let ((a41366 '1))
              (let ((a41367 (- n a41366)))
                (let ((a41368 (car lst)))
                  (let ((a41369 (cons a41368 lst2)))
                    (take-helper a41365 a41367 a41369))))))))))
  (define (take lst n) (let ((a41370 (list))) (take-helper lst n a41370)))
  (define (length lst)
    (let ((a41371 (null? lst)))
      (if a41371
        (let ((x41372 '0)) x41372)
        (let ((a41373 '1))
          (let ((a41374 (cdr lst)))
            (let ((a41375 (length a41374))) (+ a41373 a41375)))))))
  (define (map proc lst)
    (let ((a41376 (null? lst)))
      (if a41376
        (let ((x41377 (list))) x41377)
        (let ((a41378 (car lst)))
          (let ((a41379 (proc a41378)))
            (let ((a41380 (cdr lst)))
              (let ((a41381 (map proc a41380))) (cons a41379 a41381))))))))
  (define (filter op lst)
    (let ((a41382 (null? lst)))
      (if a41382
        (let ((x41383 (list))) x41383)
        (let ((a41384 (car lst)))
          (let ((a41385 (op a41384)))
            (if a41385
              (let ((a41386 (car lst)))
                (let ((a41387 (cdr lst)))
                  (let ((a41388 (filter op a41387))) (cons a41386 a41388))))
              (let ((a41389 (cdr lst))) (filter op a41389))))))))
  (define (drop lst n)
    (let ((a41390 '0))
      (let ((a41391 (= n a41390)))
        (if a41391
          lst
          (let ((a41392 (cdr lst)))
            (let ((a41393 '1))
              (let ((a41394 (- n a41393))) (drop a41392 a41394))))))))
  (define (foldr proc acc lst)
    (let ((a41395 (null? lst)))
      (if a41395
        acc
        (let ((a41396 (car lst)))
          (let ((a41397 (cdr lst)))
            (let ((a41398 (foldr proc acc a41397))) (proc a41396 a41398)))))))
  (define (append lst1 lst2)
    (let ((a41399 (null? lst1)))
      (if a41399
        lst2
        (let ((a41400 (car lst1)))
          (let ((a41401 (cdr lst1)))
            (let ((a41402 (append a41401 lst2))) (cons a41400 a41402)))))))
  (define (hash . lst) (let ((x41403 (apply-prim hash lst))) x41403))
  (define (hash-ref h k) (let ((x41404 (prim hash-ref h k))) x41404))
  (define (hash-set h k v) (let ((x41405 (prim hash-set h k v))) x41405))
  (define (hash-has-key? h k) (let ((x41406 (prim hash-has-key? h k))) x41406))
  (define (hash-count h) (let ((x41407 (prim hash-count h))) x41407))
  (define (call)
    (let ((a41408 "work"))
      (let ((a41409 '80))
        (let ((a41410 '10))
          (let ((a41411 "lmao"))
            (let ((a41412 (hash a41408 a41409 a41410 a41411)))
              (let ((a41413 '10)) (hash-ref a41412 a41413))))))))
  (define (brouhaha_main) (let ((x41414 (call))) x41414)))
