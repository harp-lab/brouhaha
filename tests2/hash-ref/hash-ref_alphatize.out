'((define (+ . lst) (let ((x42513 (apply-prim + lst))) x42513))
  (define (- . lst) (let ((x42514 (apply-prim - lst))) x42514))
  (define (* . lst) (let ((x42515 (apply-prim * lst))) x42515))
  (define (modulo a b) (let ((x42516 (prim modulo a b))) x42516))
  (define (/ . lst) (let ((x42517 (apply-prim / lst))) x42517))
  (define (= . lst) (let ((x42518 (apply-prim = lst))) x42518))
  (define (> . lst) (let ((x42519 (apply-prim > lst))) x42519))
  (define (< . lst) (let ((x42520 (apply-prim < lst))) x42520))
  (define (<= . lst) (let ((x42521 (apply-prim <= lst))) x42521))
  (define (>= . lst) (let ((x42522 (apply-prim >= lst))) x42522))
  (define (null? x) (let ((x42523 (prim null? x))) x42523))
  (define (equal? x y) (let ((x42524 (prim equal? x y))) x42524))
  (define (eq? x y) (let ((x42525 (prim eq? x y))) x42525))
  (define (cons a b) (let ((x42526 (prim cons a b))) x42526))
  (define (car lst) (let ((x42527 (prim car lst))) x42527))
  (define (cdr lst) (let ((x42528 (prim cdr lst))) x42528))
  (define (even? x)
    (let ((a42529 '0))
      (let ((a42530 '2))
        (let ((a42531 (modulo x a42530))) (equal? a42529 a42531)))))
  (define (odd? x)
    (let ((a42532 '1))
      (let ((a42533 '2))
        (let ((a42534 (modulo x a42533))) (equal? a42532 a42534)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a42535 (null? lst)))
      (if a42535
        (let ((x42536 '#f)) x42536)
        (let ((a42537 (car lst)))
          (let ((a42538 (equal? a42537 x)))
            (if a42538
              (let ((x42539 '#t)) x42539)
              (let ((a42540 (cdr lst))) (member? x a42540))))))))
  (define (foldl fun acc lst)
    (let ((a42541 (null? lst)))
      (if a42541
        acc
        (let ((a42542 (car lst)))
          (let ((a42543 (fun a42542 acc)))
            (let ((a42544 (cdr lst))) (foldl fun a42543 a42544)))))))
  (define (reverse-helper lst lst2)
    (let ((a42545 (null? lst)))
      (if a42545
        lst2
        (let ((a42546 (cdr lst)))
          (let ((a42547 (car lst)))
            (let ((a42548 (cons a42547 lst2)))
              (reverse-helper a42546 a42548)))))))
  (define (reverse lst) (let ((a42549 (list))) (reverse-helper lst a42549)))
  (define (take-helper lst n lst2)
    (let ((a42550 '0))
      (let ((a42551 (= n a42550)))
        (if a42551
          (let ((x42552 (reverse lst2))) x42552)
          (let ((a42553 (cdr lst)))
            (let ((a42554 '1))
              (let ((a42555 (- n a42554)))
                (let ((a42556 (car lst)))
                  (let ((a42557 (cons a42556 lst2)))
                    (take-helper a42553 a42555 a42557))))))))))
  (define (take lst n) (let ((a42558 (list))) (take-helper lst n a42558)))
  (define (length lst)
    (let ((a42559 (null? lst)))
      (if a42559
        (let ((x42560 '0)) x42560)
        (let ((a42561 '1))
          (let ((a42562 (cdr lst)))
            (let ((a42563 (length a42562))) (+ a42561 a42563)))))))
  (define (map proc lst)
    (let ((a42564 (null? lst)))
      (if a42564
        (let ((x42565 (list))) x42565)
        (let ((a42566 (car lst)))
          (let ((a42567 (proc a42566)))
            (let ((a42568 (cdr lst)))
              (let ((a42569 (map proc a42568))) (cons a42567 a42569))))))))
  (define (filter op lst)
    (let ((a42570 (null? lst)))
      (if a42570
        (let ((x42571 (list))) x42571)
        (let ((a42572 (car lst)))
          (let ((a42573 (op a42572)))
            (if a42573
              (let ((a42574 (car lst)))
                (let ((a42575 (cdr lst)))
                  (let ((a42576 (filter op a42575))) (cons a42574 a42576))))
              (let ((a42577 (cdr lst))) (filter op a42577))))))))
  (define (drop lst n)
    (let ((a42578 '0))
      (let ((a42579 (= n a42578)))
        (if a42579
          lst
          (let ((a42580 (cdr lst)))
            (let ((a42581 '1))
              (let ((a42582 (- n a42581))) (drop a42580 a42582))))))))
  (define (foldr proc acc lst)
    (let ((a42583 (null? lst)))
      (if a42583
        acc
        (let ((a42584 (car lst)))
          (let ((a42585 (cdr lst)))
            (let ((a42586 (foldr proc acc a42585))) (proc a42584 a42586)))))))
  (define (append lst1 lst2)
    (let ((a42587 (null? lst1)))
      (if a42587
        lst2
        (let ((a42588 (car lst1)))
          (let ((a42589 (cdr lst1)))
            (let ((a42590 (append a42589 lst2))) (cons a42588 a42590)))))))
  (define (hash . lst) (let ((x42591 (apply-prim hash lst))) x42591))
  (define (hash-ref h k) (let ((x42592 (prim hash-ref h k))) x42592))
  (define (hash-set h k v) (let ((x42593 (prim hash-set h k v))) x42593))
  (define (hash-has-key? h k) (let ((x42594 (prim hash-has-key? h k))) x42594))
  (define (hash-count h) (let ((x42595 (prim hash-count h))) x42595))
  (define (call)
    (let ((a42596 "work"))
      (let ((a42597 '80))
        (let ((a42598 '10))
          (let ((a42599 "lmao"))
            (let ((a42600 (hash a42596 a42597 a42598 a42599)))
              (let ((a42601 '10)) (hash-ref a42600 a42601))))))))
  (define (brouhaha_main) (let ((x42602 (call))) x42602)))
