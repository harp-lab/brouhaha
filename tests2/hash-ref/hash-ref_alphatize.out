'((define (+ . lst) (let ((x40928 (apply-prim + lst))) x40928))
  (define (- . lst) (let ((x40929 (apply-prim - lst))) x40929))
  (define (* . lst) (let ((x40930 (apply-prim * lst))) x40930))
  (define (modulo a b) (let ((x40931 (prim modulo a b))) x40931))
  (define (/ . lst) (let ((x40932 (apply-prim / lst))) x40932))
  (define (= . lst) (let ((x40933 (apply-prim = lst))) x40933))
  (define (> . lst) (let ((x40934 (apply-prim > lst))) x40934))
  (define (< . lst) (let ((x40935 (apply-prim < lst))) x40935))
  (define (<= . lst) (let ((x40936 (apply-prim <= lst))) x40936))
  (define (>= . lst) (let ((x40937 (apply-prim >= lst))) x40937))
  (define (null? x) (let ((x40938 (prim null? x))) x40938))
  (define (equal? x y) (let ((x40939 (prim equal? x y))) x40939))
  (define (eq? x y) (let ((x40940 (prim eq? x y))) x40940))
  (define (cons a b) (let ((x40941 (prim cons a b))) x40941))
  (define (car lst) (let ((x40942 (prim car lst))) x40942))
  (define (cdr lst) (let ((x40943 (prim cdr lst))) x40943))
  (define (even? x)
    (let ((a40944 '0))
      (let ((a40945 '2))
        (let ((a40946 (modulo x a40945))) (equal? a40944 a40946)))))
  (define (odd? x)
    (let ((a40947 '1))
      (let ((a40948 '2))
        (let ((a40949 (modulo x a40948))) (equal? a40947 a40949)))))
  (define (list . x) x)
  (define (and . lst) (let ((x40950 (apply-prim and lst))) x40950))
  (define (or . lst) (let ((x40951 (apply-prim or lst))) x40951))
  (define (member? x lst)
    (let ((a40952 (null? lst)))
      (if a40952
        (let ((x40953 '#f)) x40953)
        (let ((a40954 (car lst)))
          (let ((a40955 (equal? a40954 x)))
            (if a40955
              (let ((x40956 '#t)) x40956)
              (let ((a40957 (cdr lst))) (member? x a40957))))))))
  (define (foldl fun acc lst)
    (let ((a40958 (null? lst)))
      (if a40958
        acc
        (let ((a40959 (car lst)))
          (let ((a40960 (fun a40959 acc)))
            (let ((a40961 (cdr lst))) (foldl fun a40960 a40961)))))))
  (define (reverse-helper lst lst2)
    (let ((a40962 (null? lst)))
      (if a40962
        lst2
        (let ((a40963 (cdr lst)))
          (let ((a40964 (car lst)))
            (let ((a40965 (cons a40964 lst2)))
              (reverse-helper a40963 a40965)))))))
  (define (reverse lst) (let ((a40966 (list))) (reverse-helper lst a40966)))
  (define (take-helper lst n lst2)
    (let ((a40967 '0))
      (let ((a40968 (= n a40967)))
        (if a40968
          (let ((x40969 (reverse lst2))) x40969)
          (let ((a40970 (cdr lst)))
            (let ((a40971 '1))
              (let ((a40972 (- n a40971)))
                (let ((a40973 (car lst)))
                  (let ((a40974 (cons a40973 lst2)))
                    (take-helper a40970 a40972 a40974))))))))))
  (define (take lst n) (let ((a40975 (list))) (take-helper lst n a40975)))
  (define (length lst)
    (let ((a40976 (null? lst)))
      (if a40976
        (let ((x40977 '0)) x40977)
        (let ((a40978 '1))
          (let ((a40979 (cdr lst)))
            (let ((a40980 (length a40979))) (+ a40978 a40980)))))))
  (define (map proc lst)
    (let ((a40981 (null? lst)))
      (if a40981
        (let ((x40982 (list))) x40982)
        (let ((a40983 (car lst)))
          (let ((a40984 (proc a40983)))
            (let ((a40985 (cdr lst)))
              (let ((a40986 (map proc a40985))) (cons a40984 a40986))))))))
  (define (filter op lst)
    (let ((a40987 (null? lst)))
      (if a40987
        (let ((x40988 (list))) x40988)
        (let ((a40989 (car lst)))
          (let ((a40990 (op a40989)))
            (if a40990
              (let ((a40991 (car lst)))
                (let ((a40992 (cdr lst)))
                  (let ((a40993 (filter op a40992))) (cons a40991 a40993))))
              (let ((a40994 (cdr lst))) (filter op a40994))))))))
  (define (drop lst n)
    (let ((a40995 '0))
      (let ((a40996 (= n a40995)))
        (if a40996
          lst
          (let ((a40997 (cdr lst)))
            (let ((a40998 '1))
              (let ((a40999 (- n a40998))) (drop a40997 a40999))))))))
  (define (foldr proc acc lst)
    (let ((a41000 (null? lst)))
      (if a41000
        acc
        (let ((a41001 (car lst)))
          (let ((a41002 (cdr lst)))
            (let ((a41003 (foldr proc acc a41002))) (proc a41001 a41003)))))))
  (define (append lst1 lst2)
    (let ((a41004 (null? lst1)))
      (if a41004
        lst2
        (let ((a41005 (car lst1)))
          (let ((a41006 (cdr lst1)))
            (let ((a41007 (append a41006 lst2))) (cons a41005 a41007)))))))
  (define (hash . lst) (let ((x41008 (apply-prim hash lst))) x41008))
  (define (hash-ref h k) (let ((x41009 (prim hash-ref h k))) x41009))
  (define (hash-set h k v) (let ((x41010 (prim hash-set h k v))) x41010))
  (define (hash-has-key? h k) (let ((x41011 (prim hash-has-key? h k))) x41011))
  (define (hash-count h) (let ((x41012 (prim hash-count h))) x41012))
  (define (call)
    (let ((a41013 "work"))
      (let ((a41014 '80))
        (let ((a41015 '10))
          (let ((a41016 "lmao"))
            (let ((a41017 (hash a41013 a41014 a41015 a41016)))
              (let ((a41018 '10)) (hash-ref a41017 a41018))))))))
  (define (brouhaha_main) (let ((x41019 (call))) x41019)))
