'((define (+ . lst)
    (let ((kont41415 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41325 (apply-prim + lst))) (kont41415 x41325)))))
  (define (- . lst)
    (let ((kont41417 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41326 (apply-prim - lst))) (kont41417 x41326)))))
  (define (* . lst)
    (let ((kont41419 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41327 (apply-prim * lst))) (kont41419 x41327)))))
  (define (modulo kont41421 a b)
    (let ((x41328 (prim modulo a b))) (kont41421 x41328)))
  (define (/ . lst)
    (let ((kont41422 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41329 (apply-prim / lst))) (kont41422 x41329)))))
  (define (= . lst)
    (let ((kont41424 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41330 (apply-prim = lst))) (kont41424 x41330)))))
  (define (> . lst)
    (let ((kont41426 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41331 (apply-prim > lst))) (kont41426 x41331)))))
  (define (< . lst)
    (let ((kont41428 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41332 (apply-prim < lst))) (kont41428 x41332)))))
  (define (<= . lst)
    (let ((kont41430 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41333 (apply-prim <= lst))) (kont41430 x41333)))))
  (define (>= . lst)
    (let ((kont41432 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41334 (apply-prim >= lst))) (kont41432 x41334)))))
  (define (null? kont41434 x)
    (let ((x41335 (prim null? x))) (kont41434 x41335)))
  (define (equal? kont41435 x y)
    (let ((x41336 (prim equal? x y))) (kont41435 x41336)))
  (define (eq? kont41436 x y)
    (let ((x41337 (prim eq? x y))) (kont41436 x41337)))
  (define (cons kont41437 a b)
    (let ((x41338 (prim cons a b))) (kont41437 x41338)))
  (define (car kont41438 lst)
    (let ((x41339 (prim car lst))) (kont41438 x41339)))
  (define (cdr kont41439 lst)
    (let ((x41340 (prim cdr lst))) (kont41439 x41340)))
  (define (even? kont41440 x)
    (let ((a41341 '0))
      (let ((a41342 '2))
        (let ((f41441 (lambda (a41343) (equal? kont41440 a41341 a41343))))
          (modulo f41441 x a41342)))))
  (define (odd? kont41442 x)
    (let ((a41344 '1))
      (let ((a41345 '2))
        (let ((f41443 (lambda (a41346) (equal? kont41442 a41344 a41346))))
          (modulo f41443 x a41345)))))
  (define (list . x)
    (let ((kont41444 (prim car x))) (let ((x (prim cdr x))) (kont41444 x))))
  (define (member? kont41446 x lst)
    (let ((f41450
           (lambda (a41347)
             (if a41347
               (let ((x41348 '#f)) (kont41446 x41348))
               (let ((f41449
                      (lambda (a41349)
                        (let ((f41448
                               (lambda (a41350)
                                 (if a41350
                                   (let ((x41351 '#t)) (kont41446 x41351))
                                   (let ((f41447
                                          (lambda (a41352)
                                            (member? kont41446 x a41352))))
                                     (cdr f41447 lst))))))
                          (equal? f41448 a41349 x)))))
                 (car f41449 lst))))))
      (null? f41450 lst)))
  (define (foldl kont41451 fun acc lst)
    (let ((f41455
           (lambda (a41353)
             (if a41353
               (kont41451 acc)
               (let ((f41454
                      (lambda (a41354)
                        (let ((f41453
                               (lambda (a41355)
                                 (let ((f41452
                                        (lambda (a41356)
                                          (foldl
                                           kont41451
                                           fun
                                           a41355
                                           a41356))))
                                   (cdr f41452 lst)))))
                          (fun f41453 a41354 acc)))))
                 (car f41454 lst))))))
      (null? f41455 lst)))
  (define (reverse-helper kont41456 lst lst2)
    (let ((f41460
           (lambda (a41357)
             (if a41357
               (kont41456 lst2)
               (let ((f41459
                      (lambda (a41358)
                        (let ((f41458
                               (lambda (a41359)
                                 (let ((f41457
                                        (lambda (a41360)
                                          (reverse-helper
                                           kont41456
                                           a41358
                                           a41360))))
                                   (cons f41457 a41359 lst2)))))
                          (car f41458 lst)))))
                 (cdr f41459 lst))))))
      (null? f41460 lst)))
  (define (reverse kont41461 lst)
    (let ((f41462 (lambda (a41361) (reverse-helper kont41461 lst a41361))))
      (list f41462)))
  (define (take-helper kont41463 lst n lst2)
    (let ((a41362 '0))
      (let ((f41469
             (lambda (a41363)
               (if a41363
                 (let ((f41464 (lambda (x41364) (kont41463 x41364))))
                   (reverse f41464 lst2))
                 (let ((f41468
                        (lambda (a41365)
                          (let ((a41366 '1))
                            (let ((f41467
                                   (lambda (a41367)
                                     (let ((f41466
                                            (lambda (a41368)
                                              (let ((f41465
                                                     (lambda (a41369)
                                                       (take-helper
                                                        kont41463
                                                        a41365
                                                        a41367
                                                        a41369))))
                                                (cons f41465 a41368 lst2)))))
                                       (car f41466 lst)))))
                              (- f41467 n a41366))))))
                   (cdr f41468 lst))))))
        (= f41469 n a41362))))
  (define (take kont41470 lst n)
    (let ((f41471 (lambda (a41370) (take-helper kont41470 lst n a41370))))
      (list f41471)))
  (define (length kont41472 lst)
    (let ((f41475
           (lambda (a41371)
             (if a41371
               (let ((x41372 '0)) (kont41472 x41372))
               (let ((a41373 '1))
                 (let ((f41474
                        (lambda (a41374)
                          (let ((f41473
                                 (lambda (a41375)
                                   (+ kont41472 a41373 a41375))))
                            (length f41473 a41374)))))
                   (cdr f41474 lst)))))))
      (null? f41475 lst)))
  (define (map kont41476 proc lst)
    (let ((f41482
           (lambda (a41376)
             (if a41376
               (let ((f41477 (lambda (x41377) (kont41476 x41377))))
                 (list f41477))
               (let ((f41481
                      (lambda (a41378)
                        (let ((f41480
                               (lambda (a41379)
                                 (let ((f41479
                                        (lambda (a41380)
                                          (let ((f41478
                                                 (lambda (a41381)
                                                   (cons
                                                    kont41476
                                                    a41379
                                                    a41381))))
                                            (map f41478 proc a41380)))))
                                   (cdr f41479 lst)))))
                          (proc f41480 a41378)))))
                 (car f41481 lst))))))
      (null? f41482 lst)))
  (define (filter kont41483 op lst)
    (let ((f41491
           (lambda (a41382)
             (if a41382
               (let ((f41484 (lambda (x41383) (kont41483 x41383))))
                 (list f41484))
               (let ((f41490
                      (lambda (a41384)
                        (let ((f41489
                               (lambda (a41385)
                                 (if a41385
                                   (let ((f41487
                                          (lambda (a41386)
                                            (let ((f41486
                                                   (lambda (a41387)
                                                     (let ((f41485
                                                            (lambda (a41388)
                                                              (cons
                                                               kont41483
                                                               a41386
                                                               a41388))))
                                                       (filter
                                                        f41485
                                                        op
                                                        a41387)))))
                                              (cdr f41486 lst)))))
                                     (car f41487 lst))
                                   (let ((f41488
                                          (lambda (a41389)
                                            (filter kont41483 op a41389))))
                                     (cdr f41488 lst))))))
                          (op f41489 a41384)))))
                 (car f41490 lst))))))
      (null? f41491 lst)))
  (define (drop kont41492 lst n)
    (let ((a41390 '0))
      (let ((f41495
             (lambda (a41391)
               (if a41391
                 (kont41492 lst)
                 (let ((f41494
                        (lambda (a41392)
                          (let ((a41393 '1))
                            (let ((f41493
                                   (lambda (a41394)
                                     (drop kont41492 a41392 a41394))))
                              (- f41493 n a41393))))))
                   (cdr f41494 lst))))))
        (= f41495 n a41390))))
  (define (foldr kont41496 proc acc lst)
    (let ((f41500
           (lambda (a41395)
             (if a41395
               (kont41496 acc)
               (let ((f41499
                      (lambda (a41396)
                        (let ((f41498
                               (lambda (a41397)
                                 (let ((f41497
                                        (lambda (a41398)
                                          (proc kont41496 a41396 a41398))))
                                   (foldr f41497 proc acc a41397)))))
                          (cdr f41498 lst)))))
                 (car f41499 lst))))))
      (null? f41500 lst)))
  (define (append kont41501 lst1 lst2)
    (let ((f41505
           (lambda (a41399)
             (if a41399
               (kont41501 lst2)
               (let ((f41504
                      (lambda (a41400)
                        (let ((f41503
                               (lambda (a41401)
                                 (let ((f41502
                                        (lambda (a41402)
                                          (cons kont41501 a41400 a41402))))
                                   (append f41502 a41401 lst2)))))
                          (cdr f41503 lst1)))))
                 (car f41504 lst1))))))
      (null? f41505 lst1)))
  (define (hash . lst)
    (let ((kont41506 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41403 (apply-prim hash lst))) (kont41506 x41403)))))
  (define (hash-ref kont41508 h k)
    (let ((x41404 (prim hash-ref h k))) (kont41508 x41404)))
  (define (hash-set kont41509 h k v)
    (let ((x41405 (prim hash-set h k v))) (kont41509 x41405)))
  (define (hash-has-key? kont41510 h k)
    (let ((x41406 (prim hash-has-key? h k))) (kont41510 x41406)))
  (define (hash-count kont41511 h)
    (let ((x41407 (prim hash-count h))) (kont41511 x41407)))
  (define (call kont41512)
    (let ((a41408 "work"))
      (let ((a41409 '80))
        (let ((a41410 '10))
          (let ((a41411 "lmao"))
            (let ((f41513
                   (lambda (a41412)
                     (let ((a41413 '10)) (hash-ref kont41512 a41412 a41413)))))
              (hash f41513 a41408 a41409 a41410 a41411)))))))
  (define (brouhaha_main kont41514)
    (let ((f41515 (lambda (x41414) (kont41514 x41414)))) (call f41515))))
