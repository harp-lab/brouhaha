'((define (+ . lst)
    (let ((kont41020 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40928 (apply-prim + lst))) (kont41020 x40928)))))
  (define (- . lst)
    (let ((kont41022 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40929 (apply-prim - lst))) (kont41022 x40929)))))
  (define (* . lst)
    (let ((kont41024 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40930 (apply-prim * lst))) (kont41024 x40930)))))
  (define (modulo kont41026 a b)
    (let ((x40931 (prim modulo a b))) (kont41026 x40931)))
  (define (/ . lst)
    (let ((kont41027 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40932 (apply-prim / lst))) (kont41027 x40932)))))
  (define (= . lst)
    (let ((kont41029 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40933 (apply-prim = lst))) (kont41029 x40933)))))
  (define (> . lst)
    (let ((kont41031 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40934 (apply-prim > lst))) (kont41031 x40934)))))
  (define (< . lst)
    (let ((kont41033 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40935 (apply-prim < lst))) (kont41033 x40935)))))
  (define (<= . lst)
    (let ((kont41035 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40936 (apply-prim <= lst))) (kont41035 x40936)))))
  (define (>= . lst)
    (let ((kont41037 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40937 (apply-prim >= lst))) (kont41037 x40937)))))
  (define (null? kont41039 x)
    (let ((x40938 (prim null? x))) (kont41039 x40938)))
  (define (equal? kont41040 x y)
    (let ((x40939 (prim equal? x y))) (kont41040 x40939)))
  (define (eq? kont41041 x y)
    (let ((x40940 (prim eq? x y))) (kont41041 x40940)))
  (define (cons kont41042 a b)
    (let ((x40941 (prim cons a b))) (kont41042 x40941)))
  (define (car kont41043 lst)
    (let ((x40942 (prim car lst))) (kont41043 x40942)))
  (define (cdr kont41044 lst)
    (let ((x40943 (prim cdr lst))) (kont41044 x40943)))
  (define (even? kont41045 x)
    (let ((a40944 '0))
      (let ((a40945 '2))
        (let ((f41046 (lambda (a40946) (equal? kont41045 a40944 a40946))))
          (modulo f41046 x a40945)))))
  (define (odd? kont41047 x)
    (let ((a40947 '1))
      (let ((a40948 '2))
        (let ((f41048 (lambda (a40949) (equal? kont41047 a40947 a40949))))
          (modulo f41048 x a40948)))))
  (define (list . x)
    (let ((kont41049 (prim car x))) (let ((x (prim cdr x))) (kont41049 x))))
  (define (and . lst)
    (let ((kont41051 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40950 (apply-prim and lst))) (kont41051 x40950)))))
  (define (or . lst)
    (let ((kont41053 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40951 (apply-prim or lst))) (kont41053 x40951)))))
  (define (member? kont41055 x lst)
    (let ((f41059
           (lambda (a40952)
             (if a40952
               (let ((x40953 '#f)) (kont41055 x40953))
               (let ((f41058
                      (lambda (a40954)
                        (let ((f41057
                               (lambda (a40955)
                                 (if a40955
                                   (let ((x40956 '#t)) (kont41055 x40956))
                                   (let ((f41056
                                          (lambda (a40957)
                                            (member? kont41055 x a40957))))
                                     (cdr f41056 lst))))))
                          (equal? f41057 a40954 x)))))
                 (car f41058 lst))))))
      (null? f41059 lst)))
  (define (foldl kont41060 fun acc lst)
    (let ((f41064
           (lambda (a40958)
             (if a40958
               (kont41060 acc)
               (let ((f41063
                      (lambda (a40959)
                        (let ((f41062
                               (lambda (a40960)
                                 (let ((f41061
                                        (lambda (a40961)
                                          (foldl
                                           kont41060
                                           fun
                                           a40960
                                           a40961))))
                                   (cdr f41061 lst)))))
                          (fun f41062 a40959 acc)))))
                 (car f41063 lst))))))
      (null? f41064 lst)))
  (define (reverse-helper kont41065 lst lst2)
    (let ((f41069
           (lambda (a40962)
             (if a40962
               (kont41065 lst2)
               (let ((f41068
                      (lambda (a40963)
                        (let ((f41067
                               (lambda (a40964)
                                 (let ((f41066
                                        (lambda (a40965)
                                          (reverse-helper
                                           kont41065
                                           a40963
                                           a40965))))
                                   (cons f41066 a40964 lst2)))))
                          (car f41067 lst)))))
                 (cdr f41068 lst))))))
      (null? f41069 lst)))
  (define (reverse kont41070 lst)
    (let ((f41071 (lambda (a40966) (reverse-helper kont41070 lst a40966))))
      (list f41071)))
  (define (take-helper kont41072 lst n lst2)
    (let ((a40967 '0))
      (let ((f41078
             (lambda (a40968)
               (if a40968
                 (let ((f41073 (lambda (x40969) (kont41072 x40969))))
                   (reverse f41073 lst2))
                 (let ((f41077
                        (lambda (a40970)
                          (let ((a40971 '1))
                            (let ((f41076
                                   (lambda (a40972)
                                     (let ((f41075
                                            (lambda (a40973)
                                              (let ((f41074
                                                     (lambda (a40974)
                                                       (take-helper
                                                        kont41072
                                                        a40970
                                                        a40972
                                                        a40974))))
                                                (cons f41074 a40973 lst2)))))
                                       (car f41075 lst)))))
                              (- f41076 n a40971))))))
                   (cdr f41077 lst))))))
        (= f41078 n a40967))))
  (define (take kont41079 lst n)
    (let ((f41080 (lambda (a40975) (take-helper kont41079 lst n a40975))))
      (list f41080)))
  (define (length kont41081 lst)
    (let ((f41084
           (lambda (a40976)
             (if a40976
               (let ((x40977 '0)) (kont41081 x40977))
               (let ((a40978 '1))
                 (let ((f41083
                        (lambda (a40979)
                          (let ((f41082
                                 (lambda (a40980)
                                   (+ kont41081 a40978 a40980))))
                            (length f41082 a40979)))))
                   (cdr f41083 lst)))))))
      (null? f41084 lst)))
  (define (map kont41085 proc lst)
    (let ((f41091
           (lambda (a40981)
             (if a40981
               (let ((f41086 (lambda (x40982) (kont41085 x40982))))
                 (list f41086))
               (let ((f41090
                      (lambda (a40983)
                        (let ((f41089
                               (lambda (a40984)
                                 (let ((f41088
                                        (lambda (a40985)
                                          (let ((f41087
                                                 (lambda (a40986)
                                                   (cons
                                                    kont41085
                                                    a40984
                                                    a40986))))
                                            (map f41087 proc a40985)))))
                                   (cdr f41088 lst)))))
                          (proc f41089 a40983)))))
                 (car f41090 lst))))))
      (null? f41091 lst)))
  (define (filter kont41092 op lst)
    (let ((f41100
           (lambda (a40987)
             (if a40987
               (let ((f41093 (lambda (x40988) (kont41092 x40988))))
                 (list f41093))
               (let ((f41099
                      (lambda (a40989)
                        (let ((f41098
                               (lambda (a40990)
                                 (if a40990
                                   (let ((f41096
                                          (lambda (a40991)
                                            (let ((f41095
                                                   (lambda (a40992)
                                                     (let ((f41094
                                                            (lambda (a40993)
                                                              (cons
                                                               kont41092
                                                               a40991
                                                               a40993))))
                                                       (filter
                                                        f41094
                                                        op
                                                        a40992)))))
                                              (cdr f41095 lst)))))
                                     (car f41096 lst))
                                   (let ((f41097
                                          (lambda (a40994)
                                            (filter kont41092 op a40994))))
                                     (cdr f41097 lst))))))
                          (op f41098 a40989)))))
                 (car f41099 lst))))))
      (null? f41100 lst)))
  (define (drop kont41101 lst n)
    (let ((a40995 '0))
      (let ((f41104
             (lambda (a40996)
               (if a40996
                 (kont41101 lst)
                 (let ((f41103
                        (lambda (a40997)
                          (let ((a40998 '1))
                            (let ((f41102
                                   (lambda (a40999)
                                     (drop kont41101 a40997 a40999))))
                              (- f41102 n a40998))))))
                   (cdr f41103 lst))))))
        (= f41104 n a40995))))
  (define (foldr kont41105 proc acc lst)
    (let ((f41109
           (lambda (a41000)
             (if a41000
               (kont41105 acc)
               (let ((f41108
                      (lambda (a41001)
                        (let ((f41107
                               (lambda (a41002)
                                 (let ((f41106
                                        (lambda (a41003)
                                          (proc kont41105 a41001 a41003))))
                                   (foldr f41106 proc acc a41002)))))
                          (cdr f41107 lst)))))
                 (car f41108 lst))))))
      (null? f41109 lst)))
  (define (append kont41110 lst1 lst2)
    (let ((f41114
           (lambda (a41004)
             (if a41004
               (kont41110 lst2)
               (let ((f41113
                      (lambda (a41005)
                        (let ((f41112
                               (lambda (a41006)
                                 (let ((f41111
                                        (lambda (a41007)
                                          (cons kont41110 a41005 a41007))))
                                   (append f41111 a41006 lst2)))))
                          (cdr f41112 lst1)))))
                 (car f41113 lst1))))))
      (null? f41114 lst1)))
  (define (hash . lst)
    (let ((kont41115 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41008 (apply-prim hash lst))) (kont41115 x41008)))))
  (define (hash-ref kont41117 h k)
    (let ((x41009 (prim hash-ref h k))) (kont41117 x41009)))
  (define (hash-set kont41118 h k v)
    (let ((x41010 (prim hash-set h k v))) (kont41118 x41010)))
  (define (hash-has-key? kont41119 h k)
    (let ((x41011 (prim hash-has-key? h k))) (kont41119 x41011)))
  (define (hash-count kont41120 h)
    (let ((x41012 (prim hash-count h))) (kont41120 x41012)))
  (define (call kont41121)
    (let ((a41013 "work"))
      (let ((a41014 '80))
        (let ((a41015 '10))
          (let ((a41016 "lmao"))
            (let ((f41122
                   (lambda (a41017)
                     (let ((a41018 '10)) (hash-ref kont41121 a41017 a41018)))))
              (hash f41122 a41013 a41014 a41015 a41016)))))))
  (define (brouhaha_main kont41123)
    (let ((f41124 (lambda (x41019) (kont41123 x41019)))) (call f41124))))
