'((define (+ . lst)
    (let ((kont42603 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42513 (apply-prim + lst))) (kont42603 x42513)))))
  (define (- . lst)
    (let ((kont42605 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42514 (apply-prim - lst))) (kont42605 x42514)))))
  (define (* . lst)
    (let ((kont42607 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42515 (apply-prim * lst))) (kont42607 x42515)))))
  (define (modulo kont42609 a b)
    (let ((x42516 (prim modulo a b))) (kont42609 x42516)))
  (define (/ . lst)
    (let ((kont42610 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42517 (apply-prim / lst))) (kont42610 x42517)))))
  (define (= . lst)
    (let ((kont42612 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42518 (apply-prim = lst))) (kont42612 x42518)))))
  (define (> . lst)
    (let ((kont42614 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42519 (apply-prim > lst))) (kont42614 x42519)))))
  (define (< . lst)
    (let ((kont42616 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42520 (apply-prim < lst))) (kont42616 x42520)))))
  (define (<= . lst)
    (let ((kont42618 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42521 (apply-prim <= lst))) (kont42618 x42521)))))
  (define (>= . lst)
    (let ((kont42620 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42522 (apply-prim >= lst))) (kont42620 x42522)))))
  (define (null? kont42622 x)
    (let ((x42523 (prim null? x))) (kont42622 x42523)))
  (define (equal? kont42623 x y)
    (let ((x42524 (prim equal? x y))) (kont42623 x42524)))
  (define (eq? kont42624 x y)
    (let ((x42525 (prim eq? x y))) (kont42624 x42525)))
  (define (cons kont42625 a b)
    (let ((x42526 (prim cons a b))) (kont42625 x42526)))
  (define (car kont42626 lst)
    (let ((x42527 (prim car lst))) (kont42626 x42527)))
  (define (cdr kont42627 lst)
    (let ((x42528 (prim cdr lst))) (kont42627 x42528)))
  (define (even? kont42628 x)
    (let ((a42529 '0))
      (let ((a42530 '2))
        (let ((f42629 (lambda (a42531) (equal? kont42628 a42529 a42531))))
          (modulo f42629 x a42530)))))
  (define (odd? kont42630 x)
    (let ((a42532 '1))
      (let ((a42533 '2))
        (let ((f42631 (lambda (a42534) (equal? kont42630 a42532 a42534))))
          (modulo f42631 x a42533)))))
  (define (list . x)
    (let ((kont42632 (prim car x))) (let ((x (prim cdr x))) (kont42632 x))))
  (define (member? kont42634 x lst)
    (let ((f42638
           (lambda (a42535)
             (if a42535
               (let ((x42536 '#f)) (kont42634 x42536))
               (let ((f42637
                      (lambda (a42537)
                        (let ((f42636
                               (lambda (a42538)
                                 (if a42538
                                   (let ((x42539 '#t)) (kont42634 x42539))
                                   (let ((f42635
                                          (lambda (a42540)
                                            (member? kont42634 x a42540))))
                                     (cdr f42635 lst))))))
                          (equal? f42636 a42537 x)))))
                 (car f42637 lst))))))
      (null? f42638 lst)))
  (define (foldl kont42639 fun acc lst)
    (let ((f42643
           (lambda (a42541)
             (if a42541
               (kont42639 acc)
               (let ((f42642
                      (lambda (a42542)
                        (let ((f42641
                               (lambda (a42543)
                                 (let ((f42640
                                        (lambda (a42544)
                                          (foldl
                                           kont42639
                                           fun
                                           a42543
                                           a42544))))
                                   (cdr f42640 lst)))))
                          (fun f42641 a42542 acc)))))
                 (car f42642 lst))))))
      (null? f42643 lst)))
  (define (reverse-helper kont42644 lst lst2)
    (let ((f42648
           (lambda (a42545)
             (if a42545
               (kont42644 lst2)
               (let ((f42647
                      (lambda (a42546)
                        (let ((f42646
                               (lambda (a42547)
                                 (let ((f42645
                                        (lambda (a42548)
                                          (reverse-helper
                                           kont42644
                                           a42546
                                           a42548))))
                                   (cons f42645 a42547 lst2)))))
                          (car f42646 lst)))))
                 (cdr f42647 lst))))))
      (null? f42648 lst)))
  (define (reverse kont42649 lst)
    (let ((f42650 (lambda (a42549) (reverse-helper kont42649 lst a42549))))
      (list f42650)))
  (define (take-helper kont42651 lst n lst2)
    (let ((a42550 '0))
      (let ((f42657
             (lambda (a42551)
               (if a42551
                 (let ((f42652 (lambda (x42552) (kont42651 x42552))))
                   (reverse f42652 lst2))
                 (let ((f42656
                        (lambda (a42553)
                          (let ((a42554 '1))
                            (let ((f42655
                                   (lambda (a42555)
                                     (let ((f42654
                                            (lambda (a42556)
                                              (let ((f42653
                                                     (lambda (a42557)
                                                       (take-helper
                                                        kont42651
                                                        a42553
                                                        a42555
                                                        a42557))))
                                                (cons f42653 a42556 lst2)))))
                                       (car f42654 lst)))))
                              (- f42655 n a42554))))))
                   (cdr f42656 lst))))))
        (= f42657 n a42550))))
  (define (take kont42658 lst n)
    (let ((f42659 (lambda (a42558) (take-helper kont42658 lst n a42558))))
      (list f42659)))
  (define (length kont42660 lst)
    (let ((f42663
           (lambda (a42559)
             (if a42559
               (let ((x42560 '0)) (kont42660 x42560))
               (let ((a42561 '1))
                 (let ((f42662
                        (lambda (a42562)
                          (let ((f42661
                                 (lambda (a42563)
                                   (+ kont42660 a42561 a42563))))
                            (length f42661 a42562)))))
                   (cdr f42662 lst)))))))
      (null? f42663 lst)))
  (define (map kont42664 proc lst)
    (let ((f42670
           (lambda (a42564)
             (if a42564
               (let ((f42665 (lambda (x42565) (kont42664 x42565))))
                 (list f42665))
               (let ((f42669
                      (lambda (a42566)
                        (let ((f42668
                               (lambda (a42567)
                                 (let ((f42667
                                        (lambda (a42568)
                                          (let ((f42666
                                                 (lambda (a42569)
                                                   (cons
                                                    kont42664
                                                    a42567
                                                    a42569))))
                                            (map f42666 proc a42568)))))
                                   (cdr f42667 lst)))))
                          (proc f42668 a42566)))))
                 (car f42669 lst))))))
      (null? f42670 lst)))
  (define (filter kont42671 op lst)
    (let ((f42679
           (lambda (a42570)
             (if a42570
               (let ((f42672 (lambda (x42571) (kont42671 x42571))))
                 (list f42672))
               (let ((f42678
                      (lambda (a42572)
                        (let ((f42677
                               (lambda (a42573)
                                 (if a42573
                                   (let ((f42675
                                          (lambda (a42574)
                                            (let ((f42674
                                                   (lambda (a42575)
                                                     (let ((f42673
                                                            (lambda (a42576)
                                                              (cons
                                                               kont42671
                                                               a42574
                                                               a42576))))
                                                       (filter
                                                        f42673
                                                        op
                                                        a42575)))))
                                              (cdr f42674 lst)))))
                                     (car f42675 lst))
                                   (let ((f42676
                                          (lambda (a42577)
                                            (filter kont42671 op a42577))))
                                     (cdr f42676 lst))))))
                          (op f42677 a42572)))))
                 (car f42678 lst))))))
      (null? f42679 lst)))
  (define (drop kont42680 lst n)
    (let ((a42578 '0))
      (let ((f42683
             (lambda (a42579)
               (if a42579
                 (kont42680 lst)
                 (let ((f42682
                        (lambda (a42580)
                          (let ((a42581 '1))
                            (let ((f42681
                                   (lambda (a42582)
                                     (drop kont42680 a42580 a42582))))
                              (- f42681 n a42581))))))
                   (cdr f42682 lst))))))
        (= f42683 n a42578))))
  (define (foldr kont42684 proc acc lst)
    (let ((f42688
           (lambda (a42583)
             (if a42583
               (kont42684 acc)
               (let ((f42687
                      (lambda (a42584)
                        (let ((f42686
                               (lambda (a42585)
                                 (let ((f42685
                                        (lambda (a42586)
                                          (proc kont42684 a42584 a42586))))
                                   (foldr f42685 proc acc a42585)))))
                          (cdr f42686 lst)))))
                 (car f42687 lst))))))
      (null? f42688 lst)))
  (define (append kont42689 lst1 lst2)
    (let ((f42693
           (lambda (a42587)
             (if a42587
               (kont42689 lst2)
               (let ((f42692
                      (lambda (a42588)
                        (let ((f42691
                               (lambda (a42589)
                                 (let ((f42690
                                        (lambda (a42590)
                                          (cons kont42689 a42588 a42590))))
                                   (append f42690 a42589 lst2)))))
                          (cdr f42691 lst1)))))
                 (car f42692 lst1))))))
      (null? f42693 lst1)))
  (define (hash . lst)
    (let ((kont42694 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42591 (apply-prim hash lst))) (kont42694 x42591)))))
  (define (hash-ref kont42696 h k)
    (let ((x42592 (prim hash-ref h k))) (kont42696 x42592)))
  (define (hash-set kont42697 h k v)
    (let ((x42593 (prim hash-set h k v))) (kont42697 x42593)))
  (define (hash-has-key? kont42698 h k)
    (let ((x42594 (prim hash-has-key? h k))) (kont42698 x42594)))
  (define (hash-count kont42699 h)
    (let ((x42595 (prim hash-count h))) (kont42699 x42595)))
  (define (call kont42700)
    (let ((a42596 "work"))
      (let ((a42597 '80))
        (let ((a42598 '10))
          (let ((a42599 "lmao"))
            (let ((f42701
                   (lambda (a42600)
                     (let ((a42601 '10)) (hash-ref kont42700 a42600 a42601)))))
              (hash f42701 a42596 a42597 a42598 a42599)))))))
  (define (brouhaha_main kont42702)
    (let ((f42703 (lambda (x42602) (kont42702 x42602)))) (call f42703))))
