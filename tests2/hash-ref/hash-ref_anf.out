'((define (+ . lst)
    (let ((kont40563 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40473 (apply-prim + lst))) (kont40563 x40473)))))
  (define (- . lst)
    (let ((kont40565 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40474 (apply-prim - lst))) (kont40565 x40474)))))
  (define (* . lst)
    (let ((kont40567 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40475 (apply-prim * lst))) (kont40567 x40475)))))
  (define (modulo kont40569 a b)
    (let ((x40476 (prim modulo a b))) (kont40569 x40476)))
  (define (/ . lst)
    (let ((kont40570 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40477 (apply-prim / lst))) (kont40570 x40477)))))
  (define (= . lst)
    (let ((kont40572 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40478 (apply-prim = lst))) (kont40572 x40478)))))
  (define (> . lst)
    (let ((kont40574 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40479 (apply-prim > lst))) (kont40574 x40479)))))
  (define (< . lst)
    (let ((kont40576 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40480 (apply-prim < lst))) (kont40576 x40480)))))
  (define (<= . lst)
    (let ((kont40578 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40481 (apply-prim <= lst))) (kont40578 x40481)))))
  (define (>= . lst)
    (let ((kont40580 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40482 (apply-prim >= lst))) (kont40580 x40482)))))
  (define (null? kont40582 x)
    (let ((x40483 (prim null? x))) (kont40582 x40483)))
  (define (equal? kont40583 x y)
    (let ((x40484 (prim equal? x y))) (kont40583 x40484)))
  (define (eq? kont40584 x y)
    (let ((x40485 (prim eq? x y))) (kont40584 x40485)))
  (define (cons kont40585 a b)
    (let ((x40486 (prim cons a b))) (kont40585 x40486)))
  (define (car kont40586 lst)
    (let ((x40487 (prim car lst))) (kont40586 x40487)))
  (define (cdr kont40587 lst)
    (let ((x40488 (prim cdr lst))) (kont40587 x40488)))
  (define (even? kont40588 x)
    (let ((a40489 '0))
      (let ((a40490 '2))
        (let ((f40589 (lambda (a40491) (equal? kont40588 a40489 a40491))))
          (modulo f40589 x a40490)))))
  (define (odd? kont40590 x)
    (let ((a40492 '1))
      (let ((a40493 '2))
        (let ((f40591 (lambda (a40494) (equal? kont40590 a40492 a40494))))
          (modulo f40591 x a40493)))))
  (define (list . x)
    (let ((kont40592 (prim car x))) (let ((x (prim cdr x))) (kont40592 x))))
  (define (member? kont40594 x lst)
    (let ((f40598
           (lambda (a40495)
             (if a40495
               (let ((x40496 '#f)) (kont40594 x40496))
               (let ((f40597
                      (lambda (a40497)
                        (let ((f40596
                               (lambda (a40498)
                                 (if a40498
                                   (let ((x40499 '#t)) (kont40594 x40499))
                                   (let ((f40595
                                          (lambda (a40500)
                                            (member? kont40594 x a40500))))
                                     (cdr f40595 lst))))))
                          (equal? f40596 a40497 x)))))
                 (car f40597 lst))))))
      (null? f40598 lst)))
  (define (foldl kont40599 fun acc lst)
    (let ((f40603
           (lambda (a40501)
             (if a40501
               (kont40599 acc)
               (let ((f40602
                      (lambda (a40502)
                        (let ((f40601
                               (lambda (a40503)
                                 (let ((f40600
                                        (lambda (a40504)
                                          (foldl
                                           kont40599
                                           fun
                                           a40503
                                           a40504))))
                                   (cdr f40600 lst)))))
                          (fun f40601 a40502 acc)))))
                 (car f40602 lst))))))
      (null? f40603 lst)))
  (define (reverse-helper kont40604 lst lst2)
    (let ((f40608
           (lambda (a40505)
             (if a40505
               (kont40604 lst2)
               (let ((f40607
                      (lambda (a40506)
                        (let ((f40606
                               (lambda (a40507)
                                 (let ((f40605
                                        (lambda (a40508)
                                          (reverse-helper
                                           kont40604
                                           a40506
                                           a40508))))
                                   (cons f40605 a40507 lst2)))))
                          (car f40606 lst)))))
                 (cdr f40607 lst))))))
      (null? f40608 lst)))
  (define (reverse kont40609 lst)
    (let ((f40610 (lambda (a40509) (reverse-helper kont40609 lst a40509))))
      (list f40610)))
  (define (take-helper kont40611 lst n lst2)
    (let ((a40510 '0))
      (let ((f40617
             (lambda (a40511)
               (if a40511
                 (let ((f40612 (lambda (x40512) (kont40611 x40512))))
                   (reverse f40612 lst2))
                 (let ((f40616
                        (lambda (a40513)
                          (let ((a40514 '1))
                            (let ((f40615
                                   (lambda (a40515)
                                     (let ((f40614
                                            (lambda (a40516)
                                              (let ((f40613
                                                     (lambda (a40517)
                                                       (take-helper
                                                        kont40611
                                                        a40513
                                                        a40515
                                                        a40517))))
                                                (cons f40613 a40516 lst2)))))
                                       (car f40614 lst)))))
                              (- f40615 n a40514))))))
                   (cdr f40616 lst))))))
        (= f40617 n a40510))))
  (define (take kont40618 lst n)
    (let ((f40619 (lambda (a40518) (take-helper kont40618 lst n a40518))))
      (list f40619)))
  (define (length kont40620 lst)
    (let ((f40623
           (lambda (a40519)
             (if a40519
               (let ((x40520 '0)) (kont40620 x40520))
               (let ((a40521 '1))
                 (let ((f40622
                        (lambda (a40522)
                          (let ((f40621
                                 (lambda (a40523)
                                   (+ kont40620 a40521 a40523))))
                            (length f40621 a40522)))))
                   (cdr f40622 lst)))))))
      (null? f40623 lst)))
  (define (map kont40624 proc lst)
    (let ((f40630
           (lambda (a40524)
             (if a40524
               (let ((f40625 (lambda (x40525) (kont40624 x40525))))
                 (list f40625))
               (let ((f40629
                      (lambda (a40526)
                        (let ((f40628
                               (lambda (a40527)
                                 (let ((f40627
                                        (lambda (a40528)
                                          (let ((f40626
                                                 (lambda (a40529)
                                                   (cons
                                                    kont40624
                                                    a40527
                                                    a40529))))
                                            (map f40626 proc a40528)))))
                                   (cdr f40627 lst)))))
                          (proc f40628 a40526)))))
                 (car f40629 lst))))))
      (null? f40630 lst)))
  (define (filter kont40631 op lst)
    (let ((f40639
           (lambda (a40530)
             (if a40530
               (let ((f40632 (lambda (x40531) (kont40631 x40531))))
                 (list f40632))
               (let ((f40638
                      (lambda (a40532)
                        (let ((f40637
                               (lambda (a40533)
                                 (if a40533
                                   (let ((f40635
                                          (lambda (a40534)
                                            (let ((f40634
                                                   (lambda (a40535)
                                                     (let ((f40633
                                                            (lambda (a40536)
                                                              (cons
                                                               kont40631
                                                               a40534
                                                               a40536))))
                                                       (filter
                                                        f40633
                                                        op
                                                        a40535)))))
                                              (cdr f40634 lst)))))
                                     (car f40635 lst))
                                   (let ((f40636
                                          (lambda (a40537)
                                            (filter kont40631 op a40537))))
                                     (cdr f40636 lst))))))
                          (op f40637 a40532)))))
                 (car f40638 lst))))))
      (null? f40639 lst)))
  (define (drop kont40640 lst n)
    (let ((a40538 '0))
      (let ((f40643
             (lambda (a40539)
               (if a40539
                 (kont40640 lst)
                 (let ((f40642
                        (lambda (a40540)
                          (let ((a40541 '1))
                            (let ((f40641
                                   (lambda (a40542)
                                     (drop kont40640 a40540 a40542))))
                              (- f40641 n a40541))))))
                   (cdr f40642 lst))))))
        (= f40643 n a40538))))
  (define (foldr kont40644 proc acc lst)
    (let ((f40648
           (lambda (a40543)
             (if a40543
               (kont40644 acc)
               (let ((f40647
                      (lambda (a40544)
                        (let ((f40646
                               (lambda (a40545)
                                 (let ((f40645
                                        (lambda (a40546)
                                          (proc kont40644 a40544 a40546))))
                                   (foldr f40645 proc acc a40545)))))
                          (cdr f40646 lst)))))
                 (car f40647 lst))))))
      (null? f40648 lst)))
  (define (append kont40649 lst1 lst2)
    (let ((f40653
           (lambda (a40547)
             (if a40547
               (kont40649 lst2)
               (let ((f40652
                      (lambda (a40548)
                        (let ((f40651
                               (lambda (a40549)
                                 (let ((f40650
                                        (lambda (a40550)
                                          (cons kont40649 a40548 a40550))))
                                   (append f40650 a40549 lst2)))))
                          (cdr f40651 lst1)))))
                 (car f40652 lst1))))))
      (null? f40653 lst1)))
  (define (hash . lst)
    (let ((kont40654 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x40551 (apply-prim hash lst))) (kont40654 x40551)))))
  (define (hash-ref kont40656 h k)
    (let ((x40552 (prim hash-ref h k))) (kont40656 x40552)))
  (define (hash-set kont40657 h k v)
    (let ((x40553 (prim hash-set h k v))) (kont40657 x40553)))
  (define (hash-has-key? kont40658 h k)
    (let ((x40554 (prim hash-has-key? h k))) (kont40658 x40554)))
  (define (hash-count kont40659 h)
    (let ((x40555 (prim hash-count h))) (kont40659 x40555)))
  (define (call kont40660)
    (let ((a40556 "work"))
      (let ((a40557 '80))
        (let ((a40558 '10))
          (let ((a40559 "lmao"))
            (let ((f40661
                   (lambda (a40560)
                     (let ((a40561 '10)) (hash-ref kont40660 a40560 a40561)))))
              (hash f40661 a40556 a40557 a40558 a40559)))))))
  (define (brouhaha_main kont40662)
    (let ((f40663 (lambda (x40562) (kont40662 x40562)))) (call f40663))))
