'((define (+ . lst) (let ((x13184 (apply-prim + lst))) x13184))
  (define (- . lst) (let ((x13185 (apply-prim - lst))) x13185))
  (define (* . lst) (let ((x13186 (apply-prim * lst))) x13186))
  (define (modulo a b) (let ((x13187 (prim modulo a b))) x13187))
  (define (/ . lst) (let ((x13188 (apply-prim / lst))) x13188))
  (define (= . lst) (let ((x13189 (apply-prim = lst))) x13189))
  (define (> . lst) (let ((x13190 (apply-prim > lst))) x13190))
  (define (< . lst) (let ((x13191 (apply-prim < lst))) x13191))
  (define (<= . lst) (let ((x13192 (apply-prim <= lst))) x13192))
  (define (>= . lst) (let ((x13193 (apply-prim >= lst))) x13193))
  (define (null? x) (let ((x13194 (prim null? x))) x13194))
  (define (equal? x y) (let ((x13195 (prim equal? x y))) x13195))
  (define (eq? x y) (let ((x13196 (prim eq? x y))) x13196))
  (define (cons a b) (let ((x13197 (prim cons a b))) x13197))
  (define (car lst) (let ((x13198 (prim car lst))) x13198))
  (define (cdr lst) (let ((x13199 (prim cdr lst))) x13199))
  (define (even? x)
    (let ((a13200 '0))
      (let ((a13201 '2))
        (let ((a13202 (modulo x a13201))) (equal? a13200 a13202)))))
  (define (odd? x)
    (let ((a13203 '1))
      (let ((a13204 '2))
        (let ((a13205 (modulo x a13204))) (equal? a13203 a13205)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a13206 (null? lst)))
      (if a13206
        (let ((x13207 '#f)) x13207)
        (let ((a13208 (car lst)))
          (let ((a13209 (equal? a13208 x)))
            (if a13209
              (let ((x13210 '#t)) x13210)
              (let ((a13211 (cdr lst))) (member? x a13211))))))))
  (define (foldl fun acc lst)
    (let ((a13212 (null? lst)))
      (if a13212
        acc
        (let ((a13213 (car lst)))
          (let ((a13214 (fun a13213 acc)))
            (let ((a13215 (cdr lst))) (foldl fun a13214 a13215)))))))
  (define (reverse-helper lst lst2)
    (let ((a13216 (null? lst)))
      (if a13216
        lst2
        (let ((a13217 (cdr lst)))
          (let ((a13218 (car lst)))
            (let ((a13219 (cons a13218 lst2)))
              (reverse-helper a13217 a13219)))))))
  (define (reverse lst) (let ((a13220 (list))) (reverse-helper lst a13220)))
  (define (take-helper lst n lst2)
    (let ((a13221 '0))
      (let ((a13222 (= n a13221)))
        (if a13222
          (let ((x13223 (reverse lst2))) x13223)
          (let ((a13224 (cdr lst)))
            (let ((a13225 '1))
              (let ((a13226 (- n a13225)))
                (let ((a13227 (car lst)))
                  (let ((a13228 (cons a13227 lst2)))
                    (take-helper a13224 a13226 a13228))))))))))
  (define (take lst n) (let ((a13229 (list))) (take-helper lst n a13229)))
  (define (length lst)
    (let ((a13230 (null? lst)))
      (if a13230
        (let ((x13231 '0)) x13231)
        (let ((a13232 '1))
          (let ((a13233 (cdr lst)))
            (let ((a13234 (length a13233))) (+ a13232 a13234)))))))
  (define (map proc lst)
    (let ((a13235 (null? lst)))
      (if a13235
        (let ((x13236 (list))) x13236)
        (let ((a13237 (car lst)))
          (let ((a13238 (proc a13237)))
            (let ((a13239 (cdr lst)))
              (let ((a13240 (map proc a13239))) (cons a13238 a13240))))))))
  (define (filter op lst)
    (let ((a13241 (null? lst)))
      (if a13241
        (let ((x13242 (list))) x13242)
        (let ((a13243 (car lst)))
          (let ((a13244 (op a13243)))
            (if a13244
              (let ((a13245 (car lst)))
                (let ((a13246 (cdr lst)))
                  (let ((a13247 (filter op a13246))) (cons a13245 a13247))))
              (let ((a13248 (cdr lst))) (filter op a13248))))))))
  (define (drop lst n)
    (let ((a13249 '0))
      (let ((a13250 (= n a13249)))
        (if a13250
          lst
          (let ((a13251 (cdr lst)))
            (let ((a13252 '1))
              (let ((a13253 (- n a13252))) (drop a13251 a13253))))))))
  (define (foldr proc acc lst)
    (let ((a13254 (null? lst)))
      (if a13254
        acc
        (let ((a13255 (car lst)))
          (let ((a13256 (cdr lst)))
            (let ((a13257 (foldr proc acc a13256))) (proc a13255 a13257)))))))
  (define (append lst1 lst2)
    (let ((a13258 (null? lst1)))
      (if a13258
        lst2
        (let ((a13259 (car lst1)))
          (let ((a13260 (cdr lst1)))
            (let ((a13261 (append a13260 lst2))) (cons a13259 a13261)))))))
  (define (hash . lst) (let ((x13262 (apply-prim hash lst))) x13262))
  (define (hash-ref h k) (let ((x13263 (prim hash-ref h k))) x13263))
  (define (hash-set h k v) (let ((x13264 (prim hash-set h k v))) x13264))
  (define (hash-has-key? h k) (let ((x13265 (prim hash-has-key? h k))) x13265))
  (define (hash-count h) (let ((x13266 (prim hash-count h))) x13266))
  (define (fact n)
    (let ((a13267 '0))
      (let ((a13268 (= a13267 n)))
        (if a13268
          (let ((x13269 '1)) x13269)
          (let ((a13270 '1))
            (let ((a13271 (- n a13270)))
              (let ((a13272 (fact a13271))) (* n a13272))))))))
  (define (brouhaha_main) (let ((a13273 '5)) (fact a13273))))
