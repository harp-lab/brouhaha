'((define (+ . lst) (let ((x13548 (apply-prim + lst))) x13548))
  (define (- . lst) (let ((x13549 (apply-prim - lst))) x13549))
  (define (* . lst) (let ((x13550 (apply-prim * lst))) x13550))
  (define (modulo a b) (let ((x13551 (prim modulo a b))) x13551))
  (define (/ . lst) (let ((x13552 (apply-prim / lst))) x13552))
  (define (= . lst) (let ((x13553 (apply-prim = lst))) x13553))
  (define (> . lst) (let ((x13554 (apply-prim > lst))) x13554))
  (define (< . lst) (let ((x13555 (apply-prim < lst))) x13555))
  (define (<= . lst) (let ((x13556 (apply-prim <= lst))) x13556))
  (define (>= . lst) (let ((x13557 (apply-prim >= lst))) x13557))
  (define (null? x) (let ((x13558 (prim null? x))) x13558))
  (define (equal? x y) (let ((x13559 (prim equal? x y))) x13559))
  (define (eq? x y) (let ((x13560 (prim eq? x y))) x13560))
  (define (cons a b) (let ((x13561 (prim cons a b))) x13561))
  (define (car lst) (let ((x13562 (prim car lst))) x13562))
  (define (cdr lst) (let ((x13563 (prim cdr lst))) x13563))
  (define (even? x)
    (let ((a13564 '0))
      (let ((a13565 '2))
        (let ((a13566 (modulo x a13565))) (equal? a13564 a13566)))))
  (define (odd? x)
    (let ((a13567 '1))
      (let ((a13568 '2))
        (let ((a13569 (modulo x a13568))) (equal? a13567 a13569)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a13570 (null? lst)))
      (if a13570
        (let ((x13571 '#f)) x13571)
        (let ((a13572 (car lst)))
          (let ((a13573 (equal? a13572 x)))
            (if a13573
              (let ((x13574 '#t)) x13574)
              (let ((a13575 (cdr lst))) (member? x a13575))))))))
  (define (foldl fun acc lst)
    (let ((a13576 (null? lst)))
      (if a13576
        acc
        (let ((a13577 (car lst)))
          (let ((a13578 (fun a13577 acc)))
            (let ((a13579 (cdr lst))) (foldl fun a13578 a13579)))))))
  (define (reverse-helper lst lst2)
    (let ((a13580 (null? lst)))
      (if a13580
        lst2
        (let ((a13581 (cdr lst)))
          (let ((a13582 (car lst)))
            (let ((a13583 (cons a13582 lst2)))
              (reverse-helper a13581 a13583)))))))
  (define (reverse lst) (let ((a13584 (list))) (reverse-helper lst a13584)))
  (define (take-helper lst n lst2)
    (let ((a13585 '0))
      (let ((a13586 (= n a13585)))
        (if a13586
          (let ((x13587 (reverse lst2))) x13587)
          (let ((a13588 (cdr lst)))
            (let ((a13589 '1))
              (let ((a13590 (- n a13589)))
                (let ((a13591 (car lst)))
                  (let ((a13592 (cons a13591 lst2)))
                    (take-helper a13588 a13590 a13592))))))))))
  (define (take lst n) (let ((a13593 (list))) (take-helper lst n a13593)))
  (define (length lst)
    (let ((a13594 (null? lst)))
      (if a13594
        (let ((x13595 '0)) x13595)
        (let ((a13596 '1))
          (let ((a13597 (cdr lst)))
            (let ((a13598 (length a13597))) (+ a13596 a13598)))))))
  (define (map proc lst)
    (let ((a13599 (null? lst)))
      (if a13599
        (let ((x13600 (list))) x13600)
        (let ((a13601 (car lst)))
          (let ((a13602 (proc a13601)))
            (let ((a13603 (cdr lst)))
              (let ((a13604 (map proc a13603))) (cons a13602 a13604))))))))
  (define (filter op lst)
    (let ((a13605 (null? lst)))
      (if a13605
        (let ((x13606 (list))) x13606)
        (let ((a13607 (car lst)))
          (let ((a13608 (op a13607)))
            (if a13608
              (let ((a13609 (car lst)))
                (let ((a13610 (cdr lst)))
                  (let ((a13611 (filter op a13610))) (cons a13609 a13611))))
              (let ((a13612 (cdr lst))) (filter op a13612))))))))
  (define (drop lst n)
    (let ((a13613 '0))
      (let ((a13614 (= n a13613)))
        (if a13614
          lst
          (let ((a13615 (cdr lst)))
            (let ((a13616 '1))
              (let ((a13617 (- n a13616))) (drop a13615 a13617))))))))
  (define (foldr proc acc lst)
    (let ((a13618 (null? lst)))
      (if a13618
        acc
        (let ((a13619 (car lst)))
          (let ((a13620 (cdr lst)))
            (let ((a13621 (foldr proc acc a13620))) (proc a13619 a13621)))))))
  (define (append lst1 lst2)
    (let ((a13622 (null? lst1)))
      (if a13622
        lst2
        (let ((a13623 (car lst1)))
          (let ((a13624 (cdr lst1)))
            (let ((a13625 (append a13624 lst2))) (cons a13623 a13625)))))))
  (define (hash . lst) (let ((x13626 (apply-prim hash lst))) x13626))
  (define (hash-ref h k) (let ((x13627 (prim hash-ref h k))) x13627))
  (define (hash-set h k v) (let ((x13628 (prim hash-set h k v))) x13628))
  (define (hash-has-key? h k) (let ((x13629 (prim hash-has-key? h k))) x13629))
  (define (hash-count h) (let ((x13630 (prim hash-count h))) x13630))
  (define (fact n)
    (let ((a13631 '0))
      (let ((a13632 (= a13631 n)))
        (if a13632
          (let ((x13633 '1)) x13633)
          (let ((a13634 '1))
            (let ((a13635 (- n a13634)))
              (let ((a13636 (fact a13635))) (* n a13636))))))))
  (define (brouhaha_main) (let ((a13637 '5)) (fact a13637))))
