'((define (+ . lst) (let ((x13552 (apply-prim + lst))) x13552))
  (define (- . lst) (let ((x13553 (apply-prim - lst))) x13553))
  (define (* . lst) (let ((x13554 (apply-prim * lst))) x13554))
  (define (modulo a b) (let ((x13555 (prim modulo a b))) x13555))
  (define (/ . lst) (let ((x13556 (apply-prim / lst))) x13556))
  (define (= . lst) (let ((x13557 (apply-prim = lst))) x13557))
  (define (> . lst) (let ((x13558 (apply-prim > lst))) x13558))
  (define (< . lst) (let ((x13559 (apply-prim < lst))) x13559))
  (define (<= . lst) (let ((x13560 (apply-prim <= lst))) x13560))
  (define (>= . lst) (let ((x13561 (apply-prim >= lst))) x13561))
  (define (null? x) (let ((x13562 (prim null? x))) x13562))
  (define (equal? x y) (let ((x13563 (prim equal? x y))) x13563))
  (define (eq? x y) (let ((x13564 (prim eq? x y))) x13564))
  (define (cons a b) (let ((x13565 (prim cons a b))) x13565))
  (define (car lst) (let ((x13566 (prim car lst))) x13566))
  (define (cdr lst) (let ((x13567 (prim cdr lst))) x13567))
  (define (even? x)
    (let ((a13568 '0))
      (let ((a13569 '2))
        (let ((a13570 (modulo x a13569))) (equal? a13568 a13570)))))
  (define (odd? x)
    (let ((a13571 '1))
      (let ((a13572 '2))
        (let ((a13573 (modulo x a13572))) (equal? a13571 a13573)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a13574 (null? lst)))
      (if a13574
        (let ((x13575 '#f)) x13575)
        (let ((a13576 (car lst)))
          (let ((a13577 (equal? a13576 x)))
            (if a13577
              (let ((x13578 '#t)) x13578)
              (let ((a13579 (cdr lst))) (member? x a13579))))))))
  (define (foldl fun acc lst)
    (let ((a13580 (null? lst)))
      (if a13580
        acc
        (let ((a13581 (car lst)))
          (let ((a13582 (fun a13581 acc)))
            (let ((a13583 (cdr lst))) (foldl fun a13582 a13583)))))))
  (define (reverse-helper lst lst2)
    (let ((a13584 (null? lst)))
      (if a13584
        lst2
        (let ((a13585 (cdr lst)))
          (let ((a13586 (car lst)))
            (let ((a13587 (cons a13586 lst2)))
              (reverse-helper a13585 a13587)))))))
  (define (reverse lst) (let ((a13588 (list))) (reverse-helper lst a13588)))
  (define (take-helper lst n lst2)
    (let ((a13589 '0))
      (let ((a13590 (= n a13589)))
        (if a13590
          (let ((x13591 (reverse lst2))) x13591)
          (let ((a13592 (cdr lst)))
            (let ((a13593 '1))
              (let ((a13594 (- n a13593)))
                (let ((a13595 (car lst)))
                  (let ((a13596 (cons a13595 lst2)))
                    (take-helper a13592 a13594 a13596))))))))))
  (define (take lst n) (let ((a13597 (list))) (take-helper lst n a13597)))
  (define (length lst)
    (let ((a13598 (null? lst)))
      (if a13598
        (let ((x13599 '0)) x13599)
        (let ((a13600 '1))
          (let ((a13601 (cdr lst)))
            (let ((a13602 (length a13601))) (+ a13600 a13602)))))))
  (define (map proc lst)
    (let ((a13603 (null? lst)))
      (if a13603
        (let ((x13604 (list))) x13604)
        (let ((a13605 (car lst)))
          (let ((a13606 (proc a13605)))
            (let ((a13607 (cdr lst)))
              (let ((a13608 (map proc a13607))) (cons a13606 a13608))))))))
  (define (filter op lst)
    (let ((a13609 (null? lst)))
      (if a13609
        (let ((x13610 (list))) x13610)
        (let ((a13611 (car lst)))
          (let ((a13612 (op a13611)))
            (if a13612
              (let ((a13613 (car lst)))
                (let ((a13614 (cdr lst)))
                  (let ((a13615 (filter op a13614))) (cons a13613 a13615))))
              (let ((a13616 (cdr lst))) (filter op a13616))))))))
  (define (drop lst n)
    (let ((a13617 '0))
      (let ((a13618 (= n a13617)))
        (if a13618
          lst
          (let ((a13619 (cdr lst)))
            (let ((a13620 '1))
              (let ((a13621 (- n a13620))) (drop a13619 a13621))))))))
  (define (foldr proc acc lst)
    (let ((a13622 (null? lst)))
      (if a13622
        acc
        (let ((a13623 (car lst)))
          (let ((a13624 (cdr lst)))
            (let ((a13625 (foldr proc acc a13624))) (proc a13623 a13625)))))))
  (define (append lst1 lst2)
    (let ((a13626 (null? lst1)))
      (if a13626
        lst2
        (let ((a13627 (car lst1)))
          (let ((a13628 (cdr lst1)))
            (let ((a13629 (append a13628 lst2))) (cons a13627 a13629)))))))
  (define (hash . lst) (let ((x13630 (apply-prim hash lst))) x13630))
  (define (hash-ref h k) (let ((x13631 (prim hash-ref h k))) x13631))
  (define (hash-set h k v) (let ((x13632 (prim hash-set h k v))) x13632))
  (define (hash-has-key? h k) (let ((x13633 (prim hash-has-key? h k))) x13633))
  (define (hash-count h) (let ((x13634 (prim hash-count h))) x13634))
  (define (fact n)
    (let ((a13635 '0))
      (let ((a13636 (= a13635 n)))
        (if a13636
          (let ((x13637 '1)) x13637)
          (let ((a13638 '1))
            (let ((a13639 (- n a13638)))
              (let ((a13640 (fact a13639))) (* n a13640))))))))
  (define (brouhaha_main) (let ((a13641 '5)) (fact a13641))))
