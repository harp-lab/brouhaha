'((define (+ . lst) (let ((x13081 (apply-prim + lst))) x13081))
  (define (- . lst) (let ((x13082 (apply-prim - lst))) x13082))
  (define (* . lst) (let ((x13083 (apply-prim * lst))) x13083))
  (define (modulo a b) (let ((x13084 (prim modulo a b))) x13084))
  (define (/ . lst) (let ((x13085 (apply-prim / lst))) x13085))
  (define (= . lst) (let ((x13086 (apply-prim = lst))) x13086))
  (define (> . lst) (let ((x13087 (apply-prim > lst))) x13087))
  (define (< . lst) (let ((x13088 (apply-prim < lst))) x13088))
  (define (<= . lst) (let ((x13089 (apply-prim <= lst))) x13089))
  (define (>= . lst) (let ((x13090 (apply-prim >= lst))) x13090))
  (define (null? x) (let ((x13091 (prim null? x))) x13091))
  (define (equal? x y) (let ((x13092 (prim equal? x y))) x13092))
  (define (eq? x y) (let ((x13093 (prim eq? x y))) x13093))
  (define (cons a b) (let ((x13094 (prim cons a b))) x13094))
  (define (car lst) (let ((x13095 (prim car lst))) x13095))
  (define (cdr lst) (let ((x13096 (prim cdr lst))) x13096))
  (define (even? x)
    (let ((a13097 '0))
      (let ((a13098 '2))
        (let ((a13099 (modulo x a13098))) (equal? a13097 a13099)))))
  (define (odd? x)
    (let ((a13100 '1))
      (let ((a13101 '2))
        (let ((a13102 (modulo x a13101))) (equal? a13100 a13102)))))
  (define (list . x) x)
  (define (and . lst) (let ((x13103 (apply-prim and lst))) x13103))
  (define (or . lst) (let ((x13104 (apply-prim or lst))) x13104))
  (define (member? x lst)
    (let ((a13105 (null? lst)))
      (if a13105
        (let ((x13106 '#f)) x13106)
        (let ((a13107 (car lst)))
          (let ((a13108 (equal? a13107 x)))
            (if a13108
              (let ((x13109 '#t)) x13109)
              (let ((a13110 (cdr lst))) (member? x a13110))))))))
  (define (foldl fun acc lst)
    (let ((a13111 (null? lst)))
      (if a13111
        acc
        (let ((a13112 (car lst)))
          (let ((a13113 (fun a13112 acc)))
            (let ((a13114 (cdr lst))) (foldl fun a13113 a13114)))))))
  (define (reverse-helper lst lst2)
    (let ((a13115 (null? lst)))
      (if a13115
        lst2
        (let ((a13116 (cdr lst)))
          (let ((a13117 (car lst)))
            (let ((a13118 (cons a13117 lst2)))
              (reverse-helper a13116 a13118)))))))
  (define (reverse lst) (let ((a13119 (list))) (reverse-helper lst a13119)))
  (define (take-helper lst n lst2)
    (let ((a13120 '0))
      (let ((a13121 (= n a13120)))
        (if a13121
          (let ((x13122 (reverse lst2))) x13122)
          (let ((a13123 (cdr lst)))
            (let ((a13124 '1))
              (let ((a13125 (- n a13124)))
                (let ((a13126 (car lst)))
                  (let ((a13127 (cons a13126 lst2)))
                    (take-helper a13123 a13125 a13127))))))))))
  (define (take lst n) (let ((a13128 (list))) (take-helper lst n a13128)))
  (define (length lst)
    (let ((a13129 (null? lst)))
      (if a13129
        (let ((x13130 '0)) x13130)
        (let ((a13131 '1))
          (let ((a13132 (cdr lst)))
            (let ((a13133 (length a13132))) (+ a13131 a13133)))))))
  (define (map proc lst)
    (let ((a13134 (null? lst)))
      (if a13134
        (let ((x13135 (list))) x13135)
        (let ((a13136 (car lst)))
          (let ((a13137 (proc a13136)))
            (let ((a13138 (cdr lst)))
              (let ((a13139 (map proc a13138))) (cons a13137 a13139))))))))
  (define (filter op lst)
    (let ((a13140 (null? lst)))
      (if a13140
        (let ((x13141 (list))) x13141)
        (let ((a13142 (car lst)))
          (let ((a13143 (op a13142)))
            (if a13143
              (let ((a13144 (car lst)))
                (let ((a13145 (cdr lst)))
                  (let ((a13146 (filter op a13145))) (cons a13144 a13146))))
              (let ((a13147 (cdr lst))) (filter op a13147))))))))
  (define (drop lst n)
    (let ((a13148 '0))
      (let ((a13149 (= n a13148)))
        (if a13149
          lst
          (let ((a13150 (cdr lst)))
            (let ((a13151 '1))
              (let ((a13152 (- n a13151))) (drop a13150 a13152))))))))
  (define (foldr proc acc lst)
    (let ((a13153 (null? lst)))
      (if a13153
        acc
        (let ((a13154 (car lst)))
          (let ((a13155 (cdr lst)))
            (let ((a13156 (foldr proc acc a13155))) (proc a13154 a13156)))))))
  (define (append lst1 lst2)
    (let ((a13157 (null? lst1)))
      (if a13157
        lst2
        (let ((a13158 (car lst1)))
          (let ((a13159 (cdr lst1)))
            (let ((a13160 (append a13159 lst2))) (cons a13158 a13160)))))))
  (define (hash . lst) (let ((x13161 (apply-prim hash lst))) x13161))
  (define (hash-ref h k) (let ((x13162 (prim hash-ref h k))) x13162))
  (define (hash-set h k v) (let ((x13163 (prim hash-set h k v))) x13163))
  (define (hash-has-key? h k) (let ((x13164 (prim hash-has-key? h k))) x13164))
  (define (hash-count h) (let ((x13165 (prim hash-count h))) x13165))
  (define (fact n)
    (let ((a13166 '0))
      (let ((a13167 (= a13166 n)))
        (if a13167
          (let ((x13168 '1)) x13168)
          (let ((a13169 '1))
            (let ((a13170 (- n a13169)))
              (let ((a13171 (fact a13170))) (* n a13171))))))))
  (define (brouhaha_main) (let ((a13172 '5)) (fact a13172))))
