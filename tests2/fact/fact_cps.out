'((define (+ . lst)
    (let ((kont1363813740 (prim car lst)))
      (let ((lst13741 (prim cdr lst)))
        (let ((x1354813742 (apply-prim + lst13741)))
          (kont1363813740 x1354813742)))))
  (define (- . lst)
    (let ((kont1364013743 (prim car lst)))
      (let ((lst13744 (prim cdr lst)))
        (let ((x1354913745 (apply-prim - lst13744)))
          (kont1364013743 x1354913745)))))
  (define (* . lst)
    (let ((kont1364213746 (prim car lst)))
      (let ((lst13747 (prim cdr lst)))
        (let ((x1355013748 (apply-prim * lst13747)))
          (kont1364213746 x1355013748)))))
  (define (modulo kont13644 a b)
    (let ((x1355113749 (prim modulo a b))) (kont13644 x1355113749)))
  (define (/ . lst)
    (let ((kont1364513750 (prim car lst)))
      (let ((lst13751 (prim cdr lst)))
        (let ((x1355213752 (apply-prim / lst13751)))
          (kont1364513750 x1355213752)))))
  (define (= . lst)
    (let ((kont1364713753 (prim car lst)))
      (let ((lst13754 (prim cdr lst)))
        (let ((x1355313755 (apply-prim = lst13754)))
          (kont1364713753 x1355313755)))))
  (define (> . lst)
    (let ((kont1364913756 (prim car lst)))
      (let ((lst13757 (prim cdr lst)))
        (let ((x1355413758 (apply-prim > lst13757)))
          (kont1364913756 x1355413758)))))
  (define (< . lst)
    (let ((kont1365113759 (prim car lst)))
      (let ((lst13760 (prim cdr lst)))
        (let ((x1355513761 (apply-prim < lst13760)))
          (kont1365113759 x1355513761)))))
  (define (<= . lst)
    (let ((kont1365313762 (prim car lst)))
      (let ((lst13763 (prim cdr lst)))
        (let ((x1355613764 (apply-prim <= lst13763)))
          (kont1365313762 x1355613764)))))
  (define (>= . lst)
    (let ((kont1365513765 (prim car lst)))
      (let ((lst13766 (prim cdr lst)))
        (let ((x1355713767 (apply-prim >= lst13766)))
          (kont1365513765 x1355713767)))))
  (define (null? kont13657 x)
    (let ((x1355813768 (prim null? x))) (kont13657 x1355813768)))
  (define (equal? kont13658 x y)
    (let ((x1355913769 (prim equal? x y))) (kont13658 x1355913769)))
  (define (eq? kont13659 x y)
    (let ((x1356013770 (prim eq? x y))) (kont13659 x1356013770)))
  (define (cons kont13660 a b)
    (let ((x1356113771 (prim cons a b))) (kont13660 x1356113771)))
  (define (car kont13661 lst)
    (let ((x1356213772 (prim car lst))) (kont13661 x1356213772)))
  (define (cdr kont13662 lst)
    (let ((x1356313773 (prim cdr lst))) (kont13662 x1356313773)))
  (define (even? kont13663 x)
    (let ((a1356413774 '0))
      (let ((a1356513775 '2))
        (let ((f1366413776
               (lambda (a1356613777)
                 (equal? kont13663 a1356413774 a1356613777))))
          (modulo f1366413776 x a1356513775)))))
  (define (odd? kont13665 x)
    (let ((a1356713778 '1))
      (let ((a1356813779 '2))
        (let ((f1366613780
               (lambda (a1356913781)
                 (equal? kont13665 a1356713778 a1356913781))))
          (modulo f1366613780 x a1356813779)))))
  (define (list . x)
    (let ((kont1366713782 (prim car x)))
      (let ((x13783 (prim cdr x))) (kont1366713782 x13783))))
  (define (member? kont13669 x lst)
    (let ((f1367313784
           (lambda (a1357013785)
             (if a1357013785
               (let ((x1357113786 '#f)) (kont13669 x1357113786))
               (let ((f1367213787
                      (lambda (a1357213788)
                        (let ((f1367113789
                               (lambda (a1357313790)
                                 (if a1357313790
                                   (let ((x1357413791 '#t))
                                     (kont13669 x1357413791))
                                   (let ((f1367013792
                                          (lambda (a1357513793)
                                            (member?
                                             kont13669
                                             x
                                             a1357513793))))
                                     (cdr f1367013792 lst))))))
                          (equal? f1367113789 a1357213788 x)))))
                 (car f1367213787 lst))))))
      (null? f1367313784 lst)))
  (define (foldl kont13674 fun acc lst)
    (let ((f1367813794
           (lambda (a1357613795)
             (if a1357613795
               (kont13674 acc)
               (let ((f1367713796
                      (lambda (a1357713797)
                        (let ((f1367613798
                               (lambda (a1357813799)
                                 (let ((f1367513800
                                        (lambda (a1357913801)
                                          (foldl
                                           kont13674
                                           fun
                                           a1357813799
                                           a1357913801))))
                                   (cdr f1367513800 lst)))))
                          (fun f1367613798 a1357713797 acc)))))
                 (car f1367713796 lst))))))
      (null? f1367813794 lst)))
  (define (reverse-helper kont13679 lst lst2)
    (let ((f1368313802
           (lambda (a1358013803)
             (if a1358013803
               (kont13679 lst2)
               (let ((f1368213804
                      (lambda (a1358113805)
                        (let ((f1368113806
                               (lambda (a1358213807)
                                 (let ((f1368013808
                                        (lambda (a1358313809)
                                          (reverse-helper
                                           kont13679
                                           a1358113805
                                           a1358313809))))
                                   (cons f1368013808 a1358213807 lst2)))))
                          (car f1368113806 lst)))))
                 (cdr f1368213804 lst))))))
      (null? f1368313802 lst)))
  (define (reverse kont13684 lst)
    (let ((f1368513810
           (lambda (a1358413811) (reverse-helper kont13684 lst a1358413811))))
      (list f1368513810)))
  (define (take-helper kont13686 lst n lst2)
    (let ((a1358513812 '0))
      (let ((f1369213813
             (lambda (a1358613814)
               (if a1358613814
                 (let ((f1368713815
                        (lambda (x1358713816) (kont13686 x1358713816))))
                   (reverse f1368713815 lst2))
                 (let ((f1369113817
                        (lambda (a1358813818)
                          (let ((a1358913819 '1))
                            (let ((f1369013820
                                   (lambda (a1359013821)
                                     (let ((f1368913822
                                            (lambda (a1359113823)
                                              (let ((f1368813824
                                                     (lambda (a1359213825)
                                                       (take-helper
                                                        kont13686
                                                        a1358813818
                                                        a1359013821
                                                        a1359213825))))
                                                (cons
                                                 f1368813824
                                                 a1359113823
                                                 lst2)))))
                                       (car f1368913822 lst)))))
                              (- f1369013820 n a1358913819))))))
                   (cdr f1369113817 lst))))))
        (= f1369213813 n a1358513812))))
  (define (take kont13693 lst n)
    (let ((f1369413826
           (lambda (a1359313827) (take-helper kont13693 lst n a1359313827))))
      (list f1369413826)))
  (define (length kont13695 lst)
    (let ((f1369813828
           (lambda (a1359413829)
             (if a1359413829
               (let ((x1359513830 '0)) (kont13695 x1359513830))
               (let ((a1359613831 '1))
                 (let ((f1369713832
                        (lambda (a1359713833)
                          (let ((f1369613834
                                 (lambda (a1359813835)
                                   (+ kont13695 a1359613831 a1359813835))))
                            (length f1369613834 a1359713833)))))
                   (cdr f1369713832 lst)))))))
      (null? f1369813828 lst)))
  (define (map kont13699 proc lst)
    (let ((f1370513836
           (lambda (a1359913837)
             (if a1359913837
               (let ((f1370013838
                      (lambda (x1360013839) (kont13699 x1360013839))))
                 (list f1370013838))
               (let ((f1370413840
                      (lambda (a1360113841)
                        (let ((f1370313842
                               (lambda (a1360213843)
                                 (let ((f1370213844
                                        (lambda (a1360313845)
                                          (let ((f1370113846
                                                 (lambda (a1360413847)
                                                   (cons
                                                    kont13699
                                                    a1360213843
                                                    a1360413847))))
                                            (map
                                             f1370113846
                                             proc
                                             a1360313845)))))
                                   (cdr f1370213844 lst)))))
                          (proc f1370313842 a1360113841)))))
                 (car f1370413840 lst))))))
      (null? f1370513836 lst)))
  (define (filter kont13706 op lst)
    (let ((f1371413848
           (lambda (a1360513849)
             (if a1360513849
               (let ((f1370713850
                      (lambda (x1360613851) (kont13706 x1360613851))))
                 (list f1370713850))
               (let ((f1371313852
                      (lambda (a1360713853)
                        (let ((f1371213854
                               (lambda (a1360813855)
                                 (if a1360813855
                                   (let ((f1371013856
                                          (lambda (a1360913857)
                                            (let ((f1370913858
                                                   (lambda (a1361013859)
                                                     (let ((f1370813860
                                                            (lambda (a1361113861)
                                                              (cons
                                                               kont13706
                                                               a1360913857
                                                               a1361113861))))
                                                       (filter
                                                        f1370813860
                                                        op
                                                        a1361013859)))))
                                              (cdr f1370913858 lst)))))
                                     (car f1371013856 lst))
                                   (let ((f1371113862
                                          (lambda (a1361213863)
                                            (filter
                                             kont13706
                                             op
                                             a1361213863))))
                                     (cdr f1371113862 lst))))))
                          (op f1371213854 a1360713853)))))
                 (car f1371313852 lst))))))
      (null? f1371413848 lst)))
  (define (drop kont13715 lst n)
    (let ((a1361313864 '0))
      (let ((f1371813865
             (lambda (a1361413866)
               (if a1361413866
                 (kont13715 lst)
                 (let ((f1371713867
                        (lambda (a1361513868)
                          (let ((a1361613869 '1))
                            (let ((f1371613870
                                   (lambda (a1361713871)
                                     (drop
                                      kont13715
                                      a1361513868
                                      a1361713871))))
                              (- f1371613870 n a1361613869))))))
                   (cdr f1371713867 lst))))))
        (= f1371813865 n a1361313864))))
  (define (foldr kont13719 proc acc lst)
    (let ((f1372313872
           (lambda (a1361813873)
             (if a1361813873
               (kont13719 acc)
               (let ((f1372213874
                      (lambda (a1361913875)
                        (let ((f1372113876
                               (lambda (a1362013877)
                                 (let ((f1372013878
                                        (lambda (a1362113879)
                                          (proc
                                           kont13719
                                           a1361913875
                                           a1362113879))))
                                   (foldr f1372013878 proc acc a1362013877)))))
                          (cdr f1372113876 lst)))))
                 (car f1372213874 lst))))))
      (null? f1372313872 lst)))
  (define (append kont13724 lst1 lst2)
    (let ((f1372813880
           (lambda (a1362213881)
             (if a1362213881
               (kont13724 lst2)
               (let ((f1372713882
                      (lambda (a1362313883)
                        (let ((f1372613884
                               (lambda (a1362413885)
                                 (let ((f1372513886
                                        (lambda (a1362513887)
                                          (cons
                                           kont13724
                                           a1362313883
                                           a1362513887))))
                                   (append f1372513886 a1362413885 lst2)))))
                          (cdr f1372613884 lst1)))))
                 (car f1372713882 lst1))))))
      (null? f1372813880 lst1)))
  (define (hash . lst)
    (let ((kont1372913888 (prim car lst)))
      (let ((lst13889 (prim cdr lst)))
        (let ((x1362613890 (apply-prim hash lst13889)))
          (kont1372913888 x1362613890)))))
  (define (hash-ref kont13731 h k)
    (let ((x1362713891 (prim hash-ref h k))) (kont13731 x1362713891)))
  (define (hash-set kont13732 h k v)
    (let ((x1362813892 (prim hash-set h k v))) (kont13732 x1362813892)))
  (define (hash-has-key? kont13733 h k)
    (let ((x1362913893 (prim hash-has-key? h k))) (kont13733 x1362913893)))
  (define (hash-count kont13734 h)
    (let ((x1363013894 (prim hash-count h))) (kont13734 x1363013894)))
  (define (fact kont13735 n)
    (let ((a1363113895 '0))
      (let ((f1373813896
             (lambda (a1363213897)
               (if a1363213897
                 (let ((x1363313898 '1)) (kont13735 x1363313898))
                 (let ((a1363413899 '1))
                   (let ((f1373713900
                          (lambda (a1363513901)
                            (let ((f1373613902
                                   (lambda (a1363613903)
                                     (* kont13735 n a1363613903))))
                              (fact f1373613902 a1363513901)))))
                     (- f1373713900 n a1363413899)))))))
        (= f1373813896 a1363113895 n))))
  (define (brouhaha_main kont13739)
    (let ((a1363713904 '5)) (fact kont13739 a1363713904))))
