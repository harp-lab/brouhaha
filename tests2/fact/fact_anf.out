'((define (+ . lst)
    (let ((kont13642 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13552 (apply-prim + lst))) (kont13642 x13552)))))
  (define (- . lst)
    (let ((kont13644 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13553 (apply-prim - lst))) (kont13644 x13553)))))
  (define (* . lst)
    (let ((kont13646 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13554 (apply-prim * lst))) (kont13646 x13554)))))
  (define (modulo kont13648 a b)
    (let ((x13555 (prim modulo a b))) (kont13648 x13555)))
  (define (/ . lst)
    (let ((kont13649 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13556 (apply-prim / lst))) (kont13649 x13556)))))
  (define (= . lst)
    (let ((kont13651 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13557 (apply-prim = lst))) (kont13651 x13557)))))
  (define (> . lst)
    (let ((kont13653 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13558 (apply-prim > lst))) (kont13653 x13558)))))
  (define (< . lst)
    (let ((kont13655 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13559 (apply-prim < lst))) (kont13655 x13559)))))
  (define (<= . lst)
    (let ((kont13657 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13560 (apply-prim <= lst))) (kont13657 x13560)))))
  (define (>= . lst)
    (let ((kont13659 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13561 (apply-prim >= lst))) (kont13659 x13561)))))
  (define (null? kont13661 x)
    (let ((x13562 (prim null? x))) (kont13661 x13562)))
  (define (equal? kont13662 x y)
    (let ((x13563 (prim equal? x y))) (kont13662 x13563)))
  (define (eq? kont13663 x y)
    (let ((x13564 (prim eq? x y))) (kont13663 x13564)))
  (define (cons kont13664 a b)
    (let ((x13565 (prim cons a b))) (kont13664 x13565)))
  (define (car kont13665 lst)
    (let ((x13566 (prim car lst))) (kont13665 x13566)))
  (define (cdr kont13666 lst)
    (let ((x13567 (prim cdr lst))) (kont13666 x13567)))
  (define (even? kont13667 x)
    (let ((a13568 '0))
      (let ((a13569 '2))
        (let ((f13668 (lambda (a13570) (equal? kont13667 a13568 a13570))))
          (modulo f13668 x a13569)))))
  (define (odd? kont13669 x)
    (let ((a13571 '1))
      (let ((a13572 '2))
        (let ((f13670 (lambda (a13573) (equal? kont13669 a13571 a13573))))
          (modulo f13670 x a13572)))))
  (define (list . x)
    (let ((kont13671 (prim car x))) (let ((x (prim cdr x))) (kont13671 x))))
  (define (member? kont13673 x lst)
    (let ((f13677
           (lambda (a13574)
             (if a13574
               (let ((x13575 '#f)) (kont13673 x13575))
               (let ((f13676
                      (lambda (a13576)
                        (let ((f13675
                               (lambda (a13577)
                                 (if a13577
                                   (let ((x13578 '#t)) (kont13673 x13578))
                                   (let ((f13674
                                          (lambda (a13579)
                                            (member? kont13673 x a13579))))
                                     (cdr f13674 lst))))))
                          (equal? f13675 a13576 x)))))
                 (car f13676 lst))))))
      (null? f13677 lst)))
  (define (foldl kont13678 fun acc lst)
    (let ((f13682
           (lambda (a13580)
             (if a13580
               (kont13678 acc)
               (let ((f13681
                      (lambda (a13581)
                        (let ((f13680
                               (lambda (a13582)
                                 (let ((f13679
                                        (lambda (a13583)
                                          (foldl
                                           kont13678
                                           fun
                                           a13582
                                           a13583))))
                                   (cdr f13679 lst)))))
                          (fun f13680 a13581 acc)))))
                 (car f13681 lst))))))
      (null? f13682 lst)))
  (define (reverse-helper kont13683 lst lst2)
    (let ((f13687
           (lambda (a13584)
             (if a13584
               (kont13683 lst2)
               (let ((f13686
                      (lambda (a13585)
                        (let ((f13685
                               (lambda (a13586)
                                 (let ((f13684
                                        (lambda (a13587)
                                          (reverse-helper
                                           kont13683
                                           a13585
                                           a13587))))
                                   (cons f13684 a13586 lst2)))))
                          (car f13685 lst)))))
                 (cdr f13686 lst))))))
      (null? f13687 lst)))
  (define (reverse kont13688 lst)
    (let ((f13689 (lambda (a13588) (reverse-helper kont13688 lst a13588))))
      (list f13689)))
  (define (take-helper kont13690 lst n lst2)
    (let ((a13589 '0))
      (let ((f13696
             (lambda (a13590)
               (if a13590
                 (let ((f13691 (lambda (x13591) (kont13690 x13591))))
                   (reverse f13691 lst2))
                 (let ((f13695
                        (lambda (a13592)
                          (let ((a13593 '1))
                            (let ((f13694
                                   (lambda (a13594)
                                     (let ((f13693
                                            (lambda (a13595)
                                              (let ((f13692
                                                     (lambda (a13596)
                                                       (take-helper
                                                        kont13690
                                                        a13592
                                                        a13594
                                                        a13596))))
                                                (cons f13692 a13595 lst2)))))
                                       (car f13693 lst)))))
                              (- f13694 n a13593))))))
                   (cdr f13695 lst))))))
        (= f13696 n a13589))))
  (define (take kont13697 lst n)
    (let ((f13698 (lambda (a13597) (take-helper kont13697 lst n a13597))))
      (list f13698)))
  (define (length kont13699 lst)
    (let ((f13702
           (lambda (a13598)
             (if a13598
               (let ((x13599 '0)) (kont13699 x13599))
               (let ((a13600 '1))
                 (let ((f13701
                        (lambda (a13601)
                          (let ((f13700
                                 (lambda (a13602)
                                   (+ kont13699 a13600 a13602))))
                            (length f13700 a13601)))))
                   (cdr f13701 lst)))))))
      (null? f13702 lst)))
  (define (map kont13703 proc lst)
    (let ((f13709
           (lambda (a13603)
             (if a13603
               (let ((f13704 (lambda (x13604) (kont13703 x13604))))
                 (list f13704))
               (let ((f13708
                      (lambda (a13605)
                        (let ((f13707
                               (lambda (a13606)
                                 (let ((f13706
                                        (lambda (a13607)
                                          (let ((f13705
                                                 (lambda (a13608)
                                                   (cons
                                                    kont13703
                                                    a13606
                                                    a13608))))
                                            (map f13705 proc a13607)))))
                                   (cdr f13706 lst)))))
                          (proc f13707 a13605)))))
                 (car f13708 lst))))))
      (null? f13709 lst)))
  (define (filter kont13710 op lst)
    (let ((f13718
           (lambda (a13609)
             (if a13609
               (let ((f13711 (lambda (x13610) (kont13710 x13610))))
                 (list f13711))
               (let ((f13717
                      (lambda (a13611)
                        (let ((f13716
                               (lambda (a13612)
                                 (if a13612
                                   (let ((f13714
                                          (lambda (a13613)
                                            (let ((f13713
                                                   (lambda (a13614)
                                                     (let ((f13712
                                                            (lambda (a13615)
                                                              (cons
                                                               kont13710
                                                               a13613
                                                               a13615))))
                                                       (filter
                                                        f13712
                                                        op
                                                        a13614)))))
                                              (cdr f13713 lst)))))
                                     (car f13714 lst))
                                   (let ((f13715
                                          (lambda (a13616)
                                            (filter kont13710 op a13616))))
                                     (cdr f13715 lst))))))
                          (op f13716 a13611)))))
                 (car f13717 lst))))))
      (null? f13718 lst)))
  (define (drop kont13719 lst n)
    (let ((a13617 '0))
      (let ((f13722
             (lambda (a13618)
               (if a13618
                 (kont13719 lst)
                 (let ((f13721
                        (lambda (a13619)
                          (let ((a13620 '1))
                            (let ((f13720
                                   (lambda (a13621)
                                     (drop kont13719 a13619 a13621))))
                              (- f13720 n a13620))))))
                   (cdr f13721 lst))))))
        (= f13722 n a13617))))
  (define (foldr kont13723 proc acc lst)
    (let ((f13727
           (lambda (a13622)
             (if a13622
               (kont13723 acc)
               (let ((f13726
                      (lambda (a13623)
                        (let ((f13725
                               (lambda (a13624)
                                 (let ((f13724
                                        (lambda (a13625)
                                          (proc kont13723 a13623 a13625))))
                                   (foldr f13724 proc acc a13624)))))
                          (cdr f13725 lst)))))
                 (car f13726 lst))))))
      (null? f13727 lst)))
  (define (append kont13728 lst1 lst2)
    (let ((f13732
           (lambda (a13626)
             (if a13626
               (kont13728 lst2)
               (let ((f13731
                      (lambda (a13627)
                        (let ((f13730
                               (lambda (a13628)
                                 (let ((f13729
                                        (lambda (a13629)
                                          (cons kont13728 a13627 a13629))))
                                   (append f13729 a13628 lst2)))))
                          (cdr f13730 lst1)))))
                 (car f13731 lst1))))))
      (null? f13732 lst1)))
  (define (hash . lst)
    (let ((kont13733 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13630 (apply-prim hash lst))) (kont13733 x13630)))))
  (define (hash-ref kont13735 h k)
    (let ((x13631 (prim hash-ref h k))) (kont13735 x13631)))
  (define (hash-set kont13736 h k v)
    (let ((x13632 (prim hash-set h k v))) (kont13736 x13632)))
  (define (hash-has-key? kont13737 h k)
    (let ((x13633 (prim hash-has-key? h k))) (kont13737 x13633)))
  (define (hash-count kont13738 h)
    (let ((x13634 (prim hash-count h))) (kont13738 x13634)))
  (define (fact kont13739 n)
    (let ((a13635 '0))
      (let ((f13742
             (lambda (a13636)
               (if a13636
                 (let ((x13637 '1)) (kont13739 x13637))
                 (let ((a13638 '1))
                   (let ((f13741
                          (lambda (a13639)
                            (let ((f13740
                                   (lambda (a13640) (* kont13739 n a13640))))
                              (fact f13740 a13639)))))
                     (- f13741 n a13638)))))))
        (= f13742 a13635 n))))
  (define (brouhaha_main kont13743)
    (let ((a13641 '5)) (fact kont13743 a13641))))
