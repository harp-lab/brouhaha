'((define (+ . lst)
    (let ((kont13638 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13548 (apply-prim + lst))) (kont13638 x13548)))))
  (define (- . lst)
    (let ((kont13640 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13549 (apply-prim - lst))) (kont13640 x13549)))))
  (define (* . lst)
    (let ((kont13642 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13550 (apply-prim * lst))) (kont13642 x13550)))))
  (define (modulo kont13644 a b)
    (let ((x13551 (prim modulo a b))) (kont13644 x13551)))
  (define (/ . lst)
    (let ((kont13645 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13552 (apply-prim / lst))) (kont13645 x13552)))))
  (define (= . lst)
    (let ((kont13647 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13553 (apply-prim = lst))) (kont13647 x13553)))))
  (define (> . lst)
    (let ((kont13649 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13554 (apply-prim > lst))) (kont13649 x13554)))))
  (define (< . lst)
    (let ((kont13651 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13555 (apply-prim < lst))) (kont13651 x13555)))))
  (define (<= . lst)
    (let ((kont13653 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13556 (apply-prim <= lst))) (kont13653 x13556)))))
  (define (>= . lst)
    (let ((kont13655 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13557 (apply-prim >= lst))) (kont13655 x13557)))))
  (define (null? kont13657 x)
    (let ((x13558 (prim null? x))) (kont13657 x13558)))
  (define (equal? kont13658 x y)
    (let ((x13559 (prim equal? x y))) (kont13658 x13559)))
  (define (eq? kont13659 x y)
    (let ((x13560 (prim eq? x y))) (kont13659 x13560)))
  (define (cons kont13660 a b)
    (let ((x13561 (prim cons a b))) (kont13660 x13561)))
  (define (car kont13661 lst)
    (let ((x13562 (prim car lst))) (kont13661 x13562)))
  (define (cdr kont13662 lst)
    (let ((x13563 (prim cdr lst))) (kont13662 x13563)))
  (define (even? kont13663 x)
    (let ((a13564 '0))
      (let ((a13565 '2))
        (let ((f13664 (lambda (a13566) (equal? kont13663 a13564 a13566))))
          (modulo f13664 x a13565)))))
  (define (odd? kont13665 x)
    (let ((a13567 '1))
      (let ((a13568 '2))
        (let ((f13666 (lambda (a13569) (equal? kont13665 a13567 a13569))))
          (modulo f13666 x a13568)))))
  (define (list . x)
    (let ((kont13667 (prim car x))) (let ((x (prim cdr x))) (kont13667 x))))
  (define (member? kont13669 x lst)
    (let ((f13673
           (lambda (a13570)
             (if a13570
               (let ((x13571 '#f)) (kont13669 x13571))
               (let ((f13672
                      (lambda (a13572)
                        (let ((f13671
                               (lambda (a13573)
                                 (if a13573
                                   (let ((x13574 '#t)) (kont13669 x13574))
                                   (let ((f13670
                                          (lambda (a13575)
                                            (member? kont13669 x a13575))))
                                     (cdr f13670 lst))))))
                          (equal? f13671 a13572 x)))))
                 (car f13672 lst))))))
      (null? f13673 lst)))
  (define (foldl kont13674 fun acc lst)
    (let ((f13678
           (lambda (a13576)
             (if a13576
               (kont13674 acc)
               (let ((f13677
                      (lambda (a13577)
                        (let ((f13676
                               (lambda (a13578)
                                 (let ((f13675
                                        (lambda (a13579)
                                          (foldl
                                           kont13674
                                           fun
                                           a13578
                                           a13579))))
                                   (cdr f13675 lst)))))
                          (fun f13676 a13577 acc)))))
                 (car f13677 lst))))))
      (null? f13678 lst)))
  (define (reverse-helper kont13679 lst lst2)
    (let ((f13683
           (lambda (a13580)
             (if a13580
               (kont13679 lst2)
               (let ((f13682
                      (lambda (a13581)
                        (let ((f13681
                               (lambda (a13582)
                                 (let ((f13680
                                        (lambda (a13583)
                                          (reverse-helper
                                           kont13679
                                           a13581
                                           a13583))))
                                   (cons f13680 a13582 lst2)))))
                          (car f13681 lst)))))
                 (cdr f13682 lst))))))
      (null? f13683 lst)))
  (define (reverse kont13684 lst)
    (let ((f13685 (lambda (a13584) (reverse-helper kont13684 lst a13584))))
      (list f13685)))
  (define (take-helper kont13686 lst n lst2)
    (let ((a13585 '0))
      (let ((f13692
             (lambda (a13586)
               (if a13586
                 (let ((f13687 (lambda (x13587) (kont13686 x13587))))
                   (reverse f13687 lst2))
                 (let ((f13691
                        (lambda (a13588)
                          (let ((a13589 '1))
                            (let ((f13690
                                   (lambda (a13590)
                                     (let ((f13689
                                            (lambda (a13591)
                                              (let ((f13688
                                                     (lambda (a13592)
                                                       (take-helper
                                                        kont13686
                                                        a13588
                                                        a13590
                                                        a13592))))
                                                (cons f13688 a13591 lst2)))))
                                       (car f13689 lst)))))
                              (- f13690 n a13589))))))
                   (cdr f13691 lst))))))
        (= f13692 n a13585))))
  (define (take kont13693 lst n)
    (let ((f13694 (lambda (a13593) (take-helper kont13693 lst n a13593))))
      (list f13694)))
  (define (length kont13695 lst)
    (let ((f13698
           (lambda (a13594)
             (if a13594
               (let ((x13595 '0)) (kont13695 x13595))
               (let ((a13596 '1))
                 (let ((f13697
                        (lambda (a13597)
                          (let ((f13696
                                 (lambda (a13598)
                                   (+ kont13695 a13596 a13598))))
                            (length f13696 a13597)))))
                   (cdr f13697 lst)))))))
      (null? f13698 lst)))
  (define (map kont13699 proc lst)
    (let ((f13705
           (lambda (a13599)
             (if a13599
               (let ((f13700 (lambda (x13600) (kont13699 x13600))))
                 (list f13700))
               (let ((f13704
                      (lambda (a13601)
                        (let ((f13703
                               (lambda (a13602)
                                 (let ((f13702
                                        (lambda (a13603)
                                          (let ((f13701
                                                 (lambda (a13604)
                                                   (cons
                                                    kont13699
                                                    a13602
                                                    a13604))))
                                            (map f13701 proc a13603)))))
                                   (cdr f13702 lst)))))
                          (proc f13703 a13601)))))
                 (car f13704 lst))))))
      (null? f13705 lst)))
  (define (filter kont13706 op lst)
    (let ((f13714
           (lambda (a13605)
             (if a13605
               (let ((f13707 (lambda (x13606) (kont13706 x13606))))
                 (list f13707))
               (let ((f13713
                      (lambda (a13607)
                        (let ((f13712
                               (lambda (a13608)
                                 (if a13608
                                   (let ((f13710
                                          (lambda (a13609)
                                            (let ((f13709
                                                   (lambda (a13610)
                                                     (let ((f13708
                                                            (lambda (a13611)
                                                              (cons
                                                               kont13706
                                                               a13609
                                                               a13611))))
                                                       (filter
                                                        f13708
                                                        op
                                                        a13610)))))
                                              (cdr f13709 lst)))))
                                     (car f13710 lst))
                                   (let ((f13711
                                          (lambda (a13612)
                                            (filter kont13706 op a13612))))
                                     (cdr f13711 lst))))))
                          (op f13712 a13607)))))
                 (car f13713 lst))))))
      (null? f13714 lst)))
  (define (drop kont13715 lst n)
    (let ((a13613 '0))
      (let ((f13718
             (lambda (a13614)
               (if a13614
                 (kont13715 lst)
                 (let ((f13717
                        (lambda (a13615)
                          (let ((a13616 '1))
                            (let ((f13716
                                   (lambda (a13617)
                                     (drop kont13715 a13615 a13617))))
                              (- f13716 n a13616))))))
                   (cdr f13717 lst))))))
        (= f13718 n a13613))))
  (define (foldr kont13719 proc acc lst)
    (let ((f13723
           (lambda (a13618)
             (if a13618
               (kont13719 acc)
               (let ((f13722
                      (lambda (a13619)
                        (let ((f13721
                               (lambda (a13620)
                                 (let ((f13720
                                        (lambda (a13621)
                                          (proc kont13719 a13619 a13621))))
                                   (foldr f13720 proc acc a13620)))))
                          (cdr f13721 lst)))))
                 (car f13722 lst))))))
      (null? f13723 lst)))
  (define (append kont13724 lst1 lst2)
    (let ((f13728
           (lambda (a13622)
             (if a13622
               (kont13724 lst2)
               (let ((f13727
                      (lambda (a13623)
                        (let ((f13726
                               (lambda (a13624)
                                 (let ((f13725
                                        (lambda (a13625)
                                          (cons kont13724 a13623 a13625))))
                                   (append f13725 a13624 lst2)))))
                          (cdr f13726 lst1)))))
                 (car f13727 lst1))))))
      (null? f13728 lst1)))
  (define (hash . lst)
    (let ((kont13729 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13626 (apply-prim hash lst))) (kont13729 x13626)))))
  (define (hash-ref kont13731 h k)
    (let ((x13627 (prim hash-ref h k))) (kont13731 x13627)))
  (define (hash-set kont13732 h k v)
    (let ((x13628 (prim hash-set h k v))) (kont13732 x13628)))
  (define (hash-has-key? kont13733 h k)
    (let ((x13629 (prim hash-has-key? h k))) (kont13733 x13629)))
  (define (hash-count kont13734 h)
    (let ((x13630 (prim hash-count h))) (kont13734 x13630)))
  (define (fact kont13735 n)
    (let ((a13631 '0))
      (let ((f13738
             (lambda (a13632)
               (if a13632
                 (let ((x13633 '1)) (kont13735 x13633))
                 (let ((a13634 '1))
                   (let ((f13737
                          (lambda (a13635)
                            (let ((f13736
                                   (lambda (a13636) (* kont13735 n a13636))))
                              (fact f13736 a13635)))))
                     (- f13737 n a13634)))))))
        (= f13738 a13631 n))))
  (define (brouhaha_main kont13739)
    (let ((a13637 '5)) (fact kont13739 a13637))))
