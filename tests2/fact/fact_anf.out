'((define (+ . lst)
    (let ((kont13274 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13184 (apply-prim + lst))) (kont13274 x13184)))))
  (define (- . lst)
    (let ((kont13276 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13185 (apply-prim - lst))) (kont13276 x13185)))))
  (define (* . lst)
    (let ((kont13278 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13186 (apply-prim * lst))) (kont13278 x13186)))))
  (define (modulo kont13280 a b)
    (let ((x13187 (prim modulo a b))) (kont13280 x13187)))
  (define (/ . lst)
    (let ((kont13281 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13188 (apply-prim / lst))) (kont13281 x13188)))))
  (define (= . lst)
    (let ((kont13283 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13189 (apply-prim = lst))) (kont13283 x13189)))))
  (define (> . lst)
    (let ((kont13285 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13190 (apply-prim > lst))) (kont13285 x13190)))))
  (define (< . lst)
    (let ((kont13287 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13191 (apply-prim < lst))) (kont13287 x13191)))))
  (define (<= . lst)
    (let ((kont13289 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13192 (apply-prim <= lst))) (kont13289 x13192)))))
  (define (>= . lst)
    (let ((kont13291 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13193 (apply-prim >= lst))) (kont13291 x13193)))))
  (define (null? kont13293 x)
    (let ((x13194 (prim null? x))) (kont13293 x13194)))
  (define (equal? kont13294 x y)
    (let ((x13195 (prim equal? x y))) (kont13294 x13195)))
  (define (eq? kont13295 x y)
    (let ((x13196 (prim eq? x y))) (kont13295 x13196)))
  (define (cons kont13296 a b)
    (let ((x13197 (prim cons a b))) (kont13296 x13197)))
  (define (car kont13297 lst)
    (let ((x13198 (prim car lst))) (kont13297 x13198)))
  (define (cdr kont13298 lst)
    (let ((x13199 (prim cdr lst))) (kont13298 x13199)))
  (define (even? kont13299 x)
    (let ((a13200 '0))
      (let ((a13201 '2))
        (let ((f13300 (lambda (a13202) (equal? kont13299 a13200 a13202))))
          (modulo f13300 x a13201)))))
  (define (odd? kont13301 x)
    (let ((a13203 '1))
      (let ((a13204 '2))
        (let ((f13302 (lambda (a13205) (equal? kont13301 a13203 a13205))))
          (modulo f13302 x a13204)))))
  (define (list . x)
    (let ((kont13303 (prim car x))) (let ((x (prim cdr x))) (kont13303 x))))
  (define (member? kont13305 x lst)
    (let ((f13309
           (lambda (a13206)
             (if a13206
               (let ((x13207 '#f)) (kont13305 x13207))
               (let ((f13308
                      (lambda (a13208)
                        (let ((f13307
                               (lambda (a13209)
                                 (if a13209
                                   (let ((x13210 '#t)) (kont13305 x13210))
                                   (let ((f13306
                                          (lambda (a13211)
                                            (member? kont13305 x a13211))))
                                     (cdr f13306 lst))))))
                          (equal? f13307 a13208 x)))))
                 (car f13308 lst))))))
      (null? f13309 lst)))
  (define (foldl kont13310 fun acc lst)
    (let ((f13314
           (lambda (a13212)
             (if a13212
               (kont13310 acc)
               (let ((f13313
                      (lambda (a13213)
                        (let ((f13312
                               (lambda (a13214)
                                 (let ((f13311
                                        (lambda (a13215)
                                          (foldl
                                           kont13310
                                           fun
                                           a13214
                                           a13215))))
                                   (cdr f13311 lst)))))
                          (fun f13312 a13213 acc)))))
                 (car f13313 lst))))))
      (null? f13314 lst)))
  (define (reverse-helper kont13315 lst lst2)
    (let ((f13319
           (lambda (a13216)
             (if a13216
               (kont13315 lst2)
               (let ((f13318
                      (lambda (a13217)
                        (let ((f13317
                               (lambda (a13218)
                                 (let ((f13316
                                        (lambda (a13219)
                                          (reverse-helper
                                           kont13315
                                           a13217
                                           a13219))))
                                   (cons f13316 a13218 lst2)))))
                          (car f13317 lst)))))
                 (cdr f13318 lst))))))
      (null? f13319 lst)))
  (define (reverse kont13320 lst)
    (let ((f13321 (lambda (a13220) (reverse-helper kont13320 lst a13220))))
      (list f13321)))
  (define (take-helper kont13322 lst n lst2)
    (let ((a13221 '0))
      (let ((f13328
             (lambda (a13222)
               (if a13222
                 (let ((f13323 (lambda (x13223) (kont13322 x13223))))
                   (reverse f13323 lst2))
                 (let ((f13327
                        (lambda (a13224)
                          (let ((a13225 '1))
                            (let ((f13326
                                   (lambda (a13226)
                                     (let ((f13325
                                            (lambda (a13227)
                                              (let ((f13324
                                                     (lambda (a13228)
                                                       (take-helper
                                                        kont13322
                                                        a13224
                                                        a13226
                                                        a13228))))
                                                (cons f13324 a13227 lst2)))))
                                       (car f13325 lst)))))
                              (- f13326 n a13225))))))
                   (cdr f13327 lst))))))
        (= f13328 n a13221))))
  (define (take kont13329 lst n)
    (let ((f13330 (lambda (a13229) (take-helper kont13329 lst n a13229))))
      (list f13330)))
  (define (length kont13331 lst)
    (let ((f13334
           (lambda (a13230)
             (if a13230
               (let ((x13231 '0)) (kont13331 x13231))
               (let ((a13232 '1))
                 (let ((f13333
                        (lambda (a13233)
                          (let ((f13332
                                 (lambda (a13234)
                                   (+ kont13331 a13232 a13234))))
                            (length f13332 a13233)))))
                   (cdr f13333 lst)))))))
      (null? f13334 lst)))
  (define (map kont13335 proc lst)
    (let ((f13341
           (lambda (a13235)
             (if a13235
               (let ((f13336 (lambda (x13236) (kont13335 x13236))))
                 (list f13336))
               (let ((f13340
                      (lambda (a13237)
                        (let ((f13339
                               (lambda (a13238)
                                 (let ((f13338
                                        (lambda (a13239)
                                          (let ((f13337
                                                 (lambda (a13240)
                                                   (cons
                                                    kont13335
                                                    a13238
                                                    a13240))))
                                            (map f13337 proc a13239)))))
                                   (cdr f13338 lst)))))
                          (proc f13339 a13237)))))
                 (car f13340 lst))))))
      (null? f13341 lst)))
  (define (filter kont13342 op lst)
    (let ((f13350
           (lambda (a13241)
             (if a13241
               (let ((f13343 (lambda (x13242) (kont13342 x13242))))
                 (list f13343))
               (let ((f13349
                      (lambda (a13243)
                        (let ((f13348
                               (lambda (a13244)
                                 (if a13244
                                   (let ((f13346
                                          (lambda (a13245)
                                            (let ((f13345
                                                   (lambda (a13246)
                                                     (let ((f13344
                                                            (lambda (a13247)
                                                              (cons
                                                               kont13342
                                                               a13245
                                                               a13247))))
                                                       (filter
                                                        f13344
                                                        op
                                                        a13246)))))
                                              (cdr f13345 lst)))))
                                     (car f13346 lst))
                                   (let ((f13347
                                          (lambda (a13248)
                                            (filter kont13342 op a13248))))
                                     (cdr f13347 lst))))))
                          (op f13348 a13243)))))
                 (car f13349 lst))))))
      (null? f13350 lst)))
  (define (drop kont13351 lst n)
    (let ((a13249 '0))
      (let ((f13354
             (lambda (a13250)
               (if a13250
                 (kont13351 lst)
                 (let ((f13353
                        (lambda (a13251)
                          (let ((a13252 '1))
                            (let ((f13352
                                   (lambda (a13253)
                                     (drop kont13351 a13251 a13253))))
                              (- f13352 n a13252))))))
                   (cdr f13353 lst))))))
        (= f13354 n a13249))))
  (define (foldr kont13355 proc acc lst)
    (let ((f13359
           (lambda (a13254)
             (if a13254
               (kont13355 acc)
               (let ((f13358
                      (lambda (a13255)
                        (let ((f13357
                               (lambda (a13256)
                                 (let ((f13356
                                        (lambda (a13257)
                                          (proc kont13355 a13255 a13257))))
                                   (foldr f13356 proc acc a13256)))))
                          (cdr f13357 lst)))))
                 (car f13358 lst))))))
      (null? f13359 lst)))
  (define (append kont13360 lst1 lst2)
    (let ((f13364
           (lambda (a13258)
             (if a13258
               (kont13360 lst2)
               (let ((f13363
                      (lambda (a13259)
                        (let ((f13362
                               (lambda (a13260)
                                 (let ((f13361
                                        (lambda (a13261)
                                          (cons kont13360 a13259 a13261))))
                                   (append f13361 a13260 lst2)))))
                          (cdr f13362 lst1)))))
                 (car f13363 lst1))))))
      (null? f13364 lst1)))
  (define (hash . lst)
    (let ((kont13365 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x13262 (apply-prim hash lst))) (kont13365 x13262)))))
  (define (hash-ref kont13367 h k)
    (let ((x13263 (prim hash-ref h k))) (kont13367 x13263)))
  (define (hash-set kont13368 h k v)
    (let ((x13264 (prim hash-set h k v))) (kont13368 x13264)))
  (define (hash-has-key? kont13369 h k)
    (let ((x13265 (prim hash-has-key? h k))) (kont13369 x13265)))
  (define (hash-count kont13370 h)
    (let ((x13266 (prim hash-count h))) (kont13370 x13266)))
  (define (fact kont13371 n)
    (let ((a13267 '0))
      (let ((f13374
             (lambda (a13268)
               (if a13268
                 (let ((x13269 '1)) (kont13371 x13269))
                 (let ((a13270 '1))
                   (let ((f13373
                          (lambda (a13271)
                            (let ((f13372
                                   (lambda (a13272) (* kont13371 n a13272))))
                              (fact f13372 a13271)))))
                     (- f13373 n a13270)))))))
        (= f13374 a13267 n))))
  (define (brouhaha_main kont13375)
    (let ((a13273 '5)) (fact kont13375 a13273))))
