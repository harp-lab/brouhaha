'((define (+ . lst) (let ((x53705 (apply-prim + lst))) x53705))
  (define (- . lst) (let ((x53706 (apply-prim - lst))) x53706))
  (define (* . lst) (let ((x53707 (apply-prim * lst))) x53707))
  (define (modulo a b) (let ((x53708 (prim modulo a b))) x53708))
  (define (/ . lst) (let ((x53709 (apply-prim / lst))) x53709))
  (define (= . lst) (let ((x53710 (apply-prim = lst))) x53710))
  (define (> . lst) (let ((x53711 (apply-prim > lst))) x53711))
  (define (< . lst) (let ((x53712 (apply-prim < lst))) x53712))
  (define (<= . lst) (let ((x53713 (apply-prim <= lst))) x53713))
  (define (>= . lst) (let ((x53714 (apply-prim >= lst))) x53714))
  (define (null? x) (let ((x53715 (prim null? x))) x53715))
  (define (equal? x y) (let ((x53716 (prim equal? x y))) x53716))
  (define (eq? x y) (let ((x53717 (prim eq? x y))) x53717))
  (define (cons a b) (let ((x53718 (prim cons a b))) x53718))
  (define (car lst) (let ((x53719 (prim car lst))) x53719))
  (define (cdr lst) (let ((x53720 (prim cdr lst))) x53720))
  (define (even? x)
    (let ((a53721 '0))
      (let ((a53722 '2))
        (let ((a53723 (modulo x a53722))) (equal? a53721 a53723)))))
  (define (odd? x)
    (let ((a53724 '1))
      (let ((a53725 '2))
        (let ((a53726 (modulo x a53725))) (equal? a53724 a53726)))))
  (define (list . x) x)
  (define (and . lst) (let ((x53727 (apply-prim and lst))) x53727))
  (define (or . lst) (let ((x53728 (apply-prim or lst))) x53728))
  (define (member? x lst)
    (let ((a53729 (null? lst)))
      (if a53729
        (let ((x53730 '#f)) x53730)
        (let ((a53731 (car lst)))
          (let ((a53732 (equal? a53731 x)))
            (if a53732
              (let ((x53733 '#t)) x53733)
              (let ((a53734 (cdr lst))) (member? x a53734))))))))
  (define (foldl fun acc lst)
    (let ((a53735 (null? lst)))
      (if a53735
        acc
        (let ((a53736 (car lst)))
          (let ((a53737 (fun a53736 acc)))
            (let ((a53738 (cdr lst))) (foldl fun a53737 a53738)))))))
  (define (reverse-helper lst lst2)
    (let ((a53739 (null? lst)))
      (if a53739
        lst2
        (let ((a53740 (cdr lst)))
          (let ((a53741 (car lst)))
            (let ((a53742 (cons a53741 lst2)))
              (reverse-helper a53740 a53742)))))))
  (define (reverse lst) (let ((a53743 (list))) (reverse-helper lst a53743)))
  (define (take-helper lst n lst2)
    (let ((a53744 '0))
      (let ((a53745 (= n a53744)))
        (if a53745
          (let ((x53746 (reverse lst2))) x53746)
          (let ((a53747 (cdr lst)))
            (let ((a53748 '1))
              (let ((a53749 (- n a53748)))
                (let ((a53750 (car lst)))
                  (let ((a53751 (cons a53750 lst2)))
                    (take-helper a53747 a53749 a53751))))))))))
  (define (take lst n) (let ((a53752 (list))) (take-helper lst n a53752)))
  (define (length lst)
    (let ((a53753 (null? lst)))
      (if a53753
        (let ((x53754 '0)) x53754)
        (let ((a53755 '1))
          (let ((a53756 (cdr lst)))
            (let ((a53757 (length a53756))) (+ a53755 a53757)))))))
  (define (map proc lst)
    (let ((a53758 (null? lst)))
      (if a53758
        (let ((x53759 (list))) x53759)
        (let ((a53760 (car lst)))
          (let ((a53761 (proc a53760)))
            (let ((a53762 (cdr lst)))
              (let ((a53763 (map proc a53762))) (cons a53761 a53763))))))))
  (define (filter op lst)
    (let ((a53764 (null? lst)))
      (if a53764
        (let ((x53765 (list))) x53765)
        (let ((a53766 (car lst)))
          (let ((a53767 (op a53766)))
            (if a53767
              (let ((a53768 (car lst)))
                (let ((a53769 (cdr lst)))
                  (let ((a53770 (filter op a53769))) (cons a53768 a53770))))
              (let ((a53771 (cdr lst))) (filter op a53771))))))))
  (define (drop lst n)
    (let ((a53772 '0))
      (let ((a53773 (= n a53772)))
        (if a53773
          lst
          (let ((a53774 (cdr lst)))
            (let ((a53775 '1))
              (let ((a53776 (- n a53775))) (drop a53774 a53776))))))))
  (define (foldr proc acc lst)
    (let ((a53777 (null? lst)))
      (if a53777
        acc
        (let ((a53778 (car lst)))
          (let ((a53779 (cdr lst)))
            (let ((a53780 (foldr proc acc a53779))) (proc a53778 a53780)))))))
  (define (append lst1 lst2)
    (let ((a53781 (null? lst1)))
      (if a53781
        lst2
        (let ((a53782 (car lst1)))
          (let ((a53783 (cdr lst1)))
            (let ((a53784 (append a53783 lst2))) (cons a53782 a53784)))))))
  (define (hash . lst) (let ((x53785 (apply-prim hash lst))) x53785))
  (define (hash-ref h k) (let ((x53786 (prim hash-ref h k))) x53786))
  (define (hash-set h k v) (let ((x53787 (prim hash-set h k v))) x53787))
  (define (hash-has-key? h k) (let ((x53788 (prim hash-has-key? h k))) x53788))
  (define (hash-count h) (let ((x53789 (prim hash-count h))) x53789))
  (define (call)
    (let ((a53790 '100))
      (let ((a53791 '100))
        (let ((a53792 '100))
          (let ((a53793 '100))
            (let ((a53794 '100)) (= a53790 a53791 a53792 a53793 a53794)))))))
  (define (brouhaha_main) (let ((x53795 (call))) x53795)))
