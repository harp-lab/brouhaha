'((define (+ . lst) (let ((x52690 (apply-prim + lst))) x52690))
  (define (- . lst) (let ((x52691 (apply-prim - lst))) x52691))
  (define (* . lst) (let ((x52692 (apply-prim * lst))) x52692))
  (define (modulo a b) (let ((x52693 (prim modulo a b))) x52693))
  (define (/ . lst) (let ((x52694 (apply-prim / lst))) x52694))
  (define (= . lst) (let ((x52695 (apply-prim = lst))) x52695))
  (define (> . lst) (let ((x52696 (apply-prim > lst))) x52696))
  (define (< . lst) (let ((x52697 (apply-prim < lst))) x52697))
  (define (<= . lst) (let ((x52698 (apply-prim <= lst))) x52698))
  (define (>= . lst) (let ((x52699 (apply-prim >= lst))) x52699))
  (define (null? x) (let ((x52700 (prim null? x))) x52700))
  (define (equal? x y) (let ((x52701 (prim equal? x y))) x52701))
  (define (eq? x y) (let ((x52702 (prim eq? x y))) x52702))
  (define (cons a b) (let ((x52703 (prim cons a b))) x52703))
  (define (car lst) (let ((x52704 (prim car lst))) x52704))
  (define (cdr lst) (let ((x52705 (prim cdr lst))) x52705))
  (define (even? x)
    (let ((a52706 '0))
      (let ((a52707 '2))
        (let ((a52708 (modulo x a52707))) (equal? a52706 a52708)))))
  (define (odd? x)
    (let ((a52709 '1))
      (let ((a52710 '2))
        (let ((a52711 (modulo x a52710))) (equal? a52709 a52711)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a52712 (null? lst)))
      (if a52712
        (let ((x52713 '#f)) x52713)
        (let ((a52714 (car lst)))
          (let ((a52715 (equal? a52714 x)))
            (if a52715
              (let ((x52716 '#t)) x52716)
              (let ((a52717 (cdr lst))) (member? x a52717))))))))
  (define (foldl fun acc lst)
    (let ((a52718 (null? lst)))
      (if a52718
        acc
        (let ((a52719 (car lst)))
          (let ((a52720 (fun a52719 acc)))
            (let ((a52721 (cdr lst))) (foldl fun a52720 a52721)))))))
  (define (reverse-helper lst lst2)
    (let ((a52722 (null? lst)))
      (if a52722
        lst2
        (let ((a52723 (cdr lst)))
          (let ((a52724 (car lst)))
            (let ((a52725 (cons a52724 lst2)))
              (reverse-helper a52723 a52725)))))))
  (define (reverse lst) (let ((a52726 (list))) (reverse-helper lst a52726)))
  (define (take-helper lst n lst2)
    (let ((a52727 '0))
      (let ((a52728 (= n a52727)))
        (if a52728
          (let ((x52729 (reverse lst2))) x52729)
          (let ((a52730 (cdr lst)))
            (let ((a52731 '1))
              (let ((a52732 (- n a52731)))
                (let ((a52733 (car lst)))
                  (let ((a52734 (cons a52733 lst2)))
                    (take-helper a52730 a52732 a52734))))))))))
  (define (take lst n) (let ((a52735 (list))) (take-helper lst n a52735)))
  (define (length lst)
    (let ((a52736 (null? lst)))
      (if a52736
        (let ((x52737 '0)) x52737)
        (let ((a52738 '1))
          (let ((a52739 (cdr lst)))
            (let ((a52740 (length a52739))) (+ a52738 a52740)))))))
  (define (map proc lst)
    (let ((a52741 (null? lst)))
      (if a52741
        (let ((x52742 (list))) x52742)
        (let ((a52743 (car lst)))
          (let ((a52744 (proc a52743)))
            (let ((a52745 (cdr lst)))
              (let ((a52746 (map proc a52745))) (cons a52744 a52746))))))))
  (define (filter op lst)
    (let ((a52747 (null? lst)))
      (if a52747
        (let ((x52748 (list))) x52748)
        (let ((a52749 (car lst)))
          (let ((a52750 (op a52749)))
            (if a52750
              (let ((a52751 (car lst)))
                (let ((a52752 (cdr lst)))
                  (let ((a52753 (filter op a52752))) (cons a52751 a52753))))
              (let ((a52754 (cdr lst))) (filter op a52754))))))))
  (define (drop lst n)
    (let ((a52755 '0))
      (let ((a52756 (= n a52755)))
        (if a52756
          lst
          (let ((a52757 (cdr lst)))
            (let ((a52758 '1))
              (let ((a52759 (- n a52758))) (drop a52757 a52759))))))))
  (define (foldr proc acc lst)
    (let ((a52760 (null? lst)))
      (if a52760
        acc
        (let ((a52761 (car lst)))
          (let ((a52762 (cdr lst)))
            (let ((a52763 (foldr proc acc a52762))) (proc a52761 a52763)))))))
  (define (append lst1 lst2)
    (let ((a52764 (null? lst1)))
      (if a52764
        lst2
        (let ((a52765 (car lst1)))
          (let ((a52766 (cdr lst1)))
            (let ((a52767 (append a52766 lst2))) (cons a52765 a52767)))))))
  (define (hash . lst) (let ((x52768 (apply-prim hash lst))) x52768))
  (define (hash-ref h k) (let ((x52769 (prim hash-ref h k))) x52769))
  (define (hash-set h k v) (let ((x52770 (prim hash-set h k v))) x52770))
  (define (hash-has-key? h k) (let ((x52771 (prim hash-has-key? h k))) x52771))
  (define (hash-count h) (let ((x52772 (prim hash-count h))) x52772))
  (define (call)
    (let ((a52773 '100))
      (let ((a52774 '100))
        (let ((a52775 '100))
          (let ((a52776 '100))
            (let ((a52777 '100)) (= a52773 a52774 a52775 a52776 a52777)))))))
  (define (brouhaha_main) (let ((x52778 (call))) x52778)))
