'((define (+ . lst) (let ((x54594 (apply-prim + lst))) x54594))
  (define (- . lst) (let ((x54595 (apply-prim - lst))) x54595))
  (define (* . lst) (let ((x54596 (apply-prim * lst))) x54596))
  (define (modulo a b) (let ((x54597 (prim modulo a b))) x54597))
  (define (/ . lst) (let ((x54598 (apply-prim / lst))) x54598))
  (define (= . lst) (let ((x54599 (apply-prim = lst))) x54599))
  (define (> . lst) (let ((x54600 (apply-prim > lst))) x54600))
  (define (< . lst) (let ((x54601 (apply-prim < lst))) x54601))
  (define (<= . lst) (let ((x54602 (apply-prim <= lst))) x54602))
  (define (>= . lst) (let ((x54603 (apply-prim >= lst))) x54603))
  (define (null? x) (let ((x54604 (prim null? x))) x54604))
  (define (equal? x y) (let ((x54605 (prim equal? x y))) x54605))
  (define (eq? x y) (let ((x54606 (prim eq? x y))) x54606))
  (define (cons a b) (let ((x54607 (prim cons a b))) x54607))
  (define (car lst) (let ((x54608 (prim car lst))) x54608))
  (define (cdr lst) (let ((x54609 (prim cdr lst))) x54609))
  (define (even? x)
    (let ((a54610 '0))
      (let ((a54611 '2))
        (let ((a54612 (modulo x a54611))) (equal? a54610 a54612)))))
  (define (odd? x)
    (let ((a54613 '1))
      (let ((a54614 '2))
        (let ((a54615 (modulo x a54614))) (equal? a54613 a54615)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a54616 (null? lst)))
      (if a54616
        (let ((x54617 '#f)) x54617)
        (let ((a54618 (car lst)))
          (let ((a54619 (equal? a54618 x)))
            (if a54619
              (let ((x54620 '#t)) x54620)
              (let ((a54621 (cdr lst))) (member? x a54621))))))))
  (define (foldl fun acc lst)
    (let ((a54622 (null? lst)))
      (if a54622
        acc
        (let ((a54623 (car lst)))
          (let ((a54624 (fun a54623 acc)))
            (let ((a54625 (cdr lst))) (foldl fun a54624 a54625)))))))
  (define (reverse-helper lst lst2)
    (let ((a54626 (null? lst)))
      (if a54626
        lst2
        (let ((a54627 (cdr lst)))
          (let ((a54628 (car lst)))
            (let ((a54629 (cons a54628 lst2)))
              (reverse-helper a54627 a54629)))))))
  (define (reverse lst) (let ((a54630 (list))) (reverse-helper lst a54630)))
  (define (take-helper lst n lst2)
    (let ((a54631 '0))
      (let ((a54632 (= n a54631)))
        (if a54632
          (let ((x54633 (reverse lst2))) x54633)
          (let ((a54634 (cdr lst)))
            (let ((a54635 '1))
              (let ((a54636 (- n a54635)))
                (let ((a54637 (car lst)))
                  (let ((a54638 (cons a54637 lst2)))
                    (take-helper a54634 a54636 a54638))))))))))
  (define (take lst n) (let ((a54639 (list))) (take-helper lst n a54639)))
  (define (length lst)
    (let ((a54640 (null? lst)))
      (if a54640
        (let ((x54641 '0)) x54641)
        (let ((a54642 '1))
          (let ((a54643 (cdr lst)))
            (let ((a54644 (length a54643))) (+ a54642 a54644)))))))
  (define (map proc lst)
    (let ((a54645 (null? lst)))
      (if a54645
        (let ((x54646 (list))) x54646)
        (let ((a54647 (car lst)))
          (let ((a54648 (proc a54647)))
            (let ((a54649 (cdr lst)))
              (let ((a54650 (map proc a54649))) (cons a54648 a54650))))))))
  (define (filter op lst)
    (let ((a54651 (null? lst)))
      (if a54651
        (let ((x54652 (list))) x54652)
        (let ((a54653 (car lst)))
          (let ((a54654 (op a54653)))
            (if a54654
              (let ((a54655 (car lst)))
                (let ((a54656 (cdr lst)))
                  (let ((a54657 (filter op a54656))) (cons a54655 a54657))))
              (let ((a54658 (cdr lst))) (filter op a54658))))))))
  (define (drop lst n)
    (let ((a54659 '0))
      (let ((a54660 (= n a54659)))
        (if a54660
          lst
          (let ((a54661 (cdr lst)))
            (let ((a54662 '1))
              (let ((a54663 (- n a54662))) (drop a54661 a54663))))))))
  (define (foldr proc acc lst)
    (let ((a54664 (null? lst)))
      (if a54664
        acc
        (let ((a54665 (car lst)))
          (let ((a54666 (cdr lst)))
            (let ((a54667 (foldr proc acc a54666))) (proc a54665 a54667)))))))
  (define (append lst1 lst2)
    (let ((a54668 (null? lst1)))
      (if a54668
        lst2
        (let ((a54669 (car lst1)))
          (let ((a54670 (cdr lst1)))
            (let ((a54671 (append a54670 lst2))) (cons a54669 a54671)))))))
  (define (hash . lst) (let ((x54672 (apply-prim hash lst))) x54672))
  (define (hash-ref h k) (let ((x54673 (prim hash-ref h k))) x54673))
  (define (hash-set h k v) (let ((x54674 (prim hash-set h k v))) x54674))
  (define (hash-has-key? h k) (let ((x54675 (prim hash-has-key? h k))) x54675))
  (define (hash-count h) (let ((x54676 (prim hash-count h))) x54676))
  (define (call)
    (let ((a54677 '100))
      (let ((a54678 '100))
        (let ((a54679 '100))
          (let ((a54680 '100))
            (let ((a54681 '100)) (= a54677 a54678 a54679 a54680 a54681)))))))
  (define (brouhaha_main) (let ((x54682 (call))) x54682)))
