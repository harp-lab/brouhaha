'((define (+ . lst) (let ((x51058 (apply-prim + lst))) x51058))
  (define (- . lst) (let ((x51059 (apply-prim - lst))) x51059))
  (define (* . lst) (let ((x51060 (apply-prim * lst))) x51060))
  (define (modulo a b) (let ((x51061 (prim modulo a b))) x51061))
  (define (/ . lst) (let ((x51062 (apply-prim / lst))) x51062))
  (define (= . lst) (let ((x51063 (apply-prim = lst))) x51063))
  (define (> . lst) (let ((x51064 (apply-prim > lst))) x51064))
  (define (< . lst) (let ((x51065 (apply-prim < lst))) x51065))
  (define (<= . lst) (let ((x51066 (apply-prim <= lst))) x51066))
  (define (>= . lst) (let ((x51067 (apply-prim >= lst))) x51067))
  (define (null? x) (let ((x51068 (prim null? x))) x51068))
  (define (equal? x y) (let ((x51069 (prim equal? x y))) x51069))
  (define (eq? x y) (let ((x51070 (prim eq? x y))) x51070))
  (define (cons a b) (let ((x51071 (prim cons a b))) x51071))
  (define (car lst) (let ((x51072 (prim car lst))) x51072))
  (define (cdr lst) (let ((x51073 (prim cdr lst))) x51073))
  (define (even? x)
    (let ((a51074 '0))
      (let ((a51075 '2))
        (let ((a51076 (modulo x a51075))) (equal? a51074 a51076)))))
  (define (odd? x)
    (let ((a51077 '1))
      (let ((a51078 '2))
        (let ((a51079 (modulo x a51078))) (equal? a51077 a51079)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a51080 (null? lst)))
      (if a51080
        (let ((x51081 '#f)) x51081)
        (let ((a51082 (car lst)))
          (let ((a51083 (equal? a51082 x)))
            (if a51083
              (let ((x51084 '#t)) x51084)
              (let ((a51085 (cdr lst))) (member? x a51085))))))))
  (define (foldl fun acc lst)
    (let ((a51086 (null? lst)))
      (if a51086
        acc
        (let ((a51087 (car lst)))
          (let ((a51088 (fun a51087 acc)))
            (let ((a51089 (cdr lst))) (foldl fun a51088 a51089)))))))
  (define (reverse-helper lst lst2)
    (let ((a51090 (null? lst)))
      (if a51090
        lst2
        (let ((a51091 (cdr lst)))
          (let ((a51092 (car lst)))
            (let ((a51093 (cons a51092 lst2)))
              (reverse-helper a51091 a51093)))))))
  (define (reverse lst) (let ((a51094 (list))) (reverse-helper lst a51094)))
  (define (take-helper lst n lst2)
    (let ((a51095 '0))
      (let ((a51096 (= n a51095)))
        (if a51096
          (let ((x51097 (reverse lst2))) x51097)
          (let ((a51098 (cdr lst)))
            (let ((a51099 '1))
              (let ((a51100 (- n a51099)))
                (let ((a51101 (car lst)))
                  (let ((a51102 (cons a51101 lst2)))
                    (take-helper a51098 a51100 a51102))))))))))
  (define (take lst n) (let ((a51103 (list))) (take-helper lst n a51103)))
  (define (length lst)
    (let ((a51104 (null? lst)))
      (if a51104
        (let ((x51105 '0)) x51105)
        (let ((a51106 '1))
          (let ((a51107 (cdr lst)))
            (let ((a51108 (length a51107))) (+ a51106 a51108)))))))
  (define (map proc lst)
    (let ((a51109 (null? lst)))
      (if a51109
        (let ((x51110 (list))) x51110)
        (let ((a51111 (car lst)))
          (let ((a51112 (proc a51111)))
            (let ((a51113 (cdr lst)))
              (let ((a51114 (map proc a51113))) (cons a51112 a51114))))))))
  (define (filter op lst)
    (let ((a51115 (null? lst)))
      (if a51115
        (let ((x51116 (list))) x51116)
        (let ((a51117 (car lst)))
          (let ((a51118 (op a51117)))
            (if a51118
              (let ((a51119 (car lst)))
                (let ((a51120 (cdr lst)))
                  (let ((a51121 (filter op a51120))) (cons a51119 a51121))))
              (let ((a51122 (cdr lst))) (filter op a51122))))))))
  (define (drop lst n)
    (let ((a51123 '0))
      (let ((a51124 (= n a51123)))
        (if a51124
          lst
          (let ((a51125 (cdr lst)))
            (let ((a51126 '1))
              (let ((a51127 (- n a51126))) (drop a51125 a51127))))))))
  (define (foldr proc acc lst)
    (let ((a51128 (null? lst)))
      (if a51128
        acc
        (let ((a51129 (car lst)))
          (let ((a51130 (cdr lst)))
            (let ((a51131 (foldr proc acc a51130))) (proc a51129 a51131)))))))
  (define (append lst1 lst2)
    (let ((a51132 (null? lst1)))
      (if a51132
        lst2
        (let ((a51133 (car lst1)))
          (let ((a51134 (cdr lst1)))
            (let ((a51135 (append a51134 lst2))) (cons a51133 a51135)))))))
  (define (hash . lst) (let ((x51136 (apply-prim hash lst))) x51136))
  (define (hash-ref h k) (let ((x51137 (prim hash-ref h k))) x51137))
  (define (hash-set h k v) (let ((x51138 (prim hash-set h k v))) x51138))
  (define (hash-has-key? h k) (let ((x51139 (prim hash-has-key? h k))) x51139))
  (define (hash-count h) (let ((x51140 (prim hash-count h))) x51140))
  (define (call)
    (let ((a51141 '100))
      (let ((a51142 '100))
        (let ((a51143 '100))
          (let ((a51144 '100))
            (let ((a51145 '100)) (= a51141 a51142 a51143 a51144 a51145)))))))
  (define (brouhaha_main) (let ((x51146 (call))) x51146)))
