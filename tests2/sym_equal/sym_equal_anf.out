'((define (+ . lst)
    (let ((kont52779 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52690 (apply-prim + lst))) (kont52779 x52690)))))
  (define (- . lst)
    (let ((kont52781 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52691 (apply-prim - lst))) (kont52781 x52691)))))
  (define (* . lst)
    (let ((kont52783 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52692 (apply-prim * lst))) (kont52783 x52692)))))
  (define (modulo kont52785 a b)
    (let ((x52693 (prim modulo a b))) (kont52785 x52693)))
  (define (/ . lst)
    (let ((kont52786 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52694 (apply-prim / lst))) (kont52786 x52694)))))
  (define (= . lst)
    (let ((kont52788 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52695 (apply-prim = lst))) (kont52788 x52695)))))
  (define (> . lst)
    (let ((kont52790 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52696 (apply-prim > lst))) (kont52790 x52696)))))
  (define (< . lst)
    (let ((kont52792 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52697 (apply-prim < lst))) (kont52792 x52697)))))
  (define (<= . lst)
    (let ((kont52794 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52698 (apply-prim <= lst))) (kont52794 x52698)))))
  (define (>= . lst)
    (let ((kont52796 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52699 (apply-prim >= lst))) (kont52796 x52699)))))
  (define (null? kont52798 x)
    (let ((x52700 (prim null? x))) (kont52798 x52700)))
  (define (equal? kont52799 x y)
    (let ((x52701 (prim equal? x y))) (kont52799 x52701)))
  (define (eq? kont52800 x y)
    (let ((x52702 (prim eq? x y))) (kont52800 x52702)))
  (define (cons kont52801 a b)
    (let ((x52703 (prim cons a b))) (kont52801 x52703)))
  (define (car kont52802 lst)
    (let ((x52704 (prim car lst))) (kont52802 x52704)))
  (define (cdr kont52803 lst)
    (let ((x52705 (prim cdr lst))) (kont52803 x52705)))
  (define (even? kont52804 x)
    (let ((a52706 '0))
      (let ((a52707 '2))
        (let ((f52805 (lambda (a52708) (equal? kont52804 a52706 a52708))))
          (modulo f52805 x a52707)))))
  (define (odd? kont52806 x)
    (let ((a52709 '1))
      (let ((a52710 '2))
        (let ((f52807 (lambda (a52711) (equal? kont52806 a52709 a52711))))
          (modulo f52807 x a52710)))))
  (define (list . x)
    (let ((kont52808 (prim car x))) (let ((x (prim cdr x))) (kont52808 x))))
  (define (member? kont52810 x lst)
    (let ((f52814
           (lambda (a52712)
             (if a52712
               (let ((x52713 '#f)) (kont52810 x52713))
               (let ((f52813
                      (lambda (a52714)
                        (let ((f52812
                               (lambda (a52715)
                                 (if a52715
                                   (let ((x52716 '#t)) (kont52810 x52716))
                                   (let ((f52811
                                          (lambda (a52717)
                                            (member? kont52810 x a52717))))
                                     (cdr f52811 lst))))))
                          (equal? f52812 a52714 x)))))
                 (car f52813 lst))))))
      (null? f52814 lst)))
  (define (foldl kont52815 fun acc lst)
    (let ((f52819
           (lambda (a52718)
             (if a52718
               (kont52815 acc)
               (let ((f52818
                      (lambda (a52719)
                        (let ((f52817
                               (lambda (a52720)
                                 (let ((f52816
                                        (lambda (a52721)
                                          (foldl
                                           kont52815
                                           fun
                                           a52720
                                           a52721))))
                                   (cdr f52816 lst)))))
                          (fun f52817 a52719 acc)))))
                 (car f52818 lst))))))
      (null? f52819 lst)))
  (define (reverse-helper kont52820 lst lst2)
    (let ((f52824
           (lambda (a52722)
             (if a52722
               (kont52820 lst2)
               (let ((f52823
                      (lambda (a52723)
                        (let ((f52822
                               (lambda (a52724)
                                 (let ((f52821
                                        (lambda (a52725)
                                          (reverse-helper
                                           kont52820
                                           a52723
                                           a52725))))
                                   (cons f52821 a52724 lst2)))))
                          (car f52822 lst)))))
                 (cdr f52823 lst))))))
      (null? f52824 lst)))
  (define (reverse kont52825 lst)
    (let ((f52826 (lambda (a52726) (reverse-helper kont52825 lst a52726))))
      (list f52826)))
  (define (take-helper kont52827 lst n lst2)
    (let ((a52727 '0))
      (let ((f52833
             (lambda (a52728)
               (if a52728
                 (let ((f52828 (lambda (x52729) (kont52827 x52729))))
                   (reverse f52828 lst2))
                 (let ((f52832
                        (lambda (a52730)
                          (let ((a52731 '1))
                            (let ((f52831
                                   (lambda (a52732)
                                     (let ((f52830
                                            (lambda (a52733)
                                              (let ((f52829
                                                     (lambda (a52734)
                                                       (take-helper
                                                        kont52827
                                                        a52730
                                                        a52732
                                                        a52734))))
                                                (cons f52829 a52733 lst2)))))
                                       (car f52830 lst)))))
                              (- f52831 n a52731))))))
                   (cdr f52832 lst))))))
        (= f52833 n a52727))))
  (define (take kont52834 lst n)
    (let ((f52835 (lambda (a52735) (take-helper kont52834 lst n a52735))))
      (list f52835)))
  (define (length kont52836 lst)
    (let ((f52839
           (lambda (a52736)
             (if a52736
               (let ((x52737 '0)) (kont52836 x52737))
               (let ((a52738 '1))
                 (let ((f52838
                        (lambda (a52739)
                          (let ((f52837
                                 (lambda (a52740)
                                   (+ kont52836 a52738 a52740))))
                            (length f52837 a52739)))))
                   (cdr f52838 lst)))))))
      (null? f52839 lst)))
  (define (map kont52840 proc lst)
    (let ((f52846
           (lambda (a52741)
             (if a52741
               (let ((f52841 (lambda (x52742) (kont52840 x52742))))
                 (list f52841))
               (let ((f52845
                      (lambda (a52743)
                        (let ((f52844
                               (lambda (a52744)
                                 (let ((f52843
                                        (lambda (a52745)
                                          (let ((f52842
                                                 (lambda (a52746)
                                                   (cons
                                                    kont52840
                                                    a52744
                                                    a52746))))
                                            (map f52842 proc a52745)))))
                                   (cdr f52843 lst)))))
                          (proc f52844 a52743)))))
                 (car f52845 lst))))))
      (null? f52846 lst)))
  (define (filter kont52847 op lst)
    (let ((f52855
           (lambda (a52747)
             (if a52747
               (let ((f52848 (lambda (x52748) (kont52847 x52748))))
                 (list f52848))
               (let ((f52854
                      (lambda (a52749)
                        (let ((f52853
                               (lambda (a52750)
                                 (if a52750
                                   (let ((f52851
                                          (lambda (a52751)
                                            (let ((f52850
                                                   (lambda (a52752)
                                                     (let ((f52849
                                                            (lambda (a52753)
                                                              (cons
                                                               kont52847
                                                               a52751
                                                               a52753))))
                                                       (filter
                                                        f52849
                                                        op
                                                        a52752)))))
                                              (cdr f52850 lst)))))
                                     (car f52851 lst))
                                   (let ((f52852
                                          (lambda (a52754)
                                            (filter kont52847 op a52754))))
                                     (cdr f52852 lst))))))
                          (op f52853 a52749)))))
                 (car f52854 lst))))))
      (null? f52855 lst)))
  (define (drop kont52856 lst n)
    (let ((a52755 '0))
      (let ((f52859
             (lambda (a52756)
               (if a52756
                 (kont52856 lst)
                 (let ((f52858
                        (lambda (a52757)
                          (let ((a52758 '1))
                            (let ((f52857
                                   (lambda (a52759)
                                     (drop kont52856 a52757 a52759))))
                              (- f52857 n a52758))))))
                   (cdr f52858 lst))))))
        (= f52859 n a52755))))
  (define (foldr kont52860 proc acc lst)
    (let ((f52864
           (lambda (a52760)
             (if a52760
               (kont52860 acc)
               (let ((f52863
                      (lambda (a52761)
                        (let ((f52862
                               (lambda (a52762)
                                 (let ((f52861
                                        (lambda (a52763)
                                          (proc kont52860 a52761 a52763))))
                                   (foldr f52861 proc acc a52762)))))
                          (cdr f52862 lst)))))
                 (car f52863 lst))))))
      (null? f52864 lst)))
  (define (append kont52865 lst1 lst2)
    (let ((f52869
           (lambda (a52764)
             (if a52764
               (kont52865 lst2)
               (let ((f52868
                      (lambda (a52765)
                        (let ((f52867
                               (lambda (a52766)
                                 (let ((f52866
                                        (lambda (a52767)
                                          (cons kont52865 a52765 a52767))))
                                   (append f52866 a52766 lst2)))))
                          (cdr f52867 lst1)))))
                 (car f52868 lst1))))))
      (null? f52869 lst1)))
  (define (hash . lst)
    (let ((kont52870 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52768 (apply-prim hash lst))) (kont52870 x52768)))))
  (define (hash-ref kont52872 h k)
    (let ((x52769 (prim hash-ref h k))) (kont52872 x52769)))
  (define (hash-set kont52873 h k v)
    (let ((x52770 (prim hash-set h k v))) (kont52873 x52770)))
  (define (hash-has-key? kont52874 h k)
    (let ((x52771 (prim hash-has-key? h k))) (kont52874 x52771)))
  (define (hash-count kont52875 h)
    (let ((x52772 (prim hash-count h))) (kont52875 x52772)))
  (define (call kont52876)
    (let ((a52773 '100))
      (let ((a52774 '100))
        (let ((a52775 '100))
          (let ((a52776 '100))
            (let ((a52777 '100))
              (= kont52876 a52773 a52774 a52775 a52776 a52777)))))))
  (define (brouhaha_main kont52877)
    (let ((f52878 (lambda (x52778) (kont52877 x52778)))) (call f52878))))
