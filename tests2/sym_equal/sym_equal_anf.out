'((define (+ . lst)
    (let ((kont53796 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53705 (apply-prim + lst))) (kont53796 x53705)))))
  (define (- . lst)
    (let ((kont53798 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53706 (apply-prim - lst))) (kont53798 x53706)))))
  (define (* . lst)
    (let ((kont53800 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53707 (apply-prim * lst))) (kont53800 x53707)))))
  (define (modulo kont53802 a b)
    (let ((x53708 (prim modulo a b))) (kont53802 x53708)))
  (define (/ . lst)
    (let ((kont53803 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53709 (apply-prim / lst))) (kont53803 x53709)))))
  (define (= . lst)
    (let ((kont53805 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53710 (apply-prim = lst))) (kont53805 x53710)))))
  (define (> . lst)
    (let ((kont53807 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53711 (apply-prim > lst))) (kont53807 x53711)))))
  (define (< . lst)
    (let ((kont53809 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53712 (apply-prim < lst))) (kont53809 x53712)))))
  (define (<= . lst)
    (let ((kont53811 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53713 (apply-prim <= lst))) (kont53811 x53713)))))
  (define (>= . lst)
    (let ((kont53813 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53714 (apply-prim >= lst))) (kont53813 x53714)))))
  (define (null? kont53815 x)
    (let ((x53715 (prim null? x))) (kont53815 x53715)))
  (define (equal? kont53816 x y)
    (let ((x53716 (prim equal? x y))) (kont53816 x53716)))
  (define (eq? kont53817 x y)
    (let ((x53717 (prim eq? x y))) (kont53817 x53717)))
  (define (cons kont53818 a b)
    (let ((x53718 (prim cons a b))) (kont53818 x53718)))
  (define (car kont53819 lst)
    (let ((x53719 (prim car lst))) (kont53819 x53719)))
  (define (cdr kont53820 lst)
    (let ((x53720 (prim cdr lst))) (kont53820 x53720)))
  (define (even? kont53821 x)
    (let ((a53721 '0))
      (let ((a53722 '2))
        (let ((f53822 (lambda (a53723) (equal? kont53821 a53721 a53723))))
          (modulo f53822 x a53722)))))
  (define (odd? kont53823 x)
    (let ((a53724 '1))
      (let ((a53725 '2))
        (let ((f53824 (lambda (a53726) (equal? kont53823 a53724 a53726))))
          (modulo f53824 x a53725)))))
  (define (list . x)
    (let ((kont53825 (prim car x))) (let ((x (prim cdr x))) (kont53825 x))))
  (define (and . lst)
    (let ((kont53827 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53727 (apply-prim and lst))) (kont53827 x53727)))))
  (define (or . lst)
    (let ((kont53829 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53728 (apply-prim or lst))) (kont53829 x53728)))))
  (define (member? kont53831 x lst)
    (let ((f53835
           (lambda (a53729)
             (if a53729
               (let ((x53730 '#f)) (kont53831 x53730))
               (let ((f53834
                      (lambda (a53731)
                        (let ((f53833
                               (lambda (a53732)
                                 (if a53732
                                   (let ((x53733 '#t)) (kont53831 x53733))
                                   (let ((f53832
                                          (lambda (a53734)
                                            (member? kont53831 x a53734))))
                                     (cdr f53832 lst))))))
                          (equal? f53833 a53731 x)))))
                 (car f53834 lst))))))
      (null? f53835 lst)))
  (define (foldl kont53836 fun acc lst)
    (let ((f53840
           (lambda (a53735)
             (if a53735
               (kont53836 acc)
               (let ((f53839
                      (lambda (a53736)
                        (let ((f53838
                               (lambda (a53737)
                                 (let ((f53837
                                        (lambda (a53738)
                                          (foldl
                                           kont53836
                                           fun
                                           a53737
                                           a53738))))
                                   (cdr f53837 lst)))))
                          (fun f53838 a53736 acc)))))
                 (car f53839 lst))))))
      (null? f53840 lst)))
  (define (reverse-helper kont53841 lst lst2)
    (let ((f53845
           (lambda (a53739)
             (if a53739
               (kont53841 lst2)
               (let ((f53844
                      (lambda (a53740)
                        (let ((f53843
                               (lambda (a53741)
                                 (let ((f53842
                                        (lambda (a53742)
                                          (reverse-helper
                                           kont53841
                                           a53740
                                           a53742))))
                                   (cons f53842 a53741 lst2)))))
                          (car f53843 lst)))))
                 (cdr f53844 lst))))))
      (null? f53845 lst)))
  (define (reverse kont53846 lst)
    (let ((f53847 (lambda (a53743) (reverse-helper kont53846 lst a53743))))
      (list f53847)))
  (define (take-helper kont53848 lst n lst2)
    (let ((a53744 '0))
      (let ((f53854
             (lambda (a53745)
               (if a53745
                 (let ((f53849 (lambda (x53746) (kont53848 x53746))))
                   (reverse f53849 lst2))
                 (let ((f53853
                        (lambda (a53747)
                          (let ((a53748 '1))
                            (let ((f53852
                                   (lambda (a53749)
                                     (let ((f53851
                                            (lambda (a53750)
                                              (let ((f53850
                                                     (lambda (a53751)
                                                       (take-helper
                                                        kont53848
                                                        a53747
                                                        a53749
                                                        a53751))))
                                                (cons f53850 a53750 lst2)))))
                                       (car f53851 lst)))))
                              (- f53852 n a53748))))))
                   (cdr f53853 lst))))))
        (= f53854 n a53744))))
  (define (take kont53855 lst n)
    (let ((f53856 (lambda (a53752) (take-helper kont53855 lst n a53752))))
      (list f53856)))
  (define (length kont53857 lst)
    (let ((f53860
           (lambda (a53753)
             (if a53753
               (let ((x53754 '0)) (kont53857 x53754))
               (let ((a53755 '1))
                 (let ((f53859
                        (lambda (a53756)
                          (let ((f53858
                                 (lambda (a53757)
                                   (+ kont53857 a53755 a53757))))
                            (length f53858 a53756)))))
                   (cdr f53859 lst)))))))
      (null? f53860 lst)))
  (define (map kont53861 proc lst)
    (let ((f53867
           (lambda (a53758)
             (if a53758
               (let ((f53862 (lambda (x53759) (kont53861 x53759))))
                 (list f53862))
               (let ((f53866
                      (lambda (a53760)
                        (let ((f53865
                               (lambda (a53761)
                                 (let ((f53864
                                        (lambda (a53762)
                                          (let ((f53863
                                                 (lambda (a53763)
                                                   (cons
                                                    kont53861
                                                    a53761
                                                    a53763))))
                                            (map f53863 proc a53762)))))
                                   (cdr f53864 lst)))))
                          (proc f53865 a53760)))))
                 (car f53866 lst))))))
      (null? f53867 lst)))
  (define (filter kont53868 op lst)
    (let ((f53876
           (lambda (a53764)
             (if a53764
               (let ((f53869 (lambda (x53765) (kont53868 x53765))))
                 (list f53869))
               (let ((f53875
                      (lambda (a53766)
                        (let ((f53874
                               (lambda (a53767)
                                 (if a53767
                                   (let ((f53872
                                          (lambda (a53768)
                                            (let ((f53871
                                                   (lambda (a53769)
                                                     (let ((f53870
                                                            (lambda (a53770)
                                                              (cons
                                                               kont53868
                                                               a53768
                                                               a53770))))
                                                       (filter
                                                        f53870
                                                        op
                                                        a53769)))))
                                              (cdr f53871 lst)))))
                                     (car f53872 lst))
                                   (let ((f53873
                                          (lambda (a53771)
                                            (filter kont53868 op a53771))))
                                     (cdr f53873 lst))))))
                          (op f53874 a53766)))))
                 (car f53875 lst))))))
      (null? f53876 lst)))
  (define (drop kont53877 lst n)
    (let ((a53772 '0))
      (let ((f53880
             (lambda (a53773)
               (if a53773
                 (kont53877 lst)
                 (let ((f53879
                        (lambda (a53774)
                          (let ((a53775 '1))
                            (let ((f53878
                                   (lambda (a53776)
                                     (drop kont53877 a53774 a53776))))
                              (- f53878 n a53775))))))
                   (cdr f53879 lst))))))
        (= f53880 n a53772))))
  (define (foldr kont53881 proc acc lst)
    (let ((f53885
           (lambda (a53777)
             (if a53777
               (kont53881 acc)
               (let ((f53884
                      (lambda (a53778)
                        (let ((f53883
                               (lambda (a53779)
                                 (let ((f53882
                                        (lambda (a53780)
                                          (proc kont53881 a53778 a53780))))
                                   (foldr f53882 proc acc a53779)))))
                          (cdr f53883 lst)))))
                 (car f53884 lst))))))
      (null? f53885 lst)))
  (define (append kont53886 lst1 lst2)
    (let ((f53890
           (lambda (a53781)
             (if a53781
               (kont53886 lst2)
               (let ((f53889
                      (lambda (a53782)
                        (let ((f53888
                               (lambda (a53783)
                                 (let ((f53887
                                        (lambda (a53784)
                                          (cons kont53886 a53782 a53784))))
                                   (append f53887 a53783 lst2)))))
                          (cdr f53888 lst1)))))
                 (car f53889 lst1))))))
      (null? f53890 lst1)))
  (define (hash . lst)
    (let ((kont53891 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53785 (apply-prim hash lst))) (kont53891 x53785)))))
  (define (hash-ref kont53893 h k)
    (let ((x53786 (prim hash-ref h k))) (kont53893 x53786)))
  (define (hash-set kont53894 h k v)
    (let ((x53787 (prim hash-set h k v))) (kont53894 x53787)))
  (define (hash-has-key? kont53895 h k)
    (let ((x53788 (prim hash-has-key? h k))) (kont53895 x53788)))
  (define (hash-count kont53896 h)
    (let ((x53789 (prim hash-count h))) (kont53896 x53789)))
  (define (call kont53897)
    (let ((a53790 '100))
      (let ((a53791 '100))
        (let ((a53792 '100))
          (let ((a53793 '100))
            (let ((a53794 '100))
              (= kont53897 a53790 a53791 a53792 a53793 a53794)))))))
  (define (brouhaha_main kont53898)
    (let ((f53899 (lambda (x53795) (kont53898 x53795)))) (call f53899))))
