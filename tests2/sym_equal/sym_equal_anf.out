'((define (+ . lst)
    (let ((kont51147 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51058 (apply-prim + lst))) (kont51147 x51058)))))
  (define (- . lst)
    (let ((kont51149 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51059 (apply-prim - lst))) (kont51149 x51059)))))
  (define (* . lst)
    (let ((kont51151 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51060 (apply-prim * lst))) (kont51151 x51060)))))
  (define (modulo kont51153 a b)
    (let ((x51061 (prim modulo a b))) (kont51153 x51061)))
  (define (/ . lst)
    (let ((kont51154 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51062 (apply-prim / lst))) (kont51154 x51062)))))
  (define (= . lst)
    (let ((kont51156 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51063 (apply-prim = lst))) (kont51156 x51063)))))
  (define (> . lst)
    (let ((kont51158 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51064 (apply-prim > lst))) (kont51158 x51064)))))
  (define (< . lst)
    (let ((kont51160 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51065 (apply-prim < lst))) (kont51160 x51065)))))
  (define (<= . lst)
    (let ((kont51162 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51066 (apply-prim <= lst))) (kont51162 x51066)))))
  (define (>= . lst)
    (let ((kont51164 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51067 (apply-prim >= lst))) (kont51164 x51067)))))
  (define (null? kont51166 x)
    (let ((x51068 (prim null? x))) (kont51166 x51068)))
  (define (equal? kont51167 x y)
    (let ((x51069 (prim equal? x y))) (kont51167 x51069)))
  (define (eq? kont51168 x y)
    (let ((x51070 (prim eq? x y))) (kont51168 x51070)))
  (define (cons kont51169 a b)
    (let ((x51071 (prim cons a b))) (kont51169 x51071)))
  (define (car kont51170 lst)
    (let ((x51072 (prim car lst))) (kont51170 x51072)))
  (define (cdr kont51171 lst)
    (let ((x51073 (prim cdr lst))) (kont51171 x51073)))
  (define (even? kont51172 x)
    (let ((a51074 '0))
      (let ((a51075 '2))
        (let ((f51173 (lambda (a51076) (equal? kont51172 a51074 a51076))))
          (modulo f51173 x a51075)))))
  (define (odd? kont51174 x)
    (let ((a51077 '1))
      (let ((a51078 '2))
        (let ((f51175 (lambda (a51079) (equal? kont51174 a51077 a51079))))
          (modulo f51175 x a51078)))))
  (define (list . x)
    (let ((kont51176 (prim car x))) (let ((x (prim cdr x))) (kont51176 x))))
  (define (member? kont51178 x lst)
    (let ((f51182
           (lambda (a51080)
             (if a51080
               (let ((x51081 '#f)) (kont51178 x51081))
               (let ((f51181
                      (lambda (a51082)
                        (let ((f51180
                               (lambda (a51083)
                                 (if a51083
                                   (let ((x51084 '#t)) (kont51178 x51084))
                                   (let ((f51179
                                          (lambda (a51085)
                                            (member? kont51178 x a51085))))
                                     (cdr f51179 lst))))))
                          (equal? f51180 a51082 x)))))
                 (car f51181 lst))))))
      (null? f51182 lst)))
  (define (foldl kont51183 fun acc lst)
    (let ((f51187
           (lambda (a51086)
             (if a51086
               (kont51183 acc)
               (let ((f51186
                      (lambda (a51087)
                        (let ((f51185
                               (lambda (a51088)
                                 (let ((f51184
                                        (lambda (a51089)
                                          (foldl
                                           kont51183
                                           fun
                                           a51088
                                           a51089))))
                                   (cdr f51184 lst)))))
                          (fun f51185 a51087 acc)))))
                 (car f51186 lst))))))
      (null? f51187 lst)))
  (define (reverse-helper kont51188 lst lst2)
    (let ((f51192
           (lambda (a51090)
             (if a51090
               (kont51188 lst2)
               (let ((f51191
                      (lambda (a51091)
                        (let ((f51190
                               (lambda (a51092)
                                 (let ((f51189
                                        (lambda (a51093)
                                          (reverse-helper
                                           kont51188
                                           a51091
                                           a51093))))
                                   (cons f51189 a51092 lst2)))))
                          (car f51190 lst)))))
                 (cdr f51191 lst))))))
      (null? f51192 lst)))
  (define (reverse kont51193 lst)
    (let ((f51194 (lambda (a51094) (reverse-helper kont51193 lst a51094))))
      (list f51194)))
  (define (take-helper kont51195 lst n lst2)
    (let ((a51095 '0))
      (let ((f51201
             (lambda (a51096)
               (if a51096
                 (let ((f51196 (lambda (x51097) (kont51195 x51097))))
                   (reverse f51196 lst2))
                 (let ((f51200
                        (lambda (a51098)
                          (let ((a51099 '1))
                            (let ((f51199
                                   (lambda (a51100)
                                     (let ((f51198
                                            (lambda (a51101)
                                              (let ((f51197
                                                     (lambda (a51102)
                                                       (take-helper
                                                        kont51195
                                                        a51098
                                                        a51100
                                                        a51102))))
                                                (cons f51197 a51101 lst2)))))
                                       (car f51198 lst)))))
                              (- f51199 n a51099))))))
                   (cdr f51200 lst))))))
        (= f51201 n a51095))))
  (define (take kont51202 lst n)
    (let ((f51203 (lambda (a51103) (take-helper kont51202 lst n a51103))))
      (list f51203)))
  (define (length kont51204 lst)
    (let ((f51207
           (lambda (a51104)
             (if a51104
               (let ((x51105 '0)) (kont51204 x51105))
               (let ((a51106 '1))
                 (let ((f51206
                        (lambda (a51107)
                          (let ((f51205
                                 (lambda (a51108)
                                   (+ kont51204 a51106 a51108))))
                            (length f51205 a51107)))))
                   (cdr f51206 lst)))))))
      (null? f51207 lst)))
  (define (map kont51208 proc lst)
    (let ((f51214
           (lambda (a51109)
             (if a51109
               (let ((f51209 (lambda (x51110) (kont51208 x51110))))
                 (list f51209))
               (let ((f51213
                      (lambda (a51111)
                        (let ((f51212
                               (lambda (a51112)
                                 (let ((f51211
                                        (lambda (a51113)
                                          (let ((f51210
                                                 (lambda (a51114)
                                                   (cons
                                                    kont51208
                                                    a51112
                                                    a51114))))
                                            (map f51210 proc a51113)))))
                                   (cdr f51211 lst)))))
                          (proc f51212 a51111)))))
                 (car f51213 lst))))))
      (null? f51214 lst)))
  (define (filter kont51215 op lst)
    (let ((f51223
           (lambda (a51115)
             (if a51115
               (let ((f51216 (lambda (x51116) (kont51215 x51116))))
                 (list f51216))
               (let ((f51222
                      (lambda (a51117)
                        (let ((f51221
                               (lambda (a51118)
                                 (if a51118
                                   (let ((f51219
                                          (lambda (a51119)
                                            (let ((f51218
                                                   (lambda (a51120)
                                                     (let ((f51217
                                                            (lambda (a51121)
                                                              (cons
                                                               kont51215
                                                               a51119
                                                               a51121))))
                                                       (filter
                                                        f51217
                                                        op
                                                        a51120)))))
                                              (cdr f51218 lst)))))
                                     (car f51219 lst))
                                   (let ((f51220
                                          (lambda (a51122)
                                            (filter kont51215 op a51122))))
                                     (cdr f51220 lst))))))
                          (op f51221 a51117)))))
                 (car f51222 lst))))))
      (null? f51223 lst)))
  (define (drop kont51224 lst n)
    (let ((a51123 '0))
      (let ((f51227
             (lambda (a51124)
               (if a51124
                 (kont51224 lst)
                 (let ((f51226
                        (lambda (a51125)
                          (let ((a51126 '1))
                            (let ((f51225
                                   (lambda (a51127)
                                     (drop kont51224 a51125 a51127))))
                              (- f51225 n a51126))))))
                   (cdr f51226 lst))))))
        (= f51227 n a51123))))
  (define (foldr kont51228 proc acc lst)
    (let ((f51232
           (lambda (a51128)
             (if a51128
               (kont51228 acc)
               (let ((f51231
                      (lambda (a51129)
                        (let ((f51230
                               (lambda (a51130)
                                 (let ((f51229
                                        (lambda (a51131)
                                          (proc kont51228 a51129 a51131))))
                                   (foldr f51229 proc acc a51130)))))
                          (cdr f51230 lst)))))
                 (car f51231 lst))))))
      (null? f51232 lst)))
  (define (append kont51233 lst1 lst2)
    (let ((f51237
           (lambda (a51132)
             (if a51132
               (kont51233 lst2)
               (let ((f51236
                      (lambda (a51133)
                        (let ((f51235
                               (lambda (a51134)
                                 (let ((f51234
                                        (lambda (a51135)
                                          (cons kont51233 a51133 a51135))))
                                   (append f51234 a51134 lst2)))))
                          (cdr f51235 lst1)))))
                 (car f51236 lst1))))))
      (null? f51237 lst1)))
  (define (hash . lst)
    (let ((kont51238 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51136 (apply-prim hash lst))) (kont51238 x51136)))))
  (define (hash-ref kont51240 h k)
    (let ((x51137 (prim hash-ref h k))) (kont51240 x51137)))
  (define (hash-set kont51241 h k v)
    (let ((x51138 (prim hash-set h k v))) (kont51241 x51138)))
  (define (hash-has-key? kont51242 h k)
    (let ((x51139 (prim hash-has-key? h k))) (kont51242 x51139)))
  (define (hash-count kont51243 h)
    (let ((x51140 (prim hash-count h))) (kont51243 x51140)))
  (define (call kont51244)
    (let ((a51141 '100))
      (let ((a51142 '100))
        (let ((a51143 '100))
          (let ((a51144 '100))
            (let ((a51145 '100))
              (= kont51244 a51141 a51142 a51143 a51144 a51145)))))))
  (define (brouhaha_main kont51245)
    (let ((f51246 (lambda (x51146) (kont51245 x51146)))) (call f51246))))
