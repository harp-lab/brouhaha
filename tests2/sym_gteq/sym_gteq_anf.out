'((define (+ . lst)
    (let ((kont55067 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54978 (apply-prim + lst))) (kont55067 x54978)))))
  (define (- . lst)
    (let ((kont55069 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54979 (apply-prim - lst))) (kont55069 x54979)))))
  (define (* . lst)
    (let ((kont55071 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54980 (apply-prim * lst))) (kont55071 x54980)))))
  (define (modulo kont55073 a b)
    (let ((x54981 (prim modulo a b))) (kont55073 x54981)))
  (define (/ . lst)
    (let ((kont55074 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54982 (apply-prim / lst))) (kont55074 x54982)))))
  (define (= . lst)
    (let ((kont55076 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54983 (apply-prim = lst))) (kont55076 x54983)))))
  (define (> . lst)
    (let ((kont55078 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54984 (apply-prim > lst))) (kont55078 x54984)))))
  (define (< . lst)
    (let ((kont55080 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54985 (apply-prim < lst))) (kont55080 x54985)))))
  (define (<= . lst)
    (let ((kont55082 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54986 (apply-prim <= lst))) (kont55082 x54986)))))
  (define (>= . lst)
    (let ((kont55084 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54987 (apply-prim >= lst))) (kont55084 x54987)))))
  (define (null? kont55086 x)
    (let ((x54988 (prim null? x))) (kont55086 x54988)))
  (define (equal? kont55087 x y)
    (let ((x54989 (prim equal? x y))) (kont55087 x54989)))
  (define (eq? kont55088 x y)
    (let ((x54990 (prim eq? x y))) (kont55088 x54990)))
  (define (cons kont55089 a b)
    (let ((x54991 (prim cons a b))) (kont55089 x54991)))
  (define (car kont55090 lst)
    (let ((x54992 (prim car lst))) (kont55090 x54992)))
  (define (cdr kont55091 lst)
    (let ((x54993 (prim cdr lst))) (kont55091 x54993)))
  (define (even? kont55092 x)
    (let ((a54994 '0))
      (let ((a54995 '2))
        (let ((f55093 (lambda (a54996) (equal? kont55092 a54994 a54996))))
          (modulo f55093 x a54995)))))
  (define (odd? kont55094 x)
    (let ((a54997 '1))
      (let ((a54998 '2))
        (let ((f55095 (lambda (a54999) (equal? kont55094 a54997 a54999))))
          (modulo f55095 x a54998)))))
  (define (list . x)
    (let ((kont55096 (prim car x))) (let ((x (prim cdr x))) (kont55096 x))))
  (define (member? kont55098 x lst)
    (let ((f55102
           (lambda (a55000)
             (if a55000
               (let ((x55001 '#f)) (kont55098 x55001))
               (let ((f55101
                      (lambda (a55002)
                        (let ((f55100
                               (lambda (a55003)
                                 (if a55003
                                   (let ((x55004 '#t)) (kont55098 x55004))
                                   (let ((f55099
                                          (lambda (a55005)
                                            (member? kont55098 x a55005))))
                                     (cdr f55099 lst))))))
                          (equal? f55100 a55002 x)))))
                 (car f55101 lst))))))
      (null? f55102 lst)))
  (define (foldl kont55103 fun acc lst)
    (let ((f55107
           (lambda (a55006)
             (if a55006
               (kont55103 acc)
               (let ((f55106
                      (lambda (a55007)
                        (let ((f55105
                               (lambda (a55008)
                                 (let ((f55104
                                        (lambda (a55009)
                                          (foldl
                                           kont55103
                                           fun
                                           a55008
                                           a55009))))
                                   (cdr f55104 lst)))))
                          (fun f55105 a55007 acc)))))
                 (car f55106 lst))))))
      (null? f55107 lst)))
  (define (reverse-helper kont55108 lst lst2)
    (let ((f55112
           (lambda (a55010)
             (if a55010
               (kont55108 lst2)
               (let ((f55111
                      (lambda (a55011)
                        (let ((f55110
                               (lambda (a55012)
                                 (let ((f55109
                                        (lambda (a55013)
                                          (reverse-helper
                                           kont55108
                                           a55011
                                           a55013))))
                                   (cons f55109 a55012 lst2)))))
                          (car f55110 lst)))))
                 (cdr f55111 lst))))))
      (null? f55112 lst)))
  (define (reverse kont55113 lst)
    (let ((f55114 (lambda (a55014) (reverse-helper kont55113 lst a55014))))
      (list f55114)))
  (define (take-helper kont55115 lst n lst2)
    (let ((a55015 '0))
      (let ((f55121
             (lambda (a55016)
               (if a55016
                 (let ((f55116 (lambda (x55017) (kont55115 x55017))))
                   (reverse f55116 lst2))
                 (let ((f55120
                        (lambda (a55018)
                          (let ((a55019 '1))
                            (let ((f55119
                                   (lambda (a55020)
                                     (let ((f55118
                                            (lambda (a55021)
                                              (let ((f55117
                                                     (lambda (a55022)
                                                       (take-helper
                                                        kont55115
                                                        a55018
                                                        a55020
                                                        a55022))))
                                                (cons f55117 a55021 lst2)))))
                                       (car f55118 lst)))))
                              (- f55119 n a55019))))))
                   (cdr f55120 lst))))))
        (= f55121 n a55015))))
  (define (take kont55122 lst n)
    (let ((f55123 (lambda (a55023) (take-helper kont55122 lst n a55023))))
      (list f55123)))
  (define (length kont55124 lst)
    (let ((f55127
           (lambda (a55024)
             (if a55024
               (let ((x55025 '0)) (kont55124 x55025))
               (let ((a55026 '1))
                 (let ((f55126
                        (lambda (a55027)
                          (let ((f55125
                                 (lambda (a55028)
                                   (+ kont55124 a55026 a55028))))
                            (length f55125 a55027)))))
                   (cdr f55126 lst)))))))
      (null? f55127 lst)))
  (define (map kont55128 proc lst)
    (let ((f55134
           (lambda (a55029)
             (if a55029
               (let ((f55129 (lambda (x55030) (kont55128 x55030))))
                 (list f55129))
               (let ((f55133
                      (lambda (a55031)
                        (let ((f55132
                               (lambda (a55032)
                                 (let ((f55131
                                        (lambda (a55033)
                                          (let ((f55130
                                                 (lambda (a55034)
                                                   (cons
                                                    kont55128
                                                    a55032
                                                    a55034))))
                                            (map f55130 proc a55033)))))
                                   (cdr f55131 lst)))))
                          (proc f55132 a55031)))))
                 (car f55133 lst))))))
      (null? f55134 lst)))
  (define (filter kont55135 op lst)
    (let ((f55143
           (lambda (a55035)
             (if a55035
               (let ((f55136 (lambda (x55036) (kont55135 x55036))))
                 (list f55136))
               (let ((f55142
                      (lambda (a55037)
                        (let ((f55141
                               (lambda (a55038)
                                 (if a55038
                                   (let ((f55139
                                          (lambda (a55039)
                                            (let ((f55138
                                                   (lambda (a55040)
                                                     (let ((f55137
                                                            (lambda (a55041)
                                                              (cons
                                                               kont55135
                                                               a55039
                                                               a55041))))
                                                       (filter
                                                        f55137
                                                        op
                                                        a55040)))))
                                              (cdr f55138 lst)))))
                                     (car f55139 lst))
                                   (let ((f55140
                                          (lambda (a55042)
                                            (filter kont55135 op a55042))))
                                     (cdr f55140 lst))))))
                          (op f55141 a55037)))))
                 (car f55142 lst))))))
      (null? f55143 lst)))
  (define (drop kont55144 lst n)
    (let ((a55043 '0))
      (let ((f55147
             (lambda (a55044)
               (if a55044
                 (kont55144 lst)
                 (let ((f55146
                        (lambda (a55045)
                          (let ((a55046 '1))
                            (let ((f55145
                                   (lambda (a55047)
                                     (drop kont55144 a55045 a55047))))
                              (- f55145 n a55046))))))
                   (cdr f55146 lst))))))
        (= f55147 n a55043))))
  (define (foldr kont55148 proc acc lst)
    (let ((f55152
           (lambda (a55048)
             (if a55048
               (kont55148 acc)
               (let ((f55151
                      (lambda (a55049)
                        (let ((f55150
                               (lambda (a55050)
                                 (let ((f55149
                                        (lambda (a55051)
                                          (proc kont55148 a55049 a55051))))
                                   (foldr f55149 proc acc a55050)))))
                          (cdr f55150 lst)))))
                 (car f55151 lst))))))
      (null? f55152 lst)))
  (define (append kont55153 lst1 lst2)
    (let ((f55157
           (lambda (a55052)
             (if a55052
               (kont55153 lst2)
               (let ((f55156
                      (lambda (a55053)
                        (let ((f55155
                               (lambda (a55054)
                                 (let ((f55154
                                        (lambda (a55055)
                                          (cons kont55153 a55053 a55055))))
                                   (append f55154 a55054 lst2)))))
                          (cdr f55155 lst1)))))
                 (car f55156 lst1))))))
      (null? f55157 lst1)))
  (define (hash . lst)
    (let ((kont55158 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55056 (apply-prim hash lst))) (kont55158 x55056)))))
  (define (hash-ref kont55160 h k)
    (let ((x55057 (prim hash-ref h k))) (kont55160 x55057)))
  (define (hash-set kont55161 h k v)
    (let ((x55058 (prim hash-set h k v))) (kont55161 x55058)))
  (define (hash-has-key? kont55162 h k)
    (let ((x55059 (prim hash-has-key? h k))) (kont55162 x55059)))
  (define (hash-count kont55163 h)
    (let ((x55060 (prim hash-count h))) (kont55163 x55060)))
  (define (call kont55164)
    (let ((a55061 '100))
      (let ((a55062 '90))
        (let ((a55063 '80))
          (let ((a55064 '70))
            (let ((a55065 '60))
              (>= kont55164 a55061 a55062 a55063 a55064 a55065)))))))
  (define (brouhaha_main kont55165)
    (let ((f55166 (lambda (x55066) (kont55165 x55066)))) (call f55166))))
