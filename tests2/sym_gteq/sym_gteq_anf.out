'((define (+ . lst)
    (let ((kont57043 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56954 (apply-prim + lst))) (kont57043 x56954)))))
  (define (- . lst)
    (let ((kont57045 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56955 (apply-prim - lst))) (kont57045 x56955)))))
  (define (* . lst)
    (let ((kont57047 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56956 (apply-prim * lst))) (kont57047 x56956)))))
  (define (modulo kont57049 a b)
    (let ((x56957 (prim modulo a b))) (kont57049 x56957)))
  (define (/ . lst)
    (let ((kont57050 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56958 (apply-prim / lst))) (kont57050 x56958)))))
  (define (= . lst)
    (let ((kont57052 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56959 (apply-prim = lst))) (kont57052 x56959)))))
  (define (> . lst)
    (let ((kont57054 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56960 (apply-prim > lst))) (kont57054 x56960)))))
  (define (< . lst)
    (let ((kont57056 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56961 (apply-prim < lst))) (kont57056 x56961)))))
  (define (<= . lst)
    (let ((kont57058 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56962 (apply-prim <= lst))) (kont57058 x56962)))))
  (define (>= . lst)
    (let ((kont57060 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x56963 (apply-prim >= lst))) (kont57060 x56963)))))
  (define (null? kont57062 x)
    (let ((x56964 (prim null? x))) (kont57062 x56964)))
  (define (equal? kont57063 x y)
    (let ((x56965 (prim equal? x y))) (kont57063 x56965)))
  (define (eq? kont57064 x y)
    (let ((x56966 (prim eq? x y))) (kont57064 x56966)))
  (define (cons kont57065 a b)
    (let ((x56967 (prim cons a b))) (kont57065 x56967)))
  (define (car kont57066 lst)
    (let ((x56968 (prim car lst))) (kont57066 x56968)))
  (define (cdr kont57067 lst)
    (let ((x56969 (prim cdr lst))) (kont57067 x56969)))
  (define (even? kont57068 x)
    (let ((a56970 '0))
      (let ((a56971 '2))
        (let ((f57069 (lambda (a56972) (equal? kont57068 a56970 a56972))))
          (modulo f57069 x a56971)))))
  (define (odd? kont57070 x)
    (let ((a56973 '1))
      (let ((a56974 '2))
        (let ((f57071 (lambda (a56975) (equal? kont57070 a56973 a56975))))
          (modulo f57071 x a56974)))))
  (define (list . x)
    (let ((kont57072 (prim car x))) (let ((x (prim cdr x))) (kont57072 x))))
  (define (member? kont57074 x lst)
    (let ((f57078
           (lambda (a56976)
             (if a56976
               (let ((x56977 '#f)) (kont57074 x56977))
               (let ((f57077
                      (lambda (a56978)
                        (let ((f57076
                               (lambda (a56979)
                                 (if a56979
                                   (let ((x56980 '#t)) (kont57074 x56980))
                                   (let ((f57075
                                          (lambda (a56981)
                                            (member? kont57074 x a56981))))
                                     (cdr f57075 lst))))))
                          (equal? f57076 a56978 x)))))
                 (car f57077 lst))))))
      (null? f57078 lst)))
  (define (foldl kont57079 fun acc lst)
    (let ((f57083
           (lambda (a56982)
             (if a56982
               (kont57079 acc)
               (let ((f57082
                      (lambda (a56983)
                        (let ((f57081
                               (lambda (a56984)
                                 (let ((f57080
                                        (lambda (a56985)
                                          (foldl
                                           kont57079
                                           fun
                                           a56984
                                           a56985))))
                                   (cdr f57080 lst)))))
                          (fun f57081 a56983 acc)))))
                 (car f57082 lst))))))
      (null? f57083 lst)))
  (define (reverse-helper kont57084 lst lst2)
    (let ((f57088
           (lambda (a56986)
             (if a56986
               (kont57084 lst2)
               (let ((f57087
                      (lambda (a56987)
                        (let ((f57086
                               (lambda (a56988)
                                 (let ((f57085
                                        (lambda (a56989)
                                          (reverse-helper
                                           kont57084
                                           a56987
                                           a56989))))
                                   (cons f57085 a56988 lst2)))))
                          (car f57086 lst)))))
                 (cdr f57087 lst))))))
      (null? f57088 lst)))
  (define (reverse kont57089 lst)
    (let ((f57090 (lambda (a56990) (reverse-helper kont57089 lst a56990))))
      (list f57090)))
  (define (take-helper kont57091 lst n lst2)
    (let ((a56991 '0))
      (let ((f57097
             (lambda (a56992)
               (if a56992
                 (let ((f57092 (lambda (x56993) (kont57091 x56993))))
                   (reverse f57092 lst2))
                 (let ((f57096
                        (lambda (a56994)
                          (let ((a56995 '1))
                            (let ((f57095
                                   (lambda (a56996)
                                     (let ((f57094
                                            (lambda (a56997)
                                              (let ((f57093
                                                     (lambda (a56998)
                                                       (take-helper
                                                        kont57091
                                                        a56994
                                                        a56996
                                                        a56998))))
                                                (cons f57093 a56997 lst2)))))
                                       (car f57094 lst)))))
                              (- f57095 n a56995))))))
                   (cdr f57096 lst))))))
        (= f57097 n a56991))))
  (define (take kont57098 lst n)
    (let ((f57099 (lambda (a56999) (take-helper kont57098 lst n a56999))))
      (list f57099)))
  (define (length kont57100 lst)
    (let ((f57103
           (lambda (a57000)
             (if a57000
               (let ((x57001 '0)) (kont57100 x57001))
               (let ((a57002 '1))
                 (let ((f57102
                        (lambda (a57003)
                          (let ((f57101
                                 (lambda (a57004)
                                   (+ kont57100 a57002 a57004))))
                            (length f57101 a57003)))))
                   (cdr f57102 lst)))))))
      (null? f57103 lst)))
  (define (map kont57104 proc lst)
    (let ((f57110
           (lambda (a57005)
             (if a57005
               (let ((f57105 (lambda (x57006) (kont57104 x57006))))
                 (list f57105))
               (let ((f57109
                      (lambda (a57007)
                        (let ((f57108
                               (lambda (a57008)
                                 (let ((f57107
                                        (lambda (a57009)
                                          (let ((f57106
                                                 (lambda (a57010)
                                                   (cons
                                                    kont57104
                                                    a57008
                                                    a57010))))
                                            (map f57106 proc a57009)))))
                                   (cdr f57107 lst)))))
                          (proc f57108 a57007)))))
                 (car f57109 lst))))))
      (null? f57110 lst)))
  (define (filter kont57111 op lst)
    (let ((f57119
           (lambda (a57011)
             (if a57011
               (let ((f57112 (lambda (x57012) (kont57111 x57012))))
                 (list f57112))
               (let ((f57118
                      (lambda (a57013)
                        (let ((f57117
                               (lambda (a57014)
                                 (if a57014
                                   (let ((f57115
                                          (lambda (a57015)
                                            (let ((f57114
                                                   (lambda (a57016)
                                                     (let ((f57113
                                                            (lambda (a57017)
                                                              (cons
                                                               kont57111
                                                               a57015
                                                               a57017))))
                                                       (filter
                                                        f57113
                                                        op
                                                        a57016)))))
                                              (cdr f57114 lst)))))
                                     (car f57115 lst))
                                   (let ((f57116
                                          (lambda (a57018)
                                            (filter kont57111 op a57018))))
                                     (cdr f57116 lst))))))
                          (op f57117 a57013)))))
                 (car f57118 lst))))))
      (null? f57119 lst)))
  (define (drop kont57120 lst n)
    (let ((a57019 '0))
      (let ((f57123
             (lambda (a57020)
               (if a57020
                 (kont57120 lst)
                 (let ((f57122
                        (lambda (a57021)
                          (let ((a57022 '1))
                            (let ((f57121
                                   (lambda (a57023)
                                     (drop kont57120 a57021 a57023))))
                              (- f57121 n a57022))))))
                   (cdr f57122 lst))))))
        (= f57123 n a57019))))
  (define (foldr kont57124 proc acc lst)
    (let ((f57128
           (lambda (a57024)
             (if a57024
               (kont57124 acc)
               (let ((f57127
                      (lambda (a57025)
                        (let ((f57126
                               (lambda (a57026)
                                 (let ((f57125
                                        (lambda (a57027)
                                          (proc kont57124 a57025 a57027))))
                                   (foldr f57125 proc acc a57026)))))
                          (cdr f57126 lst)))))
                 (car f57127 lst))))))
      (null? f57128 lst)))
  (define (append kont57129 lst1 lst2)
    (let ((f57133
           (lambda (a57028)
             (if a57028
               (kont57129 lst2)
               (let ((f57132
                      (lambda (a57029)
                        (let ((f57131
                               (lambda (a57030)
                                 (let ((f57130
                                        (lambda (a57031)
                                          (cons kont57129 a57029 a57031))))
                                   (append f57130 a57030 lst2)))))
                          (cdr f57131 lst1)))))
                 (car f57132 lst1))))))
      (null? f57133 lst1)))
  (define (hash . lst)
    (let ((kont57134 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57032 (apply-prim hash lst))) (kont57134 x57032)))))
  (define (hash-ref kont57136 h k)
    (let ((x57033 (prim hash-ref h k))) (kont57136 x57033)))
  (define (hash-set kont57137 h k v)
    (let ((x57034 (prim hash-set h k v))) (kont57137 x57034)))
  (define (hash-has-key? kont57138 h k)
    (let ((x57035 (prim hash-has-key? h k))) (kont57138 x57035)))
  (define (hash-count kont57139 h)
    (let ((x57036 (prim hash-count h))) (kont57139 x57036)))
  (define (call kont57140)
    (let ((a57037 '100))
      (let ((a57038 '90))
        (let ((a57039 '80))
          (let ((a57040 '70))
            (let ((a57041 '60))
              (>= kont57140 a57037 a57038 a57039 a57040 a57041)))))))
  (define (brouhaha_main kont57141)
    (let ((f57142 (lambda (x57042) (kont57141 x57042)))) (call f57142))))
