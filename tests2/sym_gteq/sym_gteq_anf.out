'((define (+ . lst)
    (let ((kont53507 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53418 (apply-prim + lst))) (kont53507 x53418)))))
  (define (- . lst)
    (let ((kont53509 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53419 (apply-prim - lst))) (kont53509 x53419)))))
  (define (* . lst)
    (let ((kont53511 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53420 (apply-prim * lst))) (kont53511 x53420)))))
  (define (modulo kont53513 a b)
    (let ((x53421 (prim modulo a b))) (kont53513 x53421)))
  (define (/ . lst)
    (let ((kont53514 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53422 (apply-prim / lst))) (kont53514 x53422)))))
  (define (= . lst)
    (let ((kont53516 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53423 (apply-prim = lst))) (kont53516 x53423)))))
  (define (> . lst)
    (let ((kont53518 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53424 (apply-prim > lst))) (kont53518 x53424)))))
  (define (< . lst)
    (let ((kont53520 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53425 (apply-prim < lst))) (kont53520 x53425)))))
  (define (<= . lst)
    (let ((kont53522 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53426 (apply-prim <= lst))) (kont53522 x53426)))))
  (define (>= . lst)
    (let ((kont53524 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53427 (apply-prim >= lst))) (kont53524 x53427)))))
  (define (null? kont53526 x)
    (let ((x53428 (prim null? x))) (kont53526 x53428)))
  (define (equal? kont53527 x y)
    (let ((x53429 (prim equal? x y))) (kont53527 x53429)))
  (define (eq? kont53528 x y)
    (let ((x53430 (prim eq? x y))) (kont53528 x53430)))
  (define (cons kont53529 a b)
    (let ((x53431 (prim cons a b))) (kont53529 x53431)))
  (define (car kont53530 lst)
    (let ((x53432 (prim car lst))) (kont53530 x53432)))
  (define (cdr kont53531 lst)
    (let ((x53433 (prim cdr lst))) (kont53531 x53433)))
  (define (even? kont53532 x)
    (let ((a53434 '0))
      (let ((a53435 '2))
        (let ((f53533 (lambda (a53436) (equal? kont53532 a53434 a53436))))
          (modulo f53533 x a53435)))))
  (define (odd? kont53534 x)
    (let ((a53437 '1))
      (let ((a53438 '2))
        (let ((f53535 (lambda (a53439) (equal? kont53534 a53437 a53439))))
          (modulo f53535 x a53438)))))
  (define (list . x)
    (let ((kont53536 (prim car x))) (let ((x (prim cdr x))) (kont53536 x))))
  (define (member? kont53538 x lst)
    (let ((f53542
           (lambda (a53440)
             (if a53440
               (let ((x53441 '#f)) (kont53538 x53441))
               (let ((f53541
                      (lambda (a53442)
                        (let ((f53540
                               (lambda (a53443)
                                 (if a53443
                                   (let ((x53444 '#t)) (kont53538 x53444))
                                   (let ((f53539
                                          (lambda (a53445)
                                            (member? kont53538 x a53445))))
                                     (cdr f53539 lst))))))
                          (equal? f53540 a53442 x)))))
                 (car f53541 lst))))))
      (null? f53542 lst)))
  (define (foldl kont53543 fun acc lst)
    (let ((f53547
           (lambda (a53446)
             (if a53446
               (kont53543 acc)
               (let ((f53546
                      (lambda (a53447)
                        (let ((f53545
                               (lambda (a53448)
                                 (let ((f53544
                                        (lambda (a53449)
                                          (foldl
                                           kont53543
                                           fun
                                           a53448
                                           a53449))))
                                   (cdr f53544 lst)))))
                          (fun f53545 a53447 acc)))))
                 (car f53546 lst))))))
      (null? f53547 lst)))
  (define (reverse-helper kont53548 lst lst2)
    (let ((f53552
           (lambda (a53450)
             (if a53450
               (kont53548 lst2)
               (let ((f53551
                      (lambda (a53451)
                        (let ((f53550
                               (lambda (a53452)
                                 (let ((f53549
                                        (lambda (a53453)
                                          (reverse-helper
                                           kont53548
                                           a53451
                                           a53453))))
                                   (cons f53549 a53452 lst2)))))
                          (car f53550 lst)))))
                 (cdr f53551 lst))))))
      (null? f53552 lst)))
  (define (reverse kont53553 lst)
    (let ((f53554 (lambda (a53454) (reverse-helper kont53553 lst a53454))))
      (list f53554)))
  (define (take-helper kont53555 lst n lst2)
    (let ((a53455 '0))
      (let ((f53561
             (lambda (a53456)
               (if a53456
                 (let ((f53556 (lambda (x53457) (kont53555 x53457))))
                   (reverse f53556 lst2))
                 (let ((f53560
                        (lambda (a53458)
                          (let ((a53459 '1))
                            (let ((f53559
                                   (lambda (a53460)
                                     (let ((f53558
                                            (lambda (a53461)
                                              (let ((f53557
                                                     (lambda (a53462)
                                                       (take-helper
                                                        kont53555
                                                        a53458
                                                        a53460
                                                        a53462))))
                                                (cons f53557 a53461 lst2)))))
                                       (car f53558 lst)))))
                              (- f53559 n a53459))))))
                   (cdr f53560 lst))))))
        (= f53561 n a53455))))
  (define (take kont53562 lst n)
    (let ((f53563 (lambda (a53463) (take-helper kont53562 lst n a53463))))
      (list f53563)))
  (define (length kont53564 lst)
    (let ((f53567
           (lambda (a53464)
             (if a53464
               (let ((x53465 '0)) (kont53564 x53465))
               (let ((a53466 '1))
                 (let ((f53566
                        (lambda (a53467)
                          (let ((f53565
                                 (lambda (a53468)
                                   (+ kont53564 a53466 a53468))))
                            (length f53565 a53467)))))
                   (cdr f53566 lst)))))))
      (null? f53567 lst)))
  (define (map kont53568 proc lst)
    (let ((f53574
           (lambda (a53469)
             (if a53469
               (let ((f53569 (lambda (x53470) (kont53568 x53470))))
                 (list f53569))
               (let ((f53573
                      (lambda (a53471)
                        (let ((f53572
                               (lambda (a53472)
                                 (let ((f53571
                                        (lambda (a53473)
                                          (let ((f53570
                                                 (lambda (a53474)
                                                   (cons
                                                    kont53568
                                                    a53472
                                                    a53474))))
                                            (map f53570 proc a53473)))))
                                   (cdr f53571 lst)))))
                          (proc f53572 a53471)))))
                 (car f53573 lst))))))
      (null? f53574 lst)))
  (define (filter kont53575 op lst)
    (let ((f53583
           (lambda (a53475)
             (if a53475
               (let ((f53576 (lambda (x53476) (kont53575 x53476))))
                 (list f53576))
               (let ((f53582
                      (lambda (a53477)
                        (let ((f53581
                               (lambda (a53478)
                                 (if a53478
                                   (let ((f53579
                                          (lambda (a53479)
                                            (let ((f53578
                                                   (lambda (a53480)
                                                     (let ((f53577
                                                            (lambda (a53481)
                                                              (cons
                                                               kont53575
                                                               a53479
                                                               a53481))))
                                                       (filter
                                                        f53577
                                                        op
                                                        a53480)))))
                                              (cdr f53578 lst)))))
                                     (car f53579 lst))
                                   (let ((f53580
                                          (lambda (a53482)
                                            (filter kont53575 op a53482))))
                                     (cdr f53580 lst))))))
                          (op f53581 a53477)))))
                 (car f53582 lst))))))
      (null? f53583 lst)))
  (define (drop kont53584 lst n)
    (let ((a53483 '0))
      (let ((f53587
             (lambda (a53484)
               (if a53484
                 (kont53584 lst)
                 (let ((f53586
                        (lambda (a53485)
                          (let ((a53486 '1))
                            (let ((f53585
                                   (lambda (a53487)
                                     (drop kont53584 a53485 a53487))))
                              (- f53585 n a53486))))))
                   (cdr f53586 lst))))))
        (= f53587 n a53483))))
  (define (foldr kont53588 proc acc lst)
    (let ((f53592
           (lambda (a53488)
             (if a53488
               (kont53588 acc)
               (let ((f53591
                      (lambda (a53489)
                        (let ((f53590
                               (lambda (a53490)
                                 (let ((f53589
                                        (lambda (a53491)
                                          (proc kont53588 a53489 a53491))))
                                   (foldr f53589 proc acc a53490)))))
                          (cdr f53590 lst)))))
                 (car f53591 lst))))))
      (null? f53592 lst)))
  (define (append kont53593 lst1 lst2)
    (let ((f53597
           (lambda (a53492)
             (if a53492
               (kont53593 lst2)
               (let ((f53596
                      (lambda (a53493)
                        (let ((f53595
                               (lambda (a53494)
                                 (let ((f53594
                                        (lambda (a53495)
                                          (cons kont53593 a53493 a53495))))
                                   (append f53594 a53494 lst2)))))
                          (cdr f53595 lst1)))))
                 (car f53596 lst1))))))
      (null? f53597 lst1)))
  (define (hash . lst)
    (let ((kont53598 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53496 (apply-prim hash lst))) (kont53598 x53496)))))
  (define (hash-ref kont53600 h k)
    (let ((x53497 (prim hash-ref h k))) (kont53600 x53497)))
  (define (hash-set kont53601 h k v)
    (let ((x53498 (prim hash-set h k v))) (kont53601 x53498)))
  (define (hash-has-key? kont53602 h k)
    (let ((x53499 (prim hash-has-key? h k))) (kont53602 x53499)))
  (define (hash-count kont53603 h)
    (let ((x53500 (prim hash-count h))) (kont53603 x53500)))
  (define (call kont53604)
    (let ((a53501 '100))
      (let ((a53502 '90))
        (let ((a53503 '80))
          (let ((a53504 '70))
            (let ((a53505 '60))
              (>= kont53604 a53501 a53502 a53503 a53504 a53505)))))))
  (define (brouhaha_main kont53605)
    (let ((f53606 (lambda (x53506) (kont53605 x53506)))) (call f53606))))
