'((define (+ . lst) (let ((x54978 (apply-prim + lst))) x54978))
  (define (- . lst) (let ((x54979 (apply-prim - lst))) x54979))
  (define (* . lst) (let ((x54980 (apply-prim * lst))) x54980))
  (define (modulo a b) (let ((x54981 (prim modulo a b))) x54981))
  (define (/ . lst) (let ((x54982 (apply-prim / lst))) x54982))
  (define (= . lst) (let ((x54983 (apply-prim = lst))) x54983))
  (define (> . lst) (let ((x54984 (apply-prim > lst))) x54984))
  (define (< . lst) (let ((x54985 (apply-prim < lst))) x54985))
  (define (<= . lst) (let ((x54986 (apply-prim <= lst))) x54986))
  (define (>= . lst) (let ((x54987 (apply-prim >= lst))) x54987))
  (define (null? x) (let ((x54988 (prim null? x))) x54988))
  (define (equal? x y) (let ((x54989 (prim equal? x y))) x54989))
  (define (eq? x y) (let ((x54990 (prim eq? x y))) x54990))
  (define (cons a b) (let ((x54991 (prim cons a b))) x54991))
  (define (car lst) (let ((x54992 (prim car lst))) x54992))
  (define (cdr lst) (let ((x54993 (prim cdr lst))) x54993))
  (define (even? x)
    (let ((a54994 '0))
      (let ((a54995 '2))
        (let ((a54996 (modulo x a54995))) (equal? a54994 a54996)))))
  (define (odd? x)
    (let ((a54997 '1))
      (let ((a54998 '2))
        (let ((a54999 (modulo x a54998))) (equal? a54997 a54999)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a55000 (null? lst)))
      (if a55000
        (let ((x55001 '#f)) x55001)
        (let ((a55002 (car lst)))
          (let ((a55003 (equal? a55002 x)))
            (if a55003
              (let ((x55004 '#t)) x55004)
              (let ((a55005 (cdr lst))) (member? x a55005))))))))
  (define (foldl fun acc lst)
    (let ((a55006 (null? lst)))
      (if a55006
        acc
        (let ((a55007 (car lst)))
          (let ((a55008 (fun a55007 acc)))
            (let ((a55009 (cdr lst))) (foldl fun a55008 a55009)))))))
  (define (reverse-helper lst lst2)
    (let ((a55010 (null? lst)))
      (if a55010
        lst2
        (let ((a55011 (cdr lst)))
          (let ((a55012 (car lst)))
            (let ((a55013 (cons a55012 lst2)))
              (reverse-helper a55011 a55013)))))))
  (define (reverse lst) (let ((a55014 (list))) (reverse-helper lst a55014)))
  (define (take-helper lst n lst2)
    (let ((a55015 '0))
      (let ((a55016 (= n a55015)))
        (if a55016
          (let ((x55017 (reverse lst2))) x55017)
          (let ((a55018 (cdr lst)))
            (let ((a55019 '1))
              (let ((a55020 (- n a55019)))
                (let ((a55021 (car lst)))
                  (let ((a55022 (cons a55021 lst2)))
                    (take-helper a55018 a55020 a55022))))))))))
  (define (take lst n) (let ((a55023 (list))) (take-helper lst n a55023)))
  (define (length lst)
    (let ((a55024 (null? lst)))
      (if a55024
        (let ((x55025 '0)) x55025)
        (let ((a55026 '1))
          (let ((a55027 (cdr lst)))
            (let ((a55028 (length a55027))) (+ a55026 a55028)))))))
  (define (map proc lst)
    (let ((a55029 (null? lst)))
      (if a55029
        (let ((x55030 (list))) x55030)
        (let ((a55031 (car lst)))
          (let ((a55032 (proc a55031)))
            (let ((a55033 (cdr lst)))
              (let ((a55034 (map proc a55033))) (cons a55032 a55034))))))))
  (define (filter op lst)
    (let ((a55035 (null? lst)))
      (if a55035
        (let ((x55036 (list))) x55036)
        (let ((a55037 (car lst)))
          (let ((a55038 (op a55037)))
            (if a55038
              (let ((a55039 (car lst)))
                (let ((a55040 (cdr lst)))
                  (let ((a55041 (filter op a55040))) (cons a55039 a55041))))
              (let ((a55042 (cdr lst))) (filter op a55042))))))))
  (define (drop lst n)
    (let ((a55043 '0))
      (let ((a55044 (= n a55043)))
        (if a55044
          lst
          (let ((a55045 (cdr lst)))
            (let ((a55046 '1))
              (let ((a55047 (- n a55046))) (drop a55045 a55047))))))))
  (define (foldr proc acc lst)
    (let ((a55048 (null? lst)))
      (if a55048
        acc
        (let ((a55049 (car lst)))
          (let ((a55050 (cdr lst)))
            (let ((a55051 (foldr proc acc a55050))) (proc a55049 a55051)))))))
  (define (append lst1 lst2)
    (let ((a55052 (null? lst1)))
      (if a55052
        lst2
        (let ((a55053 (car lst1)))
          (let ((a55054 (cdr lst1)))
            (let ((a55055 (append a55054 lst2))) (cons a55053 a55055)))))))
  (define (hash . lst) (let ((x55056 (apply-prim hash lst))) x55056))
  (define (hash-ref h k) (let ((x55057 (prim hash-ref h k))) x55057))
  (define (hash-set h k v) (let ((x55058 (prim hash-set h k v))) x55058))
  (define (hash-has-key? h k) (let ((x55059 (prim hash-has-key? h k))) x55059))
  (define (hash-count h) (let ((x55060 (prim hash-count h))) x55060))
  (define (call)
    (let ((a55061 '100))
      (let ((a55062 '90))
        (let ((a55063 '80))
          (let ((a55064 '70))
            (let ((a55065 '60)) (>= a55061 a55062 a55063 a55064 a55065)))))))
  (define (brouhaha_main) (let ((x55066 (call))) x55066)))
