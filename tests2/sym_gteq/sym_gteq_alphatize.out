'((define (+ . lst) (let ((x56954 (apply-prim + lst))) x56954))
  (define (- . lst) (let ((x56955 (apply-prim - lst))) x56955))
  (define (* . lst) (let ((x56956 (apply-prim * lst))) x56956))
  (define (modulo a b) (let ((x56957 (prim modulo a b))) x56957))
  (define (/ . lst) (let ((x56958 (apply-prim / lst))) x56958))
  (define (= . lst) (let ((x56959 (apply-prim = lst))) x56959))
  (define (> . lst) (let ((x56960 (apply-prim > lst))) x56960))
  (define (< . lst) (let ((x56961 (apply-prim < lst))) x56961))
  (define (<= . lst) (let ((x56962 (apply-prim <= lst))) x56962))
  (define (>= . lst) (let ((x56963 (apply-prim >= lst))) x56963))
  (define (null? x) (let ((x56964 (prim null? x))) x56964))
  (define (equal? x y) (let ((x56965 (prim equal? x y))) x56965))
  (define (eq? x y) (let ((x56966 (prim eq? x y))) x56966))
  (define (cons a b) (let ((x56967 (prim cons a b))) x56967))
  (define (car lst) (let ((x56968 (prim car lst))) x56968))
  (define (cdr lst) (let ((x56969 (prim cdr lst))) x56969))
  (define (even? x)
    (let ((a56970 '0))
      (let ((a56971 '2))
        (let ((a56972 (modulo x a56971))) (equal? a56970 a56972)))))
  (define (odd? x)
    (let ((a56973 '1))
      (let ((a56974 '2))
        (let ((a56975 (modulo x a56974))) (equal? a56973 a56975)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a56976 (null? lst)))
      (if a56976
        (let ((x56977 '#f)) x56977)
        (let ((a56978 (car lst)))
          (let ((a56979 (equal? a56978 x)))
            (if a56979
              (let ((x56980 '#t)) x56980)
              (let ((a56981 (cdr lst))) (member? x a56981))))))))
  (define (foldl fun acc lst)
    (let ((a56982 (null? lst)))
      (if a56982
        acc
        (let ((a56983 (car lst)))
          (let ((a56984 (fun a56983 acc)))
            (let ((a56985 (cdr lst))) (foldl fun a56984 a56985)))))))
  (define (reverse-helper lst lst2)
    (let ((a56986 (null? lst)))
      (if a56986
        lst2
        (let ((a56987 (cdr lst)))
          (let ((a56988 (car lst)))
            (let ((a56989 (cons a56988 lst2)))
              (reverse-helper a56987 a56989)))))))
  (define (reverse lst) (let ((a56990 (list))) (reverse-helper lst a56990)))
  (define (take-helper lst n lst2)
    (let ((a56991 '0))
      (let ((a56992 (= n a56991)))
        (if a56992
          (let ((x56993 (reverse lst2))) x56993)
          (let ((a56994 (cdr lst)))
            (let ((a56995 '1))
              (let ((a56996 (- n a56995)))
                (let ((a56997 (car lst)))
                  (let ((a56998 (cons a56997 lst2)))
                    (take-helper a56994 a56996 a56998))))))))))
  (define (take lst n) (let ((a56999 (list))) (take-helper lst n a56999)))
  (define (length lst)
    (let ((a57000 (null? lst)))
      (if a57000
        (let ((x57001 '0)) x57001)
        (let ((a57002 '1))
          (let ((a57003 (cdr lst)))
            (let ((a57004 (length a57003))) (+ a57002 a57004)))))))
  (define (map proc lst)
    (let ((a57005 (null? lst)))
      (if a57005
        (let ((x57006 (list))) x57006)
        (let ((a57007 (car lst)))
          (let ((a57008 (proc a57007)))
            (let ((a57009 (cdr lst)))
              (let ((a57010 (map proc a57009))) (cons a57008 a57010))))))))
  (define (filter op lst)
    (let ((a57011 (null? lst)))
      (if a57011
        (let ((x57012 (list))) x57012)
        (let ((a57013 (car lst)))
          (let ((a57014 (op a57013)))
            (if a57014
              (let ((a57015 (car lst)))
                (let ((a57016 (cdr lst)))
                  (let ((a57017 (filter op a57016))) (cons a57015 a57017))))
              (let ((a57018 (cdr lst))) (filter op a57018))))))))
  (define (drop lst n)
    (let ((a57019 '0))
      (let ((a57020 (= n a57019)))
        (if a57020
          lst
          (let ((a57021 (cdr lst)))
            (let ((a57022 '1))
              (let ((a57023 (- n a57022))) (drop a57021 a57023))))))))
  (define (foldr proc acc lst)
    (let ((a57024 (null? lst)))
      (if a57024
        acc
        (let ((a57025 (car lst)))
          (let ((a57026 (cdr lst)))
            (let ((a57027 (foldr proc acc a57026))) (proc a57025 a57027)))))))
  (define (append lst1 lst2)
    (let ((a57028 (null? lst1)))
      (if a57028
        lst2
        (let ((a57029 (car lst1)))
          (let ((a57030 (cdr lst1)))
            (let ((a57031 (append a57030 lst2))) (cons a57029 a57031)))))))
  (define (hash . lst) (let ((x57032 (apply-prim hash lst))) x57032))
  (define (hash-ref h k) (let ((x57033 (prim hash-ref h k))) x57033))
  (define (hash-set h k v) (let ((x57034 (prim hash-set h k v))) x57034))
  (define (hash-has-key? h k) (let ((x57035 (prim hash-has-key? h k))) x57035))
  (define (hash-count h) (let ((x57036 (prim hash-count h))) x57036))
  (define (call)
    (let ((a57037 '100))
      (let ((a57038 '90))
        (let ((a57039 '80))
          (let ((a57040 '70))
            (let ((a57041 '60)) (>= a57037 a57038 a57039 a57040 a57041)))))))
  (define (brouhaha_main) (let ((x57042 (call))) x57042)))
