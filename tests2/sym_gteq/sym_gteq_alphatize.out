'((define (+ . lst) (let ((x53418 (apply-prim + lst))) x53418))
  (define (- . lst) (let ((x53419 (apply-prim - lst))) x53419))
  (define (* . lst) (let ((x53420 (apply-prim * lst))) x53420))
  (define (modulo a b) (let ((x53421 (prim modulo a b))) x53421))
  (define (/ . lst) (let ((x53422 (apply-prim / lst))) x53422))
  (define (= . lst) (let ((x53423 (apply-prim = lst))) x53423))
  (define (> . lst) (let ((x53424 (apply-prim > lst))) x53424))
  (define (< . lst) (let ((x53425 (apply-prim < lst))) x53425))
  (define (<= . lst) (let ((x53426 (apply-prim <= lst))) x53426))
  (define (>= . lst) (let ((x53427 (apply-prim >= lst))) x53427))
  (define (null? x) (let ((x53428 (prim null? x))) x53428))
  (define (equal? x y) (let ((x53429 (prim equal? x y))) x53429))
  (define (eq? x y) (let ((x53430 (prim eq? x y))) x53430))
  (define (cons a b) (let ((x53431 (prim cons a b))) x53431))
  (define (car lst) (let ((x53432 (prim car lst))) x53432))
  (define (cdr lst) (let ((x53433 (prim cdr lst))) x53433))
  (define (even? x)
    (let ((a53434 '0))
      (let ((a53435 '2))
        (let ((a53436 (modulo x a53435))) (equal? a53434 a53436)))))
  (define (odd? x)
    (let ((a53437 '1))
      (let ((a53438 '2))
        (let ((a53439 (modulo x a53438))) (equal? a53437 a53439)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a53440 (null? lst)))
      (if a53440
        (let ((x53441 '#f)) x53441)
        (let ((a53442 (car lst)))
          (let ((a53443 (equal? a53442 x)))
            (if a53443
              (let ((x53444 '#t)) x53444)
              (let ((a53445 (cdr lst))) (member? x a53445))))))))
  (define (foldl fun acc lst)
    (let ((a53446 (null? lst)))
      (if a53446
        acc
        (let ((a53447 (car lst)))
          (let ((a53448 (fun a53447 acc)))
            (let ((a53449 (cdr lst))) (foldl fun a53448 a53449)))))))
  (define (reverse-helper lst lst2)
    (let ((a53450 (null? lst)))
      (if a53450
        lst2
        (let ((a53451 (cdr lst)))
          (let ((a53452 (car lst)))
            (let ((a53453 (cons a53452 lst2)))
              (reverse-helper a53451 a53453)))))))
  (define (reverse lst) (let ((a53454 (list))) (reverse-helper lst a53454)))
  (define (take-helper lst n lst2)
    (let ((a53455 '0))
      (let ((a53456 (= n a53455)))
        (if a53456
          (let ((x53457 (reverse lst2))) x53457)
          (let ((a53458 (cdr lst)))
            (let ((a53459 '1))
              (let ((a53460 (- n a53459)))
                (let ((a53461 (car lst)))
                  (let ((a53462 (cons a53461 lst2)))
                    (take-helper a53458 a53460 a53462))))))))))
  (define (take lst n) (let ((a53463 (list))) (take-helper lst n a53463)))
  (define (length lst)
    (let ((a53464 (null? lst)))
      (if a53464
        (let ((x53465 '0)) x53465)
        (let ((a53466 '1))
          (let ((a53467 (cdr lst)))
            (let ((a53468 (length a53467))) (+ a53466 a53468)))))))
  (define (map proc lst)
    (let ((a53469 (null? lst)))
      (if a53469
        (let ((x53470 (list))) x53470)
        (let ((a53471 (car lst)))
          (let ((a53472 (proc a53471)))
            (let ((a53473 (cdr lst)))
              (let ((a53474 (map proc a53473))) (cons a53472 a53474))))))))
  (define (filter op lst)
    (let ((a53475 (null? lst)))
      (if a53475
        (let ((x53476 (list))) x53476)
        (let ((a53477 (car lst)))
          (let ((a53478 (op a53477)))
            (if a53478
              (let ((a53479 (car lst)))
                (let ((a53480 (cdr lst)))
                  (let ((a53481 (filter op a53480))) (cons a53479 a53481))))
              (let ((a53482 (cdr lst))) (filter op a53482))))))))
  (define (drop lst n)
    (let ((a53483 '0))
      (let ((a53484 (= n a53483)))
        (if a53484
          lst
          (let ((a53485 (cdr lst)))
            (let ((a53486 '1))
              (let ((a53487 (- n a53486))) (drop a53485 a53487))))))))
  (define (foldr proc acc lst)
    (let ((a53488 (null? lst)))
      (if a53488
        acc
        (let ((a53489 (car lst)))
          (let ((a53490 (cdr lst)))
            (let ((a53491 (foldr proc acc a53490))) (proc a53489 a53491)))))))
  (define (append lst1 lst2)
    (let ((a53492 (null? lst1)))
      (if a53492
        lst2
        (let ((a53493 (car lst1)))
          (let ((a53494 (cdr lst1)))
            (let ((a53495 (append a53494 lst2))) (cons a53493 a53495)))))))
  (define (hash . lst) (let ((x53496 (apply-prim hash lst))) x53496))
  (define (hash-ref h k) (let ((x53497 (prim hash-ref h k))) x53497))
  (define (hash-set h k v) (let ((x53498 (prim hash-set h k v))) x53498))
  (define (hash-has-key? h k) (let ((x53499 (prim hash-has-key? h k))) x53499))
  (define (hash-count h) (let ((x53500 (prim hash-count h))) x53500))
  (define (call)
    (let ((a53501 '100))
      (let ((a53502 '90))
        (let ((a53503 '80))
          (let ((a53504 '70))
            (let ((a53505 '60)) (>= a53501 a53502 a53503 a53504 a53505)))))))
  (define (brouhaha_main) (let ((x53506 (call))) x53506)))
