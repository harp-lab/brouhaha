'((define (+ . lst) (let ((x56093 (apply-prim + lst))) x56093))
  (define (- . lst) (let ((x56094 (apply-prim - lst))) x56094))
  (define (* . lst) (let ((x56095 (apply-prim * lst))) x56095))
  (define (modulo a b) (let ((x56096 (prim modulo a b))) x56096))
  (define (/ . lst) (let ((x56097 (apply-prim / lst))) x56097))
  (define (= . lst) (let ((x56098 (apply-prim = lst))) x56098))
  (define (> . lst) (let ((x56099 (apply-prim > lst))) x56099))
  (define (< . lst) (let ((x56100 (apply-prim < lst))) x56100))
  (define (<= . lst) (let ((x56101 (apply-prim <= lst))) x56101))
  (define (>= . lst) (let ((x56102 (apply-prim >= lst))) x56102))
  (define (null? x) (let ((x56103 (prim null? x))) x56103))
  (define (equal? x y) (let ((x56104 (prim equal? x y))) x56104))
  (define (eq? x y) (let ((x56105 (prim eq? x y))) x56105))
  (define (cons a b) (let ((x56106 (prim cons a b))) x56106))
  (define (car lst) (let ((x56107 (prim car lst))) x56107))
  (define (cdr lst) (let ((x56108 (prim cdr lst))) x56108))
  (define (even? x)
    (let ((a56109 '0))
      (let ((a56110 '2))
        (let ((a56111 (modulo x a56110))) (equal? a56109 a56111)))))
  (define (odd? x)
    (let ((a56112 '1))
      (let ((a56113 '2))
        (let ((a56114 (modulo x a56113))) (equal? a56112 a56114)))))
  (define (list . x) x)
  (define (and . lst) (let ((x56115 (apply-prim and lst))) x56115))
  (define (or . lst) (let ((x56116 (apply-prim or lst))) x56116))
  (define (member? x lst)
    (let ((a56117 (null? lst)))
      (if a56117
        (let ((x56118 '#f)) x56118)
        (let ((a56119 (car lst)))
          (let ((a56120 (equal? a56119 x)))
            (if a56120
              (let ((x56121 '#t)) x56121)
              (let ((a56122 (cdr lst))) (member? x a56122))))))))
  (define (foldl fun acc lst)
    (let ((a56123 (null? lst)))
      (if a56123
        acc
        (let ((a56124 (car lst)))
          (let ((a56125 (fun a56124 acc)))
            (let ((a56126 (cdr lst))) (foldl fun a56125 a56126)))))))
  (define (reverse-helper lst lst2)
    (let ((a56127 (null? lst)))
      (if a56127
        lst2
        (let ((a56128 (cdr lst)))
          (let ((a56129 (car lst)))
            (let ((a56130 (cons a56129 lst2)))
              (reverse-helper a56128 a56130)))))))
  (define (reverse lst) (let ((a56131 (list))) (reverse-helper lst a56131)))
  (define (take-helper lst n lst2)
    (let ((a56132 '0))
      (let ((a56133 (= n a56132)))
        (if a56133
          (let ((x56134 (reverse lst2))) x56134)
          (let ((a56135 (cdr lst)))
            (let ((a56136 '1))
              (let ((a56137 (- n a56136)))
                (let ((a56138 (car lst)))
                  (let ((a56139 (cons a56138 lst2)))
                    (take-helper a56135 a56137 a56139))))))))))
  (define (take lst n) (let ((a56140 (list))) (take-helper lst n a56140)))
  (define (length lst)
    (let ((a56141 (null? lst)))
      (if a56141
        (let ((x56142 '0)) x56142)
        (let ((a56143 '1))
          (let ((a56144 (cdr lst)))
            (let ((a56145 (length a56144))) (+ a56143 a56145)))))))
  (define (map proc lst)
    (let ((a56146 (null? lst)))
      (if a56146
        (let ((x56147 (list))) x56147)
        (let ((a56148 (car lst)))
          (let ((a56149 (proc a56148)))
            (let ((a56150 (cdr lst)))
              (let ((a56151 (map proc a56150))) (cons a56149 a56151))))))))
  (define (filter op lst)
    (let ((a56152 (null? lst)))
      (if a56152
        (let ((x56153 (list))) x56153)
        (let ((a56154 (car lst)))
          (let ((a56155 (op a56154)))
            (if a56155
              (let ((a56156 (car lst)))
                (let ((a56157 (cdr lst)))
                  (let ((a56158 (filter op a56157))) (cons a56156 a56158))))
              (let ((a56159 (cdr lst))) (filter op a56159))))))))
  (define (drop lst n)
    (let ((a56160 '0))
      (let ((a56161 (= n a56160)))
        (if a56161
          lst
          (let ((a56162 (cdr lst)))
            (let ((a56163 '1))
              (let ((a56164 (- n a56163))) (drop a56162 a56164))))))))
  (define (foldr proc acc lst)
    (let ((a56165 (null? lst)))
      (if a56165
        acc
        (let ((a56166 (car lst)))
          (let ((a56167 (cdr lst)))
            (let ((a56168 (foldr proc acc a56167))) (proc a56166 a56168)))))))
  (define (append lst1 lst2)
    (let ((a56169 (null? lst1)))
      (if a56169
        lst2
        (let ((a56170 (car lst1)))
          (let ((a56171 (cdr lst1)))
            (let ((a56172 (append a56171 lst2))) (cons a56170 a56172)))))))
  (define (hash . lst) (let ((x56173 (apply-prim hash lst))) x56173))
  (define (hash-ref h k) (let ((x56174 (prim hash-ref h k))) x56174))
  (define (hash-set h k v) (let ((x56175 (prim hash-set h k v))) x56175))
  (define (hash-has-key? h k) (let ((x56176 (prim hash-has-key? h k))) x56176))
  (define (hash-count h) (let ((x56177 (prim hash-count h))) x56177))
  (define (call)
    (let ((a56178 '100))
      (let ((a56179 '90))
        (let ((a56180 '80))
          (let ((a56181 '70))
            (let ((a56182 '60)) (>= a56178 a56179 a56180 a56181 a56182)))))))
  (define (brouhaha_main) (let ((x56183 (call))) x56183)))
