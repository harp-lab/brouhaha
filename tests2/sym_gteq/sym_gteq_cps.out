'((define (+ . lst)
    (let ((kont5618456288 (prim car lst)))
      (let ((lst56289 (prim cdr lst)))
        (let ((x5609356290 (apply-prim + lst56289)))
          (kont5618456288 x5609356290)))))
  (define (- . lst)
    (let ((kont5618656291 (prim car lst)))
      (let ((lst56292 (prim cdr lst)))
        (let ((x5609456293 (apply-prim - lst56292)))
          (kont5618656291 x5609456293)))))
  (define (* . lst)
    (let ((kont5618856294 (prim car lst)))
      (let ((lst56295 (prim cdr lst)))
        (let ((x5609556296 (apply-prim * lst56295)))
          (kont5618856294 x5609556296)))))
  (define (modulo kont56190 a b)
    (let ((x5609656297 (prim modulo a b))) (kont56190 x5609656297)))
  (define (/ . lst)
    (let ((kont5619156298 (prim car lst)))
      (let ((lst56299 (prim cdr lst)))
        (let ((x5609756300 (apply-prim / lst56299)))
          (kont5619156298 x5609756300)))))
  (define (= . lst)
    (let ((kont5619356301 (prim car lst)))
      (let ((lst56302 (prim cdr lst)))
        (let ((x5609856303 (apply-prim = lst56302)))
          (kont5619356301 x5609856303)))))
  (define (> . lst)
    (let ((kont5619556304 (prim car lst)))
      (let ((lst56305 (prim cdr lst)))
        (let ((x5609956306 (apply-prim > lst56305)))
          (kont5619556304 x5609956306)))))
  (define (< . lst)
    (let ((kont5619756307 (prim car lst)))
      (let ((lst56308 (prim cdr lst)))
        (let ((x5610056309 (apply-prim < lst56308)))
          (kont5619756307 x5610056309)))))
  (define (<= . lst)
    (let ((kont5619956310 (prim car lst)))
      (let ((lst56311 (prim cdr lst)))
        (let ((x5610156312 (apply-prim <= lst56311)))
          (kont5619956310 x5610156312)))))
  (define (>= . lst)
    (let ((kont5620156313 (prim car lst)))
      (let ((lst56314 (prim cdr lst)))
        (let ((x5610256315 (apply-prim >= lst56314)))
          (kont5620156313 x5610256315)))))
  (define (null? kont56203 x)
    (let ((x5610356316 (prim null? x))) (kont56203 x5610356316)))
  (define (equal? kont56204 x y)
    (let ((x5610456317 (prim equal? x y))) (kont56204 x5610456317)))
  (define (eq? kont56205 x y)
    (let ((x5610556318 (prim eq? x y))) (kont56205 x5610556318)))
  (define (cons kont56206 a b)
    (let ((x5610656319 (prim cons a b))) (kont56206 x5610656319)))
  (define (car kont56207 lst)
    (let ((x5610756320 (prim car lst))) (kont56207 x5610756320)))
  (define (cdr kont56208 lst)
    (let ((x5610856321 (prim cdr lst))) (kont56208 x5610856321)))
  (define (even? kont56209 x)
    (let ((a5610956322 '0))
      (let ((a5611056323 '2))
        (let ((f5621056324
               (lambda (a5611156325)
                 (equal? kont56209 a5610956322 a5611156325))))
          (modulo f5621056324 x a5611056323)))))
  (define (odd? kont56211 x)
    (let ((a5611256326 '1))
      (let ((a5611356327 '2))
        (let ((f5621256328
               (lambda (a5611456329)
                 (equal? kont56211 a5611256326 a5611456329))))
          (modulo f5621256328 x a5611356327)))))
  (define (list . x)
    (let ((kont5621356330 (prim car x)))
      (let ((x56331 (prim cdr x))) (kont5621356330 x56331))))
  (define (and . lst)
    (let ((kont5621556332 (prim car lst)))
      (let ((lst56333 (prim cdr lst)))
        (let ((x5611556334 (apply-prim and lst56333)))
          (kont5621556332 x5611556334)))))
  (define (or . lst)
    (let ((kont5621756335 (prim car lst)))
      (let ((lst56336 (prim cdr lst)))
        (let ((x5611656337 (apply-prim or lst56336)))
          (kont5621756335 x5611656337)))))
  (define (member? kont56219 x lst)
    (let ((f5622356338
           (lambda (a5611756339)
             (if a5611756339
               (let ((x5611856340 '#f)) (kont56219 x5611856340))
               (let ((f5622256341
                      (lambda (a5611956342)
                        (let ((f5622156343
                               (lambda (a5612056344)
                                 (if a5612056344
                                   (let ((x5612156345 '#t))
                                     (kont56219 x5612156345))
                                   (let ((f5622056346
                                          (lambda (a5612256347)
                                            (member?
                                             kont56219
                                             x
                                             a5612256347))))
                                     (cdr f5622056346 lst))))))
                          (equal? f5622156343 a5611956342 x)))))
                 (car f5622256341 lst))))))
      (null? f5622356338 lst)))
  (define (foldl kont56224 fun acc lst)
    (let ((f5622856348
           (lambda (a5612356349)
             (if a5612356349
               (kont56224 acc)
               (let ((f5622756350
                      (lambda (a5612456351)
                        (let ((f5622656352
                               (lambda (a5612556353)
                                 (let ((f5622556354
                                        (lambda (a5612656355)
                                          (foldl
                                           kont56224
                                           fun
                                           a5612556353
                                           a5612656355))))
                                   (cdr f5622556354 lst)))))
                          (fun f5622656352 a5612456351 acc)))))
                 (car f5622756350 lst))))))
      (null? f5622856348 lst)))
  (define (reverse-helper kont56229 lst lst2)
    (let ((f5623356356
           (lambda (a5612756357)
             (if a5612756357
               (kont56229 lst2)
               (let ((f5623256358
                      (lambda (a5612856359)
                        (let ((f5623156360
                               (lambda (a5612956361)
                                 (let ((f5623056362
                                        (lambda (a5613056363)
                                          (reverse-helper
                                           kont56229
                                           a5612856359
                                           a5613056363))))
                                   (cons f5623056362 a5612956361 lst2)))))
                          (car f5623156360 lst)))))
                 (cdr f5623256358 lst))))))
      (null? f5623356356 lst)))
  (define (reverse kont56234 lst)
    (let ((f5623556364
           (lambda (a5613156365) (reverse-helper kont56234 lst a5613156365))))
      (list f5623556364)))
  (define (take-helper kont56236 lst n lst2)
    (let ((a5613256366 '0))
      (let ((f5624256367
             (lambda (a5613356368)
               (if a5613356368
                 (let ((f5623756369
                        (lambda (x5613456370) (kont56236 x5613456370))))
                   (reverse f5623756369 lst2))
                 (let ((f5624156371
                        (lambda (a5613556372)
                          (let ((a5613656373 '1))
                            (let ((f5624056374
                                   (lambda (a5613756375)
                                     (let ((f5623956376
                                            (lambda (a5613856377)
                                              (let ((f5623856378
                                                     (lambda (a5613956379)
                                                       (take-helper
                                                        kont56236
                                                        a5613556372
                                                        a5613756375
                                                        a5613956379))))
                                                (cons
                                                 f5623856378
                                                 a5613856377
                                                 lst2)))))
                                       (car f5623956376 lst)))))
                              (- f5624056374 n a5613656373))))))
                   (cdr f5624156371 lst))))))
        (= f5624256367 n a5613256366))))
  (define (take kont56243 lst n)
    (let ((f5624456380
           (lambda (a5614056381) (take-helper kont56243 lst n a5614056381))))
      (list f5624456380)))
  (define (length kont56245 lst)
    (let ((f5624856382
           (lambda (a5614156383)
             (if a5614156383
               (let ((x5614256384 '0)) (kont56245 x5614256384))
               (let ((a5614356385 '1))
                 (let ((f5624756386
                        (lambda (a5614456387)
                          (let ((f5624656388
                                 (lambda (a5614556389)
                                   (+ kont56245 a5614356385 a5614556389))))
                            (length f5624656388 a5614456387)))))
                   (cdr f5624756386 lst)))))))
      (null? f5624856382 lst)))
  (define (map kont56249 proc lst)
    (let ((f5625556390
           (lambda (a5614656391)
             (if a5614656391
               (let ((f5625056392
                      (lambda (x5614756393) (kont56249 x5614756393))))
                 (list f5625056392))
               (let ((f5625456394
                      (lambda (a5614856395)
                        (let ((f5625356396
                               (lambda (a5614956397)
                                 (let ((f5625256398
                                        (lambda (a5615056399)
                                          (let ((f5625156400
                                                 (lambda (a5615156401)
                                                   (cons
                                                    kont56249
                                                    a5614956397
                                                    a5615156401))))
                                            (map
                                             f5625156400
                                             proc
                                             a5615056399)))))
                                   (cdr f5625256398 lst)))))
                          (proc f5625356396 a5614856395)))))
                 (car f5625456394 lst))))))
      (null? f5625556390 lst)))
  (define (filter kont56256 op lst)
    (let ((f5626456402
           (lambda (a5615256403)
             (if a5615256403
               (let ((f5625756404
                      (lambda (x5615356405) (kont56256 x5615356405))))
                 (list f5625756404))
               (let ((f5626356406
                      (lambda (a5615456407)
                        (let ((f5626256408
                               (lambda (a5615556409)
                                 (if a5615556409
                                   (let ((f5626056410
                                          (lambda (a5615656411)
                                            (let ((f5625956412
                                                   (lambda (a5615756413)
                                                     (let ((f5625856414
                                                            (lambda (a5615856415)
                                                              (cons
                                                               kont56256
                                                               a5615656411
                                                               a5615856415))))
                                                       (filter
                                                        f5625856414
                                                        op
                                                        a5615756413)))))
                                              (cdr f5625956412 lst)))))
                                     (car f5626056410 lst))
                                   (let ((f5626156416
                                          (lambda (a5615956417)
                                            (filter
                                             kont56256
                                             op
                                             a5615956417))))
                                     (cdr f5626156416 lst))))))
                          (op f5626256408 a5615456407)))))
                 (car f5626356406 lst))))))
      (null? f5626456402 lst)))
  (define (drop kont56265 lst n)
    (let ((a5616056418 '0))
      (let ((f5626856419
             (lambda (a5616156420)
               (if a5616156420
                 (kont56265 lst)
                 (let ((f5626756421
                        (lambda (a5616256422)
                          (let ((a5616356423 '1))
                            (let ((f5626656424
                                   (lambda (a5616456425)
                                     (drop
                                      kont56265
                                      a5616256422
                                      a5616456425))))
                              (- f5626656424 n a5616356423))))))
                   (cdr f5626756421 lst))))))
        (= f5626856419 n a5616056418))))
  (define (foldr kont56269 proc acc lst)
    (let ((f5627356426
           (lambda (a5616556427)
             (if a5616556427
               (kont56269 acc)
               (let ((f5627256428
                      (lambda (a5616656429)
                        (let ((f5627156430
                               (lambda (a5616756431)
                                 (let ((f5627056432
                                        (lambda (a5616856433)
                                          (proc
                                           kont56269
                                           a5616656429
                                           a5616856433))))
                                   (foldr f5627056432 proc acc a5616756431)))))
                          (cdr f5627156430 lst)))))
                 (car f5627256428 lst))))))
      (null? f5627356426 lst)))
  (define (append kont56274 lst1 lst2)
    (let ((f5627856434
           (lambda (a5616956435)
             (if a5616956435
               (kont56274 lst2)
               (let ((f5627756436
                      (lambda (a5617056437)
                        (let ((f5627656438
                               (lambda (a5617156439)
                                 (let ((f5627556440
                                        (lambda (a5617256441)
                                          (cons
                                           kont56274
                                           a5617056437
                                           a5617256441))))
                                   (append f5627556440 a5617156439 lst2)))))
                          (cdr f5627656438 lst1)))))
                 (car f5627756436 lst1))))))
      (null? f5627856434 lst1)))
  (define (hash . lst)
    (let ((kont5627956442 (prim car lst)))
      (let ((lst56443 (prim cdr lst)))
        (let ((x5617356444 (apply-prim hash lst56443)))
          (kont5627956442 x5617356444)))))
  (define (hash-ref kont56281 h k)
    (let ((x5617456445 (prim hash-ref h k))) (kont56281 x5617456445)))
  (define (hash-set kont56282 h k v)
    (let ((x5617556446 (prim hash-set h k v))) (kont56282 x5617556446)))
  (define (hash-has-key? kont56283 h k)
    (let ((x5617656447 (prim hash-has-key? h k))) (kont56283 x5617656447)))
  (define (hash-count kont56284 h)
    (let ((x5617756448 (prim hash-count h))) (kont56284 x5617756448)))
  (define (call kont56285)
    (let ((a5617856449 '100))
      (let ((a5617956450 '90))
        (let ((a5618056451 '80))
          (let ((a5618156452 '70))
            (let ((a5618256453 '60))
              (>=
               kont56285
               a5617856449
               a5617956450
               a5618056451
               a5618156452
               a5618256453)))))))
  (define (brouhaha_main kont56286)
    (let ((f5628756454 (lambda (x5618356455) (kont56286 x5618356455))))
      (call f5628756454))))
