'((define (+ . lst)
    (let ((kont5857758681 (prim car lst)))
      (let ((lst58682 (prim cdr lst)))
        (let ((x5848558683 (apply-prim + lst58682)))
          (kont5857758681 x5848558683)))))
  (define (- . lst)
    (let ((kont5857958684 (prim car lst)))
      (let ((lst58685 (prim cdr lst)))
        (let ((x5848658686 (apply-prim - lst58685)))
          (kont5857958684 x5848658686)))))
  (define (* . lst)
    (let ((kont5858158687 (prim car lst)))
      (let ((lst58688 (prim cdr lst)))
        (let ((x5848758689 (apply-prim * lst58688)))
          (kont5858158687 x5848758689)))))
  (define (modulo kont58583 a b)
    (let ((x5848858690 (prim modulo a b))) (kont58583 x5848858690)))
  (define (/ . lst)
    (let ((kont5858458691 (prim car lst)))
      (let ((lst58692 (prim cdr lst)))
        (let ((x5848958693 (apply-prim / lst58692)))
          (kont5858458691 x5848958693)))))
  (define (= . lst)
    (let ((kont5858658694 (prim car lst)))
      (let ((lst58695 (prim cdr lst)))
        (let ((x5849058696 (apply-prim = lst58695)))
          (kont5858658694 x5849058696)))))
  (define (> . lst)
    (let ((kont5858858697 (prim car lst)))
      (let ((lst58698 (prim cdr lst)))
        (let ((x5849158699 (apply-prim > lst58698)))
          (kont5858858697 x5849158699)))))
  (define (< . lst)
    (let ((kont5859058700 (prim car lst)))
      (let ((lst58701 (prim cdr lst)))
        (let ((x5849258702 (apply-prim < lst58701)))
          (kont5859058700 x5849258702)))))
  (define (<= . lst)
    (let ((kont5859258703 (prim car lst)))
      (let ((lst58704 (prim cdr lst)))
        (let ((x5849358705 (apply-prim <= lst58704)))
          (kont5859258703 x5849358705)))))
  (define (>= . lst)
    (let ((kont5859458706 (prim car lst)))
      (let ((lst58707 (prim cdr lst)))
        (let ((x5849458708 (apply-prim >= lst58707)))
          (kont5859458706 x5849458708)))))
  (define (null? kont58596 x)
    (let ((x5849558709 (prim null? x))) (kont58596 x5849558709)))
  (define (equal? kont58597 x y)
    (let ((x5849658710 (prim equal? x y))) (kont58597 x5849658710)))
  (define (eq? kont58598 x y)
    (let ((x5849758711 (prim eq? x y))) (kont58598 x5849758711)))
  (define (cons kont58599 a b)
    (let ((x5849858712 (prim cons a b))) (kont58599 x5849858712)))
  (define (car kont58600 lst)
    (let ((x5849958713 (prim car lst))) (kont58600 x5849958713)))
  (define (cdr kont58601 lst)
    (let ((x5850058714 (prim cdr lst))) (kont58601 x5850058714)))
  (define (even? kont58602 x)
    (let ((a5850158715 '0))
      (let ((a5850258716 '2))
        (let ((f5860358717
               (lambda (a5850358718)
                 (equal? kont58602 a5850158715 a5850358718))))
          (modulo f5860358717 x a5850258716)))))
  (define (odd? kont58604 x)
    (let ((a5850458719 '1))
      (let ((a5850558720 '2))
        (let ((f5860558721
               (lambda (a5850658722)
                 (equal? kont58604 a5850458719 a5850658722))))
          (modulo f5860558721 x a5850558720)))))
  (define (list . x)
    (let ((kont5860658723 (prim car x)))
      (let ((x58724 (prim cdr x))) (kont5860658723 x58724))))
  (define (and . lst)
    (let ((kont5860858725 (prim car lst)))
      (let ((lst58726 (prim cdr lst)))
        (let ((x5850758727 (apply-prim and lst58726)))
          (kont5860858725 x5850758727)))))
  (define (or . lst)
    (let ((kont5861058728 (prim car lst)))
      (let ((lst58729 (prim cdr lst)))
        (let ((x5850858730 (apply-prim or lst58729)))
          (kont5861058728 x5850858730)))))
  (define (member? kont58612 x lst)
    (let ((f5861658731
           (lambda (a5850958732)
             (if a5850958732
               (let ((x5851058733 '#f)) (kont58612 x5851058733))
               (let ((f5861558734
                      (lambda (a5851158735)
                        (let ((f5861458736
                               (lambda (a5851258737)
                                 (if a5851258737
                                   (let ((x5851358738 '#t))
                                     (kont58612 x5851358738))
                                   (let ((f5861358739
                                          (lambda (a5851458740)
                                            (member?
                                             kont58612
                                             x
                                             a5851458740))))
                                     (cdr f5861358739 lst))))))
                          (equal? f5861458736 a5851158735 x)))))
                 (car f5861558734 lst))))))
      (null? f5861658731 lst)))
  (define (foldl kont58617 fun acc lst)
    (let ((f5862158741
           (lambda (a5851558742)
             (if a5851558742
               (kont58617 acc)
               (let ((f5862058743
                      (lambda (a5851658744)
                        (let ((f5861958745
                               (lambda (a5851758746)
                                 (let ((f5861858747
                                        (lambda (a5851858748)
                                          (foldl
                                           kont58617
                                           fun
                                           a5851758746
                                           a5851858748))))
                                   (cdr f5861858747 lst)))))
                          (fun f5861958745 a5851658744 acc)))))
                 (car f5862058743 lst))))))
      (null? f5862158741 lst)))
  (define (reverse-helper kont58622 lst lst2)
    (let ((f5862658749
           (lambda (a5851958750)
             (if a5851958750
               (kont58622 lst2)
               (let ((f5862558751
                      (lambda (a5852058752)
                        (let ((f5862458753
                               (lambda (a5852158754)
                                 (let ((f5862358755
                                        (lambda (a5852258756)
                                          (reverse-helper
                                           kont58622
                                           a5852058752
                                           a5852258756))))
                                   (cons f5862358755 a5852158754 lst2)))))
                          (car f5862458753 lst)))))
                 (cdr f5862558751 lst))))))
      (null? f5862658749 lst)))
  (define (reverse kont58627 lst)
    (let ((f5862858757
           (lambda (a5852358758) (reverse-helper kont58627 lst a5852358758))))
      (list f5862858757)))
  (define (take-helper kont58629 lst n lst2)
    (let ((a5852458759 '0))
      (let ((f5863558760
             (lambda (a5852558761)
               (if a5852558761
                 (let ((f5863058762
                        (lambda (x5852658763) (kont58629 x5852658763))))
                   (reverse f5863058762 lst2))
                 (let ((f5863458764
                        (lambda (a5852758765)
                          (let ((a5852858766 '1))
                            (let ((f5863358767
                                   (lambda (a5852958768)
                                     (let ((f5863258769
                                            (lambda (a5853058770)
                                              (let ((f5863158771
                                                     (lambda (a5853158772)
                                                       (take-helper
                                                        kont58629
                                                        a5852758765
                                                        a5852958768
                                                        a5853158772))))
                                                (cons
                                                 f5863158771
                                                 a5853058770
                                                 lst2)))))
                                       (car f5863258769 lst)))))
                              (- f5863358767 n a5852858766))))))
                   (cdr f5863458764 lst))))))
        (= f5863558760 n a5852458759))))
  (define (take kont58636 lst n)
    (let ((f5863758773
           (lambda (a5853258774) (take-helper kont58636 lst n a5853258774))))
      (list f5863758773)))
  (define (length kont58638 lst)
    (let ((f5864158775
           (lambda (a5853358776)
             (if a5853358776
               (let ((x5853458777 '0)) (kont58638 x5853458777))
               (let ((a5853558778 '1))
                 (let ((f5864058779
                        (lambda (a5853658780)
                          (let ((f5863958781
                                 (lambda (a5853758782)
                                   (+ kont58638 a5853558778 a5853758782))))
                            (length f5863958781 a5853658780)))))
                   (cdr f5864058779 lst)))))))
      (null? f5864158775 lst)))
  (define (map kont58642 proc lst)
    (let ((f5864858783
           (lambda (a5853858784)
             (if a5853858784
               (let ((f5864358785
                      (lambda (x5853958786) (kont58642 x5853958786))))
                 (list f5864358785))
               (let ((f5864758787
                      (lambda (a5854058788)
                        (let ((f5864658789
                               (lambda (a5854158790)
                                 (let ((f5864558791
                                        (lambda (a5854258792)
                                          (let ((f5864458793
                                                 (lambda (a5854358794)
                                                   (cons
                                                    kont58642
                                                    a5854158790
                                                    a5854358794))))
                                            (map
                                             f5864458793
                                             proc
                                             a5854258792)))))
                                   (cdr f5864558791 lst)))))
                          (proc f5864658789 a5854058788)))))
                 (car f5864758787 lst))))))
      (null? f5864858783 lst)))
  (define (filter kont58649 op lst)
    (let ((f5865758795
           (lambda (a5854458796)
             (if a5854458796
               (let ((f5865058797
                      (lambda (x5854558798) (kont58649 x5854558798))))
                 (list f5865058797))
               (let ((f5865658799
                      (lambda (a5854658800)
                        (let ((f5865558801
                               (lambda (a5854758802)
                                 (if a5854758802
                                   (let ((f5865358803
                                          (lambda (a5854858804)
                                            (let ((f5865258805
                                                   (lambda (a5854958806)
                                                     (let ((f5865158807
                                                            (lambda (a5855058808)
                                                              (cons
                                                               kont58649
                                                               a5854858804
                                                               a5855058808))))
                                                       (filter
                                                        f5865158807
                                                        op
                                                        a5854958806)))))
                                              (cdr f5865258805 lst)))))
                                     (car f5865358803 lst))
                                   (let ((f5865458809
                                          (lambda (a5855158810)
                                            (filter
                                             kont58649
                                             op
                                             a5855158810))))
                                     (cdr f5865458809 lst))))))
                          (op f5865558801 a5854658800)))))
                 (car f5865658799 lst))))))
      (null? f5865758795 lst)))
  (define (drop kont58658 lst n)
    (let ((a5855258811 '0))
      (let ((f5866158812
             (lambda (a5855358813)
               (if a5855358813
                 (kont58658 lst)
                 (let ((f5866058814
                        (lambda (a5855458815)
                          (let ((a5855558816 '1))
                            (let ((f5865958817
                                   (lambda (a5855658818)
                                     (drop
                                      kont58658
                                      a5855458815
                                      a5855658818))))
                              (- f5865958817 n a5855558816))))))
                   (cdr f5866058814 lst))))))
        (= f5866158812 n a5855258811))))
  (define (foldr kont58662 proc acc lst)
    (let ((f5866658819
           (lambda (a5855758820)
             (if a5855758820
               (kont58662 acc)
               (let ((f5866558821
                      (lambda (a5855858822)
                        (let ((f5866458823
                               (lambda (a5855958824)
                                 (let ((f5866358825
                                        (lambda (a5856058826)
                                          (proc
                                           kont58662
                                           a5855858822
                                           a5856058826))))
                                   (foldr f5866358825 proc acc a5855958824)))))
                          (cdr f5866458823 lst)))))
                 (car f5866558821 lst))))))
      (null? f5866658819 lst)))
  (define (append kont58667 lst1 lst2)
    (let ((f5867158827
           (lambda (a5856158828)
             (if a5856158828
               (kont58667 lst2)
               (let ((f5867058829
                      (lambda (a5856258830)
                        (let ((f5866958831
                               (lambda (a5856358832)
                                 (let ((f5866858833
                                        (lambda (a5856458834)
                                          (cons
                                           kont58667
                                           a5856258830
                                           a5856458834))))
                                   (append f5866858833 a5856358832 lst2)))))
                          (cdr f5866958831 lst1)))))
                 (car f5867058829 lst1))))))
      (null? f5867158827 lst1)))
  (define (hash . lst)
    (let ((kont5867258835 (prim car lst)))
      (let ((lst58836 (prim cdr lst)))
        (let ((x5856558837 (apply-prim hash lst58836)))
          (kont5867258835 x5856558837)))))
  (define (hash-ref kont58674 h k)
    (let ((x5856658838 (prim hash-ref h k))) (kont58674 x5856658838)))
  (define (hash-set kont58675 h k v)
    (let ((x5856758839 (prim hash-set h k v))) (kont58675 x5856758839)))
  (define (hash-has-key? kont58676 h k)
    (let ((x5856858840 (prim hash-has-key? h k))) (kont58676 x5856858840)))
  (define (hash-count kont58677 h)
    (let ((x5856958841 (prim hash-count h))) (kont58677 x5856958841)))
  (define (call kont58678)
    (let ((a5857058842 '1))
      (let ((a5857158843 '2))
        (let ((a5857258844 '3))
          (let ((a5857358845 '4))
            (let ((a5857458846 '5))
              (let ((a5857558847 '100))
                (<=
                 kont58678
                 a5857058842
                 a5857158843
                 a5857258844
                 a5857358845
                 a5857458846
                 a5857558847))))))))
  (define (brouhaha_main kont58679)
    (let ((f5868058848 (lambda (x5857658849) (kont58679 x5857658849))))
      (call f5868058848))))
