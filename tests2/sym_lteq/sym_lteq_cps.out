'((define (+ . lst)
    (let ((kont5587255972 (prim car lst)))
      (let ((lst55973 (prim cdr lst)))
        (let ((x5578255974 (apply-prim + lst55973)))
          (kont5587255972 x5578255974)))))
  (define (- . lst)
    (let ((kont5587455975 (prim car lst)))
      (let ((lst55976 (prim cdr lst)))
        (let ((x5578355977 (apply-prim - lst55976)))
          (kont5587455975 x5578355977)))))
  (define (* . lst)
    (let ((kont5587655978 (prim car lst)))
      (let ((lst55979 (prim cdr lst)))
        (let ((x5578455980 (apply-prim * lst55979)))
          (kont5587655978 x5578455980)))))
  (define (modulo kont55878 a b)
    (let ((x5578555981 (prim modulo a b))) (kont55878 x5578555981)))
  (define (/ . lst)
    (let ((kont5587955982 (prim car lst)))
      (let ((lst55983 (prim cdr lst)))
        (let ((x5578655984 (apply-prim / lst55983)))
          (kont5587955982 x5578655984)))))
  (define (= . lst)
    (let ((kont5588155985 (prim car lst)))
      (let ((lst55986 (prim cdr lst)))
        (let ((x5578755987 (apply-prim = lst55986)))
          (kont5588155985 x5578755987)))))
  (define (> . lst)
    (let ((kont5588355988 (prim car lst)))
      (let ((lst55989 (prim cdr lst)))
        (let ((x5578855990 (apply-prim > lst55989)))
          (kont5588355988 x5578855990)))))
  (define (< . lst)
    (let ((kont5588555991 (prim car lst)))
      (let ((lst55992 (prim cdr lst)))
        (let ((x5578955993 (apply-prim < lst55992)))
          (kont5588555991 x5578955993)))))
  (define (<= . lst)
    (let ((kont5588755994 (prim car lst)))
      (let ((lst55995 (prim cdr lst)))
        (let ((x5579055996 (apply-prim <= lst55995)))
          (kont5588755994 x5579055996)))))
  (define (>= . lst)
    (let ((kont5588955997 (prim car lst)))
      (let ((lst55998 (prim cdr lst)))
        (let ((x5579155999 (apply-prim >= lst55998)))
          (kont5588955997 x5579155999)))))
  (define (null? kont55891 x)
    (let ((x5579256000 (prim null? x))) (kont55891 x5579256000)))
  (define (equal? kont55892 x y)
    (let ((x5579356001 (prim equal? x y))) (kont55892 x5579356001)))
  (define (eq? kont55893 x y)
    (let ((x5579456002 (prim eq? x y))) (kont55893 x5579456002)))
  (define (cons kont55894 a b)
    (let ((x5579556003 (prim cons a b))) (kont55894 x5579556003)))
  (define (car kont55895 lst)
    (let ((x5579656004 (prim car lst))) (kont55895 x5579656004)))
  (define (cdr kont55896 lst)
    (let ((x5579756005 (prim cdr lst))) (kont55896 x5579756005)))
  (define (even? kont55897 x)
    (let ((a5579856006 '0))
      (let ((a5579956007 '2))
        (let ((f5589856008
               (lambda (a5580056009)
                 (equal? kont55897 a5579856006 a5580056009))))
          (modulo f5589856008 x a5579956007)))))
  (define (odd? kont55899 x)
    (let ((a5580156010 '1))
      (let ((a5580256011 '2))
        (let ((f5590056012
               (lambda (a5580356013)
                 (equal? kont55899 a5580156010 a5580356013))))
          (modulo f5590056012 x a5580256011)))))
  (define (list . x)
    (let ((kont5590156014 (prim car x)))
      (let ((x56015 (prim cdr x))) (kont5590156014 x56015))))
  (define (member? kont55903 x lst)
    (let ((f5590756016
           (lambda (a5580456017)
             (if a5580456017
               (let ((x5580556018 '#f)) (kont55903 x5580556018))
               (let ((f5590656019
                      (lambda (a5580656020)
                        (let ((f5590556021
                               (lambda (a5580756022)
                                 (if a5580756022
                                   (let ((x5580856023 '#t))
                                     (kont55903 x5580856023))
                                   (let ((f5590456024
                                          (lambda (a5580956025)
                                            (member?
                                             kont55903
                                             x
                                             a5580956025))))
                                     (cdr f5590456024 lst))))))
                          (equal? f5590556021 a5580656020 x)))))
                 (car f5590656019 lst))))))
      (null? f5590756016 lst)))
  (define (foldl kont55908 fun acc lst)
    (let ((f5591256026
           (lambda (a5581056027)
             (if a5581056027
               (kont55908 acc)
               (let ((f5591156028
                      (lambda (a5581156029)
                        (let ((f5591056030
                               (lambda (a5581256031)
                                 (let ((f5590956032
                                        (lambda (a5581356033)
                                          (foldl
                                           kont55908
                                           fun
                                           a5581256031
                                           a5581356033))))
                                   (cdr f5590956032 lst)))))
                          (fun f5591056030 a5581156029 acc)))))
                 (car f5591156028 lst))))))
      (null? f5591256026 lst)))
  (define (reverse-helper kont55913 lst lst2)
    (let ((f5591756034
           (lambda (a5581456035)
             (if a5581456035
               (kont55913 lst2)
               (let ((f5591656036
                      (lambda (a5581556037)
                        (let ((f5591556038
                               (lambda (a5581656039)
                                 (let ((f5591456040
                                        (lambda (a5581756041)
                                          (reverse-helper
                                           kont55913
                                           a5581556037
                                           a5581756041))))
                                   (cons f5591456040 a5581656039 lst2)))))
                          (car f5591556038 lst)))))
                 (cdr f5591656036 lst))))))
      (null? f5591756034 lst)))
  (define (reverse kont55918 lst)
    (let ((f5591956042
           (lambda (a5581856043) (reverse-helper kont55918 lst a5581856043))))
      (list f5591956042)))
  (define (take-helper kont55920 lst n lst2)
    (let ((a5581956044 '0))
      (let ((f5592656045
             (lambda (a5582056046)
               (if a5582056046
                 (let ((f5592156047
                        (lambda (x5582156048) (kont55920 x5582156048))))
                   (reverse f5592156047 lst2))
                 (let ((f5592556049
                        (lambda (a5582256050)
                          (let ((a5582356051 '1))
                            (let ((f5592456052
                                   (lambda (a5582456053)
                                     (let ((f5592356054
                                            (lambda (a5582556055)
                                              (let ((f5592256056
                                                     (lambda (a5582656057)
                                                       (take-helper
                                                        kont55920
                                                        a5582256050
                                                        a5582456053
                                                        a5582656057))))
                                                (cons
                                                 f5592256056
                                                 a5582556055
                                                 lst2)))))
                                       (car f5592356054 lst)))))
                              (- f5592456052 n a5582356051))))))
                   (cdr f5592556049 lst))))))
        (= f5592656045 n a5581956044))))
  (define (take kont55927 lst n)
    (let ((f5592856058
           (lambda (a5582756059) (take-helper kont55927 lst n a5582756059))))
      (list f5592856058)))
  (define (length kont55929 lst)
    (let ((f5593256060
           (lambda (a5582856061)
             (if a5582856061
               (let ((x5582956062 '0)) (kont55929 x5582956062))
               (let ((a5583056063 '1))
                 (let ((f5593156064
                        (lambda (a5583156065)
                          (let ((f5593056066
                                 (lambda (a5583256067)
                                   (+ kont55929 a5583056063 a5583256067))))
                            (length f5593056066 a5583156065)))))
                   (cdr f5593156064 lst)))))))
      (null? f5593256060 lst)))
  (define (map kont55933 proc lst)
    (let ((f5593956068
           (lambda (a5583356069)
             (if a5583356069
               (let ((f5593456070
                      (lambda (x5583456071) (kont55933 x5583456071))))
                 (list f5593456070))
               (let ((f5593856072
                      (lambda (a5583556073)
                        (let ((f5593756074
                               (lambda (a5583656075)
                                 (let ((f5593656076
                                        (lambda (a5583756077)
                                          (let ((f5593556078
                                                 (lambda (a5583856079)
                                                   (cons
                                                    kont55933
                                                    a5583656075
                                                    a5583856079))))
                                            (map
                                             f5593556078
                                             proc
                                             a5583756077)))))
                                   (cdr f5593656076 lst)))))
                          (proc f5593756074 a5583556073)))))
                 (car f5593856072 lst))))))
      (null? f5593956068 lst)))
  (define (filter kont55940 op lst)
    (let ((f5594856080
           (lambda (a5583956081)
             (if a5583956081
               (let ((f5594156082
                      (lambda (x5584056083) (kont55940 x5584056083))))
                 (list f5594156082))
               (let ((f5594756084
                      (lambda (a5584156085)
                        (let ((f5594656086
                               (lambda (a5584256087)
                                 (if a5584256087
                                   (let ((f5594456088
                                          (lambda (a5584356089)
                                            (let ((f5594356090
                                                   (lambda (a5584456091)
                                                     (let ((f5594256092
                                                            (lambda (a5584556093)
                                                              (cons
                                                               kont55940
                                                               a5584356089
                                                               a5584556093))))
                                                       (filter
                                                        f5594256092
                                                        op
                                                        a5584456091)))))
                                              (cdr f5594356090 lst)))))
                                     (car f5594456088 lst))
                                   (let ((f5594556094
                                          (lambda (a5584656095)
                                            (filter
                                             kont55940
                                             op
                                             a5584656095))))
                                     (cdr f5594556094 lst))))))
                          (op f5594656086 a5584156085)))))
                 (car f5594756084 lst))))))
      (null? f5594856080 lst)))
  (define (drop kont55949 lst n)
    (let ((a5584756096 '0))
      (let ((f5595256097
             (lambda (a5584856098)
               (if a5584856098
                 (kont55949 lst)
                 (let ((f5595156099
                        (lambda (a5584956100)
                          (let ((a5585056101 '1))
                            (let ((f5595056102
                                   (lambda (a5585156103)
                                     (drop
                                      kont55949
                                      a5584956100
                                      a5585156103))))
                              (- f5595056102 n a5585056101))))))
                   (cdr f5595156099 lst))))))
        (= f5595256097 n a5584756096))))
  (define (foldr kont55953 proc acc lst)
    (let ((f5595756104
           (lambda (a5585256105)
             (if a5585256105
               (kont55953 acc)
               (let ((f5595656106
                      (lambda (a5585356107)
                        (let ((f5595556108
                               (lambda (a5585456109)
                                 (let ((f5595456110
                                        (lambda (a5585556111)
                                          (proc
                                           kont55953
                                           a5585356107
                                           a5585556111))))
                                   (foldr f5595456110 proc acc a5585456109)))))
                          (cdr f5595556108 lst)))))
                 (car f5595656106 lst))))))
      (null? f5595756104 lst)))
  (define (append kont55958 lst1 lst2)
    (let ((f5596256112
           (lambda (a5585656113)
             (if a5585656113
               (kont55958 lst2)
               (let ((f5596156114
                      (lambda (a5585756115)
                        (let ((f5596056116
                               (lambda (a5585856117)
                                 (let ((f5595956118
                                        (lambda (a5585956119)
                                          (cons
                                           kont55958
                                           a5585756115
                                           a5585956119))))
                                   (append f5595956118 a5585856117 lst2)))))
                          (cdr f5596056116 lst1)))))
                 (car f5596156114 lst1))))))
      (null? f5596256112 lst1)))
  (define (hash . lst)
    (let ((kont5596356120 (prim car lst)))
      (let ((lst56121 (prim cdr lst)))
        (let ((x5586056122 (apply-prim hash lst56121)))
          (kont5596356120 x5586056122)))))
  (define (hash-ref kont55965 h k)
    (let ((x5586156123 (prim hash-ref h k))) (kont55965 x5586156123)))
  (define (hash-set kont55966 h k v)
    (let ((x5586256124 (prim hash-set h k v))) (kont55966 x5586256124)))
  (define (hash-has-key? kont55967 h k)
    (let ((x5586356125 (prim hash-has-key? h k))) (kont55967 x5586356125)))
  (define (hash-count kont55968 h)
    (let ((x5586456126 (prim hash-count h))) (kont55968 x5586456126)))
  (define (call kont55969)
    (let ((a5586556127 '1))
      (let ((a5586656128 '2))
        (let ((a5586756129 '3))
          (let ((a5586856130 '4))
            (let ((a5586956131 '5))
              (let ((a5587056132 '100))
                (<=
                 kont55969
                 a5586556127
                 a5586656128
                 a5586756129
                 a5586856130
                 a5586956131
                 a5587056132))))))))
  (define (brouhaha_main kont55970)
    (let ((f5597156133 (lambda (x5587156134) (kont55970 x5587156134))))
      (call f5597156133))))
