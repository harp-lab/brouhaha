'((define (+ . lst)
    (let ((kont57360 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57270 (apply-prim + lst))) (kont57360 x57270)))))
  (define (- . lst)
    (let ((kont57362 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57271 (apply-prim - lst))) (kont57362 x57271)))))
  (define (* . lst)
    (let ((kont57364 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57272 (apply-prim * lst))) (kont57364 x57272)))))
  (define (modulo kont57366 a b)
    (let ((x57273 (prim modulo a b))) (kont57366 x57273)))
  (define (/ . lst)
    (let ((kont57367 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57274 (apply-prim / lst))) (kont57367 x57274)))))
  (define (= . lst)
    (let ((kont57369 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57275 (apply-prim = lst))) (kont57369 x57275)))))
  (define (> . lst)
    (let ((kont57371 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57276 (apply-prim > lst))) (kont57371 x57276)))))
  (define (< . lst)
    (let ((kont57373 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57277 (apply-prim < lst))) (kont57373 x57277)))))
  (define (<= . lst)
    (let ((kont57375 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57278 (apply-prim <= lst))) (kont57375 x57278)))))
  (define (>= . lst)
    (let ((kont57377 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57279 (apply-prim >= lst))) (kont57377 x57279)))))
  (define (null? kont57379 x)
    (let ((x57280 (prim null? x))) (kont57379 x57280)))
  (define (equal? kont57380 x y)
    (let ((x57281 (prim equal? x y))) (kont57380 x57281)))
  (define (eq? kont57381 x y)
    (let ((x57282 (prim eq? x y))) (kont57381 x57282)))
  (define (cons kont57382 a b)
    (let ((x57283 (prim cons a b))) (kont57382 x57283)))
  (define (car kont57383 lst)
    (let ((x57284 (prim car lst))) (kont57383 x57284)))
  (define (cdr kont57384 lst)
    (let ((x57285 (prim cdr lst))) (kont57384 x57285)))
  (define (even? kont57385 x)
    (let ((a57286 '0))
      (let ((a57287 '2))
        (let ((f57386 (lambda (a57288) (equal? kont57385 a57286 a57288))))
          (modulo f57386 x a57287)))))
  (define (odd? kont57387 x)
    (let ((a57289 '1))
      (let ((a57290 '2))
        (let ((f57388 (lambda (a57291) (equal? kont57387 a57289 a57291))))
          (modulo f57388 x a57290)))))
  (define (list . x)
    (let ((kont57389 (prim car x))) (let ((x (prim cdr x))) (kont57389 x))))
  (define (member? kont57391 x lst)
    (let ((f57395
           (lambda (a57292)
             (if a57292
               (let ((x57293 '#f)) (kont57391 x57293))
               (let ((f57394
                      (lambda (a57294)
                        (let ((f57393
                               (lambda (a57295)
                                 (if a57295
                                   (let ((x57296 '#t)) (kont57391 x57296))
                                   (let ((f57392
                                          (lambda (a57297)
                                            (member? kont57391 x a57297))))
                                     (cdr f57392 lst))))))
                          (equal? f57393 a57294 x)))))
                 (car f57394 lst))))))
      (null? f57395 lst)))
  (define (foldl kont57396 fun acc lst)
    (let ((f57400
           (lambda (a57298)
             (if a57298
               (kont57396 acc)
               (let ((f57399
                      (lambda (a57299)
                        (let ((f57398
                               (lambda (a57300)
                                 (let ((f57397
                                        (lambda (a57301)
                                          (foldl
                                           kont57396
                                           fun
                                           a57300
                                           a57301))))
                                   (cdr f57397 lst)))))
                          (fun f57398 a57299 acc)))))
                 (car f57399 lst))))))
      (null? f57400 lst)))
  (define (reverse-helper kont57401 lst lst2)
    (let ((f57405
           (lambda (a57302)
             (if a57302
               (kont57401 lst2)
               (let ((f57404
                      (lambda (a57303)
                        (let ((f57403
                               (lambda (a57304)
                                 (let ((f57402
                                        (lambda (a57305)
                                          (reverse-helper
                                           kont57401
                                           a57303
                                           a57305))))
                                   (cons f57402 a57304 lst2)))))
                          (car f57403 lst)))))
                 (cdr f57404 lst))))))
      (null? f57405 lst)))
  (define (reverse kont57406 lst)
    (let ((f57407 (lambda (a57306) (reverse-helper kont57406 lst a57306))))
      (list f57407)))
  (define (take-helper kont57408 lst n lst2)
    (let ((a57307 '0))
      (let ((f57414
             (lambda (a57308)
               (if a57308
                 (let ((f57409 (lambda (x57309) (kont57408 x57309))))
                   (reverse f57409 lst2))
                 (let ((f57413
                        (lambda (a57310)
                          (let ((a57311 '1))
                            (let ((f57412
                                   (lambda (a57312)
                                     (let ((f57411
                                            (lambda (a57313)
                                              (let ((f57410
                                                     (lambda (a57314)
                                                       (take-helper
                                                        kont57408
                                                        a57310
                                                        a57312
                                                        a57314))))
                                                (cons f57410 a57313 lst2)))))
                                       (car f57411 lst)))))
                              (- f57412 n a57311))))))
                   (cdr f57413 lst))))))
        (= f57414 n a57307))))
  (define (take kont57415 lst n)
    (let ((f57416 (lambda (a57315) (take-helper kont57415 lst n a57315))))
      (list f57416)))
  (define (length kont57417 lst)
    (let ((f57420
           (lambda (a57316)
             (if a57316
               (let ((x57317 '0)) (kont57417 x57317))
               (let ((a57318 '1))
                 (let ((f57419
                        (lambda (a57319)
                          (let ((f57418
                                 (lambda (a57320)
                                   (+ kont57417 a57318 a57320))))
                            (length f57418 a57319)))))
                   (cdr f57419 lst)))))))
      (null? f57420 lst)))
  (define (map kont57421 proc lst)
    (let ((f57427
           (lambda (a57321)
             (if a57321
               (let ((f57422 (lambda (x57322) (kont57421 x57322))))
                 (list f57422))
               (let ((f57426
                      (lambda (a57323)
                        (let ((f57425
                               (lambda (a57324)
                                 (let ((f57424
                                        (lambda (a57325)
                                          (let ((f57423
                                                 (lambda (a57326)
                                                   (cons
                                                    kont57421
                                                    a57324
                                                    a57326))))
                                            (map f57423 proc a57325)))))
                                   (cdr f57424 lst)))))
                          (proc f57425 a57323)))))
                 (car f57426 lst))))))
      (null? f57427 lst)))
  (define (filter kont57428 op lst)
    (let ((f57436
           (lambda (a57327)
             (if a57327
               (let ((f57429 (lambda (x57328) (kont57428 x57328))))
                 (list f57429))
               (let ((f57435
                      (lambda (a57329)
                        (let ((f57434
                               (lambda (a57330)
                                 (if a57330
                                   (let ((f57432
                                          (lambda (a57331)
                                            (let ((f57431
                                                   (lambda (a57332)
                                                     (let ((f57430
                                                            (lambda (a57333)
                                                              (cons
                                                               kont57428
                                                               a57331
                                                               a57333))))
                                                       (filter
                                                        f57430
                                                        op
                                                        a57332)))))
                                              (cdr f57431 lst)))))
                                     (car f57432 lst))
                                   (let ((f57433
                                          (lambda (a57334)
                                            (filter kont57428 op a57334))))
                                     (cdr f57433 lst))))))
                          (op f57434 a57329)))))
                 (car f57435 lst))))))
      (null? f57436 lst)))
  (define (drop kont57437 lst n)
    (let ((a57335 '0))
      (let ((f57440
             (lambda (a57336)
               (if a57336
                 (kont57437 lst)
                 (let ((f57439
                        (lambda (a57337)
                          (let ((a57338 '1))
                            (let ((f57438
                                   (lambda (a57339)
                                     (drop kont57437 a57337 a57339))))
                              (- f57438 n a57338))))))
                   (cdr f57439 lst))))))
        (= f57440 n a57335))))
  (define (foldr kont57441 proc acc lst)
    (let ((f57445
           (lambda (a57340)
             (if a57340
               (kont57441 acc)
               (let ((f57444
                      (lambda (a57341)
                        (let ((f57443
                               (lambda (a57342)
                                 (let ((f57442
                                        (lambda (a57343)
                                          (proc kont57441 a57341 a57343))))
                                   (foldr f57442 proc acc a57342)))))
                          (cdr f57443 lst)))))
                 (car f57444 lst))))))
      (null? f57445 lst)))
  (define (append kont57446 lst1 lst2)
    (let ((f57450
           (lambda (a57344)
             (if a57344
               (kont57446 lst2)
               (let ((f57449
                      (lambda (a57345)
                        (let ((f57448
                               (lambda (a57346)
                                 (let ((f57447
                                        (lambda (a57347)
                                          (cons kont57446 a57345 a57347))))
                                   (append f57447 a57346 lst2)))))
                          (cdr f57448 lst1)))))
                 (car f57449 lst1))))))
      (null? f57450 lst1)))
  (define (hash . lst)
    (let ((kont57451 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x57348 (apply-prim hash lst))) (kont57451 x57348)))))
  (define (hash-ref kont57453 h k)
    (let ((x57349 (prim hash-ref h k))) (kont57453 x57349)))
  (define (hash-set kont57454 h k v)
    (let ((x57350 (prim hash-set h k v))) (kont57454 x57350)))
  (define (hash-has-key? kont57455 h k)
    (let ((x57351 (prim hash-has-key? h k))) (kont57455 x57351)))
  (define (hash-count kont57456 h)
    (let ((x57352 (prim hash-count h))) (kont57456 x57352)))
  (define (call kont57457)
    (let ((a57353 '1))
      (let ((a57354 '2))
        (let ((a57355 '3))
          (let ((a57356 '4))
            (let ((a57357 '5))
              (let ((a57358 '100))
                (<= kont57457 a57353 a57354 a57355 a57356 a57357 a57358))))))))
  (define (brouhaha_main kont57458)
    (let ((f57459 (lambda (x57359) (kont57458 x57359)))) (call f57459))))
