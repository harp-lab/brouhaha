'((define (+ . lst)
    (let ((kont55872 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55782 (apply-prim + lst))) (kont55872 x55782)))))
  (define (- . lst)
    (let ((kont55874 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55783 (apply-prim - lst))) (kont55874 x55783)))))
  (define (* . lst)
    (let ((kont55876 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55784 (apply-prim * lst))) (kont55876 x55784)))))
  (define (modulo kont55878 a b)
    (let ((x55785 (prim modulo a b))) (kont55878 x55785)))
  (define (/ . lst)
    (let ((kont55879 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55786 (apply-prim / lst))) (kont55879 x55786)))))
  (define (= . lst)
    (let ((kont55881 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55787 (apply-prim = lst))) (kont55881 x55787)))))
  (define (> . lst)
    (let ((kont55883 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55788 (apply-prim > lst))) (kont55883 x55788)))))
  (define (< . lst)
    (let ((kont55885 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55789 (apply-prim < lst))) (kont55885 x55789)))))
  (define (<= . lst)
    (let ((kont55887 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55790 (apply-prim <= lst))) (kont55887 x55790)))))
  (define (>= . lst)
    (let ((kont55889 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55791 (apply-prim >= lst))) (kont55889 x55791)))))
  (define (null? kont55891 x)
    (let ((x55792 (prim null? x))) (kont55891 x55792)))
  (define (equal? kont55892 x y)
    (let ((x55793 (prim equal? x y))) (kont55892 x55793)))
  (define (eq? kont55893 x y)
    (let ((x55794 (prim eq? x y))) (kont55893 x55794)))
  (define (cons kont55894 a b)
    (let ((x55795 (prim cons a b))) (kont55894 x55795)))
  (define (car kont55895 lst)
    (let ((x55796 (prim car lst))) (kont55895 x55796)))
  (define (cdr kont55896 lst)
    (let ((x55797 (prim cdr lst))) (kont55896 x55797)))
  (define (even? kont55897 x)
    (let ((a55798 '0))
      (let ((a55799 '2))
        (let ((f55898 (lambda (a55800) (equal? kont55897 a55798 a55800))))
          (modulo f55898 x a55799)))))
  (define (odd? kont55899 x)
    (let ((a55801 '1))
      (let ((a55802 '2))
        (let ((f55900 (lambda (a55803) (equal? kont55899 a55801 a55803))))
          (modulo f55900 x a55802)))))
  (define (list . x)
    (let ((kont55901 (prim car x))) (let ((x (prim cdr x))) (kont55901 x))))
  (define (member? kont55903 x lst)
    (let ((f55907
           (lambda (a55804)
             (if a55804
               (let ((x55805 '#f)) (kont55903 x55805))
               (let ((f55906
                      (lambda (a55806)
                        (let ((f55905
                               (lambda (a55807)
                                 (if a55807
                                   (let ((x55808 '#t)) (kont55903 x55808))
                                   (let ((f55904
                                          (lambda (a55809)
                                            (member? kont55903 x a55809))))
                                     (cdr f55904 lst))))))
                          (equal? f55905 a55806 x)))))
                 (car f55906 lst))))))
      (null? f55907 lst)))
  (define (foldl kont55908 fun acc lst)
    (let ((f55912
           (lambda (a55810)
             (if a55810
               (kont55908 acc)
               (let ((f55911
                      (lambda (a55811)
                        (let ((f55910
                               (lambda (a55812)
                                 (let ((f55909
                                        (lambda (a55813)
                                          (foldl
                                           kont55908
                                           fun
                                           a55812
                                           a55813))))
                                   (cdr f55909 lst)))))
                          (fun f55910 a55811 acc)))))
                 (car f55911 lst))))))
      (null? f55912 lst)))
  (define (reverse-helper kont55913 lst lst2)
    (let ((f55917
           (lambda (a55814)
             (if a55814
               (kont55913 lst2)
               (let ((f55916
                      (lambda (a55815)
                        (let ((f55915
                               (lambda (a55816)
                                 (let ((f55914
                                        (lambda (a55817)
                                          (reverse-helper
                                           kont55913
                                           a55815
                                           a55817))))
                                   (cons f55914 a55816 lst2)))))
                          (car f55915 lst)))))
                 (cdr f55916 lst))))))
      (null? f55917 lst)))
  (define (reverse kont55918 lst)
    (let ((f55919 (lambda (a55818) (reverse-helper kont55918 lst a55818))))
      (list f55919)))
  (define (take-helper kont55920 lst n lst2)
    (let ((a55819 '0))
      (let ((f55926
             (lambda (a55820)
               (if a55820
                 (let ((f55921 (lambda (x55821) (kont55920 x55821))))
                   (reverse f55921 lst2))
                 (let ((f55925
                        (lambda (a55822)
                          (let ((a55823 '1))
                            (let ((f55924
                                   (lambda (a55824)
                                     (let ((f55923
                                            (lambda (a55825)
                                              (let ((f55922
                                                     (lambda (a55826)
                                                       (take-helper
                                                        kont55920
                                                        a55822
                                                        a55824
                                                        a55826))))
                                                (cons f55922 a55825 lst2)))))
                                       (car f55923 lst)))))
                              (- f55924 n a55823))))))
                   (cdr f55925 lst))))))
        (= f55926 n a55819))))
  (define (take kont55927 lst n)
    (let ((f55928 (lambda (a55827) (take-helper kont55927 lst n a55827))))
      (list f55928)))
  (define (length kont55929 lst)
    (let ((f55932
           (lambda (a55828)
             (if a55828
               (let ((x55829 '0)) (kont55929 x55829))
               (let ((a55830 '1))
                 (let ((f55931
                        (lambda (a55831)
                          (let ((f55930
                                 (lambda (a55832)
                                   (+ kont55929 a55830 a55832))))
                            (length f55930 a55831)))))
                   (cdr f55931 lst)))))))
      (null? f55932 lst)))
  (define (map kont55933 proc lst)
    (let ((f55939
           (lambda (a55833)
             (if a55833
               (let ((f55934 (lambda (x55834) (kont55933 x55834))))
                 (list f55934))
               (let ((f55938
                      (lambda (a55835)
                        (let ((f55937
                               (lambda (a55836)
                                 (let ((f55936
                                        (lambda (a55837)
                                          (let ((f55935
                                                 (lambda (a55838)
                                                   (cons
                                                    kont55933
                                                    a55836
                                                    a55838))))
                                            (map f55935 proc a55837)))))
                                   (cdr f55936 lst)))))
                          (proc f55937 a55835)))))
                 (car f55938 lst))))))
      (null? f55939 lst)))
  (define (filter kont55940 op lst)
    (let ((f55948
           (lambda (a55839)
             (if a55839
               (let ((f55941 (lambda (x55840) (kont55940 x55840))))
                 (list f55941))
               (let ((f55947
                      (lambda (a55841)
                        (let ((f55946
                               (lambda (a55842)
                                 (if a55842
                                   (let ((f55944
                                          (lambda (a55843)
                                            (let ((f55943
                                                   (lambda (a55844)
                                                     (let ((f55942
                                                            (lambda (a55845)
                                                              (cons
                                                               kont55940
                                                               a55843
                                                               a55845))))
                                                       (filter
                                                        f55942
                                                        op
                                                        a55844)))))
                                              (cdr f55943 lst)))))
                                     (car f55944 lst))
                                   (let ((f55945
                                          (lambda (a55846)
                                            (filter kont55940 op a55846))))
                                     (cdr f55945 lst))))))
                          (op f55946 a55841)))))
                 (car f55947 lst))))))
      (null? f55948 lst)))
  (define (drop kont55949 lst n)
    (let ((a55847 '0))
      (let ((f55952
             (lambda (a55848)
               (if a55848
                 (kont55949 lst)
                 (let ((f55951
                        (lambda (a55849)
                          (let ((a55850 '1))
                            (let ((f55950
                                   (lambda (a55851)
                                     (drop kont55949 a55849 a55851))))
                              (- f55950 n a55850))))))
                   (cdr f55951 lst))))))
        (= f55952 n a55847))))
  (define (foldr kont55953 proc acc lst)
    (let ((f55957
           (lambda (a55852)
             (if a55852
               (kont55953 acc)
               (let ((f55956
                      (lambda (a55853)
                        (let ((f55955
                               (lambda (a55854)
                                 (let ((f55954
                                        (lambda (a55855)
                                          (proc kont55953 a55853 a55855))))
                                   (foldr f55954 proc acc a55854)))))
                          (cdr f55955 lst)))))
                 (car f55956 lst))))))
      (null? f55957 lst)))
  (define (append kont55958 lst1 lst2)
    (let ((f55962
           (lambda (a55856)
             (if a55856
               (kont55958 lst2)
               (let ((f55961
                      (lambda (a55857)
                        (let ((f55960
                               (lambda (a55858)
                                 (let ((f55959
                                        (lambda (a55859)
                                          (cons kont55958 a55857 a55859))))
                                   (append f55959 a55858 lst2)))))
                          (cdr f55960 lst1)))))
                 (car f55961 lst1))))))
      (null? f55962 lst1)))
  (define (hash . lst)
    (let ((kont55963 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x55860 (apply-prim hash lst))) (kont55963 x55860)))))
  (define (hash-ref kont55965 h k)
    (let ((x55861 (prim hash-ref h k))) (kont55965 x55861)))
  (define (hash-set kont55966 h k v)
    (let ((x55862 (prim hash-set h k v))) (kont55966 x55862)))
  (define (hash-has-key? kont55967 h k)
    (let ((x55863 (prim hash-has-key? h k))) (kont55967 x55863)))
  (define (hash-count kont55968 h)
    (let ((x55864 (prim hash-count h))) (kont55968 x55864)))
  (define (call kont55969)
    (let ((a55865 '1))
      (let ((a55866 '2))
        (let ((a55867 '3))
          (let ((a55868 '4))
            (let ((a55869 '5))
              (let ((a55870 '100))
                (<= kont55969 a55865 a55866 a55867 a55868 a55869 a55870))))))))
  (define (brouhaha_main kont55970)
    (let ((f55971 (lambda (x55871) (kont55970 x55871)))) (call f55971))))
