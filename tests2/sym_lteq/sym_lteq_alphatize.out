'((define (+ . lst) (let ((x55782 (apply-prim + lst))) x55782))
  (define (- . lst) (let ((x55783 (apply-prim - lst))) x55783))
  (define (* . lst) (let ((x55784 (apply-prim * lst))) x55784))
  (define (modulo a b) (let ((x55785 (prim modulo a b))) x55785))
  (define (/ . lst) (let ((x55786 (apply-prim / lst))) x55786))
  (define (= . lst) (let ((x55787 (apply-prim = lst))) x55787))
  (define (> . lst) (let ((x55788 (apply-prim > lst))) x55788))
  (define (< . lst) (let ((x55789 (apply-prim < lst))) x55789))
  (define (<= . lst) (let ((x55790 (apply-prim <= lst))) x55790))
  (define (>= . lst) (let ((x55791 (apply-prim >= lst))) x55791))
  (define (null? x) (let ((x55792 (prim null? x))) x55792))
  (define (equal? x y) (let ((x55793 (prim equal? x y))) x55793))
  (define (eq? x y) (let ((x55794 (prim eq? x y))) x55794))
  (define (cons a b) (let ((x55795 (prim cons a b))) x55795))
  (define (car lst) (let ((x55796 (prim car lst))) x55796))
  (define (cdr lst) (let ((x55797 (prim cdr lst))) x55797))
  (define (even? x)
    (let ((a55798 '0))
      (let ((a55799 '2))
        (let ((a55800 (modulo x a55799))) (equal? a55798 a55800)))))
  (define (odd? x)
    (let ((a55801 '1))
      (let ((a55802 '2))
        (let ((a55803 (modulo x a55802))) (equal? a55801 a55803)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a55804 (null? lst)))
      (if a55804
        (let ((x55805 '#f)) x55805)
        (let ((a55806 (car lst)))
          (let ((a55807 (equal? a55806 x)))
            (if a55807
              (let ((x55808 '#t)) x55808)
              (let ((a55809 (cdr lst))) (member? x a55809))))))))
  (define (foldl fun acc lst)
    (let ((a55810 (null? lst)))
      (if a55810
        acc
        (let ((a55811 (car lst)))
          (let ((a55812 (fun a55811 acc)))
            (let ((a55813 (cdr lst))) (foldl fun a55812 a55813)))))))
  (define (reverse-helper lst lst2)
    (let ((a55814 (null? lst)))
      (if a55814
        lst2
        (let ((a55815 (cdr lst)))
          (let ((a55816 (car lst)))
            (let ((a55817 (cons a55816 lst2)))
              (reverse-helper a55815 a55817)))))))
  (define (reverse lst) (let ((a55818 (list))) (reverse-helper lst a55818)))
  (define (take-helper lst n lst2)
    (let ((a55819 '0))
      (let ((a55820 (= n a55819)))
        (if a55820
          (let ((x55821 (reverse lst2))) x55821)
          (let ((a55822 (cdr lst)))
            (let ((a55823 '1))
              (let ((a55824 (- n a55823)))
                (let ((a55825 (car lst)))
                  (let ((a55826 (cons a55825 lst2)))
                    (take-helper a55822 a55824 a55826))))))))))
  (define (take lst n) (let ((a55827 (list))) (take-helper lst n a55827)))
  (define (length lst)
    (let ((a55828 (null? lst)))
      (if a55828
        (let ((x55829 '0)) x55829)
        (let ((a55830 '1))
          (let ((a55831 (cdr lst)))
            (let ((a55832 (length a55831))) (+ a55830 a55832)))))))
  (define (map proc lst)
    (let ((a55833 (null? lst)))
      (if a55833
        (let ((x55834 (list))) x55834)
        (let ((a55835 (car lst)))
          (let ((a55836 (proc a55835)))
            (let ((a55837 (cdr lst)))
              (let ((a55838 (map proc a55837))) (cons a55836 a55838))))))))
  (define (filter op lst)
    (let ((a55839 (null? lst)))
      (if a55839
        (let ((x55840 (list))) x55840)
        (let ((a55841 (car lst)))
          (let ((a55842 (op a55841)))
            (if a55842
              (let ((a55843 (car lst)))
                (let ((a55844 (cdr lst)))
                  (let ((a55845 (filter op a55844))) (cons a55843 a55845))))
              (let ((a55846 (cdr lst))) (filter op a55846))))))))
  (define (drop lst n)
    (let ((a55847 '0))
      (let ((a55848 (= n a55847)))
        (if a55848
          lst
          (let ((a55849 (cdr lst)))
            (let ((a55850 '1))
              (let ((a55851 (- n a55850))) (drop a55849 a55851))))))))
  (define (foldr proc acc lst)
    (let ((a55852 (null? lst)))
      (if a55852
        acc
        (let ((a55853 (car lst)))
          (let ((a55854 (cdr lst)))
            (let ((a55855 (foldr proc acc a55854))) (proc a55853 a55855)))))))
  (define (append lst1 lst2)
    (let ((a55856 (null? lst1)))
      (if a55856
        lst2
        (let ((a55857 (car lst1)))
          (let ((a55858 (cdr lst1)))
            (let ((a55859 (append a55858 lst2))) (cons a55857 a55859)))))))
  (define (hash . lst) (let ((x55860 (apply-prim hash lst))) x55860))
  (define (hash-ref h k) (let ((x55861 (prim hash-ref h k))) x55861))
  (define (hash-set h k v) (let ((x55862 (prim hash-set h k v))) x55862))
  (define (hash-has-key? h k) (let ((x55863 (prim hash-has-key? h k))) x55863))
  (define (hash-count h) (let ((x55864 (prim hash-count h))) x55864))
  (define (call)
    (let ((a55865 '1))
      (let ((a55866 '2))
        (let ((a55867 '3))
          (let ((a55868 '4))
            (let ((a55869 '5))
              (let ((a55870 '100))
                (<= a55865 a55866 a55867 a55868 a55869 a55870))))))))
  (define (brouhaha_main) (let ((x55871 (call))) x55871)))
