'((define (+ . lst) (let ((x57270 (apply-prim + lst))) x57270))
  (define (- . lst) (let ((x57271 (apply-prim - lst))) x57271))
  (define (* . lst) (let ((x57272 (apply-prim * lst))) x57272))
  (define (modulo a b) (let ((x57273 (prim modulo a b))) x57273))
  (define (/ . lst) (let ((x57274 (apply-prim / lst))) x57274))
  (define (= . lst) (let ((x57275 (apply-prim = lst))) x57275))
  (define (> . lst) (let ((x57276 (apply-prim > lst))) x57276))
  (define (< . lst) (let ((x57277 (apply-prim < lst))) x57277))
  (define (<= . lst) (let ((x57278 (apply-prim <= lst))) x57278))
  (define (>= . lst) (let ((x57279 (apply-prim >= lst))) x57279))
  (define (null? x) (let ((x57280 (prim null? x))) x57280))
  (define (equal? x y) (let ((x57281 (prim equal? x y))) x57281))
  (define (eq? x y) (let ((x57282 (prim eq? x y))) x57282))
  (define (cons a b) (let ((x57283 (prim cons a b))) x57283))
  (define (car lst) (let ((x57284 (prim car lst))) x57284))
  (define (cdr lst) (let ((x57285 (prim cdr lst))) x57285))
  (define (even? x)
    (let ((a57286 '0))
      (let ((a57287 '2))
        (let ((a57288 (modulo x a57287))) (equal? a57286 a57288)))))
  (define (odd? x)
    (let ((a57289 '1))
      (let ((a57290 '2))
        (let ((a57291 (modulo x a57290))) (equal? a57289 a57291)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a57292 (null? lst)))
      (if a57292
        (let ((x57293 '#f)) x57293)
        (let ((a57294 (car lst)))
          (let ((a57295 (equal? a57294 x)))
            (if a57295
              (let ((x57296 '#t)) x57296)
              (let ((a57297 (cdr lst))) (member? x a57297))))))))
  (define (foldl fun acc lst)
    (let ((a57298 (null? lst)))
      (if a57298
        acc
        (let ((a57299 (car lst)))
          (let ((a57300 (fun a57299 acc)))
            (let ((a57301 (cdr lst))) (foldl fun a57300 a57301)))))))
  (define (reverse-helper lst lst2)
    (let ((a57302 (null? lst)))
      (if a57302
        lst2
        (let ((a57303 (cdr lst)))
          (let ((a57304 (car lst)))
            (let ((a57305 (cons a57304 lst2)))
              (reverse-helper a57303 a57305)))))))
  (define (reverse lst) (let ((a57306 (list))) (reverse-helper lst a57306)))
  (define (take-helper lst n lst2)
    (let ((a57307 '0))
      (let ((a57308 (= n a57307)))
        (if a57308
          (let ((x57309 (reverse lst2))) x57309)
          (let ((a57310 (cdr lst)))
            (let ((a57311 '1))
              (let ((a57312 (- n a57311)))
                (let ((a57313 (car lst)))
                  (let ((a57314 (cons a57313 lst2)))
                    (take-helper a57310 a57312 a57314))))))))))
  (define (take lst n) (let ((a57315 (list))) (take-helper lst n a57315)))
  (define (length lst)
    (let ((a57316 (null? lst)))
      (if a57316
        (let ((x57317 '0)) x57317)
        (let ((a57318 '1))
          (let ((a57319 (cdr lst)))
            (let ((a57320 (length a57319))) (+ a57318 a57320)))))))
  (define (map proc lst)
    (let ((a57321 (null? lst)))
      (if a57321
        (let ((x57322 (list))) x57322)
        (let ((a57323 (car lst)))
          (let ((a57324 (proc a57323)))
            (let ((a57325 (cdr lst)))
              (let ((a57326 (map proc a57325))) (cons a57324 a57326))))))))
  (define (filter op lst)
    (let ((a57327 (null? lst)))
      (if a57327
        (let ((x57328 (list))) x57328)
        (let ((a57329 (car lst)))
          (let ((a57330 (op a57329)))
            (if a57330
              (let ((a57331 (car lst)))
                (let ((a57332 (cdr lst)))
                  (let ((a57333 (filter op a57332))) (cons a57331 a57333))))
              (let ((a57334 (cdr lst))) (filter op a57334))))))))
  (define (drop lst n)
    (let ((a57335 '0))
      (let ((a57336 (= n a57335)))
        (if a57336
          lst
          (let ((a57337 (cdr lst)))
            (let ((a57338 '1))
              (let ((a57339 (- n a57338))) (drop a57337 a57339))))))))
  (define (foldr proc acc lst)
    (let ((a57340 (null? lst)))
      (if a57340
        acc
        (let ((a57341 (car lst)))
          (let ((a57342 (cdr lst)))
            (let ((a57343 (foldr proc acc a57342))) (proc a57341 a57343)))))))
  (define (append lst1 lst2)
    (let ((a57344 (null? lst1)))
      (if a57344
        lst2
        (let ((a57345 (car lst1)))
          (let ((a57346 (cdr lst1)))
            (let ((a57347 (append a57346 lst2))) (cons a57345 a57347)))))))
  (define (hash . lst) (let ((x57348 (apply-prim hash lst))) x57348))
  (define (hash-ref h k) (let ((x57349 (prim hash-ref h k))) x57349))
  (define (hash-set h k v) (let ((x57350 (prim hash-set h k v))) x57350))
  (define (hash-has-key? h k) (let ((x57351 (prim hash-has-key? h k))) x57351))
  (define (hash-count h) (let ((x57352 (prim hash-count h))) x57352))
  (define (call)
    (let ((a57353 '1))
      (let ((a57354 '2))
        (let ((a57355 '3))
          (let ((a57356 '4))
            (let ((a57357 '5))
              (let ((a57358 '100))
                (<= a57353 a57354 a57355 a57356 a57357 a57358))))))))
  (define (brouhaha_main) (let ((x57359 (call))) x57359)))
