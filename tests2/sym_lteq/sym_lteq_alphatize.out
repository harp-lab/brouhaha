'((define (+ . lst) (let ((x59318 (apply-prim + lst))) x59318))
  (define (- . lst) (let ((x59319 (apply-prim - lst))) x59319))
  (define (* . lst) (let ((x59320 (apply-prim * lst))) x59320))
  (define (modulo a b) (let ((x59321 (prim modulo a b))) x59321))
  (define (/ . lst) (let ((x59322 (apply-prim / lst))) x59322))
  (define (= . lst) (let ((x59323 (apply-prim = lst))) x59323))
  (define (> . lst) (let ((x59324 (apply-prim > lst))) x59324))
  (define (< . lst) (let ((x59325 (apply-prim < lst))) x59325))
  (define (<= . lst) (let ((x59326 (apply-prim <= lst))) x59326))
  (define (>= . lst) (let ((x59327 (apply-prim >= lst))) x59327))
  (define (null? x) (let ((x59328 (prim null? x))) x59328))
  (define (equal? x y) (let ((x59329 (prim equal? x y))) x59329))
  (define (eq? x y) (let ((x59330 (prim eq? x y))) x59330))
  (define (cons a b) (let ((x59331 (prim cons a b))) x59331))
  (define (car lst) (let ((x59332 (prim car lst))) x59332))
  (define (cdr lst) (let ((x59333 (prim cdr lst))) x59333))
  (define (even? x)
    (let ((a59334 '0))
      (let ((a59335 '2))
        (let ((a59336 (modulo x a59335))) (equal? a59334 a59336)))))
  (define (odd? x)
    (let ((a59337 '1))
      (let ((a59338 '2))
        (let ((a59339 (modulo x a59338))) (equal? a59337 a59339)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a59340 (null? lst)))
      (if a59340
        (let ((x59341 '#f)) x59341)
        (let ((a59342 (car lst)))
          (let ((a59343 (equal? a59342 x)))
            (if a59343
              (let ((x59344 '#t)) x59344)
              (let ((a59345 (cdr lst))) (member? x a59345))))))))
  (define (foldl fun acc lst)
    (let ((a59346 (null? lst)))
      (if a59346
        acc
        (let ((a59347 (car lst)))
          (let ((a59348 (fun a59347 acc)))
            (let ((a59349 (cdr lst))) (foldl fun a59348 a59349)))))))
  (define (reverse-helper lst lst2)
    (let ((a59350 (null? lst)))
      (if a59350
        lst2
        (let ((a59351 (cdr lst)))
          (let ((a59352 (car lst)))
            (let ((a59353 (cons a59352 lst2)))
              (reverse-helper a59351 a59353)))))))
  (define (reverse lst) (let ((a59354 (list))) (reverse-helper lst a59354)))
  (define (take-helper lst n lst2)
    (let ((a59355 '0))
      (let ((a59356 (= n a59355)))
        (if a59356
          (let ((x59357 (reverse lst2))) x59357)
          (let ((a59358 (cdr lst)))
            (let ((a59359 '1))
              (let ((a59360 (- n a59359)))
                (let ((a59361 (car lst)))
                  (let ((a59362 (cons a59361 lst2)))
                    (take-helper a59358 a59360 a59362))))))))))
  (define (take lst n) (let ((a59363 (list))) (take-helper lst n a59363)))
  (define (length lst)
    (let ((a59364 (null? lst)))
      (if a59364
        (let ((x59365 '0)) x59365)
        (let ((a59366 '1))
          (let ((a59367 (cdr lst)))
            (let ((a59368 (length a59367))) (+ a59366 a59368)))))))
  (define (map proc lst)
    (let ((a59369 (null? lst)))
      (if a59369
        (let ((x59370 (list))) x59370)
        (let ((a59371 (car lst)))
          (let ((a59372 (proc a59371)))
            (let ((a59373 (cdr lst)))
              (let ((a59374 (map proc a59373))) (cons a59372 a59374))))))))
  (define (filter op lst)
    (let ((a59375 (null? lst)))
      (if a59375
        (let ((x59376 (list))) x59376)
        (let ((a59377 (car lst)))
          (let ((a59378 (op a59377)))
            (if a59378
              (let ((a59379 (car lst)))
                (let ((a59380 (cdr lst)))
                  (let ((a59381 (filter op a59380))) (cons a59379 a59381))))
              (let ((a59382 (cdr lst))) (filter op a59382))))))))
  (define (drop lst n)
    (let ((a59383 '0))
      (let ((a59384 (= n a59383)))
        (if a59384
          lst
          (let ((a59385 (cdr lst)))
            (let ((a59386 '1))
              (let ((a59387 (- n a59386))) (drop a59385 a59387))))))))
  (define (foldr proc acc lst)
    (let ((a59388 (null? lst)))
      (if a59388
        acc
        (let ((a59389 (car lst)))
          (let ((a59390 (cdr lst)))
            (let ((a59391 (foldr proc acc a59390))) (proc a59389 a59391)))))))
  (define (append lst1 lst2)
    (let ((a59392 (null? lst1)))
      (if a59392
        lst2
        (let ((a59393 (car lst1)))
          (let ((a59394 (cdr lst1)))
            (let ((a59395 (append a59394 lst2))) (cons a59393 a59395)))))))
  (define (hash . lst) (let ((x59396 (apply-prim hash lst))) x59396))
  (define (hash-ref h k) (let ((x59397 (prim hash-ref h k))) x59397))
  (define (hash-set h k v) (let ((x59398 (prim hash-set h k v))) x59398))
  (define (hash-has-key? h k) (let ((x59399 (prim hash-has-key? h k))) x59399))
  (define (hash-count h) (let ((x59400 (prim hash-count h))) x59400))
  (define (call)
    (let ((a59401 '1))
      (let ((a59402 '2))
        (let ((a59403 '3))
          (let ((a59404 '4))
            (let ((a59405 '5))
              (let ((a59406 '100))
                (<= a59401 a59402 a59403 a59404 a59405 a59406))))))))
  (define (brouhaha_main) (let ((x59407 (call))) x59407)))
