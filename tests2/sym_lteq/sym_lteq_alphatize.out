'((define (+ . lst) (let ((x58485 (apply-prim + lst))) x58485))
  (define (- . lst) (let ((x58486 (apply-prim - lst))) x58486))
  (define (* . lst) (let ((x58487 (apply-prim * lst))) x58487))
  (define (modulo a b) (let ((x58488 (prim modulo a b))) x58488))
  (define (/ . lst) (let ((x58489 (apply-prim / lst))) x58489))
  (define (= . lst) (let ((x58490 (apply-prim = lst))) x58490))
  (define (> . lst) (let ((x58491 (apply-prim > lst))) x58491))
  (define (< . lst) (let ((x58492 (apply-prim < lst))) x58492))
  (define (<= . lst) (let ((x58493 (apply-prim <= lst))) x58493))
  (define (>= . lst) (let ((x58494 (apply-prim >= lst))) x58494))
  (define (null? x) (let ((x58495 (prim null? x))) x58495))
  (define (equal? x y) (let ((x58496 (prim equal? x y))) x58496))
  (define (eq? x y) (let ((x58497 (prim eq? x y))) x58497))
  (define (cons a b) (let ((x58498 (prim cons a b))) x58498))
  (define (car lst) (let ((x58499 (prim car lst))) x58499))
  (define (cdr lst) (let ((x58500 (prim cdr lst))) x58500))
  (define (even? x)
    (let ((a58501 '0))
      (let ((a58502 '2))
        (let ((a58503 (modulo x a58502))) (equal? a58501 a58503)))))
  (define (odd? x)
    (let ((a58504 '1))
      (let ((a58505 '2))
        (let ((a58506 (modulo x a58505))) (equal? a58504 a58506)))))
  (define (list . x) x)
  (define (and . lst) (let ((x58507 (apply-prim and lst))) x58507))
  (define (or . lst) (let ((x58508 (apply-prim or lst))) x58508))
  (define (member? x lst)
    (let ((a58509 (null? lst)))
      (if a58509
        (let ((x58510 '#f)) x58510)
        (let ((a58511 (car lst)))
          (let ((a58512 (equal? a58511 x)))
            (if a58512
              (let ((x58513 '#t)) x58513)
              (let ((a58514 (cdr lst))) (member? x a58514))))))))
  (define (foldl fun acc lst)
    (let ((a58515 (null? lst)))
      (if a58515
        acc
        (let ((a58516 (car lst)))
          (let ((a58517 (fun a58516 acc)))
            (let ((a58518 (cdr lst))) (foldl fun a58517 a58518)))))))
  (define (reverse-helper lst lst2)
    (let ((a58519 (null? lst)))
      (if a58519
        lst2
        (let ((a58520 (cdr lst)))
          (let ((a58521 (car lst)))
            (let ((a58522 (cons a58521 lst2)))
              (reverse-helper a58520 a58522)))))))
  (define (reverse lst) (let ((a58523 (list))) (reverse-helper lst a58523)))
  (define (take-helper lst n lst2)
    (let ((a58524 '0))
      (let ((a58525 (= n a58524)))
        (if a58525
          (let ((x58526 (reverse lst2))) x58526)
          (let ((a58527 (cdr lst)))
            (let ((a58528 '1))
              (let ((a58529 (- n a58528)))
                (let ((a58530 (car lst)))
                  (let ((a58531 (cons a58530 lst2)))
                    (take-helper a58527 a58529 a58531))))))))))
  (define (take lst n) (let ((a58532 (list))) (take-helper lst n a58532)))
  (define (length lst)
    (let ((a58533 (null? lst)))
      (if a58533
        (let ((x58534 '0)) x58534)
        (let ((a58535 '1))
          (let ((a58536 (cdr lst)))
            (let ((a58537 (length a58536))) (+ a58535 a58537)))))))
  (define (map proc lst)
    (let ((a58538 (null? lst)))
      (if a58538
        (let ((x58539 (list))) x58539)
        (let ((a58540 (car lst)))
          (let ((a58541 (proc a58540)))
            (let ((a58542 (cdr lst)))
              (let ((a58543 (map proc a58542))) (cons a58541 a58543))))))))
  (define (filter op lst)
    (let ((a58544 (null? lst)))
      (if a58544
        (let ((x58545 (list))) x58545)
        (let ((a58546 (car lst)))
          (let ((a58547 (op a58546)))
            (if a58547
              (let ((a58548 (car lst)))
                (let ((a58549 (cdr lst)))
                  (let ((a58550 (filter op a58549))) (cons a58548 a58550))))
              (let ((a58551 (cdr lst))) (filter op a58551))))))))
  (define (drop lst n)
    (let ((a58552 '0))
      (let ((a58553 (= n a58552)))
        (if a58553
          lst
          (let ((a58554 (cdr lst)))
            (let ((a58555 '1))
              (let ((a58556 (- n a58555))) (drop a58554 a58556))))))))
  (define (foldr proc acc lst)
    (let ((a58557 (null? lst)))
      (if a58557
        acc
        (let ((a58558 (car lst)))
          (let ((a58559 (cdr lst)))
            (let ((a58560 (foldr proc acc a58559))) (proc a58558 a58560)))))))
  (define (append lst1 lst2)
    (let ((a58561 (null? lst1)))
      (if a58561
        lst2
        (let ((a58562 (car lst1)))
          (let ((a58563 (cdr lst1)))
            (let ((a58564 (append a58563 lst2))) (cons a58562 a58564)))))))
  (define (hash . lst) (let ((x58565 (apply-prim hash lst))) x58565))
  (define (hash-ref h k) (let ((x58566 (prim hash-ref h k))) x58566))
  (define (hash-set h k v) (let ((x58567 (prim hash-set h k v))) x58567))
  (define (hash-has-key? h k) (let ((x58568 (prim hash-has-key? h k))) x58568))
  (define (hash-count h) (let ((x58569 (prim hash-count h))) x58569))
  (define (call)
    (let ((a58570 '1))
      (let ((a58571 '2))
        (let ((a58572 '3))
          (let ((a58573 '4))
            (let ((a58574 '5))
              (let ((a58575 '100))
                (<= a58570 a58571 a58572 a58573 a58574 a58575))))))))
  (define (brouhaha_main) (let ((x58576 (call))) x58576)))
