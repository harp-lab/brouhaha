'((define (+ . lst)
    (let ((kont7822 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7734 (apply-prim + lst))) (kont7822 x7734)))))
  (define (- . lst)
    (let ((kont7824 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7735 (apply-prim - lst))) (kont7824 x7735)))))
  (define (* . lst)
    (let ((kont7826 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7736 (apply-prim * lst))) (kont7826 x7736)))))
  (define (modulo kont7828 a b)
    (let ((x7737 (prim modulo a b))) (kont7828 x7737)))
  (define (/ . lst)
    (let ((kont7829 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7738 (apply-prim / lst))) (kont7829 x7738)))))
  (define (= . lst)
    (let ((kont7831 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7739 (apply-prim = lst))) (kont7831 x7739)))))
  (define (> . lst)
    (let ((kont7833 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7740 (apply-prim > lst))) (kont7833 x7740)))))
  (define (< . lst)
    (let ((kont7835 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7741 (apply-prim < lst))) (kont7835 x7741)))))
  (define (<= . lst)
    (let ((kont7837 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7742 (apply-prim <= lst))) (kont7837 x7742)))))
  (define (>= . lst)
    (let ((kont7839 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7743 (apply-prim >= lst))) (kont7839 x7743)))))
  (define (null? kont7841 x) (let ((x7744 (prim null? x))) (kont7841 x7744)))
  (define (equal? kont7842 x y)
    (let ((x7745 (prim equal? x y))) (kont7842 x7745)))
  (define (eq? kont7843 x y) (let ((x7746 (prim eq? x y))) (kont7843 x7746)))
  (define (cons kont7844 a b) (let ((x7747 (prim cons a b))) (kont7844 x7747)))
  (define (car kont7845 lst) (let ((x7748 (prim car lst))) (kont7845 x7748)))
  (define (cdr kont7846 lst) (let ((x7749 (prim cdr lst))) (kont7846 x7749)))
  (define (even? kont7847 x)
    (let ((a7750 '0))
      (let ((a7751 '2))
        (let ((f7848 (lambda (a7752) (equal? kont7847 a7750 a7752))))
          (modulo f7848 x a7751)))))
  (define (odd? kont7849 x)
    (let ((a7753 '1))
      (let ((a7754 '2))
        (let ((f7850 (lambda (a7755) (equal? kont7849 a7753 a7755))))
          (modulo f7850 x a7754)))))
  (define (list . x)
    (let ((kont7851 (prim car x))) (let ((x (prim cdr x))) (kont7851 x))))
  (define (member? kont7853 x lst)
    (let ((f7857
           (lambda (a7756)
             (if a7756
               (let ((x7757 '#f)) (kont7853 x7757))
               (let ((f7856
                      (lambda (a7758)
                        (let ((f7855
                               (lambda (a7759)
                                 (if a7759
                                   (let ((x7760 '#t)) (kont7853 x7760))
                                   (let ((f7854
                                          (lambda (a7761)
                                            (member? kont7853 x a7761))))
                                     (cdr f7854 lst))))))
                          (equal? f7855 a7758 x)))))
                 (car f7856 lst))))))
      (null? f7857 lst)))
  (define (foldl kont7858 fun acc lst)
    (let ((f7862
           (lambda (a7762)
             (if a7762
               (kont7858 acc)
               (let ((f7861
                      (lambda (a7763)
                        (let ((f7860
                               (lambda (a7764)
                                 (let ((f7859
                                        (lambda (a7765)
                                          (foldl kont7858 fun a7764 a7765))))
                                   (cdr f7859 lst)))))
                          (fun f7860 a7763 acc)))))
                 (car f7861 lst))))))
      (null? f7862 lst)))
  (define (reverse-helper kont7863 lst lst2)
    (let ((f7867
           (lambda (a7766)
             (if a7766
               (kont7863 lst2)
               (let ((f7866
                      (lambda (a7767)
                        (let ((f7865
                               (lambda (a7768)
                                 (let ((f7864
                                        (lambda (a7769)
                                          (reverse-helper
                                           kont7863
                                           a7767
                                           a7769))))
                                   (cons f7864 a7768 lst2)))))
                          (car f7865 lst)))))
                 (cdr f7866 lst))))))
      (null? f7867 lst)))
  (define (reverse kont7868 lst)
    (let ((f7869 (lambda (a7770) (reverse-helper kont7868 lst a7770))))
      (list f7869)))
  (define (take-helper kont7870 lst n lst2)
    (let ((a7771 '0))
      (let ((f7876
             (lambda (a7772)
               (if a7772
                 (let ((f7871 (lambda (x7773) (kont7870 x7773))))
                   (reverse f7871 lst2))
                 (let ((f7875
                        (lambda (a7774)
                          (let ((a7775 '1))
                            (let ((f7874
                                   (lambda (a7776)
                                     (let ((f7873
                                            (lambda (a7777)
                                              (let ((f7872
                                                     (lambda (a7778)
                                                       (take-helper
                                                        kont7870
                                                        a7774
                                                        a7776
                                                        a7778))))
                                                (cons f7872 a7777 lst2)))))
                                       (car f7873 lst)))))
                              (- f7874 n a7775))))))
                   (cdr f7875 lst))))))
        (= f7876 n a7771))))
  (define (take kont7877 lst n)
    (let ((f7878 (lambda (a7779) (take-helper kont7877 lst n a7779))))
      (list f7878)))
  (define (length kont7879 lst)
    (let ((f7882
           (lambda (a7780)
             (if a7780
               (let ((x7781 '0)) (kont7879 x7781))
               (let ((a7782 '1))
                 (let ((f7881
                        (lambda (a7783)
                          (let ((f7880
                                 (lambda (a7784) (+ kont7879 a7782 a7784))))
                            (length f7880 a7783)))))
                   (cdr f7881 lst)))))))
      (null? f7882 lst)))
  (define (map kont7883 proc lst)
    (let ((f7889
           (lambda (a7785)
             (if a7785
               (let ((f7884 (lambda (x7786) (kont7883 x7786)))) (list f7884))
               (let ((f7888
                      (lambda (a7787)
                        (let ((f7887
                               (lambda (a7788)
                                 (let ((f7886
                                        (lambda (a7789)
                                          (let ((f7885
                                                 (lambda (a7790)
                                                   (cons
                                                    kont7883
                                                    a7788
                                                    a7790))))
                                            (map f7885 proc a7789)))))
                                   (cdr f7886 lst)))))
                          (proc f7887 a7787)))))
                 (car f7888 lst))))))
      (null? f7889 lst)))
  (define (filter kont7890 op lst)
    (let ((f7898
           (lambda (a7791)
             (if a7791
               (let ((f7891 (lambda (x7792) (kont7890 x7792)))) (list f7891))
               (let ((f7897
                      (lambda (a7793)
                        (let ((f7896
                               (lambda (a7794)
                                 (if a7794
                                   (let ((f7894
                                          (lambda (a7795)
                                            (let ((f7893
                                                   (lambda (a7796)
                                                     (let ((f7892
                                                            (lambda (a7797)
                                                              (cons
                                                               kont7890
                                                               a7795
                                                               a7797))))
                                                       (filter
                                                        f7892
                                                        op
                                                        a7796)))))
                                              (cdr f7893 lst)))))
                                     (car f7894 lst))
                                   (let ((f7895
                                          (lambda (a7798)
                                            (filter kont7890 op a7798))))
                                     (cdr f7895 lst))))))
                          (op f7896 a7793)))))
                 (car f7897 lst))))))
      (null? f7898 lst)))
  (define (drop kont7899 lst n)
    (let ((a7799 '0))
      (let ((f7902
             (lambda (a7800)
               (if a7800
                 (kont7899 lst)
                 (let ((f7901
                        (lambda (a7801)
                          (let ((a7802 '1))
                            (let ((f7900
                                   (lambda (a7803)
                                     (drop kont7899 a7801 a7803))))
                              (- f7900 n a7802))))))
                   (cdr f7901 lst))))))
        (= f7902 n a7799))))
  (define (foldr kont7903 proc acc lst)
    (let ((f7907
           (lambda (a7804)
             (if a7804
               (kont7903 acc)
               (let ((f7906
                      (lambda (a7805)
                        (let ((f7905
                               (lambda (a7806)
                                 (let ((f7904
                                        (lambda (a7807)
                                          (proc kont7903 a7805 a7807))))
                                   (foldr f7904 proc acc a7806)))))
                          (cdr f7905 lst)))))
                 (car f7906 lst))))))
      (null? f7907 lst)))
  (define (append kont7908 lst1 lst2)
    (let ((f7912
           (lambda (a7808)
             (if a7808
               (kont7908 lst2)
               (let ((f7911
                      (lambda (a7809)
                        (let ((f7910
                               (lambda (a7810)
                                 (let ((f7909
                                        (lambda (a7811)
                                          (cons kont7908 a7809 a7811))))
                                   (append f7909 a7810 lst2)))))
                          (cdr f7910 lst1)))))
                 (car f7911 lst1))))))
      (null? f7912 lst1)))
  (define (hash . lst)
    (let ((kont7913 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7812 (apply-prim hash lst))) (kont7913 x7812)))))
  (define (hash-ref kont7915 h k)
    (let ((x7813 (prim hash-ref h k))) (kont7915 x7813)))
  (define (hash-set kont7916 h k v)
    (let ((x7814 (prim hash-set h k v))) (kont7916 x7814)))
  (define (hash-has-key? kont7917 h k)
    (let ((x7815 (prim hash-has-key? h k))) (kont7917 x7815)))
  (define (hash-count kont7918 h)
    (let ((x7816 (prim hash-count h))) (kont7918 x7816)))
  (define (call kont7919)
    (let ((a7817 '1))
      (let ((a7818 '2))
        (let ((a7819 '3))
          (let ((f7921
                 (lambda (a7820)
                   (let ((cps-lst7920 (prim cons kont7919 a7820)))
                     (apply + cps-lst7920)))))
            (list f7921 a7817 a7818 a7819))))))
  (define (brouhaha_main kont7922)
    (let ((f7923 (lambda (x7821) (kont7922 x7821)))) (call f7923))))
