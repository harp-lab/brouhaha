'((define (+ . lst) (let ((x7903 (apply-prim + lst))) x7903))
  (define (- . lst) (let ((x7904 (apply-prim - lst))) x7904))
  (define (* . lst) (let ((x7905 (apply-prim * lst))) x7905))
  (define (modulo a b) (let ((x7906 (prim modulo a b))) x7906))
  (define (/ . lst) (let ((x7907 (apply-prim / lst))) x7907))
  (define (= . lst) (let ((x7908 (apply-prim = lst))) x7908))
  (define (> . lst) (let ((x7909 (apply-prim > lst))) x7909))
  (define (< . lst) (let ((x7910 (apply-prim < lst))) x7910))
  (define (<= . lst) (let ((x7911 (apply-prim <= lst))) x7911))
  (define (>= . lst) (let ((x7912 (apply-prim >= lst))) x7912))
  (define (null? x) (let ((x7913 (prim null? x))) x7913))
  (define (equal? x y) (let ((x7914 (prim equal? x y))) x7914))
  (define (eq? x y) (let ((x7915 (prim eq? x y))) x7915))
  (define (cons a b) (let ((x7916 (prim cons a b))) x7916))
  (define (car lst) (let ((x7917 (prim car lst))) x7917))
  (define (cdr lst) (let ((x7918 (prim cdr lst))) x7918))
  (define (even? x)
    (let ((a7919 '0))
      (let ((a7920 '2))
        (let ((a7921 (modulo x a7920))) (equal? a7919 a7921)))))
  (define (odd? x)
    (let ((a7922 '1))
      (let ((a7923 '2))
        (let ((a7924 (modulo x a7923))) (equal? a7922 a7924)))))
  (define (list . x) x)
  (define (and . lst) (let ((x7925 (apply-prim and lst))) x7925))
  (define (or . lst) (let ((x7926 (apply-prim or lst))) x7926))
  (define (member? x lst)
    (let ((a7927 (null? lst)))
      (if a7927
        (let ((x7928 '#f)) x7928)
        (let ((a7929 (car lst)))
          (let ((a7930 (equal? a7929 x)))
            (if a7930
              (let ((x7931 '#t)) x7931)
              (let ((a7932 (cdr lst))) (member? x a7932))))))))
  (define (foldl fun acc lst)
    (let ((a7933 (null? lst)))
      (if a7933
        acc
        (let ((a7934 (car lst)))
          (let ((a7935 (fun a7934 acc)))
            (let ((a7936 (cdr lst))) (foldl fun a7935 a7936)))))))
  (define (reverse-helper lst lst2)
    (let ((a7937 (null? lst)))
      (if a7937
        lst2
        (let ((a7938 (cdr lst)))
          (let ((a7939 (car lst)))
            (let ((a7940 (cons a7939 lst2))) (reverse-helper a7938 a7940)))))))
  (define (reverse lst) (let ((a7941 (list))) (reverse-helper lst a7941)))
  (define (take-helper lst n lst2)
    (let ((a7942 '0))
      (let ((a7943 (= n a7942)))
        (if a7943
          (let ((x7944 (reverse lst2))) x7944)
          (let ((a7945 (cdr lst)))
            (let ((a7946 '1))
              (let ((a7947 (- n a7946)))
                (let ((a7948 (car lst)))
                  (let ((a7949 (cons a7948 lst2)))
                    (take-helper a7945 a7947 a7949))))))))))
  (define (take lst n) (let ((a7950 (list))) (take-helper lst n a7950)))
  (define (length lst)
    (let ((a7951 (null? lst)))
      (if a7951
        (let ((x7952 '0)) x7952)
        (let ((a7953 '1))
          (let ((a7954 (cdr lst)))
            (let ((a7955 (length a7954))) (+ a7953 a7955)))))))
  (define (map proc lst)
    (let ((a7956 (null? lst)))
      (if a7956
        (let ((x7957 (list))) x7957)
        (let ((a7958 (car lst)))
          (let ((a7959 (proc a7958)))
            (let ((a7960 (cdr lst)))
              (let ((a7961 (map proc a7960))) (cons a7959 a7961))))))))
  (define (filter op lst)
    (let ((a7962 (null? lst)))
      (if a7962
        (let ((x7963 (list))) x7963)
        (let ((a7964 (car lst)))
          (let ((a7965 (op a7964)))
            (if a7965
              (let ((a7966 (car lst)))
                (let ((a7967 (cdr lst)))
                  (let ((a7968 (filter op a7967))) (cons a7966 a7968))))
              (let ((a7969 (cdr lst))) (filter op a7969))))))))
  (define (drop lst n)
    (let ((a7970 '0))
      (let ((a7971 (= n a7970)))
        (if a7971
          lst
          (let ((a7972 (cdr lst)))
            (let ((a7973 '1))
              (let ((a7974 (- n a7973))) (drop a7972 a7974))))))))
  (define (foldr proc acc lst)
    (let ((a7975 (null? lst)))
      (if a7975
        acc
        (let ((a7976 (car lst)))
          (let ((a7977 (cdr lst)))
            (let ((a7978 (foldr proc acc a7977))) (proc a7976 a7978)))))))
  (define (append lst1 lst2)
    (let ((a7979 (null? lst1)))
      (if a7979
        lst2
        (let ((a7980 (car lst1)))
          (let ((a7981 (cdr lst1)))
            (let ((a7982 (append a7981 lst2))) (cons a7980 a7982)))))))
  (define (hash . lst) (let ((x7983 (apply-prim hash lst))) x7983))
  (define (hash-ref h k) (let ((x7984 (prim hash-ref h k))) x7984))
  (define (hash-set h k v) (let ((x7985 (prim hash-set h k v))) x7985))
  (define (hash-has-key? h k) (let ((x7986 (prim hash-has-key? h k))) x7986))
  (define (hash-count h) (let ((x7987 (prim hash-count h))) x7987))
  (define (call)
    (let ((a7988 '1))
      (let ((a7989 '2))
        (let ((a7990 '3))
          (let ((a7991 (list a7988 a7989 a7990))) (apply + a7991))))))
  (define (brouhaha_main) (let ((x7992 (call))) x7992)))
