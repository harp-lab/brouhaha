'((define (+ . lst) (let ((x7890 (apply-prim + lst))) x7890))
  (define (- . lst) (let ((x7891 (apply-prim - lst))) x7891))
  (define (* . lst) (let ((x7892 (apply-prim * lst))) x7892))
  (define (modulo a b) (let ((x7893 (prim modulo a b))) x7893))
  (define (/ . lst) (let ((x7894 (apply-prim / lst))) x7894))
  (define (= . lst) (let ((x7895 (apply-prim = lst))) x7895))
  (define (> . lst) (let ((x7896 (apply-prim > lst))) x7896))
  (define (< . lst) (let ((x7897 (apply-prim < lst))) x7897))
  (define (<= . lst) (let ((x7898 (apply-prim <= lst))) x7898))
  (define (>= . lst) (let ((x7899 (apply-prim >= lst))) x7899))
  (define (null? x) (let ((x7900 (prim null? x))) x7900))
  (define (equal? x y) (let ((x7901 (prim equal? x y))) x7901))
  (define (eq? x y) (let ((x7902 (prim eq? x y))) x7902))
  (define (cons a b) (let ((x7903 (prim cons a b))) x7903))
  (define (car lst) (let ((x7904 (prim car lst))) x7904))
  (define (cdr lst) (let ((x7905 (prim cdr lst))) x7905))
  (define (even? x)
    (let ((a7906 '0))
      (let ((a7907 '2))
        (let ((a7908 (modulo x a7907))) (equal? a7906 a7908)))))
  (define (odd? x)
    (let ((a7909 '1))
      (let ((a7910 '2))
        (let ((a7911 (modulo x a7910))) (equal? a7909 a7911)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a7912 (null? lst)))
      (if a7912
        (let ((x7913 '#f)) x7913)
        (let ((a7914 (car lst)))
          (let ((a7915 (equal? a7914 x)))
            (if a7915
              (let ((x7916 '#t)) x7916)
              (let ((a7917 (cdr lst))) (member? x a7917))))))))
  (define (foldl fun acc lst)
    (let ((a7918 (null? lst)))
      (if a7918
        acc
        (let ((a7919 (car lst)))
          (let ((a7920 (fun a7919 acc)))
            (let ((a7921 (cdr lst))) (foldl fun a7920 a7921)))))))
  (define (reverse-helper lst lst2)
    (let ((a7922 (null? lst)))
      (if a7922
        lst2
        (let ((a7923 (cdr lst)))
          (let ((a7924 (car lst)))
            (let ((a7925 (cons a7924 lst2))) (reverse-helper a7923 a7925)))))))
  (define (reverse lst) (let ((a7926 (list))) (reverse-helper lst a7926)))
  (define (take-helper lst n lst2)
    (let ((a7927 '0))
      (let ((a7928 (= n a7927)))
        (if a7928
          (let ((x7929 (reverse lst2))) x7929)
          (let ((a7930 (cdr lst)))
            (let ((a7931 '1))
              (let ((a7932 (- n a7931)))
                (let ((a7933 (car lst)))
                  (let ((a7934 (cons a7933 lst2)))
                    (take-helper a7930 a7932 a7934))))))))))
  (define (take lst n) (let ((a7935 (list))) (take-helper lst n a7935)))
  (define (length lst)
    (let ((a7936 (null? lst)))
      (if a7936
        (let ((x7937 '0)) x7937)
        (let ((a7938 '1))
          (let ((a7939 (cdr lst)))
            (let ((a7940 (length a7939))) (+ a7938 a7940)))))))
  (define (map proc lst)
    (let ((a7941 (null? lst)))
      (if a7941
        (let ((x7942 (list))) x7942)
        (let ((a7943 (car lst)))
          (let ((a7944 (proc a7943)))
            (let ((a7945 (cdr lst)))
              (let ((a7946 (map proc a7945))) (cons a7944 a7946))))))))
  (define (filter op lst)
    (let ((a7947 (null? lst)))
      (if a7947
        (let ((x7948 (list))) x7948)
        (let ((a7949 (car lst)))
          (let ((a7950 (op a7949)))
            (if a7950
              (let ((a7951 (car lst)))
                (let ((a7952 (cdr lst)))
                  (let ((a7953 (filter op a7952))) (cons a7951 a7953))))
              (let ((a7954 (cdr lst))) (filter op a7954))))))))
  (define (drop lst n)
    (let ((a7955 '0))
      (let ((a7956 (= n a7955)))
        (if a7956
          lst
          (let ((a7957 (cdr lst)))
            (let ((a7958 '1))
              (let ((a7959 (- n a7958))) (drop a7957 a7959))))))))
  (define (foldr proc acc lst)
    (let ((a7960 (null? lst)))
      (if a7960
        acc
        (let ((a7961 (car lst)))
          (let ((a7962 (cdr lst)))
            (let ((a7963 (foldr proc acc a7962))) (proc a7961 a7963)))))))
  (define (append lst1 lst2)
    (let ((a7964 (null? lst1)))
      (if a7964
        lst2
        (let ((a7965 (car lst1)))
          (let ((a7966 (cdr lst1)))
            (let ((a7967 (append a7966 lst2))) (cons a7965 a7967)))))))
  (define (hash . lst) (let ((x7968 (apply-prim hash lst))) x7968))
  (define (hash-ref h k) (let ((x7969 (prim hash-ref h k))) x7969))
  (define (hash-set h k v) (let ((x7970 (prim hash-set h k v))) x7970))
  (define (hash-has-key? h k) (let ((x7971 (prim hash-has-key? h k))) x7971))
  (define (hash-count h) (let ((x7972 (prim hash-count h))) x7972))
  (define (call)
    (let ((a7973 '1))
      (let ((a7974 '2))
        (let ((a7975 '3))
          (let ((a7976 (list a7973 a7974 a7975))) (apply + a7976))))))
  (define (brouhaha_main) (let ((x7977 (call))) x7977)))
