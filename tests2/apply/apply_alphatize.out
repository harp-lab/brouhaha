'((define (+ . lst) (let ((x7734 (apply-prim + lst))) x7734))
  (define (- . lst) (let ((x7735 (apply-prim - lst))) x7735))
  (define (* . lst) (let ((x7736 (apply-prim * lst))) x7736))
  (define (modulo a b) (let ((x7737 (prim modulo a b))) x7737))
  (define (/ . lst) (let ((x7738 (apply-prim / lst))) x7738))
  (define (= . lst) (let ((x7739 (apply-prim = lst))) x7739))
  (define (> . lst) (let ((x7740 (apply-prim > lst))) x7740))
  (define (< . lst) (let ((x7741 (apply-prim < lst))) x7741))
  (define (<= . lst) (let ((x7742 (apply-prim <= lst))) x7742))
  (define (>= . lst) (let ((x7743 (apply-prim >= lst))) x7743))
  (define (null? x) (let ((x7744 (prim null? x))) x7744))
  (define (equal? x y) (let ((x7745 (prim equal? x y))) x7745))
  (define (eq? x y) (let ((x7746 (prim eq? x y))) x7746))
  (define (cons a b) (let ((x7747 (prim cons a b))) x7747))
  (define (car lst) (let ((x7748 (prim car lst))) x7748))
  (define (cdr lst) (let ((x7749 (prim cdr lst))) x7749))
  (define (even? x)
    (let ((a7750 '0))
      (let ((a7751 '2))
        (let ((a7752 (modulo x a7751))) (equal? a7750 a7752)))))
  (define (odd? x)
    (let ((a7753 '1))
      (let ((a7754 '2))
        (let ((a7755 (modulo x a7754))) (equal? a7753 a7755)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a7756 (null? lst)))
      (if a7756
        (let ((x7757 '#f)) x7757)
        (let ((a7758 (car lst)))
          (let ((a7759 (equal? a7758 x)))
            (if a7759
              (let ((x7760 '#t)) x7760)
              (let ((a7761 (cdr lst))) (member? x a7761))))))))
  (define (foldl fun acc lst)
    (let ((a7762 (null? lst)))
      (if a7762
        acc
        (let ((a7763 (car lst)))
          (let ((a7764 (fun a7763 acc)))
            (let ((a7765 (cdr lst))) (foldl fun a7764 a7765)))))))
  (define (reverse-helper lst lst2)
    (let ((a7766 (null? lst)))
      (if a7766
        lst2
        (let ((a7767 (cdr lst)))
          (let ((a7768 (car lst)))
            (let ((a7769 (cons a7768 lst2))) (reverse-helper a7767 a7769)))))))
  (define (reverse lst) (let ((a7770 (list))) (reverse-helper lst a7770)))
  (define (take-helper lst n lst2)
    (let ((a7771 '0))
      (let ((a7772 (= n a7771)))
        (if a7772
          (let ((x7773 (reverse lst2))) x7773)
          (let ((a7774 (cdr lst)))
            (let ((a7775 '1))
              (let ((a7776 (- n a7775)))
                (let ((a7777 (car lst)))
                  (let ((a7778 (cons a7777 lst2)))
                    (take-helper a7774 a7776 a7778))))))))))
  (define (take lst n) (let ((a7779 (list))) (take-helper lst n a7779)))
  (define (length lst)
    (let ((a7780 (null? lst)))
      (if a7780
        (let ((x7781 '0)) x7781)
        (let ((a7782 '1))
          (let ((a7783 (cdr lst)))
            (let ((a7784 (length a7783))) (+ a7782 a7784)))))))
  (define (map proc lst)
    (let ((a7785 (null? lst)))
      (if a7785
        (let ((x7786 (list))) x7786)
        (let ((a7787 (car lst)))
          (let ((a7788 (proc a7787)))
            (let ((a7789 (cdr lst)))
              (let ((a7790 (map proc a7789))) (cons a7788 a7790))))))))
  (define (filter op lst)
    (let ((a7791 (null? lst)))
      (if a7791
        (let ((x7792 (list))) x7792)
        (let ((a7793 (car lst)))
          (let ((a7794 (op a7793)))
            (if a7794
              (let ((a7795 (car lst)))
                (let ((a7796 (cdr lst)))
                  (let ((a7797 (filter op a7796))) (cons a7795 a7797))))
              (let ((a7798 (cdr lst))) (filter op a7798))))))))
  (define (drop lst n)
    (let ((a7799 '0))
      (let ((a7800 (= n a7799)))
        (if a7800
          lst
          (let ((a7801 (cdr lst)))
            (let ((a7802 '1))
              (let ((a7803 (- n a7802))) (drop a7801 a7803))))))))
  (define (foldr proc acc lst)
    (let ((a7804 (null? lst)))
      (if a7804
        acc
        (let ((a7805 (car lst)))
          (let ((a7806 (cdr lst)))
            (let ((a7807 (foldr proc acc a7806))) (proc a7805 a7807)))))))
  (define (append lst1 lst2)
    (let ((a7808 (null? lst1)))
      (if a7808
        lst2
        (let ((a7809 (car lst1)))
          (let ((a7810 (cdr lst1)))
            (let ((a7811 (append a7810 lst2))) (cons a7809 a7811)))))))
  (define (hash . lst) (let ((x7812 (apply-prim hash lst))) x7812))
  (define (hash-ref h k) (let ((x7813 (prim hash-ref h k))) x7813))
  (define (hash-set h k v) (let ((x7814 (prim hash-set h k v))) x7814))
  (define (hash-has-key? h k) (let ((x7815 (prim hash-has-key? h k))) x7815))
  (define (hash-count h) (let ((x7816 (prim hash-count h))) x7816))
  (define (call)
    (let ((a7817 '1))
      (let ((a7818 '2))
        (let ((a7819 '3))
          (let ((a7820 (list a7817 a7818 a7819))) (apply + a7820))))))
  (define (brouhaha_main) (let ((x7821 (call))) x7821)))
