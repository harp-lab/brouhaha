'((define (+ . lst) (let ((x7894 (apply-prim + lst))) x7894))
  (define (- . lst) (let ((x7895 (apply-prim - lst))) x7895))
  (define (* . lst) (let ((x7896 (apply-prim * lst))) x7896))
  (define (modulo a b) (let ((x7897 (prim modulo a b))) x7897))
  (define (/ . lst) (let ((x7898 (apply-prim / lst))) x7898))
  (define (= . lst) (let ((x7899 (apply-prim = lst))) x7899))
  (define (> . lst) (let ((x7900 (apply-prim > lst))) x7900))
  (define (< . lst) (let ((x7901 (apply-prim < lst))) x7901))
  (define (<= . lst) (let ((x7902 (apply-prim <= lst))) x7902))
  (define (>= . lst) (let ((x7903 (apply-prim >= lst))) x7903))
  (define (null? x) (let ((x7904 (prim null? x))) x7904))
  (define (equal? x y) (let ((x7905 (prim equal? x y))) x7905))
  (define (eq? x y) (let ((x7906 (prim eq? x y))) x7906))
  (define (cons a b) (let ((x7907 (prim cons a b))) x7907))
  (define (car lst) (let ((x7908 (prim car lst))) x7908))
  (define (cdr lst) (let ((x7909 (prim cdr lst))) x7909))
  (define (even? x)
    (let ((a7910 '0))
      (let ((a7911 '2))
        (let ((a7912 (modulo x a7911))) (equal? a7910 a7912)))))
  (define (odd? x)
    (let ((a7913 '1))
      (let ((a7914 '2))
        (let ((a7915 (modulo x a7914))) (equal? a7913 a7915)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a7916 (null? lst)))
      (if a7916
        (let ((x7917 '#f)) x7917)
        (let ((a7918 (car lst)))
          (let ((a7919 (equal? a7918 x)))
            (if a7919
              (let ((x7920 '#t)) x7920)
              (let ((a7921 (cdr lst))) (member? x a7921))))))))
  (define (foldl fun acc lst)
    (let ((a7922 (null? lst)))
      (if a7922
        acc
        (let ((a7923 (car lst)))
          (let ((a7924 (fun a7923 acc)))
            (let ((a7925 (cdr lst))) (foldl fun a7924 a7925)))))))
  (define (reverse-helper lst lst2)
    (let ((a7926 (null? lst)))
      (if a7926
        lst2
        (let ((a7927 (cdr lst)))
          (let ((a7928 (car lst)))
            (let ((a7929 (cons a7928 lst2))) (reverse-helper a7927 a7929)))))))
  (define (reverse lst) (let ((a7930 (list))) (reverse-helper lst a7930)))
  (define (take-helper lst n lst2)
    (let ((a7931 '0))
      (let ((a7932 (= n a7931)))
        (if a7932
          (let ((x7933 (reverse lst2))) x7933)
          (let ((a7934 (cdr lst)))
            (let ((a7935 '1))
              (let ((a7936 (- n a7935)))
                (let ((a7937 (car lst)))
                  (let ((a7938 (cons a7937 lst2)))
                    (take-helper a7934 a7936 a7938))))))))))
  (define (take lst n) (let ((a7939 (list))) (take-helper lst n a7939)))
  (define (length lst)
    (let ((a7940 (null? lst)))
      (if a7940
        (let ((x7941 '0)) x7941)
        (let ((a7942 '1))
          (let ((a7943 (cdr lst)))
            (let ((a7944 (length a7943))) (+ a7942 a7944)))))))
  (define (map proc lst)
    (let ((a7945 (null? lst)))
      (if a7945
        (let ((x7946 (list))) x7946)
        (let ((a7947 (car lst)))
          (let ((a7948 (proc a7947)))
            (let ((a7949 (cdr lst)))
              (let ((a7950 (map proc a7949))) (cons a7948 a7950))))))))
  (define (filter op lst)
    (let ((a7951 (null? lst)))
      (if a7951
        (let ((x7952 (list))) x7952)
        (let ((a7953 (car lst)))
          (let ((a7954 (op a7953)))
            (if a7954
              (let ((a7955 (car lst)))
                (let ((a7956 (cdr lst)))
                  (let ((a7957 (filter op a7956))) (cons a7955 a7957))))
              (let ((a7958 (cdr lst))) (filter op a7958))))))))
  (define (drop lst n)
    (let ((a7959 '0))
      (let ((a7960 (= n a7959)))
        (if a7960
          lst
          (let ((a7961 (cdr lst)))
            (let ((a7962 '1))
              (let ((a7963 (- n a7962))) (drop a7961 a7963))))))))
  (define (foldr proc acc lst)
    (let ((a7964 (null? lst)))
      (if a7964
        acc
        (let ((a7965 (car lst)))
          (let ((a7966 (cdr lst)))
            (let ((a7967 (foldr proc acc a7966))) (proc a7965 a7967)))))))
  (define (append lst1 lst2)
    (let ((a7968 (null? lst1)))
      (if a7968
        lst2
        (let ((a7969 (car lst1)))
          (let ((a7970 (cdr lst1)))
            (let ((a7971 (append a7970 lst2))) (cons a7969 a7971)))))))
  (define (hash . lst) (let ((x7972 (apply-prim hash lst))) x7972))
  (define (hash-ref h k) (let ((x7973 (prim hash-ref h k))) x7973))
  (define (hash-set h k v) (let ((x7974 (prim hash-set h k v))) x7974))
  (define (hash-has-key? h k) (let ((x7975 (prim hash-has-key? h k))) x7975))
  (define (hash-count h) (let ((x7976 (prim hash-count h))) x7976))
  (define (call)
    (let ((a7977 '1))
      (let ((a7978 '2))
        (let ((a7979 '3))
          (let ((a7980 (list a7977 a7978 a7979))) (apply + a7980))))))
  (define (brouhaha_main) (let ((x7981 (call))) x7981)))
