'((define (+ . lst)
    (let ((kont78227924 (prim car lst)))
      (let ((lst7925 (prim cdr lst)))
        (let ((x77347926 (apply-prim + lst7925))) (kont78227924 x77347926)))))
  (define (- . lst)
    (let ((kont78247927 (prim car lst)))
      (let ((lst7928 (prim cdr lst)))
        (let ((x77357929 (apply-prim - lst7928))) (kont78247927 x77357929)))))
  (define (* . lst)
    (let ((kont78267930 (prim car lst)))
      (let ((lst7931 (prim cdr lst)))
        (let ((x77367932 (apply-prim * lst7931))) (kont78267930 x77367932)))))
  (define (modulo kont7828 a b)
    (let ((x77377933 (prim modulo a b))) (kont7828 x77377933)))
  (define (/ . lst)
    (let ((kont78297934 (prim car lst)))
      (let ((lst7935 (prim cdr lst)))
        (let ((x77387936 (apply-prim / lst7935))) (kont78297934 x77387936)))))
  (define (= . lst)
    (let ((kont78317937 (prim car lst)))
      (let ((lst7938 (prim cdr lst)))
        (let ((x77397939 (apply-prim = lst7938))) (kont78317937 x77397939)))))
  (define (> . lst)
    (let ((kont78337940 (prim car lst)))
      (let ((lst7941 (prim cdr lst)))
        (let ((x77407942 (apply-prim > lst7941))) (kont78337940 x77407942)))))
  (define (< . lst)
    (let ((kont78357943 (prim car lst)))
      (let ((lst7944 (prim cdr lst)))
        (let ((x77417945 (apply-prim < lst7944))) (kont78357943 x77417945)))))
  (define (<= . lst)
    (let ((kont78377946 (prim car lst)))
      (let ((lst7947 (prim cdr lst)))
        (let ((x77427948 (apply-prim <= lst7947))) (kont78377946 x77427948)))))
  (define (>= . lst)
    (let ((kont78397949 (prim car lst)))
      (let ((lst7950 (prim cdr lst)))
        (let ((x77437951 (apply-prim >= lst7950))) (kont78397949 x77437951)))))
  (define (null? kont7841 x)
    (let ((x77447952 (prim null? x))) (kont7841 x77447952)))
  (define (equal? kont7842 x y)
    (let ((x77457953 (prim equal? x y))) (kont7842 x77457953)))
  (define (eq? kont7843 x y)
    (let ((x77467954 (prim eq? x y))) (kont7843 x77467954)))
  (define (cons kont7844 a b)
    (let ((x77477955 (prim cons a b))) (kont7844 x77477955)))
  (define (car kont7845 lst)
    (let ((x77487956 (prim car lst))) (kont7845 x77487956)))
  (define (cdr kont7846 lst)
    (let ((x77497957 (prim cdr lst))) (kont7846 x77497957)))
  (define (even? kont7847 x)
    (let ((a77507958 '0))
      (let ((a77517959 '2))
        (let ((f78487960
               (lambda (a77527961) (equal? kont7847 a77507958 a77527961))))
          (modulo f78487960 x a77517959)))))
  (define (odd? kont7849 x)
    (let ((a77537962 '1))
      (let ((a77547963 '2))
        (let ((f78507964
               (lambda (a77557965) (equal? kont7849 a77537962 a77557965))))
          (modulo f78507964 x a77547963)))))
  (define (list . x)
    (let ((kont78517966 (prim car x)))
      (let ((x7967 (prim cdr x))) (kont78517966 x7967))))
  (define (member? kont7853 x lst)
    (let ((f78577968
           (lambda (a77567969)
             (if a77567969
               (let ((x77577970 '#f)) (kont7853 x77577970))
               (let ((f78567971
                      (lambda (a77587972)
                        (let ((f78557973
                               (lambda (a77597974)
                                 (if a77597974
                                   (let ((x77607975 '#t)) (kont7853 x77607975))
                                   (let ((f78547976
                                          (lambda (a77617977)
                                            (member? kont7853 x a77617977))))
                                     (cdr f78547976 lst))))))
                          (equal? f78557973 a77587972 x)))))
                 (car f78567971 lst))))))
      (null? f78577968 lst)))
  (define (foldl kont7858 fun acc lst)
    (let ((f78627978
           (lambda (a77627979)
             (if a77627979
               (kont7858 acc)
               (let ((f78617980
                      (lambda (a77637981)
                        (let ((f78607982
                               (lambda (a77647983)
                                 (let ((f78597984
                                        (lambda (a77657985)
                                          (foldl
                                           kont7858
                                           fun
                                           a77647983
                                           a77657985))))
                                   (cdr f78597984 lst)))))
                          (fun f78607982 a77637981 acc)))))
                 (car f78617980 lst))))))
      (null? f78627978 lst)))
  (define (reverse-helper kont7863 lst lst2)
    (let ((f78677986
           (lambda (a77667987)
             (if a77667987
               (kont7863 lst2)
               (let ((f78667988
                      (lambda (a77677989)
                        (let ((f78657990
                               (lambda (a77687991)
                                 (let ((f78647992
                                        (lambda (a77697993)
                                          (reverse-helper
                                           kont7863
                                           a77677989
                                           a77697993))))
                                   (cons f78647992 a77687991 lst2)))))
                          (car f78657990 lst)))))
                 (cdr f78667988 lst))))))
      (null? f78677986 lst)))
  (define (reverse kont7868 lst)
    (let ((f78697994
           (lambda (a77707995) (reverse-helper kont7868 lst a77707995))))
      (list f78697994)))
  (define (take-helper kont7870 lst n lst2)
    (let ((a77717996 '0))
      (let ((f78767997
             (lambda (a77727998)
               (if a77727998
                 (let ((f78717999 (lambda (x77738000) (kont7870 x77738000))))
                   (reverse f78717999 lst2))
                 (let ((f78758001
                        (lambda (a77748002)
                          (let ((a77758003 '1))
                            (let ((f78748004
                                   (lambda (a77768005)
                                     (let ((f78738006
                                            (lambda (a77778007)
                                              (let ((f78728008
                                                     (lambda (a77788009)
                                                       (take-helper
                                                        kont7870
                                                        a77748002
                                                        a77768005
                                                        a77788009))))
                                                (cons
                                                 f78728008
                                                 a77778007
                                                 lst2)))))
                                       (car f78738006 lst)))))
                              (- f78748004 n a77758003))))))
                   (cdr f78758001 lst))))))
        (= f78767997 n a77717996))))
  (define (take kont7877 lst n)
    (let ((f78788010
           (lambda (a77798011) (take-helper kont7877 lst n a77798011))))
      (list f78788010)))
  (define (length kont7879 lst)
    (let ((f78828012
           (lambda (a77808013)
             (if a77808013
               (let ((x77818014 '0)) (kont7879 x77818014))
               (let ((a77828015 '1))
                 (let ((f78818016
                        (lambda (a77838017)
                          (let ((f78808018
                                 (lambda (a77848019)
                                   (+ kont7879 a77828015 a77848019))))
                            (length f78808018 a77838017)))))
                   (cdr f78818016 lst)))))))
      (null? f78828012 lst)))
  (define (map kont7883 proc lst)
    (let ((f78898020
           (lambda (a77858021)
             (if a77858021
               (let ((f78848022 (lambda (x77868023) (kont7883 x77868023))))
                 (list f78848022))
               (let ((f78888024
                      (lambda (a77878025)
                        (let ((f78878026
                               (lambda (a77888027)
                                 (let ((f78868028
                                        (lambda (a77898029)
                                          (let ((f78858030
                                                 (lambda (a77908031)
                                                   (cons
                                                    kont7883
                                                    a77888027
                                                    a77908031))))
                                            (map f78858030 proc a77898029)))))
                                   (cdr f78868028 lst)))))
                          (proc f78878026 a77878025)))))
                 (car f78888024 lst))))))
      (null? f78898020 lst)))
  (define (filter kont7890 op lst)
    (let ((f78988032
           (lambda (a77918033)
             (if a77918033
               (let ((f78918034 (lambda (x77928035) (kont7890 x77928035))))
                 (list f78918034))
               (let ((f78978036
                      (lambda (a77938037)
                        (let ((f78968038
                               (lambda (a77948039)
                                 (if a77948039
                                   (let ((f78948040
                                          (lambda (a77958041)
                                            (let ((f78938042
                                                   (lambda (a77968043)
                                                     (let ((f78928044
                                                            (lambda (a77978045)
                                                              (cons
                                                               kont7890
                                                               a77958041
                                                               a77978045))))
                                                       (filter
                                                        f78928044
                                                        op
                                                        a77968043)))))
                                              (cdr f78938042 lst)))))
                                     (car f78948040 lst))
                                   (let ((f78958046
                                          (lambda (a77988047)
                                            (filter kont7890 op a77988047))))
                                     (cdr f78958046 lst))))))
                          (op f78968038 a77938037)))))
                 (car f78978036 lst))))))
      (null? f78988032 lst)))
  (define (drop kont7899 lst n)
    (let ((a77998048 '0))
      (let ((f79028049
             (lambda (a78008050)
               (if a78008050
                 (kont7899 lst)
                 (let ((f79018051
                        (lambda (a78018052)
                          (let ((a78028053 '1))
                            (let ((f79008054
                                   (lambda (a78038055)
                                     (drop kont7899 a78018052 a78038055))))
                              (- f79008054 n a78028053))))))
                   (cdr f79018051 lst))))))
        (= f79028049 n a77998048))))
  (define (foldr kont7903 proc acc lst)
    (let ((f79078056
           (lambda (a78048057)
             (if a78048057
               (kont7903 acc)
               (let ((f79068058
                      (lambda (a78058059)
                        (let ((f79058060
                               (lambda (a78068061)
                                 (let ((f79048062
                                        (lambda (a78078063)
                                          (proc
                                           kont7903
                                           a78058059
                                           a78078063))))
                                   (foldr f79048062 proc acc a78068061)))))
                          (cdr f79058060 lst)))))
                 (car f79068058 lst))))))
      (null? f79078056 lst)))
  (define (append kont7908 lst1 lst2)
    (let ((f79128064
           (lambda (a78088065)
             (if a78088065
               (kont7908 lst2)
               (let ((f79118066
                      (lambda (a78098067)
                        (let ((f79108068
                               (lambda (a78108069)
                                 (let ((f79098070
                                        (lambda (a78118071)
                                          (cons
                                           kont7908
                                           a78098067
                                           a78118071))))
                                   (append f79098070 a78108069 lst2)))))
                          (cdr f79108068 lst1)))))
                 (car f79118066 lst1))))))
      (null? f79128064 lst1)))
  (define (hash . lst)
    (let ((kont79138072 (prim car lst)))
      (let ((lst8073 (prim cdr lst)))
        (let ((x78128074 (apply-prim hash lst8073)))
          (kont79138072 x78128074)))))
  (define (hash-ref kont7915 h k)
    (let ((x78138075 (prim hash-ref h k))) (kont7915 x78138075)))
  (define (hash-set kont7916 h k v)
    (let ((x78148076 (prim hash-set h k v))) (kont7916 x78148076)))
  (define (hash-has-key? kont7917 h k)
    (let ((x78158077 (prim hash-has-key? h k))) (kont7917 x78158077)))
  (define (hash-count kont7918 h)
    (let ((x78168078 (prim hash-count h))) (kont7918 x78168078)))
  (define (call kont7919)
    (let ((a78178079 '1))
      (let ((a78188080 '2))
        (let ((a78198081 '3))
          (let ((f79218082
                 (lambda (a78208083)
                   (let ((cps-lst79208084 (prim cons kont7919 a78208083)))
                     (apply + cps-lst79208084)))))
            (list f79218082 a78178079 a78188080 a78198081))))))
  (define (brouhaha_main kont7922)
    (let ((f79238085 (lambda (x78218086) (kont7922 x78218086))))
      (call f79238085))))
