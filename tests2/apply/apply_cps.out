'((define (+ . lst)
    (let ((kont79788080 (prim car lst)))
      (let ((lst8081 (prim cdr lst)))
        (let ((x78908082 (apply-prim + lst8081))) (kont79788080 x78908082)))))
  (define (- . lst)
    (let ((kont79808083 (prim car lst)))
      (let ((lst8084 (prim cdr lst)))
        (let ((x78918085 (apply-prim - lst8084))) (kont79808083 x78918085)))))
  (define (* . lst)
    (let ((kont79828086 (prim car lst)))
      (let ((lst8087 (prim cdr lst)))
        (let ((x78928088 (apply-prim * lst8087))) (kont79828086 x78928088)))))
  (define (modulo kont7984 a b)
    (let ((x78938089 (prim modulo a b))) (kont7984 x78938089)))
  (define (/ . lst)
    (let ((kont79858090 (prim car lst)))
      (let ((lst8091 (prim cdr lst)))
        (let ((x78948092 (apply-prim / lst8091))) (kont79858090 x78948092)))))
  (define (= . lst)
    (let ((kont79878093 (prim car lst)))
      (let ((lst8094 (prim cdr lst)))
        (let ((x78958095 (apply-prim = lst8094))) (kont79878093 x78958095)))))
  (define (> . lst)
    (let ((kont79898096 (prim car lst)))
      (let ((lst8097 (prim cdr lst)))
        (let ((x78968098 (apply-prim > lst8097))) (kont79898096 x78968098)))))
  (define (< . lst)
    (let ((kont79918099 (prim car lst)))
      (let ((lst8100 (prim cdr lst)))
        (let ((x78978101 (apply-prim < lst8100))) (kont79918099 x78978101)))))
  (define (<= . lst)
    (let ((kont79938102 (prim car lst)))
      (let ((lst8103 (prim cdr lst)))
        (let ((x78988104 (apply-prim <= lst8103))) (kont79938102 x78988104)))))
  (define (>= . lst)
    (let ((kont79958105 (prim car lst)))
      (let ((lst8106 (prim cdr lst)))
        (let ((x78998107 (apply-prim >= lst8106))) (kont79958105 x78998107)))))
  (define (null? kont7997 x)
    (let ((x79008108 (prim null? x))) (kont7997 x79008108)))
  (define (equal? kont7998 x y)
    (let ((x79018109 (prim equal? x y))) (kont7998 x79018109)))
  (define (eq? kont7999 x y)
    (let ((x79028110 (prim eq? x y))) (kont7999 x79028110)))
  (define (cons kont8000 a b)
    (let ((x79038111 (prim cons a b))) (kont8000 x79038111)))
  (define (car kont8001 lst)
    (let ((x79048112 (prim car lst))) (kont8001 x79048112)))
  (define (cdr kont8002 lst)
    (let ((x79058113 (prim cdr lst))) (kont8002 x79058113)))
  (define (even? kont8003 x)
    (let ((a79068114 '0))
      (let ((a79078115 '2))
        (let ((f80048116
               (lambda (a79088117) (equal? kont8003 a79068114 a79088117))))
          (modulo f80048116 x a79078115)))))
  (define (odd? kont8005 x)
    (let ((a79098118 '1))
      (let ((a79108119 '2))
        (let ((f80068120
               (lambda (a79118121) (equal? kont8005 a79098118 a79118121))))
          (modulo f80068120 x a79108119)))))
  (define (list . x)
    (let ((kont80078122 (prim car x)))
      (let ((x8123 (prim cdr x))) (kont80078122 x8123))))
  (define (member? kont8009 x lst)
    (let ((f80138124
           (lambda (a79128125)
             (if a79128125
               (let ((x79138126 '#f)) (kont8009 x79138126))
               (let ((f80128127
                      (lambda (a79148128)
                        (let ((f80118129
                               (lambda (a79158130)
                                 (if a79158130
                                   (let ((x79168131 '#t)) (kont8009 x79168131))
                                   (let ((f80108132
                                          (lambda (a79178133)
                                            (member? kont8009 x a79178133))))
                                     (cdr f80108132 lst))))))
                          (equal? f80118129 a79148128 x)))))
                 (car f80128127 lst))))))
      (null? f80138124 lst)))
  (define (foldl kont8014 fun acc lst)
    (let ((f80188134
           (lambda (a79188135)
             (if a79188135
               (kont8014 acc)
               (let ((f80178136
                      (lambda (a79198137)
                        (let ((f80168138
                               (lambda (a79208139)
                                 (let ((f80158140
                                        (lambda (a79218141)
                                          (foldl
                                           kont8014
                                           fun
                                           a79208139
                                           a79218141))))
                                   (cdr f80158140 lst)))))
                          (fun f80168138 a79198137 acc)))))
                 (car f80178136 lst))))))
      (null? f80188134 lst)))
  (define (reverse-helper kont8019 lst lst2)
    (let ((f80238142
           (lambda (a79228143)
             (if a79228143
               (kont8019 lst2)
               (let ((f80228144
                      (lambda (a79238145)
                        (let ((f80218146
                               (lambda (a79248147)
                                 (let ((f80208148
                                        (lambda (a79258149)
                                          (reverse-helper
                                           kont8019
                                           a79238145
                                           a79258149))))
                                   (cons f80208148 a79248147 lst2)))))
                          (car f80218146 lst)))))
                 (cdr f80228144 lst))))))
      (null? f80238142 lst)))
  (define (reverse kont8024 lst)
    (let ((f80258150
           (lambda (a79268151) (reverse-helper kont8024 lst a79268151))))
      (list f80258150)))
  (define (take-helper kont8026 lst n lst2)
    (let ((a79278152 '0))
      (let ((f80328153
             (lambda (a79288154)
               (if a79288154
                 (let ((f80278155 (lambda (x79298156) (kont8026 x79298156))))
                   (reverse f80278155 lst2))
                 (let ((f80318157
                        (lambda (a79308158)
                          (let ((a79318159 '1))
                            (let ((f80308160
                                   (lambda (a79328161)
                                     (let ((f80298162
                                            (lambda (a79338163)
                                              (let ((f80288164
                                                     (lambda (a79348165)
                                                       (take-helper
                                                        kont8026
                                                        a79308158
                                                        a79328161
                                                        a79348165))))
                                                (cons
                                                 f80288164
                                                 a79338163
                                                 lst2)))))
                                       (car f80298162 lst)))))
                              (- f80308160 n a79318159))))))
                   (cdr f80318157 lst))))))
        (= f80328153 n a79278152))))
  (define (take kont8033 lst n)
    (let ((f80348166
           (lambda (a79358167) (take-helper kont8033 lst n a79358167))))
      (list f80348166)))
  (define (length kont8035 lst)
    (let ((f80388168
           (lambda (a79368169)
             (if a79368169
               (let ((x79378170 '0)) (kont8035 x79378170))
               (let ((a79388171 '1))
                 (let ((f80378172
                        (lambda (a79398173)
                          (let ((f80368174
                                 (lambda (a79408175)
                                   (+ kont8035 a79388171 a79408175))))
                            (length f80368174 a79398173)))))
                   (cdr f80378172 lst)))))))
      (null? f80388168 lst)))
  (define (map kont8039 proc lst)
    (let ((f80458176
           (lambda (a79418177)
             (if a79418177
               (let ((f80408178 (lambda (x79428179) (kont8039 x79428179))))
                 (list f80408178))
               (let ((f80448180
                      (lambda (a79438181)
                        (let ((f80438182
                               (lambda (a79448183)
                                 (let ((f80428184
                                        (lambda (a79458185)
                                          (let ((f80418186
                                                 (lambda (a79468187)
                                                   (cons
                                                    kont8039
                                                    a79448183
                                                    a79468187))))
                                            (map f80418186 proc a79458185)))))
                                   (cdr f80428184 lst)))))
                          (proc f80438182 a79438181)))))
                 (car f80448180 lst))))))
      (null? f80458176 lst)))
  (define (filter kont8046 op lst)
    (let ((f80548188
           (lambda (a79478189)
             (if a79478189
               (let ((f80478190 (lambda (x79488191) (kont8046 x79488191))))
                 (list f80478190))
               (let ((f80538192
                      (lambda (a79498193)
                        (let ((f80528194
                               (lambda (a79508195)
                                 (if a79508195
                                   (let ((f80508196
                                          (lambda (a79518197)
                                            (let ((f80498198
                                                   (lambda (a79528199)
                                                     (let ((f80488200
                                                            (lambda (a79538201)
                                                              (cons
                                                               kont8046
                                                               a79518197
                                                               a79538201))))
                                                       (filter
                                                        f80488200
                                                        op
                                                        a79528199)))))
                                              (cdr f80498198 lst)))))
                                     (car f80508196 lst))
                                   (let ((f80518202
                                          (lambda (a79548203)
                                            (filter kont8046 op a79548203))))
                                     (cdr f80518202 lst))))))
                          (op f80528194 a79498193)))))
                 (car f80538192 lst))))))
      (null? f80548188 lst)))
  (define (drop kont8055 lst n)
    (let ((a79558204 '0))
      (let ((f80588205
             (lambda (a79568206)
               (if a79568206
                 (kont8055 lst)
                 (let ((f80578207
                        (lambda (a79578208)
                          (let ((a79588209 '1))
                            (let ((f80568210
                                   (lambda (a79598211)
                                     (drop kont8055 a79578208 a79598211))))
                              (- f80568210 n a79588209))))))
                   (cdr f80578207 lst))))))
        (= f80588205 n a79558204))))
  (define (foldr kont8059 proc acc lst)
    (let ((f80638212
           (lambda (a79608213)
             (if a79608213
               (kont8059 acc)
               (let ((f80628214
                      (lambda (a79618215)
                        (let ((f80618216
                               (lambda (a79628217)
                                 (let ((f80608218
                                        (lambda (a79638219)
                                          (proc
                                           kont8059
                                           a79618215
                                           a79638219))))
                                   (foldr f80608218 proc acc a79628217)))))
                          (cdr f80618216 lst)))))
                 (car f80628214 lst))))))
      (null? f80638212 lst)))
  (define (append kont8064 lst1 lst2)
    (let ((f80688220
           (lambda (a79648221)
             (if a79648221
               (kont8064 lst2)
               (let ((f80678222
                      (lambda (a79658223)
                        (let ((f80668224
                               (lambda (a79668225)
                                 (let ((f80658226
                                        (lambda (a79678227)
                                          (cons
                                           kont8064
                                           a79658223
                                           a79678227))))
                                   (append f80658226 a79668225 lst2)))))
                          (cdr f80668224 lst1)))))
                 (car f80678222 lst1))))))
      (null? f80688220 lst1)))
  (define (hash . lst)
    (let ((kont80698228 (prim car lst)))
      (let ((lst8229 (prim cdr lst)))
        (let ((x79688230 (apply-prim hash lst8229)))
          (kont80698228 x79688230)))))
  (define (hash-ref kont8071 h k)
    (let ((x79698231 (prim hash-ref h k))) (kont8071 x79698231)))
  (define (hash-set kont8072 h k v)
    (let ((x79708232 (prim hash-set h k v))) (kont8072 x79708232)))
  (define (hash-has-key? kont8073 h k)
    (let ((x79718233 (prim hash-has-key? h k))) (kont8073 x79718233)))
  (define (hash-count kont8074 h)
    (let ((x79728234 (prim hash-count h))) (kont8074 x79728234)))
  (define (call kont8075)
    (let ((a79738235 '1))
      (let ((a79748236 '2))
        (let ((a79758237 '3))
          (let ((f80778238
                 (lambda (a79768239)
                   (let ((cps-lst80768240 (prim cons kont8075 a79768239)))
                     (apply + cps-lst80768240)))))
            (list f80778238 a79738235 a79748236 a79758237))))))
  (define (brouhaha_main kont8078)
    (let ((f80798241 (lambda (x79778242) (kont8078 x79778242))))
      (call f80798241))))
