'((define (+ . lst) (let ((x48269 (apply-prim + lst))) x48269))
  (define (- . lst) (let ((x48270 (apply-prim - lst))) x48270))
  (define (* . lst) (let ((x48271 (apply-prim * lst))) x48271))
  (define (modulo a b) (let ((x48272 (prim modulo a b))) x48272))
  (define (/ . lst) (let ((x48273 (apply-prim / lst))) x48273))
  (define (= . lst) (let ((x48274 (apply-prim = lst))) x48274))
  (define (> . lst) (let ((x48275 (apply-prim > lst))) x48275))
  (define (< . lst) (let ((x48276 (apply-prim < lst))) x48276))
  (define (<= . lst) (let ((x48277 (apply-prim <= lst))) x48277))
  (define (>= . lst) (let ((x48278 (apply-prim >= lst))) x48278))
  (define (null? x) (let ((x48279 (prim null? x))) x48279))
  (define (equal? x y) (let ((x48280 (prim equal? x y))) x48280))
  (define (eq? x y) (let ((x48281 (prim eq? x y))) x48281))
  (define (cons a b) (let ((x48282 (prim cons a b))) x48282))
  (define (car lst) (let ((x48283 (prim car lst))) x48283))
  (define (cdr lst) (let ((x48284 (prim cdr lst))) x48284))
  (define (even? x)
    (let ((a48285 '0))
      (let ((a48286 '2))
        (let ((a48287 (modulo x a48286))) (equal? a48285 a48287)))))
  (define (odd? x)
    (let ((a48288 '1))
      (let ((a48289 '2))
        (let ((a48290 (modulo x a48289))) (equal? a48288 a48290)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a48291 (null? lst)))
      (if a48291
        (let ((x48292 '#f)) x48292)
        (let ((a48293 (car lst)))
          (let ((a48294 (equal? a48293 x)))
            (if a48294
              (let ((x48295 '#t)) x48295)
              (let ((a48296 (cdr lst))) (member? x a48296))))))))
  (define (foldl fun acc lst)
    (let ((a48297 (null? lst)))
      (if a48297
        acc
        (let ((a48298 (car lst)))
          (let ((a48299 (fun a48298 acc)))
            (let ((a48300 (cdr lst))) (foldl fun a48299 a48300)))))))
  (define (reverse-helper lst lst2)
    (let ((a48301 (null? lst)))
      (if a48301
        lst2
        (let ((a48302 (cdr lst)))
          (let ((a48303 (car lst)))
            (let ((a48304 (cons a48303 lst2)))
              (reverse-helper a48302 a48304)))))))
  (define (reverse lst) (let ((a48305 (list))) (reverse-helper lst a48305)))
  (define (take-helper lst n lst2)
    (let ((a48306 '0))
      (let ((a48307 (= n a48306)))
        (if a48307
          (let ((x48308 (reverse lst2))) x48308)
          (let ((a48309 (cdr lst)))
            (let ((a48310 '1))
              (let ((a48311 (- n a48310)))
                (let ((a48312 (car lst)))
                  (let ((a48313 (cons a48312 lst2)))
                    (take-helper a48309 a48311 a48313))))))))))
  (define (take lst n) (let ((a48314 (list))) (take-helper lst n a48314)))
  (define (length lst)
    (let ((a48315 (null? lst)))
      (if a48315
        (let ((x48316 '0)) x48316)
        (let ((a48317 '1))
          (let ((a48318 (cdr lst)))
            (let ((a48319 (length a48318))) (+ a48317 a48319)))))))
  (define (map proc lst)
    (let ((a48320 (null? lst)))
      (if a48320
        (let ((x48321 (list))) x48321)
        (let ((a48322 (car lst)))
          (let ((a48323 (proc a48322)))
            (let ((a48324 (cdr lst)))
              (let ((a48325 (map proc a48324))) (cons a48323 a48325))))))))
  (define (filter op lst)
    (let ((a48326 (null? lst)))
      (if a48326
        (let ((x48327 (list))) x48327)
        (let ((a48328 (car lst)))
          (let ((a48329 (op a48328)))
            (if a48329
              (let ((a48330 (car lst)))
                (let ((a48331 (cdr lst)))
                  (let ((a48332 (filter op a48331))) (cons a48330 a48332))))
              (let ((a48333 (cdr lst))) (filter op a48333))))))))
  (define (drop lst n)
    (let ((a48334 '0))
      (let ((a48335 (= n a48334)))
        (if a48335
          lst
          (let ((a48336 (cdr lst)))
            (let ((a48337 '1))
              (let ((a48338 (- n a48337))) (drop a48336 a48338))))))))
  (define (foldr proc acc lst)
    (let ((a48339 (null? lst)))
      (if a48339
        acc
        (let ((a48340 (car lst)))
          (let ((a48341 (cdr lst)))
            (let ((a48342 (foldr proc acc a48341))) (proc a48340 a48342)))))))
  (define (append lst1 lst2)
    (let ((a48343 (null? lst1)))
      (if a48343
        lst2
        (let ((a48344 (car lst1)))
          (let ((a48345 (cdr lst1)))
            (let ((a48346 (append a48345 lst2))) (cons a48344 a48346)))))))
  (define (hash . lst) (let ((x48347 (apply-prim hash lst))) x48347))
  (define (hash-ref h k) (let ((x48348 (prim hash-ref h k))) x48348))
  (define (hash-set h k v) (let ((x48349 (prim hash-set h k v))) x48349))
  (define (hash-has-key? h k) (let ((x48350 (prim hash-has-key? h k))) x48350))
  (define (hash-count h) (let ((x48351 (prim hash-count h))) x48351))
  (define (call)
    (let ((a48352 '1))
      (let ((a48353 '2))
        (let ((a48354 (equal? a48352 a48353)))
          (if a48354
            (let ((a48355 '1)) (let ((a48356 '2)) (equal? a48355 a48356)))
            (let ((a48357 '3))
              (let ((a48358 (even? a48357)))
                (if a48358
                  (let ((a48359 '3)) (even? a48359))
                  (let ((a48360 '2)) (odd? a48360))))))))))
  (define (brouhaha_main) (let ((x48361 (call))) x48361)))
