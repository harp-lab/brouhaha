'((define (+ . lst) (let ((x51805 (apply-prim + lst))) x51805))
  (define (- . lst) (let ((x51806 (apply-prim - lst))) x51806))
  (define (* . lst) (let ((x51807 (apply-prim * lst))) x51807))
  (define (modulo a b) (let ((x51808 (prim modulo a b))) x51808))
  (define (/ . lst) (let ((x51809 (apply-prim / lst))) x51809))
  (define (= . lst) (let ((x51810 (apply-prim = lst))) x51810))
  (define (> . lst) (let ((x51811 (apply-prim > lst))) x51811))
  (define (< . lst) (let ((x51812 (apply-prim < lst))) x51812))
  (define (<= . lst) (let ((x51813 (apply-prim <= lst))) x51813))
  (define (>= . lst) (let ((x51814 (apply-prim >= lst))) x51814))
  (define (null? x) (let ((x51815 (prim null? x))) x51815))
  (define (equal? x y) (let ((x51816 (prim equal? x y))) x51816))
  (define (eq? x y) (let ((x51817 (prim eq? x y))) x51817))
  (define (cons a b) (let ((x51818 (prim cons a b))) x51818))
  (define (car lst) (let ((x51819 (prim car lst))) x51819))
  (define (cdr lst) (let ((x51820 (prim cdr lst))) x51820))
  (define (even? x)
    (let ((a51821 '0))
      (let ((a51822 '2))
        (let ((a51823 (modulo x a51822))) (equal? a51821 a51823)))))
  (define (odd? x)
    (let ((a51824 '1))
      (let ((a51825 '2))
        (let ((a51826 (modulo x a51825))) (equal? a51824 a51826)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a51827 (null? lst)))
      (if a51827
        (let ((x51828 '#f)) x51828)
        (let ((a51829 (car lst)))
          (let ((a51830 (equal? a51829 x)))
            (if a51830
              (let ((x51831 '#t)) x51831)
              (let ((a51832 (cdr lst))) (member? x a51832))))))))
  (define (foldl fun acc lst)
    (let ((a51833 (null? lst)))
      (if a51833
        acc
        (let ((a51834 (car lst)))
          (let ((a51835 (fun a51834 acc)))
            (let ((a51836 (cdr lst))) (foldl fun a51835 a51836)))))))
  (define (reverse-helper lst lst2)
    (let ((a51837 (null? lst)))
      (if a51837
        lst2
        (let ((a51838 (cdr lst)))
          (let ((a51839 (car lst)))
            (let ((a51840 (cons a51839 lst2)))
              (reverse-helper a51838 a51840)))))))
  (define (reverse lst) (let ((a51841 (list))) (reverse-helper lst a51841)))
  (define (take-helper lst n lst2)
    (let ((a51842 '0))
      (let ((a51843 (= n a51842)))
        (if a51843
          (let ((x51844 (reverse lst2))) x51844)
          (let ((a51845 (cdr lst)))
            (let ((a51846 '1))
              (let ((a51847 (- n a51846)))
                (let ((a51848 (car lst)))
                  (let ((a51849 (cons a51848 lst2)))
                    (take-helper a51845 a51847 a51849))))))))))
  (define (take lst n) (let ((a51850 (list))) (take-helper lst n a51850)))
  (define (length lst)
    (let ((a51851 (null? lst)))
      (if a51851
        (let ((x51852 '0)) x51852)
        (let ((a51853 '1))
          (let ((a51854 (cdr lst)))
            (let ((a51855 (length a51854))) (+ a51853 a51855)))))))
  (define (map proc lst)
    (let ((a51856 (null? lst)))
      (if a51856
        (let ((x51857 (list))) x51857)
        (let ((a51858 (car lst)))
          (let ((a51859 (proc a51858)))
            (let ((a51860 (cdr lst)))
              (let ((a51861 (map proc a51860))) (cons a51859 a51861))))))))
  (define (filter op lst)
    (let ((a51862 (null? lst)))
      (if a51862
        (let ((x51863 (list))) x51863)
        (let ((a51864 (car lst)))
          (let ((a51865 (op a51864)))
            (if a51865
              (let ((a51866 (car lst)))
                (let ((a51867 (cdr lst)))
                  (let ((a51868 (filter op a51867))) (cons a51866 a51868))))
              (let ((a51869 (cdr lst))) (filter op a51869))))))))
  (define (drop lst n)
    (let ((a51870 '0))
      (let ((a51871 (= n a51870)))
        (if a51871
          lst
          (let ((a51872 (cdr lst)))
            (let ((a51873 '1))
              (let ((a51874 (- n a51873))) (drop a51872 a51874))))))))
  (define (foldr proc acc lst)
    (let ((a51875 (null? lst)))
      (if a51875
        acc
        (let ((a51876 (car lst)))
          (let ((a51877 (cdr lst)))
            (let ((a51878 (foldr proc acc a51877))) (proc a51876 a51878)))))))
  (define (append lst1 lst2)
    (let ((a51879 (null? lst1)))
      (if a51879
        lst2
        (let ((a51880 (car lst1)))
          (let ((a51881 (cdr lst1)))
            (let ((a51882 (append a51881 lst2))) (cons a51880 a51882)))))))
  (define (hash . lst) (let ((x51883 (apply-prim hash lst))) x51883))
  (define (hash-ref h k) (let ((x51884 (prim hash-ref h k))) x51884))
  (define (hash-set h k v) (let ((x51885 (prim hash-set h k v))) x51885))
  (define (hash-has-key? h k) (let ((x51886 (prim hash-has-key? h k))) x51886))
  (define (hash-count h) (let ((x51887 (prim hash-count h))) x51887))
  (define (call)
    (let ((a51888 '1))
      (let ((a51889 '2))
        (let ((a51890 (equal? a51888 a51889)))
          (if a51890
            (let ((a51891 '1)) (let ((a51892 '2)) (equal? a51891 a51892)))
            (let ((a51893 '3))
              (let ((a51894 (even? a51893)))
                (if a51894
                  (let ((a51895 '3)) (even? a51895))
                  (let ((a51896 '2)) (odd? a51896))))))))))
  (define (brouhaha_main) (let ((x51897 (call))) x51897)))
