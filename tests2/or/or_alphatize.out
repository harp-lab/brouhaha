'((define (+ . lst) (let ((x50888 (apply-prim + lst))) x50888))
  (define (- . lst) (let ((x50889 (apply-prim - lst))) x50889))
  (define (* . lst) (let ((x50890 (apply-prim * lst))) x50890))
  (define (modulo a b) (let ((x50891 (prim modulo a b))) x50891))
  (define (/ . lst) (let ((x50892 (apply-prim / lst))) x50892))
  (define (= . lst) (let ((x50893 (apply-prim = lst))) x50893))
  (define (> . lst) (let ((x50894 (apply-prim > lst))) x50894))
  (define (< . lst) (let ((x50895 (apply-prim < lst))) x50895))
  (define (<= . lst) (let ((x50896 (apply-prim <= lst))) x50896))
  (define (>= . lst) (let ((x50897 (apply-prim >= lst))) x50897))
  (define (null? x) (let ((x50898 (prim null? x))) x50898))
  (define (equal? x y) (let ((x50899 (prim equal? x y))) x50899))
  (define (eq? x y) (let ((x50900 (prim eq? x y))) x50900))
  (define (cons a b) (let ((x50901 (prim cons a b))) x50901))
  (define (car lst) (let ((x50902 (prim car lst))) x50902))
  (define (cdr lst) (let ((x50903 (prim cdr lst))) x50903))
  (define (even? x)
    (let ((a50904 '0))
      (let ((a50905 '2))
        (let ((a50906 (modulo x a50905))) (equal? a50904 a50906)))))
  (define (odd? x)
    (let ((a50907 '1))
      (let ((a50908 '2))
        (let ((a50909 (modulo x a50908))) (equal? a50907 a50909)))))
  (define (list . x) x)
  (define (and . lst) (let ((x50910 (apply-prim and lst))) x50910))
  (define (or . lst) (let ((x50911 (apply-prim or lst))) x50911))
  (define (member? x lst)
    (let ((a50912 (null? lst)))
      (if a50912
        (let ((x50913 '#f)) x50913)
        (let ((a50914 (car lst)))
          (let ((a50915 (equal? a50914 x)))
            (if a50915
              (let ((x50916 '#t)) x50916)
              (let ((a50917 (cdr lst))) (member? x a50917))))))))
  (define (foldl fun acc lst)
    (let ((a50918 (null? lst)))
      (if a50918
        acc
        (let ((a50919 (car lst)))
          (let ((a50920 (fun a50919 acc)))
            (let ((a50921 (cdr lst))) (foldl fun a50920 a50921)))))))
  (define (reverse-helper lst lst2)
    (let ((a50922 (null? lst)))
      (if a50922
        lst2
        (let ((a50923 (cdr lst)))
          (let ((a50924 (car lst)))
            (let ((a50925 (cons a50924 lst2)))
              (reverse-helper a50923 a50925)))))))
  (define (reverse lst) (let ((a50926 (list))) (reverse-helper lst a50926)))
  (define (take-helper lst n lst2)
    (let ((a50927 '0))
      (let ((a50928 (= n a50927)))
        (if a50928
          (let ((x50929 (reverse lst2))) x50929)
          (let ((a50930 (cdr lst)))
            (let ((a50931 '1))
              (let ((a50932 (- n a50931)))
                (let ((a50933 (car lst)))
                  (let ((a50934 (cons a50933 lst2)))
                    (take-helper a50930 a50932 a50934))))))))))
  (define (take lst n) (let ((a50935 (list))) (take-helper lst n a50935)))
  (define (length lst)
    (let ((a50936 (null? lst)))
      (if a50936
        (let ((x50937 '0)) x50937)
        (let ((a50938 '1))
          (let ((a50939 (cdr lst)))
            (let ((a50940 (length a50939))) (+ a50938 a50940)))))))
  (define (map proc lst)
    (let ((a50941 (null? lst)))
      (if a50941
        (let ((x50942 (list))) x50942)
        (let ((a50943 (car lst)))
          (let ((a50944 (proc a50943)))
            (let ((a50945 (cdr lst)))
              (let ((a50946 (map proc a50945))) (cons a50944 a50946))))))))
  (define (filter op lst)
    (let ((a50947 (null? lst)))
      (if a50947
        (let ((x50948 (list))) x50948)
        (let ((a50949 (car lst)))
          (let ((a50950 (op a50949)))
            (if a50950
              (let ((a50951 (car lst)))
                (let ((a50952 (cdr lst)))
                  (let ((a50953 (filter op a50952))) (cons a50951 a50953))))
              (let ((a50954 (cdr lst))) (filter op a50954))))))))
  (define (drop lst n)
    (let ((a50955 '0))
      (let ((a50956 (= n a50955)))
        (if a50956
          lst
          (let ((a50957 (cdr lst)))
            (let ((a50958 '1))
              (let ((a50959 (- n a50958))) (drop a50957 a50959))))))))
  (define (foldr proc acc lst)
    (let ((a50960 (null? lst)))
      (if a50960
        acc
        (let ((a50961 (car lst)))
          (let ((a50962 (cdr lst)))
            (let ((a50963 (foldr proc acc a50962))) (proc a50961 a50963)))))))
  (define (append lst1 lst2)
    (let ((a50964 (null? lst1)))
      (if a50964
        lst2
        (let ((a50965 (car lst1)))
          (let ((a50966 (cdr lst1)))
            (let ((a50967 (append a50966 lst2))) (cons a50965 a50967)))))))
  (define (hash . lst) (let ((x50968 (apply-prim hash lst))) x50968))
  (define (hash-ref h k) (let ((x50969 (prim hash-ref h k))) x50969))
  (define (hash-set h k v) (let ((x50970 (prim hash-set h k v))) x50970))
  (define (hash-has-key? h k) (let ((x50971 (prim hash-has-key? h k))) x50971))
  (define (hash-count h) (let ((x50972 (prim hash-count h))) x50972))
  (define (call)
    (let ((a50973 '1))
      (let ((a50974 '2))
        (let ((a50975 (equal? a50973 a50974)))
          (if a50975
            (let ((a50976 '1)) (let ((a50977 '2)) (equal? a50976 a50977)))
            (let ((a50978 '3))
              (let ((a50979 (even? a50978)))
                (if a50979
                  (let ((a50980 '3)) (even? a50980))
                  (let ((a50981 '2)) (odd? a50981))))))))))
  (define (brouhaha_main) (let ((x50982 (call))) x50982)))
