'((define (+ . lst) (let ((x50001 (apply-prim + lst))) x50001))
  (define (- . lst) (let ((x50002 (apply-prim - lst))) x50002))
  (define (* . lst) (let ((x50003 (apply-prim * lst))) x50003))
  (define (modulo a b) (let ((x50004 (prim modulo a b))) x50004))
  (define (/ . lst) (let ((x50005 (apply-prim / lst))) x50005))
  (define (= . lst) (let ((x50006 (apply-prim = lst))) x50006))
  (define (> . lst) (let ((x50007 (apply-prim > lst))) x50007))
  (define (< . lst) (let ((x50008 (apply-prim < lst))) x50008))
  (define (<= . lst) (let ((x50009 (apply-prim <= lst))) x50009))
  (define (>= . lst) (let ((x50010 (apply-prim >= lst))) x50010))
  (define (null? x) (let ((x50011 (prim null? x))) x50011))
  (define (equal? x y) (let ((x50012 (prim equal? x y))) x50012))
  (define (eq? x y) (let ((x50013 (prim eq? x y))) x50013))
  (define (cons a b) (let ((x50014 (prim cons a b))) x50014))
  (define (car lst) (let ((x50015 (prim car lst))) x50015))
  (define (cdr lst) (let ((x50016 (prim cdr lst))) x50016))
  (define (even? x)
    (let ((a50017 '0))
      (let ((a50018 '2))
        (let ((a50019 (modulo x a50018))) (equal? a50017 a50019)))))
  (define (odd? x)
    (let ((a50020 '1))
      (let ((a50021 '2))
        (let ((a50022 (modulo x a50021))) (equal? a50020 a50022)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a50023 (null? lst)))
      (if a50023
        (let ((x50024 '#f)) x50024)
        (let ((a50025 (car lst)))
          (let ((a50026 (equal? a50025 x)))
            (if a50026
              (let ((x50027 '#t)) x50027)
              (let ((a50028 (cdr lst))) (member? x a50028))))))))
  (define (foldl fun acc lst)
    (let ((a50029 (null? lst)))
      (if a50029
        acc
        (let ((a50030 (car lst)))
          (let ((a50031 (fun a50030 acc)))
            (let ((a50032 (cdr lst))) (foldl fun a50031 a50032)))))))
  (define (reverse-helper lst lst2)
    (let ((a50033 (null? lst)))
      (if a50033
        lst2
        (let ((a50034 (cdr lst)))
          (let ((a50035 (car lst)))
            (let ((a50036 (cons a50035 lst2)))
              (reverse-helper a50034 a50036)))))))
  (define (reverse lst) (let ((a50037 (list))) (reverse-helper lst a50037)))
  (define (take-helper lst n lst2)
    (let ((a50038 '0))
      (let ((a50039 (= n a50038)))
        (if a50039
          (let ((x50040 (reverse lst2))) x50040)
          (let ((a50041 (cdr lst)))
            (let ((a50042 '1))
              (let ((a50043 (- n a50042)))
                (let ((a50044 (car lst)))
                  (let ((a50045 (cons a50044 lst2)))
                    (take-helper a50041 a50043 a50045))))))))))
  (define (take lst n) (let ((a50046 (list))) (take-helper lst n a50046)))
  (define (length lst)
    (let ((a50047 (null? lst)))
      (if a50047
        (let ((x50048 '0)) x50048)
        (let ((a50049 '1))
          (let ((a50050 (cdr lst)))
            (let ((a50051 (length a50050))) (+ a50049 a50051)))))))
  (define (map proc lst)
    (let ((a50052 (null? lst)))
      (if a50052
        (let ((x50053 (list))) x50053)
        (let ((a50054 (car lst)))
          (let ((a50055 (proc a50054)))
            (let ((a50056 (cdr lst)))
              (let ((a50057 (map proc a50056))) (cons a50055 a50057))))))))
  (define (filter op lst)
    (let ((a50058 (null? lst)))
      (if a50058
        (let ((x50059 (list))) x50059)
        (let ((a50060 (car lst)))
          (let ((a50061 (op a50060)))
            (if a50061
              (let ((a50062 (car lst)))
                (let ((a50063 (cdr lst)))
                  (let ((a50064 (filter op a50063))) (cons a50062 a50064))))
              (let ((a50065 (cdr lst))) (filter op a50065))))))))
  (define (drop lst n)
    (let ((a50066 '0))
      (let ((a50067 (= n a50066)))
        (if a50067
          lst
          (let ((a50068 (cdr lst)))
            (let ((a50069 '1))
              (let ((a50070 (- n a50069))) (drop a50068 a50070))))))))
  (define (foldr proc acc lst)
    (let ((a50071 (null? lst)))
      (if a50071
        acc
        (let ((a50072 (car lst)))
          (let ((a50073 (cdr lst)))
            (let ((a50074 (foldr proc acc a50073))) (proc a50072 a50074)))))))
  (define (append lst1 lst2)
    (let ((a50075 (null? lst1)))
      (if a50075
        lst2
        (let ((a50076 (car lst1)))
          (let ((a50077 (cdr lst1)))
            (let ((a50078 (append a50077 lst2))) (cons a50076 a50078)))))))
  (define (hash . lst) (let ((x50079 (apply-prim hash lst))) x50079))
  (define (hash-ref h k) (let ((x50080 (prim hash-ref h k))) x50080))
  (define (hash-set h k v) (let ((x50081 (prim hash-set h k v))) x50081))
  (define (hash-has-key? h k) (let ((x50082 (prim hash-has-key? h k))) x50082))
  (define (hash-count h) (let ((x50083 (prim hash-count h))) x50083))
  (define (call)
    (let ((a50084 '1))
      (let ((a50085 '2))
        (let ((a50086 (equal? a50084 a50085)))
          (if a50086
            (let ((a50087 '1)) (let ((a50088 '2)) (equal? a50087 a50088)))
            (let ((a50089 '3))
              (let ((a50090 (even? a50089)))
                (if a50090
                  (let ((a50091 '3)) (even? a50091))
                  (let ((a50092 '2)) (odd? a50092))))))))))
  (define (brouhaha_main) (let ((x50093 (call))) x50093)))
