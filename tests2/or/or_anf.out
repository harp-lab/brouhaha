'((define (+ . lst)
    (let ((kont48362 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48269 (apply-prim + lst))) (kont48362 x48269)))))
  (define (- . lst)
    (let ((kont48364 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48270 (apply-prim - lst))) (kont48364 x48270)))))
  (define (* . lst)
    (let ((kont48366 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48271 (apply-prim * lst))) (kont48366 x48271)))))
  (define (modulo kont48368 a b)
    (let ((x48272 (prim modulo a b))) (kont48368 x48272)))
  (define (/ . lst)
    (let ((kont48369 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48273 (apply-prim / lst))) (kont48369 x48273)))))
  (define (= . lst)
    (let ((kont48371 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48274 (apply-prim = lst))) (kont48371 x48274)))))
  (define (> . lst)
    (let ((kont48373 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48275 (apply-prim > lst))) (kont48373 x48275)))))
  (define (< . lst)
    (let ((kont48375 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48276 (apply-prim < lst))) (kont48375 x48276)))))
  (define (<= . lst)
    (let ((kont48377 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48277 (apply-prim <= lst))) (kont48377 x48277)))))
  (define (>= . lst)
    (let ((kont48379 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48278 (apply-prim >= lst))) (kont48379 x48278)))))
  (define (null? kont48381 x)
    (let ((x48279 (prim null? x))) (kont48381 x48279)))
  (define (equal? kont48382 x y)
    (let ((x48280 (prim equal? x y))) (kont48382 x48280)))
  (define (eq? kont48383 x y)
    (let ((x48281 (prim eq? x y))) (kont48383 x48281)))
  (define (cons kont48384 a b)
    (let ((x48282 (prim cons a b))) (kont48384 x48282)))
  (define (car kont48385 lst)
    (let ((x48283 (prim car lst))) (kont48385 x48283)))
  (define (cdr kont48386 lst)
    (let ((x48284 (prim cdr lst))) (kont48386 x48284)))
  (define (even? kont48387 x)
    (let ((a48285 '0))
      (let ((a48286 '2))
        (let ((f48388 (lambda (a48287) (equal? kont48387 a48285 a48287))))
          (modulo f48388 x a48286)))))
  (define (odd? kont48389 x)
    (let ((a48288 '1))
      (let ((a48289 '2))
        (let ((f48390 (lambda (a48290) (equal? kont48389 a48288 a48290))))
          (modulo f48390 x a48289)))))
  (define (list . x)
    (let ((kont48391 (prim car x))) (let ((x (prim cdr x))) (kont48391 x))))
  (define (member? kont48393 x lst)
    (let ((f48397
           (lambda (a48291)
             (if a48291
               (let ((x48292 '#f)) (kont48393 x48292))
               (let ((f48396
                      (lambda (a48293)
                        (let ((f48395
                               (lambda (a48294)
                                 (if a48294
                                   (let ((x48295 '#t)) (kont48393 x48295))
                                   (let ((f48394
                                          (lambda (a48296)
                                            (member? kont48393 x a48296))))
                                     (cdr f48394 lst))))))
                          (equal? f48395 a48293 x)))))
                 (car f48396 lst))))))
      (null? f48397 lst)))
  (define (foldl kont48398 fun acc lst)
    (let ((f48402
           (lambda (a48297)
             (if a48297
               (kont48398 acc)
               (let ((f48401
                      (lambda (a48298)
                        (let ((f48400
                               (lambda (a48299)
                                 (let ((f48399
                                        (lambda (a48300)
                                          (foldl
                                           kont48398
                                           fun
                                           a48299
                                           a48300))))
                                   (cdr f48399 lst)))))
                          (fun f48400 a48298 acc)))))
                 (car f48401 lst))))))
      (null? f48402 lst)))
  (define (reverse-helper kont48403 lst lst2)
    (let ((f48407
           (lambda (a48301)
             (if a48301
               (kont48403 lst2)
               (let ((f48406
                      (lambda (a48302)
                        (let ((f48405
                               (lambda (a48303)
                                 (let ((f48404
                                        (lambda (a48304)
                                          (reverse-helper
                                           kont48403
                                           a48302
                                           a48304))))
                                   (cons f48404 a48303 lst2)))))
                          (car f48405 lst)))))
                 (cdr f48406 lst))))))
      (null? f48407 lst)))
  (define (reverse kont48408 lst)
    (let ((f48409 (lambda (a48305) (reverse-helper kont48408 lst a48305))))
      (list f48409)))
  (define (take-helper kont48410 lst n lst2)
    (let ((a48306 '0))
      (let ((f48416
             (lambda (a48307)
               (if a48307
                 (let ((f48411 (lambda (x48308) (kont48410 x48308))))
                   (reverse f48411 lst2))
                 (let ((f48415
                        (lambda (a48309)
                          (let ((a48310 '1))
                            (let ((f48414
                                   (lambda (a48311)
                                     (let ((f48413
                                            (lambda (a48312)
                                              (let ((f48412
                                                     (lambda (a48313)
                                                       (take-helper
                                                        kont48410
                                                        a48309
                                                        a48311
                                                        a48313))))
                                                (cons f48412 a48312 lst2)))))
                                       (car f48413 lst)))))
                              (- f48414 n a48310))))))
                   (cdr f48415 lst))))))
        (= f48416 n a48306))))
  (define (take kont48417 lst n)
    (let ((f48418 (lambda (a48314) (take-helper kont48417 lst n a48314))))
      (list f48418)))
  (define (length kont48419 lst)
    (let ((f48422
           (lambda (a48315)
             (if a48315
               (let ((x48316 '0)) (kont48419 x48316))
               (let ((a48317 '1))
                 (let ((f48421
                        (lambda (a48318)
                          (let ((f48420
                                 (lambda (a48319)
                                   (+ kont48419 a48317 a48319))))
                            (length f48420 a48318)))))
                   (cdr f48421 lst)))))))
      (null? f48422 lst)))
  (define (map kont48423 proc lst)
    (let ((f48429
           (lambda (a48320)
             (if a48320
               (let ((f48424 (lambda (x48321) (kont48423 x48321))))
                 (list f48424))
               (let ((f48428
                      (lambda (a48322)
                        (let ((f48427
                               (lambda (a48323)
                                 (let ((f48426
                                        (lambda (a48324)
                                          (let ((f48425
                                                 (lambda (a48325)
                                                   (cons
                                                    kont48423
                                                    a48323
                                                    a48325))))
                                            (map f48425 proc a48324)))))
                                   (cdr f48426 lst)))))
                          (proc f48427 a48322)))))
                 (car f48428 lst))))))
      (null? f48429 lst)))
  (define (filter kont48430 op lst)
    (let ((f48438
           (lambda (a48326)
             (if a48326
               (let ((f48431 (lambda (x48327) (kont48430 x48327))))
                 (list f48431))
               (let ((f48437
                      (lambda (a48328)
                        (let ((f48436
                               (lambda (a48329)
                                 (if a48329
                                   (let ((f48434
                                          (lambda (a48330)
                                            (let ((f48433
                                                   (lambda (a48331)
                                                     (let ((f48432
                                                            (lambda (a48332)
                                                              (cons
                                                               kont48430
                                                               a48330
                                                               a48332))))
                                                       (filter
                                                        f48432
                                                        op
                                                        a48331)))))
                                              (cdr f48433 lst)))))
                                     (car f48434 lst))
                                   (let ((f48435
                                          (lambda (a48333)
                                            (filter kont48430 op a48333))))
                                     (cdr f48435 lst))))))
                          (op f48436 a48328)))))
                 (car f48437 lst))))))
      (null? f48438 lst)))
  (define (drop kont48439 lst n)
    (let ((a48334 '0))
      (let ((f48442
             (lambda (a48335)
               (if a48335
                 (kont48439 lst)
                 (let ((f48441
                        (lambda (a48336)
                          (let ((a48337 '1))
                            (let ((f48440
                                   (lambda (a48338)
                                     (drop kont48439 a48336 a48338))))
                              (- f48440 n a48337))))))
                   (cdr f48441 lst))))))
        (= f48442 n a48334))))
  (define (foldr kont48443 proc acc lst)
    (let ((f48447
           (lambda (a48339)
             (if a48339
               (kont48443 acc)
               (let ((f48446
                      (lambda (a48340)
                        (let ((f48445
                               (lambda (a48341)
                                 (let ((f48444
                                        (lambda (a48342)
                                          (proc kont48443 a48340 a48342))))
                                   (foldr f48444 proc acc a48341)))))
                          (cdr f48445 lst)))))
                 (car f48446 lst))))))
      (null? f48447 lst)))
  (define (append kont48448 lst1 lst2)
    (let ((f48452
           (lambda (a48343)
             (if a48343
               (kont48448 lst2)
               (let ((f48451
                      (lambda (a48344)
                        (let ((f48450
                               (lambda (a48345)
                                 (let ((f48449
                                        (lambda (a48346)
                                          (cons kont48448 a48344 a48346))))
                                   (append f48449 a48345 lst2)))))
                          (cdr f48450 lst1)))))
                 (car f48451 lst1))))))
      (null? f48452 lst1)))
  (define (hash . lst)
    (let ((kont48453 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48347 (apply-prim hash lst))) (kont48453 x48347)))))
  (define (hash-ref kont48455 h k)
    (let ((x48348 (prim hash-ref h k))) (kont48455 x48348)))
  (define (hash-set kont48456 h k v)
    (let ((x48349 (prim hash-set h k v))) (kont48456 x48349)))
  (define (hash-has-key? kont48457 h k)
    (let ((x48350 (prim hash-has-key? h k))) (kont48457 x48350)))
  (define (hash-count kont48458 h)
    (let ((x48351 (prim hash-count h))) (kont48458 x48351)))
  (define (call kont48459)
    (let ((a48352 '1))
      (let ((a48353 '2))
        (let ((f48461
               (lambda (a48354)
                 (if a48354
                   (let ((a48355 '1))
                     (let ((a48356 '2)) (equal? kont48459 a48355 a48356)))
                   (let ((a48357 '3))
                     (let ((f48460
                            (lambda (a48358)
                              (if a48358
                                (let ((a48359 '3)) (even? kont48459 a48359))
                                (let ((a48360 '2)) (odd? kont48459 a48360))))))
                       (even? f48460 a48357)))))))
          (equal? f48461 a48352 a48353)))))
  (define (brouhaha_main kont48462)
    (let ((f48463 (lambda (x48361) (kont48462 x48361)))) (call f48463))))
