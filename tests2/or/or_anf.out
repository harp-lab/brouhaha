'((define (+ . lst)
    (let ((kont50094 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50001 (apply-prim + lst))) (kont50094 x50001)))))
  (define (- . lst)
    (let ((kont50096 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50002 (apply-prim - lst))) (kont50096 x50002)))))
  (define (* . lst)
    (let ((kont50098 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50003 (apply-prim * lst))) (kont50098 x50003)))))
  (define (modulo kont50100 a b)
    (let ((x50004 (prim modulo a b))) (kont50100 x50004)))
  (define (/ . lst)
    (let ((kont50101 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50005 (apply-prim / lst))) (kont50101 x50005)))))
  (define (= . lst)
    (let ((kont50103 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50006 (apply-prim = lst))) (kont50103 x50006)))))
  (define (> . lst)
    (let ((kont50105 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50007 (apply-prim > lst))) (kont50105 x50007)))))
  (define (< . lst)
    (let ((kont50107 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50008 (apply-prim < lst))) (kont50107 x50008)))))
  (define (<= . lst)
    (let ((kont50109 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50009 (apply-prim <= lst))) (kont50109 x50009)))))
  (define (>= . lst)
    (let ((kont50111 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50010 (apply-prim >= lst))) (kont50111 x50010)))))
  (define (null? kont50113 x)
    (let ((x50011 (prim null? x))) (kont50113 x50011)))
  (define (equal? kont50114 x y)
    (let ((x50012 (prim equal? x y))) (kont50114 x50012)))
  (define (eq? kont50115 x y)
    (let ((x50013 (prim eq? x y))) (kont50115 x50013)))
  (define (cons kont50116 a b)
    (let ((x50014 (prim cons a b))) (kont50116 x50014)))
  (define (car kont50117 lst)
    (let ((x50015 (prim car lst))) (kont50117 x50015)))
  (define (cdr kont50118 lst)
    (let ((x50016 (prim cdr lst))) (kont50118 x50016)))
  (define (even? kont50119 x)
    (let ((a50017 '0))
      (let ((a50018 '2))
        (let ((f50120 (lambda (a50019) (equal? kont50119 a50017 a50019))))
          (modulo f50120 x a50018)))))
  (define (odd? kont50121 x)
    (let ((a50020 '1))
      (let ((a50021 '2))
        (let ((f50122 (lambda (a50022) (equal? kont50121 a50020 a50022))))
          (modulo f50122 x a50021)))))
  (define (list . x)
    (let ((kont50123 (prim car x))) (let ((x (prim cdr x))) (kont50123 x))))
  (define (member? kont50125 x lst)
    (let ((f50129
           (lambda (a50023)
             (if a50023
               (let ((x50024 '#f)) (kont50125 x50024))
               (let ((f50128
                      (lambda (a50025)
                        (let ((f50127
                               (lambda (a50026)
                                 (if a50026
                                   (let ((x50027 '#t)) (kont50125 x50027))
                                   (let ((f50126
                                          (lambda (a50028)
                                            (member? kont50125 x a50028))))
                                     (cdr f50126 lst))))))
                          (equal? f50127 a50025 x)))))
                 (car f50128 lst))))))
      (null? f50129 lst)))
  (define (foldl kont50130 fun acc lst)
    (let ((f50134
           (lambda (a50029)
             (if a50029
               (kont50130 acc)
               (let ((f50133
                      (lambda (a50030)
                        (let ((f50132
                               (lambda (a50031)
                                 (let ((f50131
                                        (lambda (a50032)
                                          (foldl
                                           kont50130
                                           fun
                                           a50031
                                           a50032))))
                                   (cdr f50131 lst)))))
                          (fun f50132 a50030 acc)))))
                 (car f50133 lst))))))
      (null? f50134 lst)))
  (define (reverse-helper kont50135 lst lst2)
    (let ((f50139
           (lambda (a50033)
             (if a50033
               (kont50135 lst2)
               (let ((f50138
                      (lambda (a50034)
                        (let ((f50137
                               (lambda (a50035)
                                 (let ((f50136
                                        (lambda (a50036)
                                          (reverse-helper
                                           kont50135
                                           a50034
                                           a50036))))
                                   (cons f50136 a50035 lst2)))))
                          (car f50137 lst)))))
                 (cdr f50138 lst))))))
      (null? f50139 lst)))
  (define (reverse kont50140 lst)
    (let ((f50141 (lambda (a50037) (reverse-helper kont50140 lst a50037))))
      (list f50141)))
  (define (take-helper kont50142 lst n lst2)
    (let ((a50038 '0))
      (let ((f50148
             (lambda (a50039)
               (if a50039
                 (let ((f50143 (lambda (x50040) (kont50142 x50040))))
                   (reverse f50143 lst2))
                 (let ((f50147
                        (lambda (a50041)
                          (let ((a50042 '1))
                            (let ((f50146
                                   (lambda (a50043)
                                     (let ((f50145
                                            (lambda (a50044)
                                              (let ((f50144
                                                     (lambda (a50045)
                                                       (take-helper
                                                        kont50142
                                                        a50041
                                                        a50043
                                                        a50045))))
                                                (cons f50144 a50044 lst2)))))
                                       (car f50145 lst)))))
                              (- f50146 n a50042))))))
                   (cdr f50147 lst))))))
        (= f50148 n a50038))))
  (define (take kont50149 lst n)
    (let ((f50150 (lambda (a50046) (take-helper kont50149 lst n a50046))))
      (list f50150)))
  (define (length kont50151 lst)
    (let ((f50154
           (lambda (a50047)
             (if a50047
               (let ((x50048 '0)) (kont50151 x50048))
               (let ((a50049 '1))
                 (let ((f50153
                        (lambda (a50050)
                          (let ((f50152
                                 (lambda (a50051)
                                   (+ kont50151 a50049 a50051))))
                            (length f50152 a50050)))))
                   (cdr f50153 lst)))))))
      (null? f50154 lst)))
  (define (map kont50155 proc lst)
    (let ((f50161
           (lambda (a50052)
             (if a50052
               (let ((f50156 (lambda (x50053) (kont50155 x50053))))
                 (list f50156))
               (let ((f50160
                      (lambda (a50054)
                        (let ((f50159
                               (lambda (a50055)
                                 (let ((f50158
                                        (lambda (a50056)
                                          (let ((f50157
                                                 (lambda (a50057)
                                                   (cons
                                                    kont50155
                                                    a50055
                                                    a50057))))
                                            (map f50157 proc a50056)))))
                                   (cdr f50158 lst)))))
                          (proc f50159 a50054)))))
                 (car f50160 lst))))))
      (null? f50161 lst)))
  (define (filter kont50162 op lst)
    (let ((f50170
           (lambda (a50058)
             (if a50058
               (let ((f50163 (lambda (x50059) (kont50162 x50059))))
                 (list f50163))
               (let ((f50169
                      (lambda (a50060)
                        (let ((f50168
                               (lambda (a50061)
                                 (if a50061
                                   (let ((f50166
                                          (lambda (a50062)
                                            (let ((f50165
                                                   (lambda (a50063)
                                                     (let ((f50164
                                                            (lambda (a50064)
                                                              (cons
                                                               kont50162
                                                               a50062
                                                               a50064))))
                                                       (filter
                                                        f50164
                                                        op
                                                        a50063)))))
                                              (cdr f50165 lst)))))
                                     (car f50166 lst))
                                   (let ((f50167
                                          (lambda (a50065)
                                            (filter kont50162 op a50065))))
                                     (cdr f50167 lst))))))
                          (op f50168 a50060)))))
                 (car f50169 lst))))))
      (null? f50170 lst)))
  (define (drop kont50171 lst n)
    (let ((a50066 '0))
      (let ((f50174
             (lambda (a50067)
               (if a50067
                 (kont50171 lst)
                 (let ((f50173
                        (lambda (a50068)
                          (let ((a50069 '1))
                            (let ((f50172
                                   (lambda (a50070)
                                     (drop kont50171 a50068 a50070))))
                              (- f50172 n a50069))))))
                   (cdr f50173 lst))))))
        (= f50174 n a50066))))
  (define (foldr kont50175 proc acc lst)
    (let ((f50179
           (lambda (a50071)
             (if a50071
               (kont50175 acc)
               (let ((f50178
                      (lambda (a50072)
                        (let ((f50177
                               (lambda (a50073)
                                 (let ((f50176
                                        (lambda (a50074)
                                          (proc kont50175 a50072 a50074))))
                                   (foldr f50176 proc acc a50073)))))
                          (cdr f50177 lst)))))
                 (car f50178 lst))))))
      (null? f50179 lst)))
  (define (append kont50180 lst1 lst2)
    (let ((f50184
           (lambda (a50075)
             (if a50075
               (kont50180 lst2)
               (let ((f50183
                      (lambda (a50076)
                        (let ((f50182
                               (lambda (a50077)
                                 (let ((f50181
                                        (lambda (a50078)
                                          (cons kont50180 a50076 a50078))))
                                   (append f50181 a50077 lst2)))))
                          (cdr f50182 lst1)))))
                 (car f50183 lst1))))))
      (null? f50184 lst1)))
  (define (hash . lst)
    (let ((kont50185 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50079 (apply-prim hash lst))) (kont50185 x50079)))))
  (define (hash-ref kont50187 h k)
    (let ((x50080 (prim hash-ref h k))) (kont50187 x50080)))
  (define (hash-set kont50188 h k v)
    (let ((x50081 (prim hash-set h k v))) (kont50188 x50081)))
  (define (hash-has-key? kont50189 h k)
    (let ((x50082 (prim hash-has-key? h k))) (kont50189 x50082)))
  (define (hash-count kont50190 h)
    (let ((x50083 (prim hash-count h))) (kont50190 x50083)))
  (define (call kont50191)
    (let ((a50084 '1))
      (let ((a50085 '2))
        (let ((f50193
               (lambda (a50086)
                 (if a50086
                   (let ((a50087 '1))
                     (let ((a50088 '2)) (equal? kont50191 a50087 a50088)))
                   (let ((a50089 '3))
                     (let ((f50192
                            (lambda (a50090)
                              (if a50090
                                (let ((a50091 '3)) (even? kont50191 a50091))
                                (let ((a50092 '2)) (odd? kont50191 a50092))))))
                       (even? f50192 a50089)))))))
          (equal? f50193 a50084 a50085)))))
  (define (brouhaha_main kont50194)
    (let ((f50195 (lambda (x50093) (kont50194 x50093)))) (call f50195))))
