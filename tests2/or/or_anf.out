'((define (+ . lst)
    (let ((kont51898 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51805 (apply-prim + lst))) (kont51898 x51805)))))
  (define (- . lst)
    (let ((kont51900 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51806 (apply-prim - lst))) (kont51900 x51806)))))
  (define (* . lst)
    (let ((kont51902 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51807 (apply-prim * lst))) (kont51902 x51807)))))
  (define (modulo kont51904 a b)
    (let ((x51808 (prim modulo a b))) (kont51904 x51808)))
  (define (/ . lst)
    (let ((kont51905 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51809 (apply-prim / lst))) (kont51905 x51809)))))
  (define (= . lst)
    (let ((kont51907 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51810 (apply-prim = lst))) (kont51907 x51810)))))
  (define (> . lst)
    (let ((kont51909 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51811 (apply-prim > lst))) (kont51909 x51811)))))
  (define (< . lst)
    (let ((kont51911 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51812 (apply-prim < lst))) (kont51911 x51812)))))
  (define (<= . lst)
    (let ((kont51913 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51813 (apply-prim <= lst))) (kont51913 x51813)))))
  (define (>= . lst)
    (let ((kont51915 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51814 (apply-prim >= lst))) (kont51915 x51814)))))
  (define (null? kont51917 x)
    (let ((x51815 (prim null? x))) (kont51917 x51815)))
  (define (equal? kont51918 x y)
    (let ((x51816 (prim equal? x y))) (kont51918 x51816)))
  (define (eq? kont51919 x y)
    (let ((x51817 (prim eq? x y))) (kont51919 x51817)))
  (define (cons kont51920 a b)
    (let ((x51818 (prim cons a b))) (kont51920 x51818)))
  (define (car kont51921 lst)
    (let ((x51819 (prim car lst))) (kont51921 x51819)))
  (define (cdr kont51922 lst)
    (let ((x51820 (prim cdr lst))) (kont51922 x51820)))
  (define (even? kont51923 x)
    (let ((a51821 '0))
      (let ((a51822 '2))
        (let ((f51924 (lambda (a51823) (equal? kont51923 a51821 a51823))))
          (modulo f51924 x a51822)))))
  (define (odd? kont51925 x)
    (let ((a51824 '1))
      (let ((a51825 '2))
        (let ((f51926 (lambda (a51826) (equal? kont51925 a51824 a51826))))
          (modulo f51926 x a51825)))))
  (define (list . x)
    (let ((kont51927 (prim car x))) (let ((x (prim cdr x))) (kont51927 x))))
  (define (member? kont51929 x lst)
    (let ((f51933
           (lambda (a51827)
             (if a51827
               (let ((x51828 '#f)) (kont51929 x51828))
               (let ((f51932
                      (lambda (a51829)
                        (let ((f51931
                               (lambda (a51830)
                                 (if a51830
                                   (let ((x51831 '#t)) (kont51929 x51831))
                                   (let ((f51930
                                          (lambda (a51832)
                                            (member? kont51929 x a51832))))
                                     (cdr f51930 lst))))))
                          (equal? f51931 a51829 x)))))
                 (car f51932 lst))))))
      (null? f51933 lst)))
  (define (foldl kont51934 fun acc lst)
    (let ((f51938
           (lambda (a51833)
             (if a51833
               (kont51934 acc)
               (let ((f51937
                      (lambda (a51834)
                        (let ((f51936
                               (lambda (a51835)
                                 (let ((f51935
                                        (lambda (a51836)
                                          (foldl
                                           kont51934
                                           fun
                                           a51835
                                           a51836))))
                                   (cdr f51935 lst)))))
                          (fun f51936 a51834 acc)))))
                 (car f51937 lst))))))
      (null? f51938 lst)))
  (define (reverse-helper kont51939 lst lst2)
    (let ((f51943
           (lambda (a51837)
             (if a51837
               (kont51939 lst2)
               (let ((f51942
                      (lambda (a51838)
                        (let ((f51941
                               (lambda (a51839)
                                 (let ((f51940
                                        (lambda (a51840)
                                          (reverse-helper
                                           kont51939
                                           a51838
                                           a51840))))
                                   (cons f51940 a51839 lst2)))))
                          (car f51941 lst)))))
                 (cdr f51942 lst))))))
      (null? f51943 lst)))
  (define (reverse kont51944 lst)
    (let ((f51945 (lambda (a51841) (reverse-helper kont51944 lst a51841))))
      (list f51945)))
  (define (take-helper kont51946 lst n lst2)
    (let ((a51842 '0))
      (let ((f51952
             (lambda (a51843)
               (if a51843
                 (let ((f51947 (lambda (x51844) (kont51946 x51844))))
                   (reverse f51947 lst2))
                 (let ((f51951
                        (lambda (a51845)
                          (let ((a51846 '1))
                            (let ((f51950
                                   (lambda (a51847)
                                     (let ((f51949
                                            (lambda (a51848)
                                              (let ((f51948
                                                     (lambda (a51849)
                                                       (take-helper
                                                        kont51946
                                                        a51845
                                                        a51847
                                                        a51849))))
                                                (cons f51948 a51848 lst2)))))
                                       (car f51949 lst)))))
                              (- f51950 n a51846))))))
                   (cdr f51951 lst))))))
        (= f51952 n a51842))))
  (define (take kont51953 lst n)
    (let ((f51954 (lambda (a51850) (take-helper kont51953 lst n a51850))))
      (list f51954)))
  (define (length kont51955 lst)
    (let ((f51958
           (lambda (a51851)
             (if a51851
               (let ((x51852 '0)) (kont51955 x51852))
               (let ((a51853 '1))
                 (let ((f51957
                        (lambda (a51854)
                          (let ((f51956
                                 (lambda (a51855)
                                   (+ kont51955 a51853 a51855))))
                            (length f51956 a51854)))))
                   (cdr f51957 lst)))))))
      (null? f51958 lst)))
  (define (map kont51959 proc lst)
    (let ((f51965
           (lambda (a51856)
             (if a51856
               (let ((f51960 (lambda (x51857) (kont51959 x51857))))
                 (list f51960))
               (let ((f51964
                      (lambda (a51858)
                        (let ((f51963
                               (lambda (a51859)
                                 (let ((f51962
                                        (lambda (a51860)
                                          (let ((f51961
                                                 (lambda (a51861)
                                                   (cons
                                                    kont51959
                                                    a51859
                                                    a51861))))
                                            (map f51961 proc a51860)))))
                                   (cdr f51962 lst)))))
                          (proc f51963 a51858)))))
                 (car f51964 lst))))))
      (null? f51965 lst)))
  (define (filter kont51966 op lst)
    (let ((f51974
           (lambda (a51862)
             (if a51862
               (let ((f51967 (lambda (x51863) (kont51966 x51863))))
                 (list f51967))
               (let ((f51973
                      (lambda (a51864)
                        (let ((f51972
                               (lambda (a51865)
                                 (if a51865
                                   (let ((f51970
                                          (lambda (a51866)
                                            (let ((f51969
                                                   (lambda (a51867)
                                                     (let ((f51968
                                                            (lambda (a51868)
                                                              (cons
                                                               kont51966
                                                               a51866
                                                               a51868))))
                                                       (filter
                                                        f51968
                                                        op
                                                        a51867)))))
                                              (cdr f51969 lst)))))
                                     (car f51970 lst))
                                   (let ((f51971
                                          (lambda (a51869)
                                            (filter kont51966 op a51869))))
                                     (cdr f51971 lst))))))
                          (op f51972 a51864)))))
                 (car f51973 lst))))))
      (null? f51974 lst)))
  (define (drop kont51975 lst n)
    (let ((a51870 '0))
      (let ((f51978
             (lambda (a51871)
               (if a51871
                 (kont51975 lst)
                 (let ((f51977
                        (lambda (a51872)
                          (let ((a51873 '1))
                            (let ((f51976
                                   (lambda (a51874)
                                     (drop kont51975 a51872 a51874))))
                              (- f51976 n a51873))))))
                   (cdr f51977 lst))))))
        (= f51978 n a51870))))
  (define (foldr kont51979 proc acc lst)
    (let ((f51983
           (lambda (a51875)
             (if a51875
               (kont51979 acc)
               (let ((f51982
                      (lambda (a51876)
                        (let ((f51981
                               (lambda (a51877)
                                 (let ((f51980
                                        (lambda (a51878)
                                          (proc kont51979 a51876 a51878))))
                                   (foldr f51980 proc acc a51877)))))
                          (cdr f51981 lst)))))
                 (car f51982 lst))))))
      (null? f51983 lst)))
  (define (append kont51984 lst1 lst2)
    (let ((f51988
           (lambda (a51879)
             (if a51879
               (kont51984 lst2)
               (let ((f51987
                      (lambda (a51880)
                        (let ((f51986
                               (lambda (a51881)
                                 (let ((f51985
                                        (lambda (a51882)
                                          (cons kont51984 a51880 a51882))))
                                   (append f51985 a51881 lst2)))))
                          (cdr f51986 lst1)))))
                 (car f51987 lst1))))))
      (null? f51988 lst1)))
  (define (hash . lst)
    (let ((kont51989 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x51883 (apply-prim hash lst))) (kont51989 x51883)))))
  (define (hash-ref kont51991 h k)
    (let ((x51884 (prim hash-ref h k))) (kont51991 x51884)))
  (define (hash-set kont51992 h k v)
    (let ((x51885 (prim hash-set h k v))) (kont51992 x51885)))
  (define (hash-has-key? kont51993 h k)
    (let ((x51886 (prim hash-has-key? h k))) (kont51993 x51886)))
  (define (hash-count kont51994 h)
    (let ((x51887 (prim hash-count h))) (kont51994 x51887)))
  (define (call kont51995)
    (let ((a51888 '1))
      (let ((a51889 '2))
        (let ((f51997
               (lambda (a51890)
                 (if a51890
                   (let ((a51891 '1))
                     (let ((a51892 '2)) (equal? kont51995 a51891 a51892)))
                   (let ((a51893 '3))
                     (let ((f51996
                            (lambda (a51894)
                              (if a51894
                                (let ((a51895 '3)) (even? kont51995 a51895))
                                (let ((a51896 '2)) (odd? kont51995 a51896))))))
                       (even? f51996 a51893)))))))
          (equal? f51997 a51888 a51889)))))
  (define (brouhaha_main kont51998)
    (let ((f51999 (lambda (x51897) (kont51998 x51897)))) (call f51999))))
