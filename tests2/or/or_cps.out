'((define (+ . lst)
    (let ((kont5009450196 (prim car lst)))
      (let ((lst50197 (prim cdr lst)))
        (let ((x5000150198 (apply-prim + lst50197)))
          (kont5009450196 x5000150198)))))
  (define (- . lst)
    (let ((kont5009650199 (prim car lst)))
      (let ((lst50200 (prim cdr lst)))
        (let ((x5000250201 (apply-prim - lst50200)))
          (kont5009650199 x5000250201)))))
  (define (* . lst)
    (let ((kont5009850202 (prim car lst)))
      (let ((lst50203 (prim cdr lst)))
        (let ((x5000350204 (apply-prim * lst50203)))
          (kont5009850202 x5000350204)))))
  (define (modulo kont50100 a b)
    (let ((x5000450205 (prim modulo a b))) (kont50100 x5000450205)))
  (define (/ . lst)
    (let ((kont5010150206 (prim car lst)))
      (let ((lst50207 (prim cdr lst)))
        (let ((x5000550208 (apply-prim / lst50207)))
          (kont5010150206 x5000550208)))))
  (define (= . lst)
    (let ((kont5010350209 (prim car lst)))
      (let ((lst50210 (prim cdr lst)))
        (let ((x5000650211 (apply-prim = lst50210)))
          (kont5010350209 x5000650211)))))
  (define (> . lst)
    (let ((kont5010550212 (prim car lst)))
      (let ((lst50213 (prim cdr lst)))
        (let ((x5000750214 (apply-prim > lst50213)))
          (kont5010550212 x5000750214)))))
  (define (< . lst)
    (let ((kont5010750215 (prim car lst)))
      (let ((lst50216 (prim cdr lst)))
        (let ((x5000850217 (apply-prim < lst50216)))
          (kont5010750215 x5000850217)))))
  (define (<= . lst)
    (let ((kont5010950218 (prim car lst)))
      (let ((lst50219 (prim cdr lst)))
        (let ((x5000950220 (apply-prim <= lst50219)))
          (kont5010950218 x5000950220)))))
  (define (>= . lst)
    (let ((kont5011150221 (prim car lst)))
      (let ((lst50222 (prim cdr lst)))
        (let ((x5001050223 (apply-prim >= lst50222)))
          (kont5011150221 x5001050223)))))
  (define (null? kont50113 x)
    (let ((x5001150224 (prim null? x))) (kont50113 x5001150224)))
  (define (equal? kont50114 x y)
    (let ((x5001250225 (prim equal? x y))) (kont50114 x5001250225)))
  (define (eq? kont50115 x y)
    (let ((x5001350226 (prim eq? x y))) (kont50115 x5001350226)))
  (define (cons kont50116 a b)
    (let ((x5001450227 (prim cons a b))) (kont50116 x5001450227)))
  (define (car kont50117 lst)
    (let ((x5001550228 (prim car lst))) (kont50117 x5001550228)))
  (define (cdr kont50118 lst)
    (let ((x5001650229 (prim cdr lst))) (kont50118 x5001650229)))
  (define (even? kont50119 x)
    (let ((a5001750230 '0))
      (let ((a5001850231 '2))
        (let ((f5012050232
               (lambda (a5001950233)
                 (equal? kont50119 a5001750230 a5001950233))))
          (modulo f5012050232 x a5001850231)))))
  (define (odd? kont50121 x)
    (let ((a5002050234 '1))
      (let ((a5002150235 '2))
        (let ((f5012250236
               (lambda (a5002250237)
                 (equal? kont50121 a5002050234 a5002250237))))
          (modulo f5012250236 x a5002150235)))))
  (define (list . x)
    (let ((kont5012350238 (prim car x)))
      (let ((x50239 (prim cdr x))) (kont5012350238 x50239))))
  (define (member? kont50125 x lst)
    (let ((f5012950240
           (lambda (a5002350241)
             (if a5002350241
               (let ((x5002450242 '#f)) (kont50125 x5002450242))
               (let ((f5012850243
                      (lambda (a5002550244)
                        (let ((f5012750245
                               (lambda (a5002650246)
                                 (if a5002650246
                                   (let ((x5002750247 '#t))
                                     (kont50125 x5002750247))
                                   (let ((f5012650248
                                          (lambda (a5002850249)
                                            (member?
                                             kont50125
                                             x
                                             a5002850249))))
                                     (cdr f5012650248 lst))))))
                          (equal? f5012750245 a5002550244 x)))))
                 (car f5012850243 lst))))))
      (null? f5012950240 lst)))
  (define (foldl kont50130 fun acc lst)
    (let ((f5013450250
           (lambda (a5002950251)
             (if a5002950251
               (kont50130 acc)
               (let ((f5013350252
                      (lambda (a5003050253)
                        (let ((f5013250254
                               (lambda (a5003150255)
                                 (let ((f5013150256
                                        (lambda (a5003250257)
                                          (foldl
                                           kont50130
                                           fun
                                           a5003150255
                                           a5003250257))))
                                   (cdr f5013150256 lst)))))
                          (fun f5013250254 a5003050253 acc)))))
                 (car f5013350252 lst))))))
      (null? f5013450250 lst)))
  (define (reverse-helper kont50135 lst lst2)
    (let ((f5013950258
           (lambda (a5003350259)
             (if a5003350259
               (kont50135 lst2)
               (let ((f5013850260
                      (lambda (a5003450261)
                        (let ((f5013750262
                               (lambda (a5003550263)
                                 (let ((f5013650264
                                        (lambda (a5003650265)
                                          (reverse-helper
                                           kont50135
                                           a5003450261
                                           a5003650265))))
                                   (cons f5013650264 a5003550263 lst2)))))
                          (car f5013750262 lst)))))
                 (cdr f5013850260 lst))))))
      (null? f5013950258 lst)))
  (define (reverse kont50140 lst)
    (let ((f5014150266
           (lambda (a5003750267) (reverse-helper kont50140 lst a5003750267))))
      (list f5014150266)))
  (define (take-helper kont50142 lst n lst2)
    (let ((a5003850268 '0))
      (let ((f5014850269
             (lambda (a5003950270)
               (if a5003950270
                 (let ((f5014350271
                        (lambda (x5004050272) (kont50142 x5004050272))))
                   (reverse f5014350271 lst2))
                 (let ((f5014750273
                        (lambda (a5004150274)
                          (let ((a5004250275 '1))
                            (let ((f5014650276
                                   (lambda (a5004350277)
                                     (let ((f5014550278
                                            (lambda (a5004450279)
                                              (let ((f5014450280
                                                     (lambda (a5004550281)
                                                       (take-helper
                                                        kont50142
                                                        a5004150274
                                                        a5004350277
                                                        a5004550281))))
                                                (cons
                                                 f5014450280
                                                 a5004450279
                                                 lst2)))))
                                       (car f5014550278 lst)))))
                              (- f5014650276 n a5004250275))))))
                   (cdr f5014750273 lst))))))
        (= f5014850269 n a5003850268))))
  (define (take kont50149 lst n)
    (let ((f5015050282
           (lambda (a5004650283) (take-helper kont50149 lst n a5004650283))))
      (list f5015050282)))
  (define (length kont50151 lst)
    (let ((f5015450284
           (lambda (a5004750285)
             (if a5004750285
               (let ((x5004850286 '0)) (kont50151 x5004850286))
               (let ((a5004950287 '1))
                 (let ((f5015350288
                        (lambda (a5005050289)
                          (let ((f5015250290
                                 (lambda (a5005150291)
                                   (+ kont50151 a5004950287 a5005150291))))
                            (length f5015250290 a5005050289)))))
                   (cdr f5015350288 lst)))))))
      (null? f5015450284 lst)))
  (define (map kont50155 proc lst)
    (let ((f5016150292
           (lambda (a5005250293)
             (if a5005250293
               (let ((f5015650294
                      (lambda (x5005350295) (kont50155 x5005350295))))
                 (list f5015650294))
               (let ((f5016050296
                      (lambda (a5005450297)
                        (let ((f5015950298
                               (lambda (a5005550299)
                                 (let ((f5015850300
                                        (lambda (a5005650301)
                                          (let ((f5015750302
                                                 (lambda (a5005750303)
                                                   (cons
                                                    kont50155
                                                    a5005550299
                                                    a5005750303))))
                                            (map
                                             f5015750302
                                             proc
                                             a5005650301)))))
                                   (cdr f5015850300 lst)))))
                          (proc f5015950298 a5005450297)))))
                 (car f5016050296 lst))))))
      (null? f5016150292 lst)))
  (define (filter kont50162 op lst)
    (let ((f5017050304
           (lambda (a5005850305)
             (if a5005850305
               (let ((f5016350306
                      (lambda (x5005950307) (kont50162 x5005950307))))
                 (list f5016350306))
               (let ((f5016950308
                      (lambda (a5006050309)
                        (let ((f5016850310
                               (lambda (a5006150311)
                                 (if a5006150311
                                   (let ((f5016650312
                                          (lambda (a5006250313)
                                            (let ((f5016550314
                                                   (lambda (a5006350315)
                                                     (let ((f5016450316
                                                            (lambda (a5006450317)
                                                              (cons
                                                               kont50162
                                                               a5006250313
                                                               a5006450317))))
                                                       (filter
                                                        f5016450316
                                                        op
                                                        a5006350315)))))
                                              (cdr f5016550314 lst)))))
                                     (car f5016650312 lst))
                                   (let ((f5016750318
                                          (lambda (a5006550319)
                                            (filter
                                             kont50162
                                             op
                                             a5006550319))))
                                     (cdr f5016750318 lst))))))
                          (op f5016850310 a5006050309)))))
                 (car f5016950308 lst))))))
      (null? f5017050304 lst)))
  (define (drop kont50171 lst n)
    (let ((a5006650320 '0))
      (let ((f5017450321
             (lambda (a5006750322)
               (if a5006750322
                 (kont50171 lst)
                 (let ((f5017350323
                        (lambda (a5006850324)
                          (let ((a5006950325 '1))
                            (let ((f5017250326
                                   (lambda (a5007050327)
                                     (drop
                                      kont50171
                                      a5006850324
                                      a5007050327))))
                              (- f5017250326 n a5006950325))))))
                   (cdr f5017350323 lst))))))
        (= f5017450321 n a5006650320))))
  (define (foldr kont50175 proc acc lst)
    (let ((f5017950328
           (lambda (a5007150329)
             (if a5007150329
               (kont50175 acc)
               (let ((f5017850330
                      (lambda (a5007250331)
                        (let ((f5017750332
                               (lambda (a5007350333)
                                 (let ((f5017650334
                                        (lambda (a5007450335)
                                          (proc
                                           kont50175
                                           a5007250331
                                           a5007450335))))
                                   (foldr f5017650334 proc acc a5007350333)))))
                          (cdr f5017750332 lst)))))
                 (car f5017850330 lst))))))
      (null? f5017950328 lst)))
  (define (append kont50180 lst1 lst2)
    (let ((f5018450336
           (lambda (a5007550337)
             (if a5007550337
               (kont50180 lst2)
               (let ((f5018350338
                      (lambda (a5007650339)
                        (let ((f5018250340
                               (lambda (a5007750341)
                                 (let ((f5018150342
                                        (lambda (a5007850343)
                                          (cons
                                           kont50180
                                           a5007650339
                                           a5007850343))))
                                   (append f5018150342 a5007750341 lst2)))))
                          (cdr f5018250340 lst1)))))
                 (car f5018350338 lst1))))))
      (null? f5018450336 lst1)))
  (define (hash . lst)
    (let ((kont5018550344 (prim car lst)))
      (let ((lst50345 (prim cdr lst)))
        (let ((x5007950346 (apply-prim hash lst50345)))
          (kont5018550344 x5007950346)))))
  (define (hash-ref kont50187 h k)
    (let ((x5008050347 (prim hash-ref h k))) (kont50187 x5008050347)))
  (define (hash-set kont50188 h k v)
    (let ((x5008150348 (prim hash-set h k v))) (kont50188 x5008150348)))
  (define (hash-has-key? kont50189 h k)
    (let ((x5008250349 (prim hash-has-key? h k))) (kont50189 x5008250349)))
  (define (hash-count kont50190 h)
    (let ((x5008350350 (prim hash-count h))) (kont50190 x5008350350)))
  (define (call kont50191)
    (let ((a5008450351 '1))
      (let ((a5008550352 '2))
        (let ((f5019350353
               (lambda (a5008650354)
                 (if a5008650354
                   (let ((a5008750355 '1))
                     (let ((a5008850356 '2))
                       (equal? kont50191 a5008750355 a5008850356)))
                   (let ((a5008950357 '3))
                     (let ((f5019250358
                            (lambda (a5009050359)
                              (if a5009050359
                                (let ((a5009150360 '3))
                                  (even? kont50191 a5009150360))
                                (let ((a5009250361 '2))
                                  (odd? kont50191 a5009250361))))))
                       (even? f5019250358 a5008950357)))))))
          (equal? f5019350353 a5008450351 a5008550352)))))
  (define (brouhaha_main kont50194)
    (let ((f5019550362 (lambda (x5009350363) (kont50194 x5009350363))))
      (call f5019550362))))
