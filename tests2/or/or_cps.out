'((define (+ . lst)
    (let ((kont4836248464 (prim car lst)))
      (let ((lst48465 (prim cdr lst)))
        (let ((x4826948466 (apply-prim + lst48465)))
          (kont4836248464 x4826948466)))))
  (define (- . lst)
    (let ((kont4836448467 (prim car lst)))
      (let ((lst48468 (prim cdr lst)))
        (let ((x4827048469 (apply-prim - lst48468)))
          (kont4836448467 x4827048469)))))
  (define (* . lst)
    (let ((kont4836648470 (prim car lst)))
      (let ((lst48471 (prim cdr lst)))
        (let ((x4827148472 (apply-prim * lst48471)))
          (kont4836648470 x4827148472)))))
  (define (modulo kont48368 a b)
    (let ((x4827248473 (prim modulo a b))) (kont48368 x4827248473)))
  (define (/ . lst)
    (let ((kont4836948474 (prim car lst)))
      (let ((lst48475 (prim cdr lst)))
        (let ((x4827348476 (apply-prim / lst48475)))
          (kont4836948474 x4827348476)))))
  (define (= . lst)
    (let ((kont4837148477 (prim car lst)))
      (let ((lst48478 (prim cdr lst)))
        (let ((x4827448479 (apply-prim = lst48478)))
          (kont4837148477 x4827448479)))))
  (define (> . lst)
    (let ((kont4837348480 (prim car lst)))
      (let ((lst48481 (prim cdr lst)))
        (let ((x4827548482 (apply-prim > lst48481)))
          (kont4837348480 x4827548482)))))
  (define (< . lst)
    (let ((kont4837548483 (prim car lst)))
      (let ((lst48484 (prim cdr lst)))
        (let ((x4827648485 (apply-prim < lst48484)))
          (kont4837548483 x4827648485)))))
  (define (<= . lst)
    (let ((kont4837748486 (prim car lst)))
      (let ((lst48487 (prim cdr lst)))
        (let ((x4827748488 (apply-prim <= lst48487)))
          (kont4837748486 x4827748488)))))
  (define (>= . lst)
    (let ((kont4837948489 (prim car lst)))
      (let ((lst48490 (prim cdr lst)))
        (let ((x4827848491 (apply-prim >= lst48490)))
          (kont4837948489 x4827848491)))))
  (define (null? kont48381 x)
    (let ((x4827948492 (prim null? x))) (kont48381 x4827948492)))
  (define (equal? kont48382 x y)
    (let ((x4828048493 (prim equal? x y))) (kont48382 x4828048493)))
  (define (eq? kont48383 x y)
    (let ((x4828148494 (prim eq? x y))) (kont48383 x4828148494)))
  (define (cons kont48384 a b)
    (let ((x4828248495 (prim cons a b))) (kont48384 x4828248495)))
  (define (car kont48385 lst)
    (let ((x4828348496 (prim car lst))) (kont48385 x4828348496)))
  (define (cdr kont48386 lst)
    (let ((x4828448497 (prim cdr lst))) (kont48386 x4828448497)))
  (define (even? kont48387 x)
    (let ((a4828548498 '0))
      (let ((a4828648499 '2))
        (let ((f4838848500
               (lambda (a4828748501)
                 (equal? kont48387 a4828548498 a4828748501))))
          (modulo f4838848500 x a4828648499)))))
  (define (odd? kont48389 x)
    (let ((a4828848502 '1))
      (let ((a4828948503 '2))
        (let ((f4839048504
               (lambda (a4829048505)
                 (equal? kont48389 a4828848502 a4829048505))))
          (modulo f4839048504 x a4828948503)))))
  (define (list . x)
    (let ((kont4839148506 (prim car x)))
      (let ((x48507 (prim cdr x))) (kont4839148506 x48507))))
  (define (member? kont48393 x lst)
    (let ((f4839748508
           (lambda (a4829148509)
             (if a4829148509
               (let ((x4829248510 '#f)) (kont48393 x4829248510))
               (let ((f4839648511
                      (lambda (a4829348512)
                        (let ((f4839548513
                               (lambda (a4829448514)
                                 (if a4829448514
                                   (let ((x4829548515 '#t))
                                     (kont48393 x4829548515))
                                   (let ((f4839448516
                                          (lambda (a4829648517)
                                            (member?
                                             kont48393
                                             x
                                             a4829648517))))
                                     (cdr f4839448516 lst))))))
                          (equal? f4839548513 a4829348512 x)))))
                 (car f4839648511 lst))))))
      (null? f4839748508 lst)))
  (define (foldl kont48398 fun acc lst)
    (let ((f4840248518
           (lambda (a4829748519)
             (if a4829748519
               (kont48398 acc)
               (let ((f4840148520
                      (lambda (a4829848521)
                        (let ((f4840048522
                               (lambda (a4829948523)
                                 (let ((f4839948524
                                        (lambda (a4830048525)
                                          (foldl
                                           kont48398
                                           fun
                                           a4829948523
                                           a4830048525))))
                                   (cdr f4839948524 lst)))))
                          (fun f4840048522 a4829848521 acc)))))
                 (car f4840148520 lst))))))
      (null? f4840248518 lst)))
  (define (reverse-helper kont48403 lst lst2)
    (let ((f4840748526
           (lambda (a4830148527)
             (if a4830148527
               (kont48403 lst2)
               (let ((f4840648528
                      (lambda (a4830248529)
                        (let ((f4840548530
                               (lambda (a4830348531)
                                 (let ((f4840448532
                                        (lambda (a4830448533)
                                          (reverse-helper
                                           kont48403
                                           a4830248529
                                           a4830448533))))
                                   (cons f4840448532 a4830348531 lst2)))))
                          (car f4840548530 lst)))))
                 (cdr f4840648528 lst))))))
      (null? f4840748526 lst)))
  (define (reverse kont48408 lst)
    (let ((f4840948534
           (lambda (a4830548535) (reverse-helper kont48408 lst a4830548535))))
      (list f4840948534)))
  (define (take-helper kont48410 lst n lst2)
    (let ((a4830648536 '0))
      (let ((f4841648537
             (lambda (a4830748538)
               (if a4830748538
                 (let ((f4841148539
                        (lambda (x4830848540) (kont48410 x4830848540))))
                   (reverse f4841148539 lst2))
                 (let ((f4841548541
                        (lambda (a4830948542)
                          (let ((a4831048543 '1))
                            (let ((f4841448544
                                   (lambda (a4831148545)
                                     (let ((f4841348546
                                            (lambda (a4831248547)
                                              (let ((f4841248548
                                                     (lambda (a4831348549)
                                                       (take-helper
                                                        kont48410
                                                        a4830948542
                                                        a4831148545
                                                        a4831348549))))
                                                (cons
                                                 f4841248548
                                                 a4831248547
                                                 lst2)))))
                                       (car f4841348546 lst)))))
                              (- f4841448544 n a4831048543))))))
                   (cdr f4841548541 lst))))))
        (= f4841648537 n a4830648536))))
  (define (take kont48417 lst n)
    (let ((f4841848550
           (lambda (a4831448551) (take-helper kont48417 lst n a4831448551))))
      (list f4841848550)))
  (define (length kont48419 lst)
    (let ((f4842248552
           (lambda (a4831548553)
             (if a4831548553
               (let ((x4831648554 '0)) (kont48419 x4831648554))
               (let ((a4831748555 '1))
                 (let ((f4842148556
                        (lambda (a4831848557)
                          (let ((f4842048558
                                 (lambda (a4831948559)
                                   (+ kont48419 a4831748555 a4831948559))))
                            (length f4842048558 a4831848557)))))
                   (cdr f4842148556 lst)))))))
      (null? f4842248552 lst)))
  (define (map kont48423 proc lst)
    (let ((f4842948560
           (lambda (a4832048561)
             (if a4832048561
               (let ((f4842448562
                      (lambda (x4832148563) (kont48423 x4832148563))))
                 (list f4842448562))
               (let ((f4842848564
                      (lambda (a4832248565)
                        (let ((f4842748566
                               (lambda (a4832348567)
                                 (let ((f4842648568
                                        (lambda (a4832448569)
                                          (let ((f4842548570
                                                 (lambda (a4832548571)
                                                   (cons
                                                    kont48423
                                                    a4832348567
                                                    a4832548571))))
                                            (map
                                             f4842548570
                                             proc
                                             a4832448569)))))
                                   (cdr f4842648568 lst)))))
                          (proc f4842748566 a4832248565)))))
                 (car f4842848564 lst))))))
      (null? f4842948560 lst)))
  (define (filter kont48430 op lst)
    (let ((f4843848572
           (lambda (a4832648573)
             (if a4832648573
               (let ((f4843148574
                      (lambda (x4832748575) (kont48430 x4832748575))))
                 (list f4843148574))
               (let ((f4843748576
                      (lambda (a4832848577)
                        (let ((f4843648578
                               (lambda (a4832948579)
                                 (if a4832948579
                                   (let ((f4843448580
                                          (lambda (a4833048581)
                                            (let ((f4843348582
                                                   (lambda (a4833148583)
                                                     (let ((f4843248584
                                                            (lambda (a4833248585)
                                                              (cons
                                                               kont48430
                                                               a4833048581
                                                               a4833248585))))
                                                       (filter
                                                        f4843248584
                                                        op
                                                        a4833148583)))))
                                              (cdr f4843348582 lst)))))
                                     (car f4843448580 lst))
                                   (let ((f4843548586
                                          (lambda (a4833348587)
                                            (filter
                                             kont48430
                                             op
                                             a4833348587))))
                                     (cdr f4843548586 lst))))))
                          (op f4843648578 a4832848577)))))
                 (car f4843748576 lst))))))
      (null? f4843848572 lst)))
  (define (drop kont48439 lst n)
    (let ((a4833448588 '0))
      (let ((f4844248589
             (lambda (a4833548590)
               (if a4833548590
                 (kont48439 lst)
                 (let ((f4844148591
                        (lambda (a4833648592)
                          (let ((a4833748593 '1))
                            (let ((f4844048594
                                   (lambda (a4833848595)
                                     (drop
                                      kont48439
                                      a4833648592
                                      a4833848595))))
                              (- f4844048594 n a4833748593))))))
                   (cdr f4844148591 lst))))))
        (= f4844248589 n a4833448588))))
  (define (foldr kont48443 proc acc lst)
    (let ((f4844748596
           (lambda (a4833948597)
             (if a4833948597
               (kont48443 acc)
               (let ((f4844648598
                      (lambda (a4834048599)
                        (let ((f4844548600
                               (lambda (a4834148601)
                                 (let ((f4844448602
                                        (lambda (a4834248603)
                                          (proc
                                           kont48443
                                           a4834048599
                                           a4834248603))))
                                   (foldr f4844448602 proc acc a4834148601)))))
                          (cdr f4844548600 lst)))))
                 (car f4844648598 lst))))))
      (null? f4844748596 lst)))
  (define (append kont48448 lst1 lst2)
    (let ((f4845248604
           (lambda (a4834348605)
             (if a4834348605
               (kont48448 lst2)
               (let ((f4845148606
                      (lambda (a4834448607)
                        (let ((f4845048608
                               (lambda (a4834548609)
                                 (let ((f4844948610
                                        (lambda (a4834648611)
                                          (cons
                                           kont48448
                                           a4834448607
                                           a4834648611))))
                                   (append f4844948610 a4834548609 lst2)))))
                          (cdr f4845048608 lst1)))))
                 (car f4845148606 lst1))))))
      (null? f4845248604 lst1)))
  (define (hash . lst)
    (let ((kont4845348612 (prim car lst)))
      (let ((lst48613 (prim cdr lst)))
        (let ((x4834748614 (apply-prim hash lst48613)))
          (kont4845348612 x4834748614)))))
  (define (hash-ref kont48455 h k)
    (let ((x4834848615 (prim hash-ref h k))) (kont48455 x4834848615)))
  (define (hash-set kont48456 h k v)
    (let ((x4834948616 (prim hash-set h k v))) (kont48456 x4834948616)))
  (define (hash-has-key? kont48457 h k)
    (let ((x4835048617 (prim hash-has-key? h k))) (kont48457 x4835048617)))
  (define (hash-count kont48458 h)
    (let ((x4835148618 (prim hash-count h))) (kont48458 x4835148618)))
  (define (call kont48459)
    (let ((a4835248619 '1))
      (let ((a4835348620 '2))
        (let ((f4846148621
               (lambda (a4835448622)
                 (if a4835448622
                   (let ((a4835548623 '1))
                     (let ((a4835648624 '2))
                       (equal? kont48459 a4835548623 a4835648624)))
                   (let ((a4835748625 '3))
                     (let ((f4846048626
                            (lambda (a4835848627)
                              (if a4835848627
                                (let ((a4835948628 '3))
                                  (even? kont48459 a4835948628))
                                (let ((a4836048629 '2))
                                  (odd? kont48459 a4836048629))))))
                       (even? f4846048626 a4835748625)))))))
          (equal? f4846148621 a4835248619 a4835348620)))))
  (define (brouhaha_main kont48462)
    (let ((f4846348630 (lambda (x4836148631) (kont48462 x4836148631))))
      (call f4846348630))))
