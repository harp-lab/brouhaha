'((define (+ . lst)
    (let ((kont43715 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43627 (apply-prim + lst))) (kont43715 x43627)))))
  (define (- . lst)
    (let ((kont43717 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43628 (apply-prim - lst))) (kont43717 x43628)))))
  (define (* . lst)
    (let ((kont43719 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43629 (apply-prim * lst))) (kont43719 x43629)))))
  (define (modulo kont43721 a b)
    (let ((x43630 (prim modulo a b))) (kont43721 x43630)))
  (define (/ . lst)
    (let ((kont43722 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43631 (apply-prim / lst))) (kont43722 x43631)))))
  (define (= . lst)
    (let ((kont43724 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43632 (apply-prim = lst))) (kont43724 x43632)))))
  (define (> . lst)
    (let ((kont43726 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43633 (apply-prim > lst))) (kont43726 x43633)))))
  (define (< . lst)
    (let ((kont43728 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43634 (apply-prim < lst))) (kont43728 x43634)))))
  (define (<= . lst)
    (let ((kont43730 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43635 (apply-prim <= lst))) (kont43730 x43635)))))
  (define (>= . lst)
    (let ((kont43732 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43636 (apply-prim >= lst))) (kont43732 x43636)))))
  (define (null? kont43734 x)
    (let ((x43637 (prim null? x))) (kont43734 x43637)))
  (define (equal? kont43735 x y)
    (let ((x43638 (prim equal? x y))) (kont43735 x43638)))
  (define (eq? kont43736 x y)
    (let ((x43639 (prim eq? x y))) (kont43736 x43639)))
  (define (cons kont43737 a b)
    (let ((x43640 (prim cons a b))) (kont43737 x43640)))
  (define (car kont43738 lst)
    (let ((x43641 (prim car lst))) (kont43738 x43641)))
  (define (cdr kont43739 lst)
    (let ((x43642 (prim cdr lst))) (kont43739 x43642)))
  (define (even? kont43740 x)
    (let ((a43643 '0))
      (let ((a43644 '2))
        (let ((f43741 (lambda (a43645) (equal? kont43740 a43643 a43645))))
          (modulo f43741 x a43644)))))
  (define (odd? kont43742 x)
    (let ((a43646 '1))
      (let ((a43647 '2))
        (let ((f43743 (lambda (a43648) (equal? kont43742 a43646 a43648))))
          (modulo f43743 x a43647)))))
  (define (list . x)
    (let ((kont43744 (prim car x))) (let ((x (prim cdr x))) (kont43744 x))))
  (define (member? kont43746 x lst)
    (let ((f43750
           (lambda (a43649)
             (if a43649
               (let ((x43650 '#f)) (kont43746 x43650))
               (let ((f43749
                      (lambda (a43651)
                        (let ((f43748
                               (lambda (a43652)
                                 (if a43652
                                   (let ((x43653 '#t)) (kont43746 x43653))
                                   (let ((f43747
                                          (lambda (a43654)
                                            (member? kont43746 x a43654))))
                                     (cdr f43747 lst))))))
                          (equal? f43748 a43651 x)))))
                 (car f43749 lst))))))
      (null? f43750 lst)))
  (define (foldl kont43751 fun acc lst)
    (let ((f43755
           (lambda (a43655)
             (if a43655
               (kont43751 acc)
               (let ((f43754
                      (lambda (a43656)
                        (let ((f43753
                               (lambda (a43657)
                                 (let ((f43752
                                        (lambda (a43658)
                                          (foldl
                                           kont43751
                                           fun
                                           a43657
                                           a43658))))
                                   (cdr f43752 lst)))))
                          (fun f43753 a43656 acc)))))
                 (car f43754 lst))))))
      (null? f43755 lst)))
  (define (reverse-helper kont43756 lst lst2)
    (let ((f43760
           (lambda (a43659)
             (if a43659
               (kont43756 lst2)
               (let ((f43759
                      (lambda (a43660)
                        (let ((f43758
                               (lambda (a43661)
                                 (let ((f43757
                                        (lambda (a43662)
                                          (reverse-helper
                                           kont43756
                                           a43660
                                           a43662))))
                                   (cons f43757 a43661 lst2)))))
                          (car f43758 lst)))))
                 (cdr f43759 lst))))))
      (null? f43760 lst)))
  (define (reverse kont43761 lst)
    (let ((f43762 (lambda (a43663) (reverse-helper kont43761 lst a43663))))
      (list f43762)))
  (define (take-helper kont43763 lst n lst2)
    (let ((a43664 '0))
      (let ((f43769
             (lambda (a43665)
               (if a43665
                 (let ((f43764 (lambda (x43666) (kont43763 x43666))))
                   (reverse f43764 lst2))
                 (let ((f43768
                        (lambda (a43667)
                          (let ((a43668 '1))
                            (let ((f43767
                                   (lambda (a43669)
                                     (let ((f43766
                                            (lambda (a43670)
                                              (let ((f43765
                                                     (lambda (a43671)
                                                       (take-helper
                                                        kont43763
                                                        a43667
                                                        a43669
                                                        a43671))))
                                                (cons f43765 a43670 lst2)))))
                                       (car f43766 lst)))))
                              (- f43767 n a43668))))))
                   (cdr f43768 lst))))))
        (= f43769 n a43664))))
  (define (take kont43770 lst n)
    (let ((f43771 (lambda (a43672) (take-helper kont43770 lst n a43672))))
      (list f43771)))
  (define (length kont43772 lst)
    (let ((f43775
           (lambda (a43673)
             (if a43673
               (let ((x43674 '0)) (kont43772 x43674))
               (let ((a43675 '1))
                 (let ((f43774
                        (lambda (a43676)
                          (let ((f43773
                                 (lambda (a43677)
                                   (+ kont43772 a43675 a43677))))
                            (length f43773 a43676)))))
                   (cdr f43774 lst)))))))
      (null? f43775 lst)))
  (define (map kont43776 proc lst)
    (let ((f43782
           (lambda (a43678)
             (if a43678
               (let ((f43777 (lambda (x43679) (kont43776 x43679))))
                 (list f43777))
               (let ((f43781
                      (lambda (a43680)
                        (let ((f43780
                               (lambda (a43681)
                                 (let ((f43779
                                        (lambda (a43682)
                                          (let ((f43778
                                                 (lambda (a43683)
                                                   (cons
                                                    kont43776
                                                    a43681
                                                    a43683))))
                                            (map f43778 proc a43682)))))
                                   (cdr f43779 lst)))))
                          (proc f43780 a43680)))))
                 (car f43781 lst))))))
      (null? f43782 lst)))
  (define (filter kont43783 op lst)
    (let ((f43791
           (lambda (a43684)
             (if a43684
               (let ((f43784 (lambda (x43685) (kont43783 x43685))))
                 (list f43784))
               (let ((f43790
                      (lambda (a43686)
                        (let ((f43789
                               (lambda (a43687)
                                 (if a43687
                                   (let ((f43787
                                          (lambda (a43688)
                                            (let ((f43786
                                                   (lambda (a43689)
                                                     (let ((f43785
                                                            (lambda (a43690)
                                                              (cons
                                                               kont43783
                                                               a43688
                                                               a43690))))
                                                       (filter
                                                        f43785
                                                        op
                                                        a43689)))))
                                              (cdr f43786 lst)))))
                                     (car f43787 lst))
                                   (let ((f43788
                                          (lambda (a43691)
                                            (filter kont43783 op a43691))))
                                     (cdr f43788 lst))))))
                          (op f43789 a43686)))))
                 (car f43790 lst))))))
      (null? f43791 lst)))
  (define (drop kont43792 lst n)
    (let ((a43692 '0))
      (let ((f43795
             (lambda (a43693)
               (if a43693
                 (kont43792 lst)
                 (let ((f43794
                        (lambda (a43694)
                          (let ((a43695 '1))
                            (let ((f43793
                                   (lambda (a43696)
                                     (drop kont43792 a43694 a43696))))
                              (- f43793 n a43695))))))
                   (cdr f43794 lst))))))
        (= f43795 n a43692))))
  (define (foldr kont43796 proc acc lst)
    (let ((f43800
           (lambda (a43697)
             (if a43697
               (kont43796 acc)
               (let ((f43799
                      (lambda (a43698)
                        (let ((f43798
                               (lambda (a43699)
                                 (let ((f43797
                                        (lambda (a43700)
                                          (proc kont43796 a43698 a43700))))
                                   (foldr f43797 proc acc a43699)))))
                          (cdr f43798 lst)))))
                 (car f43799 lst))))))
      (null? f43800 lst)))
  (define (append kont43801 lst1 lst2)
    (let ((f43805
           (lambda (a43701)
             (if a43701
               (kont43801 lst2)
               (let ((f43804
                      (lambda (a43702)
                        (let ((f43803
                               (lambda (a43703)
                                 (let ((f43802
                                        (lambda (a43704)
                                          (cons kont43801 a43702 a43704))))
                                   (append f43802 a43703 lst2)))))
                          (cdr f43803 lst1)))))
                 (car f43804 lst1))))))
      (null? f43805 lst1)))
  (define (hash . lst)
    (let ((kont43806 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43705 (apply-prim hash lst))) (kont43806 x43705)))))
  (define (hash-ref kont43808 h k)
    (let ((x43706 (prim hash-ref h k))) (kont43808 x43706)))
  (define (hash-set kont43809 h k v)
    (let ((x43707 (prim hash-set h k v))) (kont43809 x43707)))
  (define (hash-has-key? kont43810 h k)
    (let ((x43708 (prim hash-has-key? h k))) (kont43810 x43708)))
  (define (hash-count kont43811 h)
    (let ((x43709 (prim hash-count h))) (kont43811 x43709)))
  (define (call kont43812)
    (let ((a43710 '100))
      (let ((a43711 '80))
        (let ((a43712 '10))
          (let ((a43713 '2)) (hash kont43812 a43710 a43711 a43712 a43713))))))
  (define (brouhaha_main kont43813)
    (let ((f43814 (lambda (x43714) (kont43813 x43714)))) (call f43814))))
