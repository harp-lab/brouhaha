'((define (+ . lst)
    (let ((kont44699 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44611 (apply-prim + lst))) (kont44699 x44611)))))
  (define (- . lst)
    (let ((kont44701 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44612 (apply-prim - lst))) (kont44701 x44612)))))
  (define (* . lst)
    (let ((kont44703 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44613 (apply-prim * lst))) (kont44703 x44613)))))
  (define (modulo kont44705 a b)
    (let ((x44614 (prim modulo a b))) (kont44705 x44614)))
  (define (/ . lst)
    (let ((kont44706 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44615 (apply-prim / lst))) (kont44706 x44615)))))
  (define (= . lst)
    (let ((kont44708 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44616 (apply-prim = lst))) (kont44708 x44616)))))
  (define (> . lst)
    (let ((kont44710 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44617 (apply-prim > lst))) (kont44710 x44617)))))
  (define (< . lst)
    (let ((kont44712 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44618 (apply-prim < lst))) (kont44712 x44618)))))
  (define (<= . lst)
    (let ((kont44714 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44619 (apply-prim <= lst))) (kont44714 x44619)))))
  (define (>= . lst)
    (let ((kont44716 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44620 (apply-prim >= lst))) (kont44716 x44620)))))
  (define (null? kont44718 x)
    (let ((x44621 (prim null? x))) (kont44718 x44621)))
  (define (equal? kont44719 x y)
    (let ((x44622 (prim equal? x y))) (kont44719 x44622)))
  (define (eq? kont44720 x y)
    (let ((x44623 (prim eq? x y))) (kont44720 x44623)))
  (define (cons kont44721 a b)
    (let ((x44624 (prim cons a b))) (kont44721 x44624)))
  (define (car kont44722 lst)
    (let ((x44625 (prim car lst))) (kont44722 x44625)))
  (define (cdr kont44723 lst)
    (let ((x44626 (prim cdr lst))) (kont44723 x44626)))
  (define (even? kont44724 x)
    (let ((a44627 '0))
      (let ((a44628 '2))
        (let ((f44725 (lambda (a44629) (equal? kont44724 a44627 a44629))))
          (modulo f44725 x a44628)))))
  (define (odd? kont44726 x)
    (let ((a44630 '1))
      (let ((a44631 '2))
        (let ((f44727 (lambda (a44632) (equal? kont44726 a44630 a44632))))
          (modulo f44727 x a44631)))))
  (define (list . x)
    (let ((kont44728 (prim car x))) (let ((x (prim cdr x))) (kont44728 x))))
  (define (member? kont44730 x lst)
    (let ((f44734
           (lambda (a44633)
             (if a44633
               (let ((x44634 '#f)) (kont44730 x44634))
               (let ((f44733
                      (lambda (a44635)
                        (let ((f44732
                               (lambda (a44636)
                                 (if a44636
                                   (let ((x44637 '#t)) (kont44730 x44637))
                                   (let ((f44731
                                          (lambda (a44638)
                                            (member? kont44730 x a44638))))
                                     (cdr f44731 lst))))))
                          (equal? f44732 a44635 x)))))
                 (car f44733 lst))))))
      (null? f44734 lst)))
  (define (foldl kont44735 fun acc lst)
    (let ((f44739
           (lambda (a44639)
             (if a44639
               (kont44735 acc)
               (let ((f44738
                      (lambda (a44640)
                        (let ((f44737
                               (lambda (a44641)
                                 (let ((f44736
                                        (lambda (a44642)
                                          (foldl
                                           kont44735
                                           fun
                                           a44641
                                           a44642))))
                                   (cdr f44736 lst)))))
                          (fun f44737 a44640 acc)))))
                 (car f44738 lst))))))
      (null? f44739 lst)))
  (define (reverse-helper kont44740 lst lst2)
    (let ((f44744
           (lambda (a44643)
             (if a44643
               (kont44740 lst2)
               (let ((f44743
                      (lambda (a44644)
                        (let ((f44742
                               (lambda (a44645)
                                 (let ((f44741
                                        (lambda (a44646)
                                          (reverse-helper
                                           kont44740
                                           a44644
                                           a44646))))
                                   (cons f44741 a44645 lst2)))))
                          (car f44742 lst)))))
                 (cdr f44743 lst))))))
      (null? f44744 lst)))
  (define (reverse kont44745 lst)
    (let ((f44746 (lambda (a44647) (reverse-helper kont44745 lst a44647))))
      (list f44746)))
  (define (take-helper kont44747 lst n lst2)
    (let ((a44648 '0))
      (let ((f44753
             (lambda (a44649)
               (if a44649
                 (let ((f44748 (lambda (x44650) (kont44747 x44650))))
                   (reverse f44748 lst2))
                 (let ((f44752
                        (lambda (a44651)
                          (let ((a44652 '1))
                            (let ((f44751
                                   (lambda (a44653)
                                     (let ((f44750
                                            (lambda (a44654)
                                              (let ((f44749
                                                     (lambda (a44655)
                                                       (take-helper
                                                        kont44747
                                                        a44651
                                                        a44653
                                                        a44655))))
                                                (cons f44749 a44654 lst2)))))
                                       (car f44750 lst)))))
                              (- f44751 n a44652))))))
                   (cdr f44752 lst))))))
        (= f44753 n a44648))))
  (define (take kont44754 lst n)
    (let ((f44755 (lambda (a44656) (take-helper kont44754 lst n a44656))))
      (list f44755)))
  (define (length kont44756 lst)
    (let ((f44759
           (lambda (a44657)
             (if a44657
               (let ((x44658 '0)) (kont44756 x44658))
               (let ((a44659 '1))
                 (let ((f44758
                        (lambda (a44660)
                          (let ((f44757
                                 (lambda (a44661)
                                   (+ kont44756 a44659 a44661))))
                            (length f44757 a44660)))))
                   (cdr f44758 lst)))))))
      (null? f44759 lst)))
  (define (map kont44760 proc lst)
    (let ((f44766
           (lambda (a44662)
             (if a44662
               (let ((f44761 (lambda (x44663) (kont44760 x44663))))
                 (list f44761))
               (let ((f44765
                      (lambda (a44664)
                        (let ((f44764
                               (lambda (a44665)
                                 (let ((f44763
                                        (lambda (a44666)
                                          (let ((f44762
                                                 (lambda (a44667)
                                                   (cons
                                                    kont44760
                                                    a44665
                                                    a44667))))
                                            (map f44762 proc a44666)))))
                                   (cdr f44763 lst)))))
                          (proc f44764 a44664)))))
                 (car f44765 lst))))))
      (null? f44766 lst)))
  (define (filter kont44767 op lst)
    (let ((f44775
           (lambda (a44668)
             (if a44668
               (let ((f44768 (lambda (x44669) (kont44767 x44669))))
                 (list f44768))
               (let ((f44774
                      (lambda (a44670)
                        (let ((f44773
                               (lambda (a44671)
                                 (if a44671
                                   (let ((f44771
                                          (lambda (a44672)
                                            (let ((f44770
                                                   (lambda (a44673)
                                                     (let ((f44769
                                                            (lambda (a44674)
                                                              (cons
                                                               kont44767
                                                               a44672
                                                               a44674))))
                                                       (filter
                                                        f44769
                                                        op
                                                        a44673)))))
                                              (cdr f44770 lst)))))
                                     (car f44771 lst))
                                   (let ((f44772
                                          (lambda (a44675)
                                            (filter kont44767 op a44675))))
                                     (cdr f44772 lst))))))
                          (op f44773 a44670)))))
                 (car f44774 lst))))))
      (null? f44775 lst)))
  (define (drop kont44776 lst n)
    (let ((a44676 '0))
      (let ((f44779
             (lambda (a44677)
               (if a44677
                 (kont44776 lst)
                 (let ((f44778
                        (lambda (a44678)
                          (let ((a44679 '1))
                            (let ((f44777
                                   (lambda (a44680)
                                     (drop kont44776 a44678 a44680))))
                              (- f44777 n a44679))))))
                   (cdr f44778 lst))))))
        (= f44779 n a44676))))
  (define (foldr kont44780 proc acc lst)
    (let ((f44784
           (lambda (a44681)
             (if a44681
               (kont44780 acc)
               (let ((f44783
                      (lambda (a44682)
                        (let ((f44782
                               (lambda (a44683)
                                 (let ((f44781
                                        (lambda (a44684)
                                          (proc kont44780 a44682 a44684))))
                                   (foldr f44781 proc acc a44683)))))
                          (cdr f44782 lst)))))
                 (car f44783 lst))))))
      (null? f44784 lst)))
  (define (append kont44785 lst1 lst2)
    (let ((f44789
           (lambda (a44685)
             (if a44685
               (kont44785 lst2)
               (let ((f44788
                      (lambda (a44686)
                        (let ((f44787
                               (lambda (a44687)
                                 (let ((f44786
                                        (lambda (a44688)
                                          (cons kont44785 a44686 a44688))))
                                   (append f44786 a44687 lst2)))))
                          (cdr f44787 lst1)))))
                 (car f44788 lst1))))))
      (null? f44789 lst1)))
  (define (hash . lst)
    (let ((kont44790 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44689 (apply-prim hash lst))) (kont44790 x44689)))))
  (define (hash-ref kont44792 h k)
    (let ((x44690 (prim hash-ref h k))) (kont44792 x44690)))
  (define (hash-set kont44793 h k v)
    (let ((x44691 (prim hash-set h k v))) (kont44793 x44691)))
  (define (hash-has-key? kont44794 h k)
    (let ((x44692 (prim hash-has-key? h k))) (kont44794 x44692)))
  (define (hash-count kont44795 h)
    (let ((x44693 (prim hash-count h))) (kont44795 x44693)))
  (define (call kont44796)
    (let ((a44694 '100))
      (let ((a44695 '80))
        (let ((a44696 '10))
          (let ((a44697 '2)) (hash kont44796 a44694 a44695 a44696 a44697))))))
  (define (brouhaha_main kont44797)
    (let ((f44798 (lambda (x44698) (kont44797 x44698)))) (call f44798))))
