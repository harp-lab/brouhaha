'((define (+ . lst)
    (let ((kont45887 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45799 (apply-prim + lst))) (kont45887 x45799)))))
  (define (- . lst)
    (let ((kont45889 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45800 (apply-prim - lst))) (kont45889 x45800)))))
  (define (* . lst)
    (let ((kont45891 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45801 (apply-prim * lst))) (kont45891 x45801)))))
  (define (modulo kont45893 a b)
    (let ((x45802 (prim modulo a b))) (kont45893 x45802)))
  (define (/ . lst)
    (let ((kont45894 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45803 (apply-prim / lst))) (kont45894 x45803)))))
  (define (= . lst)
    (let ((kont45896 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45804 (apply-prim = lst))) (kont45896 x45804)))))
  (define (> . lst)
    (let ((kont45898 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45805 (apply-prim > lst))) (kont45898 x45805)))))
  (define (< . lst)
    (let ((kont45900 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45806 (apply-prim < lst))) (kont45900 x45806)))))
  (define (<= . lst)
    (let ((kont45902 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45807 (apply-prim <= lst))) (kont45902 x45807)))))
  (define (>= . lst)
    (let ((kont45904 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45808 (apply-prim >= lst))) (kont45904 x45808)))))
  (define (null? kont45906 x)
    (let ((x45809 (prim null? x))) (kont45906 x45809)))
  (define (equal? kont45907 x y)
    (let ((x45810 (prim equal? x y))) (kont45907 x45810)))
  (define (eq? kont45908 x y)
    (let ((x45811 (prim eq? x y))) (kont45908 x45811)))
  (define (cons kont45909 a b)
    (let ((x45812 (prim cons a b))) (kont45909 x45812)))
  (define (car kont45910 lst)
    (let ((x45813 (prim car lst))) (kont45910 x45813)))
  (define (cdr kont45911 lst)
    (let ((x45814 (prim cdr lst))) (kont45911 x45814)))
  (define (even? kont45912 x)
    (let ((a45815 '0))
      (let ((a45816 '2))
        (let ((f45913 (lambda (a45817) (equal? kont45912 a45815 a45817))))
          (modulo f45913 x a45816)))))
  (define (odd? kont45914 x)
    (let ((a45818 '1))
      (let ((a45819 '2))
        (let ((f45915 (lambda (a45820) (equal? kont45914 a45818 a45820))))
          (modulo f45915 x a45819)))))
  (define (list . x)
    (let ((kont45916 (prim car x))) (let ((x (prim cdr x))) (kont45916 x))))
  (define (member? kont45918 x lst)
    (let ((f45922
           (lambda (a45821)
             (if a45821
               (let ((x45822 '#f)) (kont45918 x45822))
               (let ((f45921
                      (lambda (a45823)
                        (let ((f45920
                               (lambda (a45824)
                                 (if a45824
                                   (let ((x45825 '#t)) (kont45918 x45825))
                                   (let ((f45919
                                          (lambda (a45826)
                                            (member? kont45918 x a45826))))
                                     (cdr f45919 lst))))))
                          (equal? f45920 a45823 x)))))
                 (car f45921 lst))))))
      (null? f45922 lst)))
  (define (foldl kont45923 fun acc lst)
    (let ((f45927
           (lambda (a45827)
             (if a45827
               (kont45923 acc)
               (let ((f45926
                      (lambda (a45828)
                        (let ((f45925
                               (lambda (a45829)
                                 (let ((f45924
                                        (lambda (a45830)
                                          (foldl
                                           kont45923
                                           fun
                                           a45829
                                           a45830))))
                                   (cdr f45924 lst)))))
                          (fun f45925 a45828 acc)))))
                 (car f45926 lst))))))
      (null? f45927 lst)))
  (define (reverse-helper kont45928 lst lst2)
    (let ((f45932
           (lambda (a45831)
             (if a45831
               (kont45928 lst2)
               (let ((f45931
                      (lambda (a45832)
                        (let ((f45930
                               (lambda (a45833)
                                 (let ((f45929
                                        (lambda (a45834)
                                          (reverse-helper
                                           kont45928
                                           a45832
                                           a45834))))
                                   (cons f45929 a45833 lst2)))))
                          (car f45930 lst)))))
                 (cdr f45931 lst))))))
      (null? f45932 lst)))
  (define (reverse kont45933 lst)
    (let ((f45934 (lambda (a45835) (reverse-helper kont45933 lst a45835))))
      (list f45934)))
  (define (take-helper kont45935 lst n lst2)
    (let ((a45836 '0))
      (let ((f45941
             (lambda (a45837)
               (if a45837
                 (let ((f45936 (lambda (x45838) (kont45935 x45838))))
                   (reverse f45936 lst2))
                 (let ((f45940
                        (lambda (a45839)
                          (let ((a45840 '1))
                            (let ((f45939
                                   (lambda (a45841)
                                     (let ((f45938
                                            (lambda (a45842)
                                              (let ((f45937
                                                     (lambda (a45843)
                                                       (take-helper
                                                        kont45935
                                                        a45839
                                                        a45841
                                                        a45843))))
                                                (cons f45937 a45842 lst2)))))
                                       (car f45938 lst)))))
                              (- f45939 n a45840))))))
                   (cdr f45940 lst))))))
        (= f45941 n a45836))))
  (define (take kont45942 lst n)
    (let ((f45943 (lambda (a45844) (take-helper kont45942 lst n a45844))))
      (list f45943)))
  (define (length kont45944 lst)
    (let ((f45947
           (lambda (a45845)
             (if a45845
               (let ((x45846 '0)) (kont45944 x45846))
               (let ((a45847 '1))
                 (let ((f45946
                        (lambda (a45848)
                          (let ((f45945
                                 (lambda (a45849)
                                   (+ kont45944 a45847 a45849))))
                            (length f45945 a45848)))))
                   (cdr f45946 lst)))))))
      (null? f45947 lst)))
  (define (map kont45948 proc lst)
    (let ((f45954
           (lambda (a45850)
             (if a45850
               (let ((f45949 (lambda (x45851) (kont45948 x45851))))
                 (list f45949))
               (let ((f45953
                      (lambda (a45852)
                        (let ((f45952
                               (lambda (a45853)
                                 (let ((f45951
                                        (lambda (a45854)
                                          (let ((f45950
                                                 (lambda (a45855)
                                                   (cons
                                                    kont45948
                                                    a45853
                                                    a45855))))
                                            (map f45950 proc a45854)))))
                                   (cdr f45951 lst)))))
                          (proc f45952 a45852)))))
                 (car f45953 lst))))))
      (null? f45954 lst)))
  (define (filter kont45955 op lst)
    (let ((f45963
           (lambda (a45856)
             (if a45856
               (let ((f45956 (lambda (x45857) (kont45955 x45857))))
                 (list f45956))
               (let ((f45962
                      (lambda (a45858)
                        (let ((f45961
                               (lambda (a45859)
                                 (if a45859
                                   (let ((f45959
                                          (lambda (a45860)
                                            (let ((f45958
                                                   (lambda (a45861)
                                                     (let ((f45957
                                                            (lambda (a45862)
                                                              (cons
                                                               kont45955
                                                               a45860
                                                               a45862))))
                                                       (filter
                                                        f45957
                                                        op
                                                        a45861)))))
                                              (cdr f45958 lst)))))
                                     (car f45959 lst))
                                   (let ((f45960
                                          (lambda (a45863)
                                            (filter kont45955 op a45863))))
                                     (cdr f45960 lst))))))
                          (op f45961 a45858)))))
                 (car f45962 lst))))))
      (null? f45963 lst)))
  (define (drop kont45964 lst n)
    (let ((a45864 '0))
      (let ((f45967
             (lambda (a45865)
               (if a45865
                 (kont45964 lst)
                 (let ((f45966
                        (lambda (a45866)
                          (let ((a45867 '1))
                            (let ((f45965
                                   (lambda (a45868)
                                     (drop kont45964 a45866 a45868))))
                              (- f45965 n a45867))))))
                   (cdr f45966 lst))))))
        (= f45967 n a45864))))
  (define (foldr kont45968 proc acc lst)
    (let ((f45972
           (lambda (a45869)
             (if a45869
               (kont45968 acc)
               (let ((f45971
                      (lambda (a45870)
                        (let ((f45970
                               (lambda (a45871)
                                 (let ((f45969
                                        (lambda (a45872)
                                          (proc kont45968 a45870 a45872))))
                                   (foldr f45969 proc acc a45871)))))
                          (cdr f45970 lst)))))
                 (car f45971 lst))))))
      (null? f45972 lst)))
  (define (append kont45973 lst1 lst2)
    (let ((f45977
           (lambda (a45873)
             (if a45873
               (kont45973 lst2)
               (let ((f45976
                      (lambda (a45874)
                        (let ((f45975
                               (lambda (a45875)
                                 (let ((f45974
                                        (lambda (a45876)
                                          (cons kont45973 a45874 a45876))))
                                   (append f45974 a45875 lst2)))))
                          (cdr f45975 lst1)))))
                 (car f45976 lst1))))))
      (null? f45977 lst1)))
  (define (hash . lst)
    (let ((kont45978 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45877 (apply-prim hash lst))) (kont45978 x45877)))))
  (define (hash-ref kont45980 h k)
    (let ((x45878 (prim hash-ref h k))) (kont45980 x45878)))
  (define (hash-set kont45981 h k v)
    (let ((x45879 (prim hash-set h k v))) (kont45981 x45879)))
  (define (hash-has-key? kont45982 h k)
    (let ((x45880 (prim hash-has-key? h k))) (kont45982 x45880)))
  (define (hash-count kont45983 h)
    (let ((x45881 (prim hash-count h))) (kont45983 x45881)))
  (define (call kont45984)
    (let ((a45882 '100))
      (let ((a45883 '80))
        (let ((a45884 '10))
          (let ((a45885 '2)) (hash kont45984 a45882 a45883 a45884 a45885))))))
  (define (brouhaha_main kont45985)
    (let ((f45986 (lambda (x45886) (kont45985 x45886)))) (call f45986))))
