'((define (+ . lst) (let ((x45799 (apply-prim + lst))) x45799))
  (define (- . lst) (let ((x45800 (apply-prim - lst))) x45800))
  (define (* . lst) (let ((x45801 (apply-prim * lst))) x45801))
  (define (modulo a b) (let ((x45802 (prim modulo a b))) x45802))
  (define (/ . lst) (let ((x45803 (apply-prim / lst))) x45803))
  (define (= . lst) (let ((x45804 (apply-prim = lst))) x45804))
  (define (> . lst) (let ((x45805 (apply-prim > lst))) x45805))
  (define (< . lst) (let ((x45806 (apply-prim < lst))) x45806))
  (define (<= . lst) (let ((x45807 (apply-prim <= lst))) x45807))
  (define (>= . lst) (let ((x45808 (apply-prim >= lst))) x45808))
  (define (null? x) (let ((x45809 (prim null? x))) x45809))
  (define (equal? x y) (let ((x45810 (prim equal? x y))) x45810))
  (define (eq? x y) (let ((x45811 (prim eq? x y))) x45811))
  (define (cons a b) (let ((x45812 (prim cons a b))) x45812))
  (define (car lst) (let ((x45813 (prim car lst))) x45813))
  (define (cdr lst) (let ((x45814 (prim cdr lst))) x45814))
  (define (even? x)
    (let ((a45815 '0))
      (let ((a45816 '2))
        (let ((a45817 (modulo x a45816))) (equal? a45815 a45817)))))
  (define (odd? x)
    (let ((a45818 '1))
      (let ((a45819 '2))
        (let ((a45820 (modulo x a45819))) (equal? a45818 a45820)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a45821 (null? lst)))
      (if a45821
        (let ((x45822 '#f)) x45822)
        (let ((a45823 (car lst)))
          (let ((a45824 (equal? a45823 x)))
            (if a45824
              (let ((x45825 '#t)) x45825)
              (let ((a45826 (cdr lst))) (member? x a45826))))))))
  (define (foldl fun acc lst)
    (let ((a45827 (null? lst)))
      (if a45827
        acc
        (let ((a45828 (car lst)))
          (let ((a45829 (fun a45828 acc)))
            (let ((a45830 (cdr lst))) (foldl fun a45829 a45830)))))))
  (define (reverse-helper lst lst2)
    (let ((a45831 (null? lst)))
      (if a45831
        lst2
        (let ((a45832 (cdr lst)))
          (let ((a45833 (car lst)))
            (let ((a45834 (cons a45833 lst2)))
              (reverse-helper a45832 a45834)))))))
  (define (reverse lst) (let ((a45835 (list))) (reverse-helper lst a45835)))
  (define (take-helper lst n lst2)
    (let ((a45836 '0))
      (let ((a45837 (= n a45836)))
        (if a45837
          (let ((x45838 (reverse lst2))) x45838)
          (let ((a45839 (cdr lst)))
            (let ((a45840 '1))
              (let ((a45841 (- n a45840)))
                (let ((a45842 (car lst)))
                  (let ((a45843 (cons a45842 lst2)))
                    (take-helper a45839 a45841 a45843))))))))))
  (define (take lst n) (let ((a45844 (list))) (take-helper lst n a45844)))
  (define (length lst)
    (let ((a45845 (null? lst)))
      (if a45845
        (let ((x45846 '0)) x45846)
        (let ((a45847 '1))
          (let ((a45848 (cdr lst)))
            (let ((a45849 (length a45848))) (+ a45847 a45849)))))))
  (define (map proc lst)
    (let ((a45850 (null? lst)))
      (if a45850
        (let ((x45851 (list))) x45851)
        (let ((a45852 (car lst)))
          (let ((a45853 (proc a45852)))
            (let ((a45854 (cdr lst)))
              (let ((a45855 (map proc a45854))) (cons a45853 a45855))))))))
  (define (filter op lst)
    (let ((a45856 (null? lst)))
      (if a45856
        (let ((x45857 (list))) x45857)
        (let ((a45858 (car lst)))
          (let ((a45859 (op a45858)))
            (if a45859
              (let ((a45860 (car lst)))
                (let ((a45861 (cdr lst)))
                  (let ((a45862 (filter op a45861))) (cons a45860 a45862))))
              (let ((a45863 (cdr lst))) (filter op a45863))))))))
  (define (drop lst n)
    (let ((a45864 '0))
      (let ((a45865 (= n a45864)))
        (if a45865
          lst
          (let ((a45866 (cdr lst)))
            (let ((a45867 '1))
              (let ((a45868 (- n a45867))) (drop a45866 a45868))))))))
  (define (foldr proc acc lst)
    (let ((a45869 (null? lst)))
      (if a45869
        acc
        (let ((a45870 (car lst)))
          (let ((a45871 (cdr lst)))
            (let ((a45872 (foldr proc acc a45871))) (proc a45870 a45872)))))))
  (define (append lst1 lst2)
    (let ((a45873 (null? lst1)))
      (if a45873
        lst2
        (let ((a45874 (car lst1)))
          (let ((a45875 (cdr lst1)))
            (let ((a45876 (append a45875 lst2))) (cons a45874 a45876)))))))
  (define (hash . lst) (let ((x45877 (apply-prim hash lst))) x45877))
  (define (hash-ref h k) (let ((x45878 (prim hash-ref h k))) x45878))
  (define (hash-set h k v) (let ((x45879 (prim hash-set h k v))) x45879))
  (define (hash-has-key? h k) (let ((x45880 (prim hash-has-key? h k))) x45880))
  (define (hash-count h) (let ((x45881 (prim hash-count h))) x45881))
  (define (call)
    (let ((a45882 '100))
      (let ((a45883 '80))
        (let ((a45884 '10))
          (let ((a45885 '2)) (hash a45882 a45883 a45884 a45885))))))
  (define (brouhaha_main) (let ((x45886 (call))) x45886)))
