'((define (+ . lst) (let ((x44242 (apply-prim + lst))) x44242))
  (define (- . lst) (let ((x44243 (apply-prim - lst))) x44243))
  (define (* . lst) (let ((x44244 (apply-prim * lst))) x44244))
  (define (modulo a b) (let ((x44245 (prim modulo a b))) x44245))
  (define (/ . lst) (let ((x44246 (apply-prim / lst))) x44246))
  (define (= . lst) (let ((x44247 (apply-prim = lst))) x44247))
  (define (> . lst) (let ((x44248 (apply-prim > lst))) x44248))
  (define (< . lst) (let ((x44249 (apply-prim < lst))) x44249))
  (define (<= . lst) (let ((x44250 (apply-prim <= lst))) x44250))
  (define (>= . lst) (let ((x44251 (apply-prim >= lst))) x44251))
  (define (null? x) (let ((x44252 (prim null? x))) x44252))
  (define (equal? x y) (let ((x44253 (prim equal? x y))) x44253))
  (define (eq? x y) (let ((x44254 (prim eq? x y))) x44254))
  (define (cons a b) (let ((x44255 (prim cons a b))) x44255))
  (define (car lst) (let ((x44256 (prim car lst))) x44256))
  (define (cdr lst) (let ((x44257 (prim cdr lst))) x44257))
  (define (even? x)
    (let ((a44258 '0))
      (let ((a44259 '2))
        (let ((a44260 (modulo x a44259))) (equal? a44258 a44260)))))
  (define (odd? x)
    (let ((a44261 '1))
      (let ((a44262 '2))
        (let ((a44263 (modulo x a44262))) (equal? a44261 a44263)))))
  (define (list . x) x)
  (define (and . lst) (let ((x44264 (apply-prim and lst))) x44264))
  (define (or . lst) (let ((x44265 (apply-prim or lst))) x44265))
  (define (member? x lst)
    (let ((a44266 (null? lst)))
      (if a44266
        (let ((x44267 '#f)) x44267)
        (let ((a44268 (car lst)))
          (let ((a44269 (equal? a44268 x)))
            (if a44269
              (let ((x44270 '#t)) x44270)
              (let ((a44271 (cdr lst))) (member? x a44271))))))))
  (define (foldl fun acc lst)
    (let ((a44272 (null? lst)))
      (if a44272
        acc
        (let ((a44273 (car lst)))
          (let ((a44274 (fun a44273 acc)))
            (let ((a44275 (cdr lst))) (foldl fun a44274 a44275)))))))
  (define (reverse-helper lst lst2)
    (let ((a44276 (null? lst)))
      (if a44276
        lst2
        (let ((a44277 (cdr lst)))
          (let ((a44278 (car lst)))
            (let ((a44279 (cons a44278 lst2)))
              (reverse-helper a44277 a44279)))))))
  (define (reverse lst) (let ((a44280 (list))) (reverse-helper lst a44280)))
  (define (take-helper lst n lst2)
    (let ((a44281 '0))
      (let ((a44282 (= n a44281)))
        (if a44282
          (let ((x44283 (reverse lst2))) x44283)
          (let ((a44284 (cdr lst)))
            (let ((a44285 '1))
              (let ((a44286 (- n a44285)))
                (let ((a44287 (car lst)))
                  (let ((a44288 (cons a44287 lst2)))
                    (take-helper a44284 a44286 a44288))))))))))
  (define (take lst n) (let ((a44289 (list))) (take-helper lst n a44289)))
  (define (length lst)
    (let ((a44290 (null? lst)))
      (if a44290
        (let ((x44291 '0)) x44291)
        (let ((a44292 '1))
          (let ((a44293 (cdr lst)))
            (let ((a44294 (length a44293))) (+ a44292 a44294)))))))
  (define (map proc lst)
    (let ((a44295 (null? lst)))
      (if a44295
        (let ((x44296 (list))) x44296)
        (let ((a44297 (car lst)))
          (let ((a44298 (proc a44297)))
            (let ((a44299 (cdr lst)))
              (let ((a44300 (map proc a44299))) (cons a44298 a44300))))))))
  (define (filter op lst)
    (let ((a44301 (null? lst)))
      (if a44301
        (let ((x44302 (list))) x44302)
        (let ((a44303 (car lst)))
          (let ((a44304 (op a44303)))
            (if a44304
              (let ((a44305 (car lst)))
                (let ((a44306 (cdr lst)))
                  (let ((a44307 (filter op a44306))) (cons a44305 a44307))))
              (let ((a44308 (cdr lst))) (filter op a44308))))))))
  (define (drop lst n)
    (let ((a44309 '0))
      (let ((a44310 (= n a44309)))
        (if a44310
          lst
          (let ((a44311 (cdr lst)))
            (let ((a44312 '1))
              (let ((a44313 (- n a44312))) (drop a44311 a44313))))))))
  (define (foldr proc acc lst)
    (let ((a44314 (null? lst)))
      (if a44314
        acc
        (let ((a44315 (car lst)))
          (let ((a44316 (cdr lst)))
            (let ((a44317 (foldr proc acc a44316))) (proc a44315 a44317)))))))
  (define (append lst1 lst2)
    (let ((a44318 (null? lst1)))
      (if a44318
        lst2
        (let ((a44319 (car lst1)))
          (let ((a44320 (cdr lst1)))
            (let ((a44321 (append a44320 lst2))) (cons a44319 a44321)))))))
  (define (hash . lst) (let ((x44322 (apply-prim hash lst))) x44322))
  (define (hash-ref h k) (let ((x44323 (prim hash-ref h k))) x44323))
  (define (hash-set h k v) (let ((x44324 (prim hash-set h k v))) x44324))
  (define (hash-has-key? h k) (let ((x44325 (prim hash-has-key? h k))) x44325))
  (define (hash-count h) (let ((x44326 (prim hash-count h))) x44326))
  (define (call)
    (let ((a44327 '100))
      (let ((a44328 '80))
        (let ((a44329 '10))
          (let ((a44330 '2)) (hash a44327 a44328 a44329 a44330))))))
  (define (brouhaha_main) (let ((x44331 (call))) x44331)))
