'((define (+ . lst) (let ((x43627 (apply-prim + lst))) x43627))
  (define (- . lst) (let ((x43628 (apply-prim - lst))) x43628))
  (define (* . lst) (let ((x43629 (apply-prim * lst))) x43629))
  (define (modulo a b) (let ((x43630 (prim modulo a b))) x43630))
  (define (/ . lst) (let ((x43631 (apply-prim / lst))) x43631))
  (define (= . lst) (let ((x43632 (apply-prim = lst))) x43632))
  (define (> . lst) (let ((x43633 (apply-prim > lst))) x43633))
  (define (< . lst) (let ((x43634 (apply-prim < lst))) x43634))
  (define (<= . lst) (let ((x43635 (apply-prim <= lst))) x43635))
  (define (>= . lst) (let ((x43636 (apply-prim >= lst))) x43636))
  (define (null? x) (let ((x43637 (prim null? x))) x43637))
  (define (equal? x y) (let ((x43638 (prim equal? x y))) x43638))
  (define (eq? x y) (let ((x43639 (prim eq? x y))) x43639))
  (define (cons a b) (let ((x43640 (prim cons a b))) x43640))
  (define (car lst) (let ((x43641 (prim car lst))) x43641))
  (define (cdr lst) (let ((x43642 (prim cdr lst))) x43642))
  (define (even? x)
    (let ((a43643 '0))
      (let ((a43644 '2))
        (let ((a43645 (modulo x a43644))) (equal? a43643 a43645)))))
  (define (odd? x)
    (let ((a43646 '1))
      (let ((a43647 '2))
        (let ((a43648 (modulo x a43647))) (equal? a43646 a43648)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a43649 (null? lst)))
      (if a43649
        (let ((x43650 '#f)) x43650)
        (let ((a43651 (car lst)))
          (let ((a43652 (equal? a43651 x)))
            (if a43652
              (let ((x43653 '#t)) x43653)
              (let ((a43654 (cdr lst))) (member? x a43654))))))))
  (define (foldl fun acc lst)
    (let ((a43655 (null? lst)))
      (if a43655
        acc
        (let ((a43656 (car lst)))
          (let ((a43657 (fun a43656 acc)))
            (let ((a43658 (cdr lst))) (foldl fun a43657 a43658)))))))
  (define (reverse-helper lst lst2)
    (let ((a43659 (null? lst)))
      (if a43659
        lst2
        (let ((a43660 (cdr lst)))
          (let ((a43661 (car lst)))
            (let ((a43662 (cons a43661 lst2)))
              (reverse-helper a43660 a43662)))))))
  (define (reverse lst) (let ((a43663 (list))) (reverse-helper lst a43663)))
  (define (take-helper lst n lst2)
    (let ((a43664 '0))
      (let ((a43665 (= n a43664)))
        (if a43665
          (let ((x43666 (reverse lst2))) x43666)
          (let ((a43667 (cdr lst)))
            (let ((a43668 '1))
              (let ((a43669 (- n a43668)))
                (let ((a43670 (car lst)))
                  (let ((a43671 (cons a43670 lst2)))
                    (take-helper a43667 a43669 a43671))))))))))
  (define (take lst n) (let ((a43672 (list))) (take-helper lst n a43672)))
  (define (length lst)
    (let ((a43673 (null? lst)))
      (if a43673
        (let ((x43674 '0)) x43674)
        (let ((a43675 '1))
          (let ((a43676 (cdr lst)))
            (let ((a43677 (length a43676))) (+ a43675 a43677)))))))
  (define (map proc lst)
    (let ((a43678 (null? lst)))
      (if a43678
        (let ((x43679 (list))) x43679)
        (let ((a43680 (car lst)))
          (let ((a43681 (proc a43680)))
            (let ((a43682 (cdr lst)))
              (let ((a43683 (map proc a43682))) (cons a43681 a43683))))))))
  (define (filter op lst)
    (let ((a43684 (null? lst)))
      (if a43684
        (let ((x43685 (list))) x43685)
        (let ((a43686 (car lst)))
          (let ((a43687 (op a43686)))
            (if a43687
              (let ((a43688 (car lst)))
                (let ((a43689 (cdr lst)))
                  (let ((a43690 (filter op a43689))) (cons a43688 a43690))))
              (let ((a43691 (cdr lst))) (filter op a43691))))))))
  (define (drop lst n)
    (let ((a43692 '0))
      (let ((a43693 (= n a43692)))
        (if a43693
          lst
          (let ((a43694 (cdr lst)))
            (let ((a43695 '1))
              (let ((a43696 (- n a43695))) (drop a43694 a43696))))))))
  (define (foldr proc acc lst)
    (let ((a43697 (null? lst)))
      (if a43697
        acc
        (let ((a43698 (car lst)))
          (let ((a43699 (cdr lst)))
            (let ((a43700 (foldr proc acc a43699))) (proc a43698 a43700)))))))
  (define (append lst1 lst2)
    (let ((a43701 (null? lst1)))
      (if a43701
        lst2
        (let ((a43702 (car lst1)))
          (let ((a43703 (cdr lst1)))
            (let ((a43704 (append a43703 lst2))) (cons a43702 a43704)))))))
  (define (hash . lst) (let ((x43705 (apply-prim hash lst))) x43705))
  (define (hash-ref h k) (let ((x43706 (prim hash-ref h k))) x43706))
  (define (hash-set h k v) (let ((x43707 (prim hash-set h k v))) x43707))
  (define (hash-has-key? h k) (let ((x43708 (prim hash-has-key? h k))) x43708))
  (define (hash-count h) (let ((x43709 (prim hash-count h))) x43709))
  (define (call)
    (let ((a43710 '100))
      (let ((a43711 '80))
        (let ((a43712 '10))
          (let ((a43713 '2)) (hash a43710 a43711 a43712 a43713))))))
  (define (brouhaha_main) (let ((x43714 (call))) x43714)))
