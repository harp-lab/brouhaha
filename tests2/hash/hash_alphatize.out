'((define (+ . lst) (let ((x44611 (apply-prim + lst))) x44611))
  (define (- . lst) (let ((x44612 (apply-prim - lst))) x44612))
  (define (* . lst) (let ((x44613 (apply-prim * lst))) x44613))
  (define (modulo a b) (let ((x44614 (prim modulo a b))) x44614))
  (define (/ . lst) (let ((x44615 (apply-prim / lst))) x44615))
  (define (= . lst) (let ((x44616 (apply-prim = lst))) x44616))
  (define (> . lst) (let ((x44617 (apply-prim > lst))) x44617))
  (define (< . lst) (let ((x44618 (apply-prim < lst))) x44618))
  (define (<= . lst) (let ((x44619 (apply-prim <= lst))) x44619))
  (define (>= . lst) (let ((x44620 (apply-prim >= lst))) x44620))
  (define (null? x) (let ((x44621 (prim null? x))) x44621))
  (define (equal? x y) (let ((x44622 (prim equal? x y))) x44622))
  (define (eq? x y) (let ((x44623 (prim eq? x y))) x44623))
  (define (cons a b) (let ((x44624 (prim cons a b))) x44624))
  (define (car lst) (let ((x44625 (prim car lst))) x44625))
  (define (cdr lst) (let ((x44626 (prim cdr lst))) x44626))
  (define (even? x)
    (let ((a44627 '0))
      (let ((a44628 '2))
        (let ((a44629 (modulo x a44628))) (equal? a44627 a44629)))))
  (define (odd? x)
    (let ((a44630 '1))
      (let ((a44631 '2))
        (let ((a44632 (modulo x a44631))) (equal? a44630 a44632)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a44633 (null? lst)))
      (if a44633
        (let ((x44634 '#f)) x44634)
        (let ((a44635 (car lst)))
          (let ((a44636 (equal? a44635 x)))
            (if a44636
              (let ((x44637 '#t)) x44637)
              (let ((a44638 (cdr lst))) (member? x a44638))))))))
  (define (foldl fun acc lst)
    (let ((a44639 (null? lst)))
      (if a44639
        acc
        (let ((a44640 (car lst)))
          (let ((a44641 (fun a44640 acc)))
            (let ((a44642 (cdr lst))) (foldl fun a44641 a44642)))))))
  (define (reverse-helper lst lst2)
    (let ((a44643 (null? lst)))
      (if a44643
        lst2
        (let ((a44644 (cdr lst)))
          (let ((a44645 (car lst)))
            (let ((a44646 (cons a44645 lst2)))
              (reverse-helper a44644 a44646)))))))
  (define (reverse lst) (let ((a44647 (list))) (reverse-helper lst a44647)))
  (define (take-helper lst n lst2)
    (let ((a44648 '0))
      (let ((a44649 (= n a44648)))
        (if a44649
          (let ((x44650 (reverse lst2))) x44650)
          (let ((a44651 (cdr lst)))
            (let ((a44652 '1))
              (let ((a44653 (- n a44652)))
                (let ((a44654 (car lst)))
                  (let ((a44655 (cons a44654 lst2)))
                    (take-helper a44651 a44653 a44655))))))))))
  (define (take lst n) (let ((a44656 (list))) (take-helper lst n a44656)))
  (define (length lst)
    (let ((a44657 (null? lst)))
      (if a44657
        (let ((x44658 '0)) x44658)
        (let ((a44659 '1))
          (let ((a44660 (cdr lst)))
            (let ((a44661 (length a44660))) (+ a44659 a44661)))))))
  (define (map proc lst)
    (let ((a44662 (null? lst)))
      (if a44662
        (let ((x44663 (list))) x44663)
        (let ((a44664 (car lst)))
          (let ((a44665 (proc a44664)))
            (let ((a44666 (cdr lst)))
              (let ((a44667 (map proc a44666))) (cons a44665 a44667))))))))
  (define (filter op lst)
    (let ((a44668 (null? lst)))
      (if a44668
        (let ((x44669 (list))) x44669)
        (let ((a44670 (car lst)))
          (let ((a44671 (op a44670)))
            (if a44671
              (let ((a44672 (car lst)))
                (let ((a44673 (cdr lst)))
                  (let ((a44674 (filter op a44673))) (cons a44672 a44674))))
              (let ((a44675 (cdr lst))) (filter op a44675))))))))
  (define (drop lst n)
    (let ((a44676 '0))
      (let ((a44677 (= n a44676)))
        (if a44677
          lst
          (let ((a44678 (cdr lst)))
            (let ((a44679 '1))
              (let ((a44680 (- n a44679))) (drop a44678 a44680))))))))
  (define (foldr proc acc lst)
    (let ((a44681 (null? lst)))
      (if a44681
        acc
        (let ((a44682 (car lst)))
          (let ((a44683 (cdr lst)))
            (let ((a44684 (foldr proc acc a44683))) (proc a44682 a44684)))))))
  (define (append lst1 lst2)
    (let ((a44685 (null? lst1)))
      (if a44685
        lst2
        (let ((a44686 (car lst1)))
          (let ((a44687 (cdr lst1)))
            (let ((a44688 (append a44687 lst2))) (cons a44686 a44688)))))))
  (define (hash . lst) (let ((x44689 (apply-prim hash lst))) x44689))
  (define (hash-ref h k) (let ((x44690 (prim hash-ref h k))) x44690))
  (define (hash-set h k v) (let ((x44691 (prim hash-set h k v))) x44691))
  (define (hash-has-key? h k) (let ((x44692 (prim hash-has-key? h k))) x44692))
  (define (hash-count h) (let ((x44693 (prim hash-count h))) x44693))
  (define (call)
    (let ((a44694 '100))
      (let ((a44695 '80))
        (let ((a44696 '10))
          (let ((a44697 '2)) (hash a44694 a44695 a44696 a44697))))))
  (define (brouhaha_main) (let ((x44698 (call))) x44698)))
