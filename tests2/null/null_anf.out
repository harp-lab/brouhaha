'((define (+ . lst)
    (let ((kont47430 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47345 (apply-prim + lst))) (kont47430 x47345)))))
  (define (- . lst)
    (let ((kont47432 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47346 (apply-prim - lst))) (kont47432 x47346)))))
  (define (* . lst)
    (let ((kont47434 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47347 (apply-prim * lst))) (kont47434 x47347)))))
  (define (modulo kont47436 a b)
    (let ((x47348 (prim modulo a b))) (kont47436 x47348)))
  (define (/ . lst)
    (let ((kont47437 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47349 (apply-prim / lst))) (kont47437 x47349)))))
  (define (= . lst)
    (let ((kont47439 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47350 (apply-prim = lst))) (kont47439 x47350)))))
  (define (> . lst)
    (let ((kont47441 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47351 (apply-prim > lst))) (kont47441 x47351)))))
  (define (< . lst)
    (let ((kont47443 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47352 (apply-prim < lst))) (kont47443 x47352)))))
  (define (<= . lst)
    (let ((kont47445 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47353 (apply-prim <= lst))) (kont47445 x47353)))))
  (define (>= . lst)
    (let ((kont47447 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47354 (apply-prim >= lst))) (kont47447 x47354)))))
  (define (null? kont47449 x)
    (let ((x47355 (prim null? x))) (kont47449 x47355)))
  (define (equal? kont47450 x y)
    (let ((x47356 (prim equal? x y))) (kont47450 x47356)))
  (define (eq? kont47451 x y)
    (let ((x47357 (prim eq? x y))) (kont47451 x47357)))
  (define (cons kont47452 a b)
    (let ((x47358 (prim cons a b))) (kont47452 x47358)))
  (define (car kont47453 lst)
    (let ((x47359 (prim car lst))) (kont47453 x47359)))
  (define (cdr kont47454 lst)
    (let ((x47360 (prim cdr lst))) (kont47454 x47360)))
  (define (even? kont47455 x)
    (let ((a47361 '0))
      (let ((a47362 '2))
        (let ((f47456 (lambda (a47363) (equal? kont47455 a47361 a47363))))
          (modulo f47456 x a47362)))))
  (define (odd? kont47457 x)
    (let ((a47364 '1))
      (let ((a47365 '2))
        (let ((f47458 (lambda (a47366) (equal? kont47457 a47364 a47366))))
          (modulo f47458 x a47365)))))
  (define (list . x)
    (let ((kont47459 (prim car x))) (let ((x (prim cdr x))) (kont47459 x))))
  (define (member? kont47461 x lst)
    (let ((f47465
           (lambda (a47367)
             (if a47367
               (let ((x47368 '#f)) (kont47461 x47368))
               (let ((f47464
                      (lambda (a47369)
                        (let ((f47463
                               (lambda (a47370)
                                 (if a47370
                                   (let ((x47371 '#t)) (kont47461 x47371))
                                   (let ((f47462
                                          (lambda (a47372)
                                            (member? kont47461 x a47372))))
                                     (cdr f47462 lst))))))
                          (equal? f47463 a47369 x)))))
                 (car f47464 lst))))))
      (null? f47465 lst)))
  (define (foldl kont47466 fun acc lst)
    (let ((f47470
           (lambda (a47373)
             (if a47373
               (kont47466 acc)
               (let ((f47469
                      (lambda (a47374)
                        (let ((f47468
                               (lambda (a47375)
                                 (let ((f47467
                                        (lambda (a47376)
                                          (foldl
                                           kont47466
                                           fun
                                           a47375
                                           a47376))))
                                   (cdr f47467 lst)))))
                          (fun f47468 a47374 acc)))))
                 (car f47469 lst))))))
      (null? f47470 lst)))
  (define (reverse-helper kont47471 lst lst2)
    (let ((f47475
           (lambda (a47377)
             (if a47377
               (kont47471 lst2)
               (let ((f47474
                      (lambda (a47378)
                        (let ((f47473
                               (lambda (a47379)
                                 (let ((f47472
                                        (lambda (a47380)
                                          (reverse-helper
                                           kont47471
                                           a47378
                                           a47380))))
                                   (cons f47472 a47379 lst2)))))
                          (car f47473 lst)))))
                 (cdr f47474 lst))))))
      (null? f47475 lst)))
  (define (reverse kont47476 lst)
    (let ((f47477 (lambda (a47381) (reverse-helper kont47476 lst a47381))))
      (list f47477)))
  (define (take-helper kont47478 lst n lst2)
    (let ((a47382 '0))
      (let ((f47484
             (lambda (a47383)
               (if a47383
                 (let ((f47479 (lambda (x47384) (kont47478 x47384))))
                   (reverse f47479 lst2))
                 (let ((f47483
                        (lambda (a47385)
                          (let ((a47386 '1))
                            (let ((f47482
                                   (lambda (a47387)
                                     (let ((f47481
                                            (lambda (a47388)
                                              (let ((f47480
                                                     (lambda (a47389)
                                                       (take-helper
                                                        kont47478
                                                        a47385
                                                        a47387
                                                        a47389))))
                                                (cons f47480 a47388 lst2)))))
                                       (car f47481 lst)))))
                              (- f47482 n a47386))))))
                   (cdr f47483 lst))))))
        (= f47484 n a47382))))
  (define (take kont47485 lst n)
    (let ((f47486 (lambda (a47390) (take-helper kont47485 lst n a47390))))
      (list f47486)))
  (define (length kont47487 lst)
    (let ((f47490
           (lambda (a47391)
             (if a47391
               (let ((x47392 '0)) (kont47487 x47392))
               (let ((a47393 '1))
                 (let ((f47489
                        (lambda (a47394)
                          (let ((f47488
                                 (lambda (a47395)
                                   (+ kont47487 a47393 a47395))))
                            (length f47488 a47394)))))
                   (cdr f47489 lst)))))))
      (null? f47490 lst)))
  (define (map kont47491 proc lst)
    (let ((f47497
           (lambda (a47396)
             (if a47396
               (let ((f47492 (lambda (x47397) (kont47491 x47397))))
                 (list f47492))
               (let ((f47496
                      (lambda (a47398)
                        (let ((f47495
                               (lambda (a47399)
                                 (let ((f47494
                                        (lambda (a47400)
                                          (let ((f47493
                                                 (lambda (a47401)
                                                   (cons
                                                    kont47491
                                                    a47399
                                                    a47401))))
                                            (map f47493 proc a47400)))))
                                   (cdr f47494 lst)))))
                          (proc f47495 a47398)))))
                 (car f47496 lst))))))
      (null? f47497 lst)))
  (define (filter kont47498 op lst)
    (let ((f47506
           (lambda (a47402)
             (if a47402
               (let ((f47499 (lambda (x47403) (kont47498 x47403))))
                 (list f47499))
               (let ((f47505
                      (lambda (a47404)
                        (let ((f47504
                               (lambda (a47405)
                                 (if a47405
                                   (let ((f47502
                                          (lambda (a47406)
                                            (let ((f47501
                                                   (lambda (a47407)
                                                     (let ((f47500
                                                            (lambda (a47408)
                                                              (cons
                                                               kont47498
                                                               a47406
                                                               a47408))))
                                                       (filter
                                                        f47500
                                                        op
                                                        a47407)))))
                                              (cdr f47501 lst)))))
                                     (car f47502 lst))
                                   (let ((f47503
                                          (lambda (a47409)
                                            (filter kont47498 op a47409))))
                                     (cdr f47503 lst))))))
                          (op f47504 a47404)))))
                 (car f47505 lst))))))
      (null? f47506 lst)))
  (define (drop kont47507 lst n)
    (let ((a47410 '0))
      (let ((f47510
             (lambda (a47411)
               (if a47411
                 (kont47507 lst)
                 (let ((f47509
                        (lambda (a47412)
                          (let ((a47413 '1))
                            (let ((f47508
                                   (lambda (a47414)
                                     (drop kont47507 a47412 a47414))))
                              (- f47508 n a47413))))))
                   (cdr f47509 lst))))))
        (= f47510 n a47410))))
  (define (foldr kont47511 proc acc lst)
    (let ((f47515
           (lambda (a47415)
             (if a47415
               (kont47511 acc)
               (let ((f47514
                      (lambda (a47416)
                        (let ((f47513
                               (lambda (a47417)
                                 (let ((f47512
                                        (lambda (a47418)
                                          (proc kont47511 a47416 a47418))))
                                   (foldr f47512 proc acc a47417)))))
                          (cdr f47513 lst)))))
                 (car f47514 lst))))))
      (null? f47515 lst)))
  (define (append kont47516 lst1 lst2)
    (let ((f47520
           (lambda (a47419)
             (if a47419
               (kont47516 lst2)
               (let ((f47519
                      (lambda (a47420)
                        (let ((f47518
                               (lambda (a47421)
                                 (let ((f47517
                                        (lambda (a47422)
                                          (cons kont47516 a47420 a47422))))
                                   (append f47517 a47421 lst2)))))
                          (cdr f47518 lst1)))))
                 (car f47519 lst1))))))
      (null? f47520 lst1)))
  (define (hash . lst)
    (let ((kont47521 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47423 (apply-prim hash lst))) (kont47521 x47423)))))
  (define (hash-ref kont47523 h k)
    (let ((x47424 (prim hash-ref h k))) (kont47523 x47424)))
  (define (hash-set kont47524 h k v)
    (let ((x47425 (prim hash-set h k v))) (kont47524 x47425)))
  (define (hash-has-key? kont47525 h k)
    (let ((x47426 (prim hash-has-key? h k))) (kont47525 x47426)))
  (define (hash-count kont47526 h)
    (let ((x47427 (prim hash-count h))) (kont47526 x47427)))
  (define (call kont47527) (let ((a47428 '1)) (null? kont47527 a47428)))
  (define (brouhaha_main kont47528)
    (let ((f47529 (lambda (x47429) (kont47528 x47429)))) (call f47529))))
