'((define (+ . lst)
    (let ((kont49182 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49097 (apply-prim + lst))) (kont49182 x49097)))))
  (define (- . lst)
    (let ((kont49184 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49098 (apply-prim - lst))) (kont49184 x49098)))))
  (define (* . lst)
    (let ((kont49186 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49099 (apply-prim * lst))) (kont49186 x49099)))))
  (define (modulo kont49188 a b)
    (let ((x49100 (prim modulo a b))) (kont49188 x49100)))
  (define (/ . lst)
    (let ((kont49189 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49101 (apply-prim / lst))) (kont49189 x49101)))))
  (define (= . lst)
    (let ((kont49191 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49102 (apply-prim = lst))) (kont49191 x49102)))))
  (define (> . lst)
    (let ((kont49193 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49103 (apply-prim > lst))) (kont49193 x49103)))))
  (define (< . lst)
    (let ((kont49195 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49104 (apply-prim < lst))) (kont49195 x49104)))))
  (define (<= . lst)
    (let ((kont49197 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49105 (apply-prim <= lst))) (kont49197 x49105)))))
  (define (>= . lst)
    (let ((kont49199 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49106 (apply-prim >= lst))) (kont49199 x49106)))))
  (define (null? kont49201 x)
    (let ((x49107 (prim null? x))) (kont49201 x49107)))
  (define (equal? kont49202 x y)
    (let ((x49108 (prim equal? x y))) (kont49202 x49108)))
  (define (eq? kont49203 x y)
    (let ((x49109 (prim eq? x y))) (kont49203 x49109)))
  (define (cons kont49204 a b)
    (let ((x49110 (prim cons a b))) (kont49204 x49110)))
  (define (car kont49205 lst)
    (let ((x49111 (prim car lst))) (kont49205 x49111)))
  (define (cdr kont49206 lst)
    (let ((x49112 (prim cdr lst))) (kont49206 x49112)))
  (define (even? kont49207 x)
    (let ((a49113 '0))
      (let ((a49114 '2))
        (let ((f49208 (lambda (a49115) (equal? kont49207 a49113 a49115))))
          (modulo f49208 x a49114)))))
  (define (odd? kont49209 x)
    (let ((a49116 '1))
      (let ((a49117 '2))
        (let ((f49210 (lambda (a49118) (equal? kont49209 a49116 a49118))))
          (modulo f49210 x a49117)))))
  (define (list . x)
    (let ((kont49211 (prim car x))) (let ((x (prim cdr x))) (kont49211 x))))
  (define (member? kont49213 x lst)
    (let ((f49217
           (lambda (a49119)
             (if a49119
               (let ((x49120 '#f)) (kont49213 x49120))
               (let ((f49216
                      (lambda (a49121)
                        (let ((f49215
                               (lambda (a49122)
                                 (if a49122
                                   (let ((x49123 '#t)) (kont49213 x49123))
                                   (let ((f49214
                                          (lambda (a49124)
                                            (member? kont49213 x a49124))))
                                     (cdr f49214 lst))))))
                          (equal? f49215 a49121 x)))))
                 (car f49216 lst))))))
      (null? f49217 lst)))
  (define (foldl kont49218 fun acc lst)
    (let ((f49222
           (lambda (a49125)
             (if a49125
               (kont49218 acc)
               (let ((f49221
                      (lambda (a49126)
                        (let ((f49220
                               (lambda (a49127)
                                 (let ((f49219
                                        (lambda (a49128)
                                          (foldl
                                           kont49218
                                           fun
                                           a49127
                                           a49128))))
                                   (cdr f49219 lst)))))
                          (fun f49220 a49126 acc)))))
                 (car f49221 lst))))))
      (null? f49222 lst)))
  (define (reverse-helper kont49223 lst lst2)
    (let ((f49227
           (lambda (a49129)
             (if a49129
               (kont49223 lst2)
               (let ((f49226
                      (lambda (a49130)
                        (let ((f49225
                               (lambda (a49131)
                                 (let ((f49224
                                        (lambda (a49132)
                                          (reverse-helper
                                           kont49223
                                           a49130
                                           a49132))))
                                   (cons f49224 a49131 lst2)))))
                          (car f49225 lst)))))
                 (cdr f49226 lst))))))
      (null? f49227 lst)))
  (define (reverse kont49228 lst)
    (let ((f49229 (lambda (a49133) (reverse-helper kont49228 lst a49133))))
      (list f49229)))
  (define (take-helper kont49230 lst n lst2)
    (let ((a49134 '0))
      (let ((f49236
             (lambda (a49135)
               (if a49135
                 (let ((f49231 (lambda (x49136) (kont49230 x49136))))
                   (reverse f49231 lst2))
                 (let ((f49235
                        (lambda (a49137)
                          (let ((a49138 '1))
                            (let ((f49234
                                   (lambda (a49139)
                                     (let ((f49233
                                            (lambda (a49140)
                                              (let ((f49232
                                                     (lambda (a49141)
                                                       (take-helper
                                                        kont49230
                                                        a49137
                                                        a49139
                                                        a49141))))
                                                (cons f49232 a49140 lst2)))))
                                       (car f49233 lst)))))
                              (- f49234 n a49138))))))
                   (cdr f49235 lst))))))
        (= f49236 n a49134))))
  (define (take kont49237 lst n)
    (let ((f49238 (lambda (a49142) (take-helper kont49237 lst n a49142))))
      (list f49238)))
  (define (length kont49239 lst)
    (let ((f49242
           (lambda (a49143)
             (if a49143
               (let ((x49144 '0)) (kont49239 x49144))
               (let ((a49145 '1))
                 (let ((f49241
                        (lambda (a49146)
                          (let ((f49240
                                 (lambda (a49147)
                                   (+ kont49239 a49145 a49147))))
                            (length f49240 a49146)))))
                   (cdr f49241 lst)))))))
      (null? f49242 lst)))
  (define (map kont49243 proc lst)
    (let ((f49249
           (lambda (a49148)
             (if a49148
               (let ((f49244 (lambda (x49149) (kont49243 x49149))))
                 (list f49244))
               (let ((f49248
                      (lambda (a49150)
                        (let ((f49247
                               (lambda (a49151)
                                 (let ((f49246
                                        (lambda (a49152)
                                          (let ((f49245
                                                 (lambda (a49153)
                                                   (cons
                                                    kont49243
                                                    a49151
                                                    a49153))))
                                            (map f49245 proc a49152)))))
                                   (cdr f49246 lst)))))
                          (proc f49247 a49150)))))
                 (car f49248 lst))))))
      (null? f49249 lst)))
  (define (filter kont49250 op lst)
    (let ((f49258
           (lambda (a49154)
             (if a49154
               (let ((f49251 (lambda (x49155) (kont49250 x49155))))
                 (list f49251))
               (let ((f49257
                      (lambda (a49156)
                        (let ((f49256
                               (lambda (a49157)
                                 (if a49157
                                   (let ((f49254
                                          (lambda (a49158)
                                            (let ((f49253
                                                   (lambda (a49159)
                                                     (let ((f49252
                                                            (lambda (a49160)
                                                              (cons
                                                               kont49250
                                                               a49158
                                                               a49160))))
                                                       (filter
                                                        f49252
                                                        op
                                                        a49159)))))
                                              (cdr f49253 lst)))))
                                     (car f49254 lst))
                                   (let ((f49255
                                          (lambda (a49161)
                                            (filter kont49250 op a49161))))
                                     (cdr f49255 lst))))))
                          (op f49256 a49156)))))
                 (car f49257 lst))))))
      (null? f49258 lst)))
  (define (drop kont49259 lst n)
    (let ((a49162 '0))
      (let ((f49262
             (lambda (a49163)
               (if a49163
                 (kont49259 lst)
                 (let ((f49261
                        (lambda (a49164)
                          (let ((a49165 '1))
                            (let ((f49260
                                   (lambda (a49166)
                                     (drop kont49259 a49164 a49166))))
                              (- f49260 n a49165))))))
                   (cdr f49261 lst))))))
        (= f49262 n a49162))))
  (define (foldr kont49263 proc acc lst)
    (let ((f49267
           (lambda (a49167)
             (if a49167
               (kont49263 acc)
               (let ((f49266
                      (lambda (a49168)
                        (let ((f49265
                               (lambda (a49169)
                                 (let ((f49264
                                        (lambda (a49170)
                                          (proc kont49263 a49168 a49170))))
                                   (foldr f49264 proc acc a49169)))))
                          (cdr f49265 lst)))))
                 (car f49266 lst))))))
      (null? f49267 lst)))
  (define (append kont49268 lst1 lst2)
    (let ((f49272
           (lambda (a49171)
             (if a49171
               (kont49268 lst2)
               (let ((f49271
                      (lambda (a49172)
                        (let ((f49270
                               (lambda (a49173)
                                 (let ((f49269
                                        (lambda (a49174)
                                          (cons kont49268 a49172 a49174))))
                                   (append f49269 a49173 lst2)))))
                          (cdr f49270 lst1)))))
                 (car f49271 lst1))))))
      (null? f49272 lst1)))
  (define (hash . lst)
    (let ((kont49273 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49175 (apply-prim hash lst))) (kont49273 x49175)))))
  (define (hash-ref kont49275 h k)
    (let ((x49176 (prim hash-ref h k))) (kont49275 x49176)))
  (define (hash-set kont49276 h k v)
    (let ((x49177 (prim hash-set h k v))) (kont49276 x49177)))
  (define (hash-has-key? kont49277 h k)
    (let ((x49178 (prim hash-has-key? h k))) (kont49277 x49178)))
  (define (hash-count kont49278 h)
    (let ((x49179 (prim hash-count h))) (kont49278 x49179)))
  (define (call kont49279) (let ((a49180 '1)) (null? kont49279 a49180)))
  (define (brouhaha_main kont49280)
    (let ((f49281 (lambda (x49181) (kont49280 x49181)))) (call f49281))))
