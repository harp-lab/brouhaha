'((define (+ . lst) (let ((x49950 (apply-prim + lst))) x49950))
  (define (- . lst) (let ((x49951 (apply-prim - lst))) x49951))
  (define (* . lst) (let ((x49952 (apply-prim * lst))) x49952))
  (define (modulo a b) (let ((x49953 (prim modulo a b))) x49953))
  (define (/ . lst) (let ((x49954 (apply-prim / lst))) x49954))
  (define (= . lst) (let ((x49955 (apply-prim = lst))) x49955))
  (define (> . lst) (let ((x49956 (apply-prim > lst))) x49956))
  (define (< . lst) (let ((x49957 (apply-prim < lst))) x49957))
  (define (<= . lst) (let ((x49958 (apply-prim <= lst))) x49958))
  (define (>= . lst) (let ((x49959 (apply-prim >= lst))) x49959))
  (define (null? x) (let ((x49960 (prim null? x))) x49960))
  (define (equal? x y) (let ((x49961 (prim equal? x y))) x49961))
  (define (eq? x y) (let ((x49962 (prim eq? x y))) x49962))
  (define (cons a b) (let ((x49963 (prim cons a b))) x49963))
  (define (car lst) (let ((x49964 (prim car lst))) x49964))
  (define (cdr lst) (let ((x49965 (prim cdr lst))) x49965))
  (define (even? x)
    (let ((a49966 '0))
      (let ((a49967 '2))
        (let ((a49968 (modulo x a49967))) (equal? a49966 a49968)))))
  (define (odd? x)
    (let ((a49969 '1))
      (let ((a49970 '2))
        (let ((a49971 (modulo x a49970))) (equal? a49969 a49971)))))
  (define (list . x) x)
  (define (and . lst) (let ((x49972 (apply-prim and lst))) x49972))
  (define (or . lst) (let ((x49973 (apply-prim or lst))) x49973))
  (define (member? x lst)
    (let ((a49974 (null? lst)))
      (if a49974
        (let ((x49975 '#f)) x49975)
        (let ((a49976 (car lst)))
          (let ((a49977 (equal? a49976 x)))
            (if a49977
              (let ((x49978 '#t)) x49978)
              (let ((a49979 (cdr lst))) (member? x a49979))))))))
  (define (foldl fun acc lst)
    (let ((a49980 (null? lst)))
      (if a49980
        acc
        (let ((a49981 (car lst)))
          (let ((a49982 (fun a49981 acc)))
            (let ((a49983 (cdr lst))) (foldl fun a49982 a49983)))))))
  (define (reverse-helper lst lst2)
    (let ((a49984 (null? lst)))
      (if a49984
        lst2
        (let ((a49985 (cdr lst)))
          (let ((a49986 (car lst)))
            (let ((a49987 (cons a49986 lst2)))
              (reverse-helper a49985 a49987)))))))
  (define (reverse lst) (let ((a49988 (list))) (reverse-helper lst a49988)))
  (define (take-helper lst n lst2)
    (let ((a49989 '0))
      (let ((a49990 (= n a49989)))
        (if a49990
          (let ((x49991 (reverse lst2))) x49991)
          (let ((a49992 (cdr lst)))
            (let ((a49993 '1))
              (let ((a49994 (- n a49993)))
                (let ((a49995 (car lst)))
                  (let ((a49996 (cons a49995 lst2)))
                    (take-helper a49992 a49994 a49996))))))))))
  (define (take lst n) (let ((a49997 (list))) (take-helper lst n a49997)))
  (define (length lst)
    (let ((a49998 (null? lst)))
      (if a49998
        (let ((x49999 '0)) x49999)
        (let ((a50000 '1))
          (let ((a50001 (cdr lst)))
            (let ((a50002 (length a50001))) (+ a50000 a50002)))))))
  (define (map proc lst)
    (let ((a50003 (null? lst)))
      (if a50003
        (let ((x50004 (list))) x50004)
        (let ((a50005 (car lst)))
          (let ((a50006 (proc a50005)))
            (let ((a50007 (cdr lst)))
              (let ((a50008 (map proc a50007))) (cons a50006 a50008))))))))
  (define (filter op lst)
    (let ((a50009 (null? lst)))
      (if a50009
        (let ((x50010 (list))) x50010)
        (let ((a50011 (car lst)))
          (let ((a50012 (op a50011)))
            (if a50012
              (let ((a50013 (car lst)))
                (let ((a50014 (cdr lst)))
                  (let ((a50015 (filter op a50014))) (cons a50013 a50015))))
              (let ((a50016 (cdr lst))) (filter op a50016))))))))
  (define (drop lst n)
    (let ((a50017 '0))
      (let ((a50018 (= n a50017)))
        (if a50018
          lst
          (let ((a50019 (cdr lst)))
            (let ((a50020 '1))
              (let ((a50021 (- n a50020))) (drop a50019 a50021))))))))
  (define (foldr proc acc lst)
    (let ((a50022 (null? lst)))
      (if a50022
        acc
        (let ((a50023 (car lst)))
          (let ((a50024 (cdr lst)))
            (let ((a50025 (foldr proc acc a50024))) (proc a50023 a50025)))))))
  (define (append lst1 lst2)
    (let ((a50026 (null? lst1)))
      (if a50026
        lst2
        (let ((a50027 (car lst1)))
          (let ((a50028 (cdr lst1)))
            (let ((a50029 (append a50028 lst2))) (cons a50027 a50029)))))))
  (define (hash . lst) (let ((x50030 (apply-prim hash lst))) x50030))
  (define (hash-ref h k) (let ((x50031 (prim hash-ref h k))) x50031))
  (define (hash-set h k v) (let ((x50032 (prim hash-set h k v))) x50032))
  (define (hash-has-key? h k) (let ((x50033 (prim hash-has-key? h k))) x50033))
  (define (hash-count h) (let ((x50034 (prim hash-count h))) x50034))
  (define (call) (let ((a50035 '1)) (null? a50035)))
  (define (brouhaha_main) (let ((x50036 (call))) x50036)))
