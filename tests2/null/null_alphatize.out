'((define (+ . lst) (let ((x47345 (apply-prim + lst))) x47345))
  (define (- . lst) (let ((x47346 (apply-prim - lst))) x47346))
  (define (* . lst) (let ((x47347 (apply-prim * lst))) x47347))
  (define (modulo a b) (let ((x47348 (prim modulo a b))) x47348))
  (define (/ . lst) (let ((x47349 (apply-prim / lst))) x47349))
  (define (= . lst) (let ((x47350 (apply-prim = lst))) x47350))
  (define (> . lst) (let ((x47351 (apply-prim > lst))) x47351))
  (define (< . lst) (let ((x47352 (apply-prim < lst))) x47352))
  (define (<= . lst) (let ((x47353 (apply-prim <= lst))) x47353))
  (define (>= . lst) (let ((x47354 (apply-prim >= lst))) x47354))
  (define (null? x) (let ((x47355 (prim null? x))) x47355))
  (define (equal? x y) (let ((x47356 (prim equal? x y))) x47356))
  (define (eq? x y) (let ((x47357 (prim eq? x y))) x47357))
  (define (cons a b) (let ((x47358 (prim cons a b))) x47358))
  (define (car lst) (let ((x47359 (prim car lst))) x47359))
  (define (cdr lst) (let ((x47360 (prim cdr lst))) x47360))
  (define (even? x)
    (let ((a47361 '0))
      (let ((a47362 '2))
        (let ((a47363 (modulo x a47362))) (equal? a47361 a47363)))))
  (define (odd? x)
    (let ((a47364 '1))
      (let ((a47365 '2))
        (let ((a47366 (modulo x a47365))) (equal? a47364 a47366)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a47367 (null? lst)))
      (if a47367
        (let ((x47368 '#f)) x47368)
        (let ((a47369 (car lst)))
          (let ((a47370 (equal? a47369 x)))
            (if a47370
              (let ((x47371 '#t)) x47371)
              (let ((a47372 (cdr lst))) (member? x a47372))))))))
  (define (foldl fun acc lst)
    (let ((a47373 (null? lst)))
      (if a47373
        acc
        (let ((a47374 (car lst)))
          (let ((a47375 (fun a47374 acc)))
            (let ((a47376 (cdr lst))) (foldl fun a47375 a47376)))))))
  (define (reverse-helper lst lst2)
    (let ((a47377 (null? lst)))
      (if a47377
        lst2
        (let ((a47378 (cdr lst)))
          (let ((a47379 (car lst)))
            (let ((a47380 (cons a47379 lst2)))
              (reverse-helper a47378 a47380)))))))
  (define (reverse lst) (let ((a47381 (list))) (reverse-helper lst a47381)))
  (define (take-helper lst n lst2)
    (let ((a47382 '0))
      (let ((a47383 (= n a47382)))
        (if a47383
          (let ((x47384 (reverse lst2))) x47384)
          (let ((a47385 (cdr lst)))
            (let ((a47386 '1))
              (let ((a47387 (- n a47386)))
                (let ((a47388 (car lst)))
                  (let ((a47389 (cons a47388 lst2)))
                    (take-helper a47385 a47387 a47389))))))))))
  (define (take lst n) (let ((a47390 (list))) (take-helper lst n a47390)))
  (define (length lst)
    (let ((a47391 (null? lst)))
      (if a47391
        (let ((x47392 '0)) x47392)
        (let ((a47393 '1))
          (let ((a47394 (cdr lst)))
            (let ((a47395 (length a47394))) (+ a47393 a47395)))))))
  (define (map proc lst)
    (let ((a47396 (null? lst)))
      (if a47396
        (let ((x47397 (list))) x47397)
        (let ((a47398 (car lst)))
          (let ((a47399 (proc a47398)))
            (let ((a47400 (cdr lst)))
              (let ((a47401 (map proc a47400))) (cons a47399 a47401))))))))
  (define (filter op lst)
    (let ((a47402 (null? lst)))
      (if a47402
        (let ((x47403 (list))) x47403)
        (let ((a47404 (car lst)))
          (let ((a47405 (op a47404)))
            (if a47405
              (let ((a47406 (car lst)))
                (let ((a47407 (cdr lst)))
                  (let ((a47408 (filter op a47407))) (cons a47406 a47408))))
              (let ((a47409 (cdr lst))) (filter op a47409))))))))
  (define (drop lst n)
    (let ((a47410 '0))
      (let ((a47411 (= n a47410)))
        (if a47411
          lst
          (let ((a47412 (cdr lst)))
            (let ((a47413 '1))
              (let ((a47414 (- n a47413))) (drop a47412 a47414))))))))
  (define (foldr proc acc lst)
    (let ((a47415 (null? lst)))
      (if a47415
        acc
        (let ((a47416 (car lst)))
          (let ((a47417 (cdr lst)))
            (let ((a47418 (foldr proc acc a47417))) (proc a47416 a47418)))))))
  (define (append lst1 lst2)
    (let ((a47419 (null? lst1)))
      (if a47419
        lst2
        (let ((a47420 (car lst1)))
          (let ((a47421 (cdr lst1)))
            (let ((a47422 (append a47421 lst2))) (cons a47420 a47422)))))))
  (define (hash . lst) (let ((x47423 (apply-prim hash lst))) x47423))
  (define (hash-ref h k) (let ((x47424 (prim hash-ref h k))) x47424))
  (define (hash-set h k v) (let ((x47425 (prim hash-set h k v))) x47425))
  (define (hash-has-key? h k) (let ((x47426 (prim hash-has-key? h k))) x47426))
  (define (hash-count h) (let ((x47427 (prim hash-count h))) x47427))
  (define (call) (let ((a47428 '1)) (null? a47428)))
  (define (brouhaha_main) (let ((x47429 (call))) x47429)))
