'((define (+ . lst) (let ((x49097 (apply-prim + lst))) x49097))
  (define (- . lst) (let ((x49098 (apply-prim - lst))) x49098))
  (define (* . lst) (let ((x49099 (apply-prim * lst))) x49099))
  (define (modulo a b) (let ((x49100 (prim modulo a b))) x49100))
  (define (/ . lst) (let ((x49101 (apply-prim / lst))) x49101))
  (define (= . lst) (let ((x49102 (apply-prim = lst))) x49102))
  (define (> . lst) (let ((x49103 (apply-prim > lst))) x49103))
  (define (< . lst) (let ((x49104 (apply-prim < lst))) x49104))
  (define (<= . lst) (let ((x49105 (apply-prim <= lst))) x49105))
  (define (>= . lst) (let ((x49106 (apply-prim >= lst))) x49106))
  (define (null? x) (let ((x49107 (prim null? x))) x49107))
  (define (equal? x y) (let ((x49108 (prim equal? x y))) x49108))
  (define (eq? x y) (let ((x49109 (prim eq? x y))) x49109))
  (define (cons a b) (let ((x49110 (prim cons a b))) x49110))
  (define (car lst) (let ((x49111 (prim car lst))) x49111))
  (define (cdr lst) (let ((x49112 (prim cdr lst))) x49112))
  (define (even? x)
    (let ((a49113 '0))
      (let ((a49114 '2))
        (let ((a49115 (modulo x a49114))) (equal? a49113 a49115)))))
  (define (odd? x)
    (let ((a49116 '1))
      (let ((a49117 '2))
        (let ((a49118 (modulo x a49117))) (equal? a49116 a49118)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a49119 (null? lst)))
      (if a49119
        (let ((x49120 '#f)) x49120)
        (let ((a49121 (car lst)))
          (let ((a49122 (equal? a49121 x)))
            (if a49122
              (let ((x49123 '#t)) x49123)
              (let ((a49124 (cdr lst))) (member? x a49124))))))))
  (define (foldl fun acc lst)
    (let ((a49125 (null? lst)))
      (if a49125
        acc
        (let ((a49126 (car lst)))
          (let ((a49127 (fun a49126 acc)))
            (let ((a49128 (cdr lst))) (foldl fun a49127 a49128)))))))
  (define (reverse-helper lst lst2)
    (let ((a49129 (null? lst)))
      (if a49129
        lst2
        (let ((a49130 (cdr lst)))
          (let ((a49131 (car lst)))
            (let ((a49132 (cons a49131 lst2)))
              (reverse-helper a49130 a49132)))))))
  (define (reverse lst) (let ((a49133 (list))) (reverse-helper lst a49133)))
  (define (take-helper lst n lst2)
    (let ((a49134 '0))
      (let ((a49135 (= n a49134)))
        (if a49135
          (let ((x49136 (reverse lst2))) x49136)
          (let ((a49137 (cdr lst)))
            (let ((a49138 '1))
              (let ((a49139 (- n a49138)))
                (let ((a49140 (car lst)))
                  (let ((a49141 (cons a49140 lst2)))
                    (take-helper a49137 a49139 a49141))))))))))
  (define (take lst n) (let ((a49142 (list))) (take-helper lst n a49142)))
  (define (length lst)
    (let ((a49143 (null? lst)))
      (if a49143
        (let ((x49144 '0)) x49144)
        (let ((a49145 '1))
          (let ((a49146 (cdr lst)))
            (let ((a49147 (length a49146))) (+ a49145 a49147)))))))
  (define (map proc lst)
    (let ((a49148 (null? lst)))
      (if a49148
        (let ((x49149 (list))) x49149)
        (let ((a49150 (car lst)))
          (let ((a49151 (proc a49150)))
            (let ((a49152 (cdr lst)))
              (let ((a49153 (map proc a49152))) (cons a49151 a49153))))))))
  (define (filter op lst)
    (let ((a49154 (null? lst)))
      (if a49154
        (let ((x49155 (list))) x49155)
        (let ((a49156 (car lst)))
          (let ((a49157 (op a49156)))
            (if a49157
              (let ((a49158 (car lst)))
                (let ((a49159 (cdr lst)))
                  (let ((a49160 (filter op a49159))) (cons a49158 a49160))))
              (let ((a49161 (cdr lst))) (filter op a49161))))))))
  (define (drop lst n)
    (let ((a49162 '0))
      (let ((a49163 (= n a49162)))
        (if a49163
          lst
          (let ((a49164 (cdr lst)))
            (let ((a49165 '1))
              (let ((a49166 (- n a49165))) (drop a49164 a49166))))))))
  (define (foldr proc acc lst)
    (let ((a49167 (null? lst)))
      (if a49167
        acc
        (let ((a49168 (car lst)))
          (let ((a49169 (cdr lst)))
            (let ((a49170 (foldr proc acc a49169))) (proc a49168 a49170)))))))
  (define (append lst1 lst2)
    (let ((a49171 (null? lst1)))
      (if a49171
        lst2
        (let ((a49172 (car lst1)))
          (let ((a49173 (cdr lst1)))
            (let ((a49174 (append a49173 lst2))) (cons a49172 a49174)))))))
  (define (hash . lst) (let ((x49175 (apply-prim hash lst))) x49175))
  (define (hash-ref h k) (let ((x49176 (prim hash-ref h k))) x49176))
  (define (hash-set h k v) (let ((x49177 (prim hash-set h k v))) x49177))
  (define (hash-has-key? h k) (let ((x49178 (prim hash-has-key? h k))) x49178))
  (define (hash-count h) (let ((x49179 (prim hash-count h))) x49179))
  (define (call) (let ((a49180 '1)) (null? a49180)))
  (define (brouhaha_main) (let ((x49181 (call))) x49181)))
