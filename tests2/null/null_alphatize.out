'((define (+ . lst) (let ((x50881 (apply-prim + lst))) x50881))
  (define (- . lst) (let ((x50882 (apply-prim - lst))) x50882))
  (define (* . lst) (let ((x50883 (apply-prim * lst))) x50883))
  (define (modulo a b) (let ((x50884 (prim modulo a b))) x50884))
  (define (/ . lst) (let ((x50885 (apply-prim / lst))) x50885))
  (define (= . lst) (let ((x50886 (apply-prim = lst))) x50886))
  (define (> . lst) (let ((x50887 (apply-prim > lst))) x50887))
  (define (< . lst) (let ((x50888 (apply-prim < lst))) x50888))
  (define (<= . lst) (let ((x50889 (apply-prim <= lst))) x50889))
  (define (>= . lst) (let ((x50890 (apply-prim >= lst))) x50890))
  (define (null? x) (let ((x50891 (prim null? x))) x50891))
  (define (equal? x y) (let ((x50892 (prim equal? x y))) x50892))
  (define (eq? x y) (let ((x50893 (prim eq? x y))) x50893))
  (define (cons a b) (let ((x50894 (prim cons a b))) x50894))
  (define (car lst) (let ((x50895 (prim car lst))) x50895))
  (define (cdr lst) (let ((x50896 (prim cdr lst))) x50896))
  (define (even? x)
    (let ((a50897 '0))
      (let ((a50898 '2))
        (let ((a50899 (modulo x a50898))) (equal? a50897 a50899)))))
  (define (odd? x)
    (let ((a50900 '1))
      (let ((a50901 '2))
        (let ((a50902 (modulo x a50901))) (equal? a50900 a50902)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a50903 (null? lst)))
      (if a50903
        (let ((x50904 '#f)) x50904)
        (let ((a50905 (car lst)))
          (let ((a50906 (equal? a50905 x)))
            (if a50906
              (let ((x50907 '#t)) x50907)
              (let ((a50908 (cdr lst))) (member? x a50908))))))))
  (define (foldl fun acc lst)
    (let ((a50909 (null? lst)))
      (if a50909
        acc
        (let ((a50910 (car lst)))
          (let ((a50911 (fun a50910 acc)))
            (let ((a50912 (cdr lst))) (foldl fun a50911 a50912)))))))
  (define (reverse-helper lst lst2)
    (let ((a50913 (null? lst)))
      (if a50913
        lst2
        (let ((a50914 (cdr lst)))
          (let ((a50915 (car lst)))
            (let ((a50916 (cons a50915 lst2)))
              (reverse-helper a50914 a50916)))))))
  (define (reverse lst) (let ((a50917 (list))) (reverse-helper lst a50917)))
  (define (take-helper lst n lst2)
    (let ((a50918 '0))
      (let ((a50919 (= n a50918)))
        (if a50919
          (let ((x50920 (reverse lst2))) x50920)
          (let ((a50921 (cdr lst)))
            (let ((a50922 '1))
              (let ((a50923 (- n a50922)))
                (let ((a50924 (car lst)))
                  (let ((a50925 (cons a50924 lst2)))
                    (take-helper a50921 a50923 a50925))))))))))
  (define (take lst n) (let ((a50926 (list))) (take-helper lst n a50926)))
  (define (length lst)
    (let ((a50927 (null? lst)))
      (if a50927
        (let ((x50928 '0)) x50928)
        (let ((a50929 '1))
          (let ((a50930 (cdr lst)))
            (let ((a50931 (length a50930))) (+ a50929 a50931)))))))
  (define (map proc lst)
    (let ((a50932 (null? lst)))
      (if a50932
        (let ((x50933 (list))) x50933)
        (let ((a50934 (car lst)))
          (let ((a50935 (proc a50934)))
            (let ((a50936 (cdr lst)))
              (let ((a50937 (map proc a50936))) (cons a50935 a50937))))))))
  (define (filter op lst)
    (let ((a50938 (null? lst)))
      (if a50938
        (let ((x50939 (list))) x50939)
        (let ((a50940 (car lst)))
          (let ((a50941 (op a50940)))
            (if a50941
              (let ((a50942 (car lst)))
                (let ((a50943 (cdr lst)))
                  (let ((a50944 (filter op a50943))) (cons a50942 a50944))))
              (let ((a50945 (cdr lst))) (filter op a50945))))))))
  (define (drop lst n)
    (let ((a50946 '0))
      (let ((a50947 (= n a50946)))
        (if a50947
          lst
          (let ((a50948 (cdr lst)))
            (let ((a50949 '1))
              (let ((a50950 (- n a50949))) (drop a50948 a50950))))))))
  (define (foldr proc acc lst)
    (let ((a50951 (null? lst)))
      (if a50951
        acc
        (let ((a50952 (car lst)))
          (let ((a50953 (cdr lst)))
            (let ((a50954 (foldr proc acc a50953))) (proc a50952 a50954)))))))
  (define (append lst1 lst2)
    (let ((a50955 (null? lst1)))
      (if a50955
        lst2
        (let ((a50956 (car lst1)))
          (let ((a50957 (cdr lst1)))
            (let ((a50958 (append a50957 lst2))) (cons a50956 a50958)))))))
  (define (hash . lst) (let ((x50959 (apply-prim hash lst))) x50959))
  (define (hash-ref h k) (let ((x50960 (prim hash-ref h k))) x50960))
  (define (hash-set h k v) (let ((x50961 (prim hash-set h k v))) x50961))
  (define (hash-has-key? h k) (let ((x50962 (prim hash-has-key? h k))) x50962))
  (define (hash-count h) (let ((x50963 (prim hash-count h))) x50963))
  (define (call) (let ((a50964 '1)) (null? a50964)))
  (define (brouhaha_main) (let ((x50965 (call))) x50965)))
