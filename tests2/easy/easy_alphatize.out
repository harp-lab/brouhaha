'((define (+ . lst) (let ((x10348 (apply-prim + lst))) x10348))
  (define (- . lst) (let ((x10349 (apply-prim - lst))) x10349))
  (define (* . lst) (let ((x10350 (apply-prim * lst))) x10350))
  (define (modulo a b) (let ((x10351 (prim modulo a b))) x10351))
  (define (/ . lst) (let ((x10352 (apply-prim / lst))) x10352))
  (define (= . lst) (let ((x10353 (apply-prim = lst))) x10353))
  (define (> . lst) (let ((x10354 (apply-prim > lst))) x10354))
  (define (< . lst) (let ((x10355 (apply-prim < lst))) x10355))
  (define (<= . lst) (let ((x10356 (apply-prim <= lst))) x10356))
  (define (>= . lst) (let ((x10357 (apply-prim >= lst))) x10357))
  (define (null? x) (let ((x10358 (prim null? x))) x10358))
  (define (equal? x y) (let ((x10359 (prim equal? x y))) x10359))
  (define (eq? x y) (let ((x10360 (prim eq? x y))) x10360))
  (define (cons a b) (let ((x10361 (prim cons a b))) x10361))
  (define (car lst) (let ((x10362 (prim car lst))) x10362))
  (define (cdr lst) (let ((x10363 (prim cdr lst))) x10363))
  (define (even? x)
    (let ((a10364 '0))
      (let ((a10365 '2))
        (let ((a10366 (modulo x a10365))) (equal? a10364 a10366)))))
  (define (odd? x)
    (let ((a10367 '1))
      (let ((a10368 '2))
        (let ((a10369 (modulo x a10368))) (equal? a10367 a10369)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a10370 (null? lst)))
      (if a10370
        (let ((x10371 '#f)) x10371)
        (let ((a10372 (car lst)))
          (let ((a10373 (equal? a10372 x)))
            (if a10373
              (let ((x10374 '#t)) x10374)
              (let ((a10375 (cdr lst))) (member? x a10375))))))))
  (define (foldl fun acc lst)
    (let ((a10376 (null? lst)))
      (if a10376
        acc
        (let ((a10377 (car lst)))
          (let ((a10378 (fun a10377 acc)))
            (let ((a10379 (cdr lst))) (foldl fun a10378 a10379)))))))
  (define (reverse-helper lst lst2)
    (let ((a10380 (null? lst)))
      (if a10380
        lst2
        (let ((a10381 (cdr lst)))
          (let ((a10382 (car lst)))
            (let ((a10383 (cons a10382 lst2)))
              (reverse-helper a10381 a10383)))))))
  (define (reverse lst) (let ((a10384 (list))) (reverse-helper lst a10384)))
  (define (take-helper lst n lst2)
    (let ((a10385 '0))
      (let ((a10386 (= n a10385)))
        (if a10386
          (let ((x10387 (reverse lst2))) x10387)
          (let ((a10388 (cdr lst)))
            (let ((a10389 '1))
              (let ((a10390 (- n a10389)))
                (let ((a10391 (car lst)))
                  (let ((a10392 (cons a10391 lst2)))
                    (take-helper a10388 a10390 a10392))))))))))
  (define (take lst n) (let ((a10393 (list))) (take-helper lst n a10393)))
  (define (length lst)
    (let ((a10394 (null? lst)))
      (if a10394
        (let ((x10395 '0)) x10395)
        (let ((a10396 '1))
          (let ((a10397 (cdr lst)))
            (let ((a10398 (length a10397))) (+ a10396 a10398)))))))
  (define (map proc lst)
    (let ((a10399 (null? lst)))
      (if a10399
        (let ((x10400 (list))) x10400)
        (let ((a10401 (car lst)))
          (let ((a10402 (proc a10401)))
            (let ((a10403 (cdr lst)))
              (let ((a10404 (map proc a10403))) (cons a10402 a10404))))))))
  (define (filter op lst)
    (let ((a10405 (null? lst)))
      (if a10405
        (let ((x10406 (list))) x10406)
        (let ((a10407 (car lst)))
          (let ((a10408 (op a10407)))
            (if a10408
              (let ((a10409 (car lst)))
                (let ((a10410 (cdr lst)))
                  (let ((a10411 (filter op a10410))) (cons a10409 a10411))))
              (let ((a10412 (cdr lst))) (filter op a10412))))))))
  (define (drop lst n)
    (let ((a10413 '0))
      (let ((a10414 (= n a10413)))
        (if a10414
          lst
          (let ((a10415 (cdr lst)))
            (let ((a10416 '1))
              (let ((a10417 (- n a10416))) (drop a10415 a10417))))))))
  (define (foldr proc acc lst)
    (let ((a10418 (null? lst)))
      (if a10418
        acc
        (let ((a10419 (car lst)))
          (let ((a10420 (cdr lst)))
            (let ((a10421 (foldr proc acc a10420))) (proc a10419 a10421)))))))
  (define (append lst1 lst2)
    (let ((a10422 (null? lst1)))
      (if a10422
        lst2
        (let ((a10423 (car lst1)))
          (let ((a10424 (cdr lst1)))
            (let ((a10425 (append a10424 lst2))) (cons a10423 a10425)))))))
  (define (hash . lst) (let ((x10426 (apply-prim hash lst))) x10426))
  (define (hash-ref h k) (let ((x10427 (prim hash-ref h k))) x10427))
  (define (hash-set h k v) (let ((x10428 (prim hash-set h k v))) x10428))
  (define (hash-has-key? h k) (let ((x10429 (prim hash-has-key? h k))) x10429))
  (define (hash-count h) (let ((x10430 (prim hash-count h))) x10430))
  (define (call)
    (let ((a10431 '10))
      (let ((a10432 '3))
        (let ((a10433 '4))
          (let ((a10434 '3))
            (let ((a10435 (+ a10433 a10434))) (+ a10431 a10432 a10435)))))))
  (define (brouhaha_main) (let ((x10436 (call))) x10436)))
