'((define (+ . lst) (let ((x10645 (apply-prim + lst))) x10645))
  (define (- . lst) (let ((x10646 (apply-prim - lst))) x10646))
  (define (* . lst) (let ((x10647 (apply-prim * lst))) x10647))
  (define (modulo a b) (let ((x10648 (prim modulo a b))) x10648))
  (define (/ . lst) (let ((x10649 (apply-prim / lst))) x10649))
  (define (= . lst) (let ((x10650 (apply-prim = lst))) x10650))
  (define (> . lst) (let ((x10651 (apply-prim > lst))) x10651))
  (define (< . lst) (let ((x10652 (apply-prim < lst))) x10652))
  (define (<= . lst) (let ((x10653 (apply-prim <= lst))) x10653))
  (define (>= . lst) (let ((x10654 (apply-prim >= lst))) x10654))
  (define (null? x) (let ((x10655 (prim null? x))) x10655))
  (define (equal? x y) (let ((x10656 (prim equal? x y))) x10656))
  (define (eq? x y) (let ((x10657 (prim eq? x y))) x10657))
  (define (cons a b) (let ((x10658 (prim cons a b))) x10658))
  (define (car lst) (let ((x10659 (prim car lst))) x10659))
  (define (cdr lst) (let ((x10660 (prim cdr lst))) x10660))
  (define (even? x)
    (let ((a10661 '0))
      (let ((a10662 '2))
        (let ((a10663 (modulo x a10662))) (equal? a10661 a10663)))))
  (define (odd? x)
    (let ((a10664 '1))
      (let ((a10665 '2))
        (let ((a10666 (modulo x a10665))) (equal? a10664 a10666)))))
  (define (list . x) x)
  (define (and . lst) (let ((x10667 (apply-prim and lst))) x10667))
  (define (or . lst) (let ((x10668 (apply-prim or lst))) x10668))
  (define (member? x lst)
    (let ((a10669 (null? lst)))
      (if a10669
        (let ((x10670 '#f)) x10670)
        (let ((a10671 (car lst)))
          (let ((a10672 (equal? a10671 x)))
            (if a10672
              (let ((x10673 '#t)) x10673)
              (let ((a10674 (cdr lst))) (member? x a10674))))))))
  (define (foldl fun acc lst)
    (let ((a10675 (null? lst)))
      (if a10675
        acc
        (let ((a10676 (car lst)))
          (let ((a10677 (fun a10676 acc)))
            (let ((a10678 (cdr lst))) (foldl fun a10677 a10678)))))))
  (define (reverse-helper lst lst2)
    (let ((a10679 (null? lst)))
      (if a10679
        lst2
        (let ((a10680 (cdr lst)))
          (let ((a10681 (car lst)))
            (let ((a10682 (cons a10681 lst2)))
              (reverse-helper a10680 a10682)))))))
  (define (reverse lst) (let ((a10683 (list))) (reverse-helper lst a10683)))
  (define (take-helper lst n lst2)
    (let ((a10684 '0))
      (let ((a10685 (= n a10684)))
        (if a10685
          (let ((x10686 (reverse lst2))) x10686)
          (let ((a10687 (cdr lst)))
            (let ((a10688 '1))
              (let ((a10689 (- n a10688)))
                (let ((a10690 (car lst)))
                  (let ((a10691 (cons a10690 lst2)))
                    (take-helper a10687 a10689 a10691))))))))))
  (define (take lst n) (let ((a10692 (list))) (take-helper lst n a10692)))
  (define (length lst)
    (let ((a10693 (null? lst)))
      (if a10693
        (let ((x10694 '0)) x10694)
        (let ((a10695 '1))
          (let ((a10696 (cdr lst)))
            (let ((a10697 (length a10696))) (+ a10695 a10697)))))))
  (define (map proc lst)
    (let ((a10698 (null? lst)))
      (if a10698
        (let ((x10699 (list))) x10699)
        (let ((a10700 (car lst)))
          (let ((a10701 (proc a10700)))
            (let ((a10702 (cdr lst)))
              (let ((a10703 (map proc a10702))) (cons a10701 a10703))))))))
  (define (filter op lst)
    (let ((a10704 (null? lst)))
      (if a10704
        (let ((x10705 (list))) x10705)
        (let ((a10706 (car lst)))
          (let ((a10707 (op a10706)))
            (if a10707
              (let ((a10708 (car lst)))
                (let ((a10709 (cdr lst)))
                  (let ((a10710 (filter op a10709))) (cons a10708 a10710))))
              (let ((a10711 (cdr lst))) (filter op a10711))))))))
  (define (drop lst n)
    (let ((a10712 '0))
      (let ((a10713 (= n a10712)))
        (if a10713
          lst
          (let ((a10714 (cdr lst)))
            (let ((a10715 '1))
              (let ((a10716 (- n a10715))) (drop a10714 a10716))))))))
  (define (foldr proc acc lst)
    (let ((a10717 (null? lst)))
      (if a10717
        acc
        (let ((a10718 (car lst)))
          (let ((a10719 (cdr lst)))
            (let ((a10720 (foldr proc acc a10719))) (proc a10718 a10720)))))))
  (define (append lst1 lst2)
    (let ((a10721 (null? lst1)))
      (if a10721
        lst2
        (let ((a10722 (car lst1)))
          (let ((a10723 (cdr lst1)))
            (let ((a10724 (append a10723 lst2))) (cons a10722 a10724)))))))
  (define (hash . lst) (let ((x10725 (apply-prim hash lst))) x10725))
  (define (hash-ref h k) (let ((x10726 (prim hash-ref h k))) x10726))
  (define (hash-set h k v) (let ((x10727 (prim hash-set h k v))) x10727))
  (define (hash-has-key? h k) (let ((x10728 (prim hash-has-key? h k))) x10728))
  (define (hash-count h) (let ((x10729 (prim hash-count h))) x10729))
  (define (call)
    (let ((a10730 '10))
      (let ((a10731 '2))
        (let ((a10732 '3))
          (let ((a10733 '4))
            (let ((a10734 '5))
              (let ((a10735 '6))
                (+ a10730 a10731 a10732 a10733 a10734 a10735))))))))
  (define (brouhaha_main) (let ((x10736 (call))) x10736)))
