'((define (+ . lst) (let ((x10604 (apply-prim + lst))) x10604))
  (define (- . lst) (let ((x10605 (apply-prim - lst))) x10605))
  (define (* . lst) (let ((x10606 (apply-prim * lst))) x10606))
  (define (modulo a b) (let ((x10607 (prim modulo a b))) x10607))
  (define (/ . lst) (let ((x10608 (apply-prim / lst))) x10608))
  (define (= . lst) (let ((x10609 (apply-prim = lst))) x10609))
  (define (> . lst) (let ((x10610 (apply-prim > lst))) x10610))
  (define (< . lst) (let ((x10611 (apply-prim < lst))) x10611))
  (define (<= . lst) (let ((x10612 (apply-prim <= lst))) x10612))
  (define (>= . lst) (let ((x10613 (apply-prim >= lst))) x10613))
  (define (null? x) (let ((x10614 (prim null? x))) x10614))
  (define (equal? x y) (let ((x10615 (prim equal? x y))) x10615))
  (define (eq? x y) (let ((x10616 (prim eq? x y))) x10616))
  (define (cons a b) (let ((x10617 (prim cons a b))) x10617))
  (define (car lst) (let ((x10618 (prim car lst))) x10618))
  (define (cdr lst) (let ((x10619 (prim cdr lst))) x10619))
  (define (even? x)
    (let ((a10620 '0))
      (let ((a10621 '2))
        (let ((a10622 (modulo x a10621))) (equal? a10620 a10622)))))
  (define (odd? x)
    (let ((a10623 '1))
      (let ((a10624 '2))
        (let ((a10625 (modulo x a10624))) (equal? a10623 a10625)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a10626 (null? lst)))
      (if a10626
        (let ((x10627 '#f)) x10627)
        (let ((a10628 (car lst)))
          (let ((a10629 (equal? a10628 x)))
            (if a10629
              (let ((x10630 '#t)) x10630)
              (let ((a10631 (cdr lst))) (member? x a10631))))))))
  (define (foldl fun acc lst)
    (let ((a10632 (null? lst)))
      (if a10632
        acc
        (let ((a10633 (car lst)))
          (let ((a10634 (fun a10633 acc)))
            (let ((a10635 (cdr lst))) (foldl fun a10634 a10635)))))))
  (define (reverse-helper lst lst2)
    (let ((a10636 (null? lst)))
      (if a10636
        lst2
        (let ((a10637 (cdr lst)))
          (let ((a10638 (car lst)))
            (let ((a10639 (cons a10638 lst2)))
              (reverse-helper a10637 a10639)))))))
  (define (reverse lst) (let ((a10640 (list))) (reverse-helper lst a10640)))
  (define (take-helper lst n lst2)
    (let ((a10641 '0))
      (let ((a10642 (= n a10641)))
        (if a10642
          (let ((x10643 (reverse lst2))) x10643)
          (let ((a10644 (cdr lst)))
            (let ((a10645 '1))
              (let ((a10646 (- n a10645)))
                (let ((a10647 (car lst)))
                  (let ((a10648 (cons a10647 lst2)))
                    (take-helper a10644 a10646 a10648))))))))))
  (define (take lst n) (let ((a10649 (list))) (take-helper lst n a10649)))
  (define (length lst)
    (let ((a10650 (null? lst)))
      (if a10650
        (let ((x10651 '0)) x10651)
        (let ((a10652 '1))
          (let ((a10653 (cdr lst)))
            (let ((a10654 (length a10653))) (+ a10652 a10654)))))))
  (define (map proc lst)
    (let ((a10655 (null? lst)))
      (if a10655
        (let ((x10656 (list))) x10656)
        (let ((a10657 (car lst)))
          (let ((a10658 (proc a10657)))
            (let ((a10659 (cdr lst)))
              (let ((a10660 (map proc a10659))) (cons a10658 a10660))))))))
  (define (filter op lst)
    (let ((a10661 (null? lst)))
      (if a10661
        (let ((x10662 (list))) x10662)
        (let ((a10663 (car lst)))
          (let ((a10664 (op a10663)))
            (if a10664
              (let ((a10665 (car lst)))
                (let ((a10666 (cdr lst)))
                  (let ((a10667 (filter op a10666))) (cons a10665 a10667))))
              (let ((a10668 (cdr lst))) (filter op a10668))))))))
  (define (drop lst n)
    (let ((a10669 '0))
      (let ((a10670 (= n a10669)))
        (if a10670
          lst
          (let ((a10671 (cdr lst)))
            (let ((a10672 '1))
              (let ((a10673 (- n a10672))) (drop a10671 a10673))))))))
  (define (foldr proc acc lst)
    (let ((a10674 (null? lst)))
      (if a10674
        acc
        (let ((a10675 (car lst)))
          (let ((a10676 (cdr lst)))
            (let ((a10677 (foldr proc acc a10676))) (proc a10675 a10677)))))))
  (define (append lst1 lst2)
    (let ((a10678 (null? lst1)))
      (if a10678
        lst2
        (let ((a10679 (car lst1)))
          (let ((a10680 (cdr lst1)))
            (let ((a10681 (append a10680 lst2))) (cons a10679 a10681)))))))
  (define (hash . lst) (let ((x10682 (apply-prim hash lst))) x10682))
  (define (hash-ref h k) (let ((x10683 (prim hash-ref h k))) x10683))
  (define (hash-set h k v) (let ((x10684 (prim hash-set h k v))) x10684))
  (define (hash-has-key? h k) (let ((x10685 (prim hash-has-key? h k))) x10685))
  (define (hash-count h) (let ((x10686 (prim hash-count h))) x10686))
  (define (call)
    (let ((a10687 '10))
      (let ((a10688 '3))
        (let ((a10689 '4))
          (let ((a10690 '3))
            (let ((a10691 (+ a10689 a10690))) (+ a10687 a10688 a10691)))))))
  (define (brouhaha_main) (let ((x10692 (call))) x10692)))
