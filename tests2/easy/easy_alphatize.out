'((define (+ . lst) (let ((x10600 (apply-prim + lst))) x10600))
  (define (- . lst) (let ((x10601 (apply-prim - lst))) x10601))
  (define (* . lst) (let ((x10602 (apply-prim * lst))) x10602))
  (define (modulo a b) (let ((x10603 (prim modulo a b))) x10603))
  (define (/ . lst) (let ((x10604 (apply-prim / lst))) x10604))
  (define (= . lst) (let ((x10605 (apply-prim = lst))) x10605))
  (define (> . lst) (let ((x10606 (apply-prim > lst))) x10606))
  (define (< . lst) (let ((x10607 (apply-prim < lst))) x10607))
  (define (<= . lst) (let ((x10608 (apply-prim <= lst))) x10608))
  (define (>= . lst) (let ((x10609 (apply-prim >= lst))) x10609))
  (define (null? x) (let ((x10610 (prim null? x))) x10610))
  (define (equal? x y) (let ((x10611 (prim equal? x y))) x10611))
  (define (eq? x y) (let ((x10612 (prim eq? x y))) x10612))
  (define (cons a b) (let ((x10613 (prim cons a b))) x10613))
  (define (car lst) (let ((x10614 (prim car lst))) x10614))
  (define (cdr lst) (let ((x10615 (prim cdr lst))) x10615))
  (define (even? x)
    (let ((a10616 '0))
      (let ((a10617 '2))
        (let ((a10618 (modulo x a10617))) (equal? a10616 a10618)))))
  (define (odd? x)
    (let ((a10619 '1))
      (let ((a10620 '2))
        (let ((a10621 (modulo x a10620))) (equal? a10619 a10621)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a10622 (null? lst)))
      (if a10622
        (let ((x10623 '#f)) x10623)
        (let ((a10624 (car lst)))
          (let ((a10625 (equal? a10624 x)))
            (if a10625
              (let ((x10626 '#t)) x10626)
              (let ((a10627 (cdr lst))) (member? x a10627))))))))
  (define (foldl fun acc lst)
    (let ((a10628 (null? lst)))
      (if a10628
        acc
        (let ((a10629 (car lst)))
          (let ((a10630 (fun a10629 acc)))
            (let ((a10631 (cdr lst))) (foldl fun a10630 a10631)))))))
  (define (reverse-helper lst lst2)
    (let ((a10632 (null? lst)))
      (if a10632
        lst2
        (let ((a10633 (cdr lst)))
          (let ((a10634 (car lst)))
            (let ((a10635 (cons a10634 lst2)))
              (reverse-helper a10633 a10635)))))))
  (define (reverse lst) (let ((a10636 (list))) (reverse-helper lst a10636)))
  (define (take-helper lst n lst2)
    (let ((a10637 '0))
      (let ((a10638 (= n a10637)))
        (if a10638
          (let ((x10639 (reverse lst2))) x10639)
          (let ((a10640 (cdr lst)))
            (let ((a10641 '1))
              (let ((a10642 (- n a10641)))
                (let ((a10643 (car lst)))
                  (let ((a10644 (cons a10643 lst2)))
                    (take-helper a10640 a10642 a10644))))))))))
  (define (take lst n) (let ((a10645 (list))) (take-helper lst n a10645)))
  (define (length lst)
    (let ((a10646 (null? lst)))
      (if a10646
        (let ((x10647 '0)) x10647)
        (let ((a10648 '1))
          (let ((a10649 (cdr lst)))
            (let ((a10650 (length a10649))) (+ a10648 a10650)))))))
  (define (map proc lst)
    (let ((a10651 (null? lst)))
      (if a10651
        (let ((x10652 (list))) x10652)
        (let ((a10653 (car lst)))
          (let ((a10654 (proc a10653)))
            (let ((a10655 (cdr lst)))
              (let ((a10656 (map proc a10655))) (cons a10654 a10656))))))))
  (define (filter op lst)
    (let ((a10657 (null? lst)))
      (if a10657
        (let ((x10658 (list))) x10658)
        (let ((a10659 (car lst)))
          (let ((a10660 (op a10659)))
            (if a10660
              (let ((a10661 (car lst)))
                (let ((a10662 (cdr lst)))
                  (let ((a10663 (filter op a10662))) (cons a10661 a10663))))
              (let ((a10664 (cdr lst))) (filter op a10664))))))))
  (define (drop lst n)
    (let ((a10665 '0))
      (let ((a10666 (= n a10665)))
        (if a10666
          lst
          (let ((a10667 (cdr lst)))
            (let ((a10668 '1))
              (let ((a10669 (- n a10668))) (drop a10667 a10669))))))))
  (define (foldr proc acc lst)
    (let ((a10670 (null? lst)))
      (if a10670
        acc
        (let ((a10671 (car lst)))
          (let ((a10672 (cdr lst)))
            (let ((a10673 (foldr proc acc a10672))) (proc a10671 a10673)))))))
  (define (append lst1 lst2)
    (let ((a10674 (null? lst1)))
      (if a10674
        lst2
        (let ((a10675 (car lst1)))
          (let ((a10676 (cdr lst1)))
            (let ((a10677 (append a10676 lst2))) (cons a10675 a10677)))))))
  (define (hash . lst) (let ((x10678 (apply-prim hash lst))) x10678))
  (define (hash-ref h k) (let ((x10679 (prim hash-ref h k))) x10679))
  (define (hash-set h k v) (let ((x10680 (prim hash-set h k v))) x10680))
  (define (hash-has-key? h k) (let ((x10681 (prim hash-has-key? h k))) x10681))
  (define (hash-count h) (let ((x10682 (prim hash-count h))) x10682))
  (define (call)
    (let ((a10683 '10))
      (let ((a10684 '3))
        (let ((a10685 '4))
          (let ((a10686 '3))
            (let ((a10687 (+ a10685 a10686))) (+ a10683 a10684 a10687)))))))
  (define (brouhaha_main) (let ((x10688 (call))) x10688)))
