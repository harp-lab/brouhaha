'((define (+ . lst)
    (let ((kont1043710538 (prim car lst)))
      (let ((lst10539 (prim cdr lst)))
        (let ((x1034810540 (apply-prim + lst10539)))
          (kont1043710538 x1034810540)))))
  (define (- . lst)
    (let ((kont1043910541 (prim car lst)))
      (let ((lst10542 (prim cdr lst)))
        (let ((x1034910543 (apply-prim - lst10542)))
          (kont1043910541 x1034910543)))))
  (define (* . lst)
    (let ((kont1044110544 (prim car lst)))
      (let ((lst10545 (prim cdr lst)))
        (let ((x1035010546 (apply-prim * lst10545)))
          (kont1044110544 x1035010546)))))
  (define (modulo kont10443 a b)
    (let ((x1035110547 (prim modulo a b))) (kont10443 x1035110547)))
  (define (/ . lst)
    (let ((kont1044410548 (prim car lst)))
      (let ((lst10549 (prim cdr lst)))
        (let ((x1035210550 (apply-prim / lst10549)))
          (kont1044410548 x1035210550)))))
  (define (= . lst)
    (let ((kont1044610551 (prim car lst)))
      (let ((lst10552 (prim cdr lst)))
        (let ((x1035310553 (apply-prim = lst10552)))
          (kont1044610551 x1035310553)))))
  (define (> . lst)
    (let ((kont1044810554 (prim car lst)))
      (let ((lst10555 (prim cdr lst)))
        (let ((x1035410556 (apply-prim > lst10555)))
          (kont1044810554 x1035410556)))))
  (define (< . lst)
    (let ((kont1045010557 (prim car lst)))
      (let ((lst10558 (prim cdr lst)))
        (let ((x1035510559 (apply-prim < lst10558)))
          (kont1045010557 x1035510559)))))
  (define (<= . lst)
    (let ((kont1045210560 (prim car lst)))
      (let ((lst10561 (prim cdr lst)))
        (let ((x1035610562 (apply-prim <= lst10561)))
          (kont1045210560 x1035610562)))))
  (define (>= . lst)
    (let ((kont1045410563 (prim car lst)))
      (let ((lst10564 (prim cdr lst)))
        (let ((x1035710565 (apply-prim >= lst10564)))
          (kont1045410563 x1035710565)))))
  (define (null? kont10456 x)
    (let ((x1035810566 (prim null? x))) (kont10456 x1035810566)))
  (define (equal? kont10457 x y)
    (let ((x1035910567 (prim equal? x y))) (kont10457 x1035910567)))
  (define (eq? kont10458 x y)
    (let ((x1036010568 (prim eq? x y))) (kont10458 x1036010568)))
  (define (cons kont10459 a b)
    (let ((x1036110569 (prim cons a b))) (kont10459 x1036110569)))
  (define (car kont10460 lst)
    (let ((x1036210570 (prim car lst))) (kont10460 x1036210570)))
  (define (cdr kont10461 lst)
    (let ((x1036310571 (prim cdr lst))) (kont10461 x1036310571)))
  (define (even? kont10462 x)
    (let ((a1036410572 '0))
      (let ((a1036510573 '2))
        (let ((f1046310574
               (lambda (a1036610575)
                 (equal? kont10462 a1036410572 a1036610575))))
          (modulo f1046310574 x a1036510573)))))
  (define (odd? kont10464 x)
    (let ((a1036710576 '1))
      (let ((a1036810577 '2))
        (let ((f1046510578
               (lambda (a1036910579)
                 (equal? kont10464 a1036710576 a1036910579))))
          (modulo f1046510578 x a1036810577)))))
  (define (list . x)
    (let ((kont1046610580 (prim car x)))
      (let ((x10581 (prim cdr x))) (kont1046610580 x10581))))
  (define (member? kont10468 x lst)
    (let ((f1047210582
           (lambda (a1037010583)
             (if a1037010583
               (let ((x1037110584 '#f)) (kont10468 x1037110584))
               (let ((f1047110585
                      (lambda (a1037210586)
                        (let ((f1047010587
                               (lambda (a1037310588)
                                 (if a1037310588
                                   (let ((x1037410589 '#t))
                                     (kont10468 x1037410589))
                                   (let ((f1046910590
                                          (lambda (a1037510591)
                                            (member?
                                             kont10468
                                             x
                                             a1037510591))))
                                     (cdr f1046910590 lst))))))
                          (equal? f1047010587 a1037210586 x)))))
                 (car f1047110585 lst))))))
      (null? f1047210582 lst)))
  (define (foldl kont10473 fun acc lst)
    (let ((f1047710592
           (lambda (a1037610593)
             (if a1037610593
               (kont10473 acc)
               (let ((f1047610594
                      (lambda (a1037710595)
                        (let ((f1047510596
                               (lambda (a1037810597)
                                 (let ((f1047410598
                                        (lambda (a1037910599)
                                          (foldl
                                           kont10473
                                           fun
                                           a1037810597
                                           a1037910599))))
                                   (cdr f1047410598 lst)))))
                          (fun f1047510596 a1037710595 acc)))))
                 (car f1047610594 lst))))))
      (null? f1047710592 lst)))
  (define (reverse-helper kont10478 lst lst2)
    (let ((f1048210600
           (lambda (a1038010601)
             (if a1038010601
               (kont10478 lst2)
               (let ((f1048110602
                      (lambda (a1038110603)
                        (let ((f1048010604
                               (lambda (a1038210605)
                                 (let ((f1047910606
                                        (lambda (a1038310607)
                                          (reverse-helper
                                           kont10478
                                           a1038110603
                                           a1038310607))))
                                   (cons f1047910606 a1038210605 lst2)))))
                          (car f1048010604 lst)))))
                 (cdr f1048110602 lst))))))
      (null? f1048210600 lst)))
  (define (reverse kont10483 lst)
    (let ((f1048410608
           (lambda (a1038410609) (reverse-helper kont10483 lst a1038410609))))
      (list f1048410608)))
  (define (take-helper kont10485 lst n lst2)
    (let ((a1038510610 '0))
      (let ((f1049110611
             (lambda (a1038610612)
               (if a1038610612
                 (let ((f1048610613
                        (lambda (x1038710614) (kont10485 x1038710614))))
                   (reverse f1048610613 lst2))
                 (let ((f1049010615
                        (lambda (a1038810616)
                          (let ((a1038910617 '1))
                            (let ((f1048910618
                                   (lambda (a1039010619)
                                     (let ((f1048810620
                                            (lambda (a1039110621)
                                              (let ((f1048710622
                                                     (lambda (a1039210623)
                                                       (take-helper
                                                        kont10485
                                                        a1038810616
                                                        a1039010619
                                                        a1039210623))))
                                                (cons
                                                 f1048710622
                                                 a1039110621
                                                 lst2)))))
                                       (car f1048810620 lst)))))
                              (- f1048910618 n a1038910617))))))
                   (cdr f1049010615 lst))))))
        (= f1049110611 n a1038510610))))
  (define (take kont10492 lst n)
    (let ((f1049310624
           (lambda (a1039310625) (take-helper kont10492 lst n a1039310625))))
      (list f1049310624)))
  (define (length kont10494 lst)
    (let ((f1049710626
           (lambda (a1039410627)
             (if a1039410627
               (let ((x1039510628 '0)) (kont10494 x1039510628))
               (let ((a1039610629 '1))
                 (let ((f1049610630
                        (lambda (a1039710631)
                          (let ((f1049510632
                                 (lambda (a1039810633)
                                   (+ kont10494 a1039610629 a1039810633))))
                            (length f1049510632 a1039710631)))))
                   (cdr f1049610630 lst)))))))
      (null? f1049710626 lst)))
  (define (map kont10498 proc lst)
    (let ((f1050410634
           (lambda (a1039910635)
             (if a1039910635
               (let ((f1049910636
                      (lambda (x1040010637) (kont10498 x1040010637))))
                 (list f1049910636))
               (let ((f1050310638
                      (lambda (a1040110639)
                        (let ((f1050210640
                               (lambda (a1040210641)
                                 (let ((f1050110642
                                        (lambda (a1040310643)
                                          (let ((f1050010644
                                                 (lambda (a1040410645)
                                                   (cons
                                                    kont10498
                                                    a1040210641
                                                    a1040410645))))
                                            (map
                                             f1050010644
                                             proc
                                             a1040310643)))))
                                   (cdr f1050110642 lst)))))
                          (proc f1050210640 a1040110639)))))
                 (car f1050310638 lst))))))
      (null? f1050410634 lst)))
  (define (filter kont10505 op lst)
    (let ((f1051310646
           (lambda (a1040510647)
             (if a1040510647
               (let ((f1050610648
                      (lambda (x1040610649) (kont10505 x1040610649))))
                 (list f1050610648))
               (let ((f1051210650
                      (lambda (a1040710651)
                        (let ((f1051110652
                               (lambda (a1040810653)
                                 (if a1040810653
                                   (let ((f1050910654
                                          (lambda (a1040910655)
                                            (let ((f1050810656
                                                   (lambda (a1041010657)
                                                     (let ((f1050710658
                                                            (lambda (a1041110659)
                                                              (cons
                                                               kont10505
                                                               a1040910655
                                                               a1041110659))))
                                                       (filter
                                                        f1050710658
                                                        op
                                                        a1041010657)))))
                                              (cdr f1050810656 lst)))))
                                     (car f1050910654 lst))
                                   (let ((f1051010660
                                          (lambda (a1041210661)
                                            (filter
                                             kont10505
                                             op
                                             a1041210661))))
                                     (cdr f1051010660 lst))))))
                          (op f1051110652 a1040710651)))))
                 (car f1051210650 lst))))))
      (null? f1051310646 lst)))
  (define (drop kont10514 lst n)
    (let ((a1041310662 '0))
      (let ((f1051710663
             (lambda (a1041410664)
               (if a1041410664
                 (kont10514 lst)
                 (let ((f1051610665
                        (lambda (a1041510666)
                          (let ((a1041610667 '1))
                            (let ((f1051510668
                                   (lambda (a1041710669)
                                     (drop
                                      kont10514
                                      a1041510666
                                      a1041710669))))
                              (- f1051510668 n a1041610667))))))
                   (cdr f1051610665 lst))))))
        (= f1051710663 n a1041310662))))
  (define (foldr kont10518 proc acc lst)
    (let ((f1052210670
           (lambda (a1041810671)
             (if a1041810671
               (kont10518 acc)
               (let ((f1052110672
                      (lambda (a1041910673)
                        (let ((f1052010674
                               (lambda (a1042010675)
                                 (let ((f1051910676
                                        (lambda (a1042110677)
                                          (proc
                                           kont10518
                                           a1041910673
                                           a1042110677))))
                                   (foldr f1051910676 proc acc a1042010675)))))
                          (cdr f1052010674 lst)))))
                 (car f1052110672 lst))))))
      (null? f1052210670 lst)))
  (define (append kont10523 lst1 lst2)
    (let ((f1052710678
           (lambda (a1042210679)
             (if a1042210679
               (kont10523 lst2)
               (let ((f1052610680
                      (lambda (a1042310681)
                        (let ((f1052510682
                               (lambda (a1042410683)
                                 (let ((f1052410684
                                        (lambda (a1042510685)
                                          (cons
                                           kont10523
                                           a1042310681
                                           a1042510685))))
                                   (append f1052410684 a1042410683 lst2)))))
                          (cdr f1052510682 lst1)))))
                 (car f1052610680 lst1))))))
      (null? f1052710678 lst1)))
  (define (hash . lst)
    (let ((kont1052810686 (prim car lst)))
      (let ((lst10687 (prim cdr lst)))
        (let ((x1042610688 (apply-prim hash lst10687)))
          (kont1052810686 x1042610688)))))
  (define (hash-ref kont10530 h k)
    (let ((x1042710689 (prim hash-ref h k))) (kont10530 x1042710689)))
  (define (hash-set kont10531 h k v)
    (let ((x1042810690 (prim hash-set h k v))) (kont10531 x1042810690)))
  (define (hash-has-key? kont10532 h k)
    (let ((x1042910691 (prim hash-has-key? h k))) (kont10532 x1042910691)))
  (define (hash-count kont10533 h)
    (let ((x1043010692 (prim hash-count h))) (kont10533 x1043010692)))
  (define (call kont10534)
    (let ((a1043110693 '10))
      (let ((a1043210694 '3))
        (let ((a1043310695 '4))
          (let ((a1043410696 '3))
            (let ((f1053510697
                   (lambda (a1043510698)
                     (+ kont10534 a1043110693 a1043210694 a1043510698))))
              (+ f1053510697 a1043310695 a1043410696)))))))
  (define (brouhaha_main kont10536)
    (let ((f1053710699 (lambda (x1043610700) (kont10536 x1043610700))))
      (call f1053710699))))
