'((define (+ . lst)
    (let ((kont1068910790 (prim car lst)))
      (let ((lst10791 (prim cdr lst)))
        (let ((x1060010792 (apply-prim + lst10791)))
          (kont1068910790 x1060010792)))))
  (define (- . lst)
    (let ((kont1069110793 (prim car lst)))
      (let ((lst10794 (prim cdr lst)))
        (let ((x1060110795 (apply-prim - lst10794)))
          (kont1069110793 x1060110795)))))
  (define (* . lst)
    (let ((kont1069310796 (prim car lst)))
      (let ((lst10797 (prim cdr lst)))
        (let ((x1060210798 (apply-prim * lst10797)))
          (kont1069310796 x1060210798)))))
  (define (modulo kont10695 a b)
    (let ((x1060310799 (prim modulo a b))) (kont10695 x1060310799)))
  (define (/ . lst)
    (let ((kont1069610800 (prim car lst)))
      (let ((lst10801 (prim cdr lst)))
        (let ((x1060410802 (apply-prim / lst10801)))
          (kont1069610800 x1060410802)))))
  (define (= . lst)
    (let ((kont1069810803 (prim car lst)))
      (let ((lst10804 (prim cdr lst)))
        (let ((x1060510805 (apply-prim = lst10804)))
          (kont1069810803 x1060510805)))))
  (define (> . lst)
    (let ((kont1070010806 (prim car lst)))
      (let ((lst10807 (prim cdr lst)))
        (let ((x1060610808 (apply-prim > lst10807)))
          (kont1070010806 x1060610808)))))
  (define (< . lst)
    (let ((kont1070210809 (prim car lst)))
      (let ((lst10810 (prim cdr lst)))
        (let ((x1060710811 (apply-prim < lst10810)))
          (kont1070210809 x1060710811)))))
  (define (<= . lst)
    (let ((kont1070410812 (prim car lst)))
      (let ((lst10813 (prim cdr lst)))
        (let ((x1060810814 (apply-prim <= lst10813)))
          (kont1070410812 x1060810814)))))
  (define (>= . lst)
    (let ((kont1070610815 (prim car lst)))
      (let ((lst10816 (prim cdr lst)))
        (let ((x1060910817 (apply-prim >= lst10816)))
          (kont1070610815 x1060910817)))))
  (define (null? kont10708 x)
    (let ((x1061010818 (prim null? x))) (kont10708 x1061010818)))
  (define (equal? kont10709 x y)
    (let ((x1061110819 (prim equal? x y))) (kont10709 x1061110819)))
  (define (eq? kont10710 x y)
    (let ((x1061210820 (prim eq? x y))) (kont10710 x1061210820)))
  (define (cons kont10711 a b)
    (let ((x1061310821 (prim cons a b))) (kont10711 x1061310821)))
  (define (car kont10712 lst)
    (let ((x1061410822 (prim car lst))) (kont10712 x1061410822)))
  (define (cdr kont10713 lst)
    (let ((x1061510823 (prim cdr lst))) (kont10713 x1061510823)))
  (define (even? kont10714 x)
    (let ((a1061610824 '0))
      (let ((a1061710825 '2))
        (let ((f1071510826
               (lambda (a1061810827)
                 (equal? kont10714 a1061610824 a1061810827))))
          (modulo f1071510826 x a1061710825)))))
  (define (odd? kont10716 x)
    (let ((a1061910828 '1))
      (let ((a1062010829 '2))
        (let ((f1071710830
               (lambda (a1062110831)
                 (equal? kont10716 a1061910828 a1062110831))))
          (modulo f1071710830 x a1062010829)))))
  (define (list . x)
    (let ((kont1071810832 (prim car x)))
      (let ((x10833 (prim cdr x))) (kont1071810832 x10833))))
  (define (member? kont10720 x lst)
    (let ((f1072410834
           (lambda (a1062210835)
             (if a1062210835
               (let ((x1062310836 '#f)) (kont10720 x1062310836))
               (let ((f1072310837
                      (lambda (a1062410838)
                        (let ((f1072210839
                               (lambda (a1062510840)
                                 (if a1062510840
                                   (let ((x1062610841 '#t))
                                     (kont10720 x1062610841))
                                   (let ((f1072110842
                                          (lambda (a1062710843)
                                            (member?
                                             kont10720
                                             x
                                             a1062710843))))
                                     (cdr f1072110842 lst))))))
                          (equal? f1072210839 a1062410838 x)))))
                 (car f1072310837 lst))))))
      (null? f1072410834 lst)))
  (define (foldl kont10725 fun acc lst)
    (let ((f1072910844
           (lambda (a1062810845)
             (if a1062810845
               (kont10725 acc)
               (let ((f1072810846
                      (lambda (a1062910847)
                        (let ((f1072710848
                               (lambda (a1063010849)
                                 (let ((f1072610850
                                        (lambda (a1063110851)
                                          (foldl
                                           kont10725
                                           fun
                                           a1063010849
                                           a1063110851))))
                                   (cdr f1072610850 lst)))))
                          (fun f1072710848 a1062910847 acc)))))
                 (car f1072810846 lst))))))
      (null? f1072910844 lst)))
  (define (reverse-helper kont10730 lst lst2)
    (let ((f1073410852
           (lambda (a1063210853)
             (if a1063210853
               (kont10730 lst2)
               (let ((f1073310854
                      (lambda (a1063310855)
                        (let ((f1073210856
                               (lambda (a1063410857)
                                 (let ((f1073110858
                                        (lambda (a1063510859)
                                          (reverse-helper
                                           kont10730
                                           a1063310855
                                           a1063510859))))
                                   (cons f1073110858 a1063410857 lst2)))))
                          (car f1073210856 lst)))))
                 (cdr f1073310854 lst))))))
      (null? f1073410852 lst)))
  (define (reverse kont10735 lst)
    (let ((f1073610860
           (lambda (a1063610861) (reverse-helper kont10735 lst a1063610861))))
      (list f1073610860)))
  (define (take-helper kont10737 lst n lst2)
    (let ((a1063710862 '0))
      (let ((f1074310863
             (lambda (a1063810864)
               (if a1063810864
                 (let ((f1073810865
                        (lambda (x1063910866) (kont10737 x1063910866))))
                   (reverse f1073810865 lst2))
                 (let ((f1074210867
                        (lambda (a1064010868)
                          (let ((a1064110869 '1))
                            (let ((f1074110870
                                   (lambda (a1064210871)
                                     (let ((f1074010872
                                            (lambda (a1064310873)
                                              (let ((f1073910874
                                                     (lambda (a1064410875)
                                                       (take-helper
                                                        kont10737
                                                        a1064010868
                                                        a1064210871
                                                        a1064410875))))
                                                (cons
                                                 f1073910874
                                                 a1064310873
                                                 lst2)))))
                                       (car f1074010872 lst)))))
                              (- f1074110870 n a1064110869))))))
                   (cdr f1074210867 lst))))))
        (= f1074310863 n a1063710862))))
  (define (take kont10744 lst n)
    (let ((f1074510876
           (lambda (a1064510877) (take-helper kont10744 lst n a1064510877))))
      (list f1074510876)))
  (define (length kont10746 lst)
    (let ((f1074910878
           (lambda (a1064610879)
             (if a1064610879
               (let ((x1064710880 '0)) (kont10746 x1064710880))
               (let ((a1064810881 '1))
                 (let ((f1074810882
                        (lambda (a1064910883)
                          (let ((f1074710884
                                 (lambda (a1065010885)
                                   (+ kont10746 a1064810881 a1065010885))))
                            (length f1074710884 a1064910883)))))
                   (cdr f1074810882 lst)))))))
      (null? f1074910878 lst)))
  (define (map kont10750 proc lst)
    (let ((f1075610886
           (lambda (a1065110887)
             (if a1065110887
               (let ((f1075110888
                      (lambda (x1065210889) (kont10750 x1065210889))))
                 (list f1075110888))
               (let ((f1075510890
                      (lambda (a1065310891)
                        (let ((f1075410892
                               (lambda (a1065410893)
                                 (let ((f1075310894
                                        (lambda (a1065510895)
                                          (let ((f1075210896
                                                 (lambda (a1065610897)
                                                   (cons
                                                    kont10750
                                                    a1065410893
                                                    a1065610897))))
                                            (map
                                             f1075210896
                                             proc
                                             a1065510895)))))
                                   (cdr f1075310894 lst)))))
                          (proc f1075410892 a1065310891)))))
                 (car f1075510890 lst))))))
      (null? f1075610886 lst)))
  (define (filter kont10757 op lst)
    (let ((f1076510898
           (lambda (a1065710899)
             (if a1065710899
               (let ((f1075810900
                      (lambda (x1065810901) (kont10757 x1065810901))))
                 (list f1075810900))
               (let ((f1076410902
                      (lambda (a1065910903)
                        (let ((f1076310904
                               (lambda (a1066010905)
                                 (if a1066010905
                                   (let ((f1076110906
                                          (lambda (a1066110907)
                                            (let ((f1076010908
                                                   (lambda (a1066210909)
                                                     (let ((f1075910910
                                                            (lambda (a1066310911)
                                                              (cons
                                                               kont10757
                                                               a1066110907
                                                               a1066310911))))
                                                       (filter
                                                        f1075910910
                                                        op
                                                        a1066210909)))))
                                              (cdr f1076010908 lst)))))
                                     (car f1076110906 lst))
                                   (let ((f1076210912
                                          (lambda (a1066410913)
                                            (filter
                                             kont10757
                                             op
                                             a1066410913))))
                                     (cdr f1076210912 lst))))))
                          (op f1076310904 a1065910903)))))
                 (car f1076410902 lst))))))
      (null? f1076510898 lst)))
  (define (drop kont10766 lst n)
    (let ((a1066510914 '0))
      (let ((f1076910915
             (lambda (a1066610916)
               (if a1066610916
                 (kont10766 lst)
                 (let ((f1076810917
                        (lambda (a1066710918)
                          (let ((a1066810919 '1))
                            (let ((f1076710920
                                   (lambda (a1066910921)
                                     (drop
                                      kont10766
                                      a1066710918
                                      a1066910921))))
                              (- f1076710920 n a1066810919))))))
                   (cdr f1076810917 lst))))))
        (= f1076910915 n a1066510914))))
  (define (foldr kont10770 proc acc lst)
    (let ((f1077410922
           (lambda (a1067010923)
             (if a1067010923
               (kont10770 acc)
               (let ((f1077310924
                      (lambda (a1067110925)
                        (let ((f1077210926
                               (lambda (a1067210927)
                                 (let ((f1077110928
                                        (lambda (a1067310929)
                                          (proc
                                           kont10770
                                           a1067110925
                                           a1067310929))))
                                   (foldr f1077110928 proc acc a1067210927)))))
                          (cdr f1077210926 lst)))))
                 (car f1077310924 lst))))))
      (null? f1077410922 lst)))
  (define (append kont10775 lst1 lst2)
    (let ((f1077910930
           (lambda (a1067410931)
             (if a1067410931
               (kont10775 lst2)
               (let ((f1077810932
                      (lambda (a1067510933)
                        (let ((f1077710934
                               (lambda (a1067610935)
                                 (let ((f1077610936
                                        (lambda (a1067710937)
                                          (cons
                                           kont10775
                                           a1067510933
                                           a1067710937))))
                                   (append f1077610936 a1067610935 lst2)))))
                          (cdr f1077710934 lst1)))))
                 (car f1077810932 lst1))))))
      (null? f1077910930 lst1)))
  (define (hash . lst)
    (let ((kont1078010938 (prim car lst)))
      (let ((lst10939 (prim cdr lst)))
        (let ((x1067810940 (apply-prim hash lst10939)))
          (kont1078010938 x1067810940)))))
  (define (hash-ref kont10782 h k)
    (let ((x1067910941 (prim hash-ref h k))) (kont10782 x1067910941)))
  (define (hash-set kont10783 h k v)
    (let ((x1068010942 (prim hash-set h k v))) (kont10783 x1068010942)))
  (define (hash-has-key? kont10784 h k)
    (let ((x1068110943 (prim hash-has-key? h k))) (kont10784 x1068110943)))
  (define (hash-count kont10785 h)
    (let ((x1068210944 (prim hash-count h))) (kont10785 x1068210944)))
  (define (call kont10786)
    (let ((a1068310945 '10))
      (let ((a1068410946 '3))
        (let ((a1068510947 '4))
          (let ((a1068610948 '3))
            (let ((f1078710949
                   (lambda (a1068710950)
                     (+ kont10786 a1068310945 a1068410946 a1068710950))))
              (+ f1078710949 a1068510947 a1068610948)))))))
  (define (brouhaha_main kont10788)
    (let ((f1078910951 (lambda (x1068810952) (kont10788 x1068810952))))
      (call f1078910951))))
