'((define (+ . lst)
    (let ((kont1069310794 (prim car lst)))
      (let ((lst10795 (prim cdr lst)))
        (let ((x1060410796 (apply-prim + lst10795)))
          (kont1069310794 x1060410796)))))
  (define (- . lst)
    (let ((kont1069510797 (prim car lst)))
      (let ((lst10798 (prim cdr lst)))
        (let ((x1060510799 (apply-prim - lst10798)))
          (kont1069510797 x1060510799)))))
  (define (* . lst)
    (let ((kont1069710800 (prim car lst)))
      (let ((lst10801 (prim cdr lst)))
        (let ((x1060610802 (apply-prim * lst10801)))
          (kont1069710800 x1060610802)))))
  (define (modulo kont10699 a b)
    (let ((x1060710803 (prim modulo a b))) (kont10699 x1060710803)))
  (define (/ . lst)
    (let ((kont1070010804 (prim car lst)))
      (let ((lst10805 (prim cdr lst)))
        (let ((x1060810806 (apply-prim / lst10805)))
          (kont1070010804 x1060810806)))))
  (define (= . lst)
    (let ((kont1070210807 (prim car lst)))
      (let ((lst10808 (prim cdr lst)))
        (let ((x1060910809 (apply-prim = lst10808)))
          (kont1070210807 x1060910809)))))
  (define (> . lst)
    (let ((kont1070410810 (prim car lst)))
      (let ((lst10811 (prim cdr lst)))
        (let ((x1061010812 (apply-prim > lst10811)))
          (kont1070410810 x1061010812)))))
  (define (< . lst)
    (let ((kont1070610813 (prim car lst)))
      (let ((lst10814 (prim cdr lst)))
        (let ((x1061110815 (apply-prim < lst10814)))
          (kont1070610813 x1061110815)))))
  (define (<= . lst)
    (let ((kont1070810816 (prim car lst)))
      (let ((lst10817 (prim cdr lst)))
        (let ((x1061210818 (apply-prim <= lst10817)))
          (kont1070810816 x1061210818)))))
  (define (>= . lst)
    (let ((kont1071010819 (prim car lst)))
      (let ((lst10820 (prim cdr lst)))
        (let ((x1061310821 (apply-prim >= lst10820)))
          (kont1071010819 x1061310821)))))
  (define (null? kont10712 x)
    (let ((x1061410822 (prim null? x))) (kont10712 x1061410822)))
  (define (equal? kont10713 x y)
    (let ((x1061510823 (prim equal? x y))) (kont10713 x1061510823)))
  (define (eq? kont10714 x y)
    (let ((x1061610824 (prim eq? x y))) (kont10714 x1061610824)))
  (define (cons kont10715 a b)
    (let ((x1061710825 (prim cons a b))) (kont10715 x1061710825)))
  (define (car kont10716 lst)
    (let ((x1061810826 (prim car lst))) (kont10716 x1061810826)))
  (define (cdr kont10717 lst)
    (let ((x1061910827 (prim cdr lst))) (kont10717 x1061910827)))
  (define (even? kont10718 x)
    (let ((a1062010828 '0))
      (let ((a1062110829 '2))
        (let ((f1071910830
               (lambda (a1062210831)
                 (equal? kont10718 a1062010828 a1062210831))))
          (modulo f1071910830 x a1062110829)))))
  (define (odd? kont10720 x)
    (let ((a1062310832 '1))
      (let ((a1062410833 '2))
        (let ((f1072110834
               (lambda (a1062510835)
                 (equal? kont10720 a1062310832 a1062510835))))
          (modulo f1072110834 x a1062410833)))))
  (define (list . x)
    (let ((kont1072210836 (prim car x)))
      (let ((x10837 (prim cdr x))) (kont1072210836 x10837))))
  (define (member? kont10724 x lst)
    (let ((f1072810838
           (lambda (a1062610839)
             (if a1062610839
               (let ((x1062710840 '#f)) (kont10724 x1062710840))
               (let ((f1072710841
                      (lambda (a1062810842)
                        (let ((f1072610843
                               (lambda (a1062910844)
                                 (if a1062910844
                                   (let ((x1063010845 '#t))
                                     (kont10724 x1063010845))
                                   (let ((f1072510846
                                          (lambda (a1063110847)
                                            (member?
                                             kont10724
                                             x
                                             a1063110847))))
                                     (cdr f1072510846 lst))))))
                          (equal? f1072610843 a1062810842 x)))))
                 (car f1072710841 lst))))))
      (null? f1072810838 lst)))
  (define (foldl kont10729 fun acc lst)
    (let ((f1073310848
           (lambda (a1063210849)
             (if a1063210849
               (kont10729 acc)
               (let ((f1073210850
                      (lambda (a1063310851)
                        (let ((f1073110852
                               (lambda (a1063410853)
                                 (let ((f1073010854
                                        (lambda (a1063510855)
                                          (foldl
                                           kont10729
                                           fun
                                           a1063410853
                                           a1063510855))))
                                   (cdr f1073010854 lst)))))
                          (fun f1073110852 a1063310851 acc)))))
                 (car f1073210850 lst))))))
      (null? f1073310848 lst)))
  (define (reverse-helper kont10734 lst lst2)
    (let ((f1073810856
           (lambda (a1063610857)
             (if a1063610857
               (kont10734 lst2)
               (let ((f1073710858
                      (lambda (a1063710859)
                        (let ((f1073610860
                               (lambda (a1063810861)
                                 (let ((f1073510862
                                        (lambda (a1063910863)
                                          (reverse-helper
                                           kont10734
                                           a1063710859
                                           a1063910863))))
                                   (cons f1073510862 a1063810861 lst2)))))
                          (car f1073610860 lst)))))
                 (cdr f1073710858 lst))))))
      (null? f1073810856 lst)))
  (define (reverse kont10739 lst)
    (let ((f1074010864
           (lambda (a1064010865) (reverse-helper kont10739 lst a1064010865))))
      (list f1074010864)))
  (define (take-helper kont10741 lst n lst2)
    (let ((a1064110866 '0))
      (let ((f1074710867
             (lambda (a1064210868)
               (if a1064210868
                 (let ((f1074210869
                        (lambda (x1064310870) (kont10741 x1064310870))))
                   (reverse f1074210869 lst2))
                 (let ((f1074610871
                        (lambda (a1064410872)
                          (let ((a1064510873 '1))
                            (let ((f1074510874
                                   (lambda (a1064610875)
                                     (let ((f1074410876
                                            (lambda (a1064710877)
                                              (let ((f1074310878
                                                     (lambda (a1064810879)
                                                       (take-helper
                                                        kont10741
                                                        a1064410872
                                                        a1064610875
                                                        a1064810879))))
                                                (cons
                                                 f1074310878
                                                 a1064710877
                                                 lst2)))))
                                       (car f1074410876 lst)))))
                              (- f1074510874 n a1064510873))))))
                   (cdr f1074610871 lst))))))
        (= f1074710867 n a1064110866))))
  (define (take kont10748 lst n)
    (let ((f1074910880
           (lambda (a1064910881) (take-helper kont10748 lst n a1064910881))))
      (list f1074910880)))
  (define (length kont10750 lst)
    (let ((f1075310882
           (lambda (a1065010883)
             (if a1065010883
               (let ((x1065110884 '0)) (kont10750 x1065110884))
               (let ((a1065210885 '1))
                 (let ((f1075210886
                        (lambda (a1065310887)
                          (let ((f1075110888
                                 (lambda (a1065410889)
                                   (+ kont10750 a1065210885 a1065410889))))
                            (length f1075110888 a1065310887)))))
                   (cdr f1075210886 lst)))))))
      (null? f1075310882 lst)))
  (define (map kont10754 proc lst)
    (let ((f1076010890
           (lambda (a1065510891)
             (if a1065510891
               (let ((f1075510892
                      (lambda (x1065610893) (kont10754 x1065610893))))
                 (list f1075510892))
               (let ((f1075910894
                      (lambda (a1065710895)
                        (let ((f1075810896
                               (lambda (a1065810897)
                                 (let ((f1075710898
                                        (lambda (a1065910899)
                                          (let ((f1075610900
                                                 (lambda (a1066010901)
                                                   (cons
                                                    kont10754
                                                    a1065810897
                                                    a1066010901))))
                                            (map
                                             f1075610900
                                             proc
                                             a1065910899)))))
                                   (cdr f1075710898 lst)))))
                          (proc f1075810896 a1065710895)))))
                 (car f1075910894 lst))))))
      (null? f1076010890 lst)))
  (define (filter kont10761 op lst)
    (let ((f1076910902
           (lambda (a1066110903)
             (if a1066110903
               (let ((f1076210904
                      (lambda (x1066210905) (kont10761 x1066210905))))
                 (list f1076210904))
               (let ((f1076810906
                      (lambda (a1066310907)
                        (let ((f1076710908
                               (lambda (a1066410909)
                                 (if a1066410909
                                   (let ((f1076510910
                                          (lambda (a1066510911)
                                            (let ((f1076410912
                                                   (lambda (a1066610913)
                                                     (let ((f1076310914
                                                            (lambda (a1066710915)
                                                              (cons
                                                               kont10761
                                                               a1066510911
                                                               a1066710915))))
                                                       (filter
                                                        f1076310914
                                                        op
                                                        a1066610913)))))
                                              (cdr f1076410912 lst)))))
                                     (car f1076510910 lst))
                                   (let ((f1076610916
                                          (lambda (a1066810917)
                                            (filter
                                             kont10761
                                             op
                                             a1066810917))))
                                     (cdr f1076610916 lst))))))
                          (op f1076710908 a1066310907)))))
                 (car f1076810906 lst))))))
      (null? f1076910902 lst)))
  (define (drop kont10770 lst n)
    (let ((a1066910918 '0))
      (let ((f1077310919
             (lambda (a1067010920)
               (if a1067010920
                 (kont10770 lst)
                 (let ((f1077210921
                        (lambda (a1067110922)
                          (let ((a1067210923 '1))
                            (let ((f1077110924
                                   (lambda (a1067310925)
                                     (drop
                                      kont10770
                                      a1067110922
                                      a1067310925))))
                              (- f1077110924 n a1067210923))))))
                   (cdr f1077210921 lst))))))
        (= f1077310919 n a1066910918))))
  (define (foldr kont10774 proc acc lst)
    (let ((f1077810926
           (lambda (a1067410927)
             (if a1067410927
               (kont10774 acc)
               (let ((f1077710928
                      (lambda (a1067510929)
                        (let ((f1077610930
                               (lambda (a1067610931)
                                 (let ((f1077510932
                                        (lambda (a1067710933)
                                          (proc
                                           kont10774
                                           a1067510929
                                           a1067710933))))
                                   (foldr f1077510932 proc acc a1067610931)))))
                          (cdr f1077610930 lst)))))
                 (car f1077710928 lst))))))
      (null? f1077810926 lst)))
  (define (append kont10779 lst1 lst2)
    (let ((f1078310934
           (lambda (a1067810935)
             (if a1067810935
               (kont10779 lst2)
               (let ((f1078210936
                      (lambda (a1067910937)
                        (let ((f1078110938
                               (lambda (a1068010939)
                                 (let ((f1078010940
                                        (lambda (a1068110941)
                                          (cons
                                           kont10779
                                           a1067910937
                                           a1068110941))))
                                   (append f1078010940 a1068010939 lst2)))))
                          (cdr f1078110938 lst1)))))
                 (car f1078210936 lst1))))))
      (null? f1078310934 lst1)))
  (define (hash . lst)
    (let ((kont1078410942 (prim car lst)))
      (let ((lst10943 (prim cdr lst)))
        (let ((x1068210944 (apply-prim hash lst10943)))
          (kont1078410942 x1068210944)))))
  (define (hash-ref kont10786 h k)
    (let ((x1068310945 (prim hash-ref h k))) (kont10786 x1068310945)))
  (define (hash-set kont10787 h k v)
    (let ((x1068410946 (prim hash-set h k v))) (kont10787 x1068410946)))
  (define (hash-has-key? kont10788 h k)
    (let ((x1068510947 (prim hash-has-key? h k))) (kont10788 x1068510947)))
  (define (hash-count kont10789 h)
    (let ((x1068610948 (prim hash-count h))) (kont10789 x1068610948)))
  (define (call kont10790)
    (let ((a1068710949 '10))
      (let ((a1068810950 '3))
        (let ((a1068910951 '4))
          (let ((a1069010952 '3))
            (let ((f1079110953
                   (lambda (a1069110954)
                     (+ kont10790 a1068710949 a1068810950 a1069110954))))
              (+ f1079110953 a1068910951 a1069010952)))))))
  (define (brouhaha_main kont10792)
    (let ((f1079310955 (lambda (x1069210956) (kont10792 x1069210956))))
      (call f1079310955))))
