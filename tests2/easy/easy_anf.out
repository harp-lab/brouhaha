'((define (+ . lst)
    (let ((kont10437 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10348 (apply-prim + lst))) (kont10437 x10348)))))
  (define (- . lst)
    (let ((kont10439 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10349 (apply-prim - lst))) (kont10439 x10349)))))
  (define (* . lst)
    (let ((kont10441 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10350 (apply-prim * lst))) (kont10441 x10350)))))
  (define (modulo kont10443 a b)
    (let ((x10351 (prim modulo a b))) (kont10443 x10351)))
  (define (/ . lst)
    (let ((kont10444 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10352 (apply-prim / lst))) (kont10444 x10352)))))
  (define (= . lst)
    (let ((kont10446 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10353 (apply-prim = lst))) (kont10446 x10353)))))
  (define (> . lst)
    (let ((kont10448 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10354 (apply-prim > lst))) (kont10448 x10354)))))
  (define (< . lst)
    (let ((kont10450 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10355 (apply-prim < lst))) (kont10450 x10355)))))
  (define (<= . lst)
    (let ((kont10452 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10356 (apply-prim <= lst))) (kont10452 x10356)))))
  (define (>= . lst)
    (let ((kont10454 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10357 (apply-prim >= lst))) (kont10454 x10357)))))
  (define (null? kont10456 x)
    (let ((x10358 (prim null? x))) (kont10456 x10358)))
  (define (equal? kont10457 x y)
    (let ((x10359 (prim equal? x y))) (kont10457 x10359)))
  (define (eq? kont10458 x y)
    (let ((x10360 (prim eq? x y))) (kont10458 x10360)))
  (define (cons kont10459 a b)
    (let ((x10361 (prim cons a b))) (kont10459 x10361)))
  (define (car kont10460 lst)
    (let ((x10362 (prim car lst))) (kont10460 x10362)))
  (define (cdr kont10461 lst)
    (let ((x10363 (prim cdr lst))) (kont10461 x10363)))
  (define (even? kont10462 x)
    (let ((a10364 '0))
      (let ((a10365 '2))
        (let ((f10463 (lambda (a10366) (equal? kont10462 a10364 a10366))))
          (modulo f10463 x a10365)))))
  (define (odd? kont10464 x)
    (let ((a10367 '1))
      (let ((a10368 '2))
        (let ((f10465 (lambda (a10369) (equal? kont10464 a10367 a10369))))
          (modulo f10465 x a10368)))))
  (define (list . x)
    (let ((kont10466 (prim car x))) (let ((x (prim cdr x))) (kont10466 x))))
  (define (member? kont10468 x lst)
    (let ((f10472
           (lambda (a10370)
             (if a10370
               (let ((x10371 '#f)) (kont10468 x10371))
               (let ((f10471
                      (lambda (a10372)
                        (let ((f10470
                               (lambda (a10373)
                                 (if a10373
                                   (let ((x10374 '#t)) (kont10468 x10374))
                                   (let ((f10469
                                          (lambda (a10375)
                                            (member? kont10468 x a10375))))
                                     (cdr f10469 lst))))))
                          (equal? f10470 a10372 x)))))
                 (car f10471 lst))))))
      (null? f10472 lst)))
  (define (foldl kont10473 fun acc lst)
    (let ((f10477
           (lambda (a10376)
             (if a10376
               (kont10473 acc)
               (let ((f10476
                      (lambda (a10377)
                        (let ((f10475
                               (lambda (a10378)
                                 (let ((f10474
                                        (lambda (a10379)
                                          (foldl
                                           kont10473
                                           fun
                                           a10378
                                           a10379))))
                                   (cdr f10474 lst)))))
                          (fun f10475 a10377 acc)))))
                 (car f10476 lst))))))
      (null? f10477 lst)))
  (define (reverse-helper kont10478 lst lst2)
    (let ((f10482
           (lambda (a10380)
             (if a10380
               (kont10478 lst2)
               (let ((f10481
                      (lambda (a10381)
                        (let ((f10480
                               (lambda (a10382)
                                 (let ((f10479
                                        (lambda (a10383)
                                          (reverse-helper
                                           kont10478
                                           a10381
                                           a10383))))
                                   (cons f10479 a10382 lst2)))))
                          (car f10480 lst)))))
                 (cdr f10481 lst))))))
      (null? f10482 lst)))
  (define (reverse kont10483 lst)
    (let ((f10484 (lambda (a10384) (reverse-helper kont10483 lst a10384))))
      (list f10484)))
  (define (take-helper kont10485 lst n lst2)
    (let ((a10385 '0))
      (let ((f10491
             (lambda (a10386)
               (if a10386
                 (let ((f10486 (lambda (x10387) (kont10485 x10387))))
                   (reverse f10486 lst2))
                 (let ((f10490
                        (lambda (a10388)
                          (let ((a10389 '1))
                            (let ((f10489
                                   (lambda (a10390)
                                     (let ((f10488
                                            (lambda (a10391)
                                              (let ((f10487
                                                     (lambda (a10392)
                                                       (take-helper
                                                        kont10485
                                                        a10388
                                                        a10390
                                                        a10392))))
                                                (cons f10487 a10391 lst2)))))
                                       (car f10488 lst)))))
                              (- f10489 n a10389))))))
                   (cdr f10490 lst))))))
        (= f10491 n a10385))))
  (define (take kont10492 lst n)
    (let ((f10493 (lambda (a10393) (take-helper kont10492 lst n a10393))))
      (list f10493)))
  (define (length kont10494 lst)
    (let ((f10497
           (lambda (a10394)
             (if a10394
               (let ((x10395 '0)) (kont10494 x10395))
               (let ((a10396 '1))
                 (let ((f10496
                        (lambda (a10397)
                          (let ((f10495
                                 (lambda (a10398)
                                   (+ kont10494 a10396 a10398))))
                            (length f10495 a10397)))))
                   (cdr f10496 lst)))))))
      (null? f10497 lst)))
  (define (map kont10498 proc lst)
    (let ((f10504
           (lambda (a10399)
             (if a10399
               (let ((f10499 (lambda (x10400) (kont10498 x10400))))
                 (list f10499))
               (let ((f10503
                      (lambda (a10401)
                        (let ((f10502
                               (lambda (a10402)
                                 (let ((f10501
                                        (lambda (a10403)
                                          (let ((f10500
                                                 (lambda (a10404)
                                                   (cons
                                                    kont10498
                                                    a10402
                                                    a10404))))
                                            (map f10500 proc a10403)))))
                                   (cdr f10501 lst)))))
                          (proc f10502 a10401)))))
                 (car f10503 lst))))))
      (null? f10504 lst)))
  (define (filter kont10505 op lst)
    (let ((f10513
           (lambda (a10405)
             (if a10405
               (let ((f10506 (lambda (x10406) (kont10505 x10406))))
                 (list f10506))
               (let ((f10512
                      (lambda (a10407)
                        (let ((f10511
                               (lambda (a10408)
                                 (if a10408
                                   (let ((f10509
                                          (lambda (a10409)
                                            (let ((f10508
                                                   (lambda (a10410)
                                                     (let ((f10507
                                                            (lambda (a10411)
                                                              (cons
                                                               kont10505
                                                               a10409
                                                               a10411))))
                                                       (filter
                                                        f10507
                                                        op
                                                        a10410)))))
                                              (cdr f10508 lst)))))
                                     (car f10509 lst))
                                   (let ((f10510
                                          (lambda (a10412)
                                            (filter kont10505 op a10412))))
                                     (cdr f10510 lst))))))
                          (op f10511 a10407)))))
                 (car f10512 lst))))))
      (null? f10513 lst)))
  (define (drop kont10514 lst n)
    (let ((a10413 '0))
      (let ((f10517
             (lambda (a10414)
               (if a10414
                 (kont10514 lst)
                 (let ((f10516
                        (lambda (a10415)
                          (let ((a10416 '1))
                            (let ((f10515
                                   (lambda (a10417)
                                     (drop kont10514 a10415 a10417))))
                              (- f10515 n a10416))))))
                   (cdr f10516 lst))))))
        (= f10517 n a10413))))
  (define (foldr kont10518 proc acc lst)
    (let ((f10522
           (lambda (a10418)
             (if a10418
               (kont10518 acc)
               (let ((f10521
                      (lambda (a10419)
                        (let ((f10520
                               (lambda (a10420)
                                 (let ((f10519
                                        (lambda (a10421)
                                          (proc kont10518 a10419 a10421))))
                                   (foldr f10519 proc acc a10420)))))
                          (cdr f10520 lst)))))
                 (car f10521 lst))))))
      (null? f10522 lst)))
  (define (append kont10523 lst1 lst2)
    (let ((f10527
           (lambda (a10422)
             (if a10422
               (kont10523 lst2)
               (let ((f10526
                      (lambda (a10423)
                        (let ((f10525
                               (lambda (a10424)
                                 (let ((f10524
                                        (lambda (a10425)
                                          (cons kont10523 a10423 a10425))))
                                   (append f10524 a10424 lst2)))))
                          (cdr f10525 lst1)))))
                 (car f10526 lst1))))))
      (null? f10527 lst1)))
  (define (hash . lst)
    (let ((kont10528 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10426 (apply-prim hash lst))) (kont10528 x10426)))))
  (define (hash-ref kont10530 h k)
    (let ((x10427 (prim hash-ref h k))) (kont10530 x10427)))
  (define (hash-set kont10531 h k v)
    (let ((x10428 (prim hash-set h k v))) (kont10531 x10428)))
  (define (hash-has-key? kont10532 h k)
    (let ((x10429 (prim hash-has-key? h k))) (kont10532 x10429)))
  (define (hash-count kont10533 h)
    (let ((x10430 (prim hash-count h))) (kont10533 x10430)))
  (define (call kont10534)
    (let ((a10431 '10))
      (let ((a10432 '3))
        (let ((a10433 '4))
          (let ((a10434 '3))
            (let ((f10535
                   (lambda (a10435) (+ kont10534 a10431 a10432 a10435))))
              (+ f10535 a10433 a10434)))))))
  (define (brouhaha_main kont10536)
    (let ((f10537 (lambda (x10436) (kont10536 x10436)))) (call f10537))))
