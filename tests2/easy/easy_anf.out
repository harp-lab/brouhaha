'((define (+ . lst)
    (let ((kont10689 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10600 (apply-prim + lst))) (kont10689 x10600)))))
  (define (- . lst)
    (let ((kont10691 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10601 (apply-prim - lst))) (kont10691 x10601)))))
  (define (* . lst)
    (let ((kont10693 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10602 (apply-prim * lst))) (kont10693 x10602)))))
  (define (modulo kont10695 a b)
    (let ((x10603 (prim modulo a b))) (kont10695 x10603)))
  (define (/ . lst)
    (let ((kont10696 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10604 (apply-prim / lst))) (kont10696 x10604)))))
  (define (= . lst)
    (let ((kont10698 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10605 (apply-prim = lst))) (kont10698 x10605)))))
  (define (> . lst)
    (let ((kont10700 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10606 (apply-prim > lst))) (kont10700 x10606)))))
  (define (< . lst)
    (let ((kont10702 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10607 (apply-prim < lst))) (kont10702 x10607)))))
  (define (<= . lst)
    (let ((kont10704 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10608 (apply-prim <= lst))) (kont10704 x10608)))))
  (define (>= . lst)
    (let ((kont10706 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10609 (apply-prim >= lst))) (kont10706 x10609)))))
  (define (null? kont10708 x)
    (let ((x10610 (prim null? x))) (kont10708 x10610)))
  (define (equal? kont10709 x y)
    (let ((x10611 (prim equal? x y))) (kont10709 x10611)))
  (define (eq? kont10710 x y)
    (let ((x10612 (prim eq? x y))) (kont10710 x10612)))
  (define (cons kont10711 a b)
    (let ((x10613 (prim cons a b))) (kont10711 x10613)))
  (define (car kont10712 lst)
    (let ((x10614 (prim car lst))) (kont10712 x10614)))
  (define (cdr kont10713 lst)
    (let ((x10615 (prim cdr lst))) (kont10713 x10615)))
  (define (even? kont10714 x)
    (let ((a10616 '0))
      (let ((a10617 '2))
        (let ((f10715 (lambda (a10618) (equal? kont10714 a10616 a10618))))
          (modulo f10715 x a10617)))))
  (define (odd? kont10716 x)
    (let ((a10619 '1))
      (let ((a10620 '2))
        (let ((f10717 (lambda (a10621) (equal? kont10716 a10619 a10621))))
          (modulo f10717 x a10620)))))
  (define (list . x)
    (let ((kont10718 (prim car x))) (let ((x (prim cdr x))) (kont10718 x))))
  (define (member? kont10720 x lst)
    (let ((f10724
           (lambda (a10622)
             (if a10622
               (let ((x10623 '#f)) (kont10720 x10623))
               (let ((f10723
                      (lambda (a10624)
                        (let ((f10722
                               (lambda (a10625)
                                 (if a10625
                                   (let ((x10626 '#t)) (kont10720 x10626))
                                   (let ((f10721
                                          (lambda (a10627)
                                            (member? kont10720 x a10627))))
                                     (cdr f10721 lst))))))
                          (equal? f10722 a10624 x)))))
                 (car f10723 lst))))))
      (null? f10724 lst)))
  (define (foldl kont10725 fun acc lst)
    (let ((f10729
           (lambda (a10628)
             (if a10628
               (kont10725 acc)
               (let ((f10728
                      (lambda (a10629)
                        (let ((f10727
                               (lambda (a10630)
                                 (let ((f10726
                                        (lambda (a10631)
                                          (foldl
                                           kont10725
                                           fun
                                           a10630
                                           a10631))))
                                   (cdr f10726 lst)))))
                          (fun f10727 a10629 acc)))))
                 (car f10728 lst))))))
      (null? f10729 lst)))
  (define (reverse-helper kont10730 lst lst2)
    (let ((f10734
           (lambda (a10632)
             (if a10632
               (kont10730 lst2)
               (let ((f10733
                      (lambda (a10633)
                        (let ((f10732
                               (lambda (a10634)
                                 (let ((f10731
                                        (lambda (a10635)
                                          (reverse-helper
                                           kont10730
                                           a10633
                                           a10635))))
                                   (cons f10731 a10634 lst2)))))
                          (car f10732 lst)))))
                 (cdr f10733 lst))))))
      (null? f10734 lst)))
  (define (reverse kont10735 lst)
    (let ((f10736 (lambda (a10636) (reverse-helper kont10735 lst a10636))))
      (list f10736)))
  (define (take-helper kont10737 lst n lst2)
    (let ((a10637 '0))
      (let ((f10743
             (lambda (a10638)
               (if a10638
                 (let ((f10738 (lambda (x10639) (kont10737 x10639))))
                   (reverse f10738 lst2))
                 (let ((f10742
                        (lambda (a10640)
                          (let ((a10641 '1))
                            (let ((f10741
                                   (lambda (a10642)
                                     (let ((f10740
                                            (lambda (a10643)
                                              (let ((f10739
                                                     (lambda (a10644)
                                                       (take-helper
                                                        kont10737
                                                        a10640
                                                        a10642
                                                        a10644))))
                                                (cons f10739 a10643 lst2)))))
                                       (car f10740 lst)))))
                              (- f10741 n a10641))))))
                   (cdr f10742 lst))))))
        (= f10743 n a10637))))
  (define (take kont10744 lst n)
    (let ((f10745 (lambda (a10645) (take-helper kont10744 lst n a10645))))
      (list f10745)))
  (define (length kont10746 lst)
    (let ((f10749
           (lambda (a10646)
             (if a10646
               (let ((x10647 '0)) (kont10746 x10647))
               (let ((a10648 '1))
                 (let ((f10748
                        (lambda (a10649)
                          (let ((f10747
                                 (lambda (a10650)
                                   (+ kont10746 a10648 a10650))))
                            (length f10747 a10649)))))
                   (cdr f10748 lst)))))))
      (null? f10749 lst)))
  (define (map kont10750 proc lst)
    (let ((f10756
           (lambda (a10651)
             (if a10651
               (let ((f10751 (lambda (x10652) (kont10750 x10652))))
                 (list f10751))
               (let ((f10755
                      (lambda (a10653)
                        (let ((f10754
                               (lambda (a10654)
                                 (let ((f10753
                                        (lambda (a10655)
                                          (let ((f10752
                                                 (lambda (a10656)
                                                   (cons
                                                    kont10750
                                                    a10654
                                                    a10656))))
                                            (map f10752 proc a10655)))))
                                   (cdr f10753 lst)))))
                          (proc f10754 a10653)))))
                 (car f10755 lst))))))
      (null? f10756 lst)))
  (define (filter kont10757 op lst)
    (let ((f10765
           (lambda (a10657)
             (if a10657
               (let ((f10758 (lambda (x10658) (kont10757 x10658))))
                 (list f10758))
               (let ((f10764
                      (lambda (a10659)
                        (let ((f10763
                               (lambda (a10660)
                                 (if a10660
                                   (let ((f10761
                                          (lambda (a10661)
                                            (let ((f10760
                                                   (lambda (a10662)
                                                     (let ((f10759
                                                            (lambda (a10663)
                                                              (cons
                                                               kont10757
                                                               a10661
                                                               a10663))))
                                                       (filter
                                                        f10759
                                                        op
                                                        a10662)))))
                                              (cdr f10760 lst)))))
                                     (car f10761 lst))
                                   (let ((f10762
                                          (lambda (a10664)
                                            (filter kont10757 op a10664))))
                                     (cdr f10762 lst))))))
                          (op f10763 a10659)))))
                 (car f10764 lst))))))
      (null? f10765 lst)))
  (define (drop kont10766 lst n)
    (let ((a10665 '0))
      (let ((f10769
             (lambda (a10666)
               (if a10666
                 (kont10766 lst)
                 (let ((f10768
                        (lambda (a10667)
                          (let ((a10668 '1))
                            (let ((f10767
                                   (lambda (a10669)
                                     (drop kont10766 a10667 a10669))))
                              (- f10767 n a10668))))))
                   (cdr f10768 lst))))))
        (= f10769 n a10665))))
  (define (foldr kont10770 proc acc lst)
    (let ((f10774
           (lambda (a10670)
             (if a10670
               (kont10770 acc)
               (let ((f10773
                      (lambda (a10671)
                        (let ((f10772
                               (lambda (a10672)
                                 (let ((f10771
                                        (lambda (a10673)
                                          (proc kont10770 a10671 a10673))))
                                   (foldr f10771 proc acc a10672)))))
                          (cdr f10772 lst)))))
                 (car f10773 lst))))))
      (null? f10774 lst)))
  (define (append kont10775 lst1 lst2)
    (let ((f10779
           (lambda (a10674)
             (if a10674
               (kont10775 lst2)
               (let ((f10778
                      (lambda (a10675)
                        (let ((f10777
                               (lambda (a10676)
                                 (let ((f10776
                                        (lambda (a10677)
                                          (cons kont10775 a10675 a10677))))
                                   (append f10776 a10676 lst2)))))
                          (cdr f10777 lst1)))))
                 (car f10778 lst1))))))
      (null? f10779 lst1)))
  (define (hash . lst)
    (let ((kont10780 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10678 (apply-prim hash lst))) (kont10780 x10678)))))
  (define (hash-ref kont10782 h k)
    (let ((x10679 (prim hash-ref h k))) (kont10782 x10679)))
  (define (hash-set kont10783 h k v)
    (let ((x10680 (prim hash-set h k v))) (kont10783 x10680)))
  (define (hash-has-key? kont10784 h k)
    (let ((x10681 (prim hash-has-key? h k))) (kont10784 x10681)))
  (define (hash-count kont10785 h)
    (let ((x10682 (prim hash-count h))) (kont10785 x10682)))
  (define (call kont10786)
    (let ((a10683 '10))
      (let ((a10684 '3))
        (let ((a10685 '4))
          (let ((a10686 '3))
            (let ((f10787
                   (lambda (a10687) (+ kont10786 a10683 a10684 a10687))))
              (+ f10787 a10685 a10686)))))))
  (define (brouhaha_main kont10788)
    (let ((f10789 (lambda (x10688) (kont10788 x10688)))) (call f10789))))
