'((define (+ . lst)
    (let ((kont29827 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29737 (apply-prim + lst))) (kont29827 x29737)))))
  (define (- . lst)
    (let ((kont29829 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29738 (apply-prim - lst))) (kont29829 x29738)))))
  (define (* . lst)
    (let ((kont29831 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29739 (apply-prim * lst))) (kont29831 x29739)))))
  (define (modulo kont29833 a b)
    (let ((x29740 (prim modulo a b))) (kont29833 x29740)))
  (define (/ . lst)
    (let ((kont29834 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29741 (apply-prim / lst))) (kont29834 x29741)))))
  (define (= . lst)
    (let ((kont29836 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29742 (apply-prim = lst))) (kont29836 x29742)))))
  (define (> . lst)
    (let ((kont29838 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29743 (apply-prim > lst))) (kont29838 x29743)))))
  (define (< . lst)
    (let ((kont29840 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29744 (apply-prim < lst))) (kont29840 x29744)))))
  (define (<= . lst)
    (let ((kont29842 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29745 (apply-prim <= lst))) (kont29842 x29745)))))
  (define (>= . lst)
    (let ((kont29844 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29746 (apply-prim >= lst))) (kont29844 x29746)))))
  (define (null? kont29846 x)
    (let ((x29747 (prim null? x))) (kont29846 x29747)))
  (define (equal? kont29847 x y)
    (let ((x29748 (prim equal? x y))) (kont29847 x29748)))
  (define (eq? kont29848 x y)
    (let ((x29749 (prim eq? x y))) (kont29848 x29749)))
  (define (cons kont29849 a b)
    (let ((x29750 (prim cons a b))) (kont29849 x29750)))
  (define (car kont29850 lst)
    (let ((x29751 (prim car lst))) (kont29850 x29751)))
  (define (cdr kont29851 lst)
    (let ((x29752 (prim cdr lst))) (kont29851 x29752)))
  (define (even? kont29852 x)
    (let ((a29753 '0))
      (let ((a29754 '2))
        (let ((f29853 (lambda (a29755) (equal? kont29852 a29753 a29755))))
          (modulo f29853 x a29754)))))
  (define (odd? kont29854 x)
    (let ((a29756 '1))
      (let ((a29757 '2))
        (let ((f29855 (lambda (a29758) (equal? kont29854 a29756 a29758))))
          (modulo f29855 x a29757)))))
  (define (list . x)
    (let ((kont29856 (prim car x))) (let ((x (prim cdr x))) (kont29856 x))))
  (define (member? kont29858 x lst)
    (let ((f29862
           (lambda (a29759)
             (if a29759
               (let ((x29760 '#f)) (kont29858 x29760))
               (let ((f29861
                      (lambda (a29761)
                        (let ((f29860
                               (lambda (a29762)
                                 (if a29762
                                   (let ((x29763 '#t)) (kont29858 x29763))
                                   (let ((f29859
                                          (lambda (a29764)
                                            (member? kont29858 x a29764))))
                                     (cdr f29859 lst))))))
                          (equal? f29860 a29761 x)))))
                 (car f29861 lst))))))
      (null? f29862 lst)))
  (define (foldl kont29863 fun acc lst)
    (let ((f29867
           (lambda (a29765)
             (if a29765
               (kont29863 acc)
               (let ((f29866
                      (lambda (a29766)
                        (let ((f29865
                               (lambda (a29767)
                                 (let ((f29864
                                        (lambda (a29768)
                                          (foldl
                                           kont29863
                                           fun
                                           a29767
                                           a29768))))
                                   (cdr f29864 lst)))))
                          (fun f29865 a29766 acc)))))
                 (car f29866 lst))))))
      (null? f29867 lst)))
  (define (reverse-helper kont29868 lst lst2)
    (let ((f29872
           (lambda (a29769)
             (if a29769
               (kont29868 lst2)
               (let ((f29871
                      (lambda (a29770)
                        (let ((f29870
                               (lambda (a29771)
                                 (let ((f29869
                                        (lambda (a29772)
                                          (reverse-helper
                                           kont29868
                                           a29770
                                           a29772))))
                                   (cons f29869 a29771 lst2)))))
                          (car f29870 lst)))))
                 (cdr f29871 lst))))))
      (null? f29872 lst)))
  (define (reverse kont29873 lst)
    (let ((f29874 (lambda (a29773) (reverse-helper kont29873 lst a29773))))
      (list f29874)))
  (define (take-helper kont29875 lst n lst2)
    (let ((a29774 '0))
      (let ((f29881
             (lambda (a29775)
               (if a29775
                 (let ((f29876 (lambda (x29776) (kont29875 x29776))))
                   (reverse f29876 lst2))
                 (let ((f29880
                        (lambda (a29777)
                          (let ((a29778 '1))
                            (let ((f29879
                                   (lambda (a29779)
                                     (let ((f29878
                                            (lambda (a29780)
                                              (let ((f29877
                                                     (lambda (a29781)
                                                       (take-helper
                                                        kont29875
                                                        a29777
                                                        a29779
                                                        a29781))))
                                                (cons f29877 a29780 lst2)))))
                                       (car f29878 lst)))))
                              (- f29879 n a29778))))))
                   (cdr f29880 lst))))))
        (= f29881 n a29774))))
  (define (take kont29882 lst n)
    (let ((f29883 (lambda (a29782) (take-helper kont29882 lst n a29782))))
      (list f29883)))
  (define (length kont29884 lst)
    (let ((f29887
           (lambda (a29783)
             (if a29783
               (let ((x29784 '0)) (kont29884 x29784))
               (let ((a29785 '1))
                 (let ((f29886
                        (lambda (a29786)
                          (let ((f29885
                                 (lambda (a29787)
                                   (+ kont29884 a29785 a29787))))
                            (length f29885 a29786)))))
                   (cdr f29886 lst)))))))
      (null? f29887 lst)))
  (define (map kont29888 proc lst)
    (let ((f29894
           (lambda (a29788)
             (if a29788
               (let ((f29889 (lambda (x29789) (kont29888 x29789))))
                 (list f29889))
               (let ((f29893
                      (lambda (a29790)
                        (let ((f29892
                               (lambda (a29791)
                                 (let ((f29891
                                        (lambda (a29792)
                                          (let ((f29890
                                                 (lambda (a29793)
                                                   (cons
                                                    kont29888
                                                    a29791
                                                    a29793))))
                                            (map f29890 proc a29792)))))
                                   (cdr f29891 lst)))))
                          (proc f29892 a29790)))))
                 (car f29893 lst))))))
      (null? f29894 lst)))
  (define (filter kont29895 op lst)
    (let ((f29903
           (lambda (a29794)
             (if a29794
               (let ((f29896 (lambda (x29795) (kont29895 x29795))))
                 (list f29896))
               (let ((f29902
                      (lambda (a29796)
                        (let ((f29901
                               (lambda (a29797)
                                 (if a29797
                                   (let ((f29899
                                          (lambda (a29798)
                                            (let ((f29898
                                                   (lambda (a29799)
                                                     (let ((f29897
                                                            (lambda (a29800)
                                                              (cons
                                                               kont29895
                                                               a29798
                                                               a29800))))
                                                       (filter
                                                        f29897
                                                        op
                                                        a29799)))))
                                              (cdr f29898 lst)))))
                                     (car f29899 lst))
                                   (let ((f29900
                                          (lambda (a29801)
                                            (filter kont29895 op a29801))))
                                     (cdr f29900 lst))))))
                          (op f29901 a29796)))))
                 (car f29902 lst))))))
      (null? f29903 lst)))
  (define (drop kont29904 lst n)
    (let ((a29802 '0))
      (let ((f29907
             (lambda (a29803)
               (if a29803
                 (kont29904 lst)
                 (let ((f29906
                        (lambda (a29804)
                          (let ((a29805 '1))
                            (let ((f29905
                                   (lambda (a29806)
                                     (drop kont29904 a29804 a29806))))
                              (- f29905 n a29805))))))
                   (cdr f29906 lst))))))
        (= f29907 n a29802))))
  (define (foldr kont29908 proc acc lst)
    (let ((f29912
           (lambda (a29807)
             (if a29807
               (kont29908 acc)
               (let ((f29911
                      (lambda (a29808)
                        (let ((f29910
                               (lambda (a29809)
                                 (let ((f29909
                                        (lambda (a29810)
                                          (proc kont29908 a29808 a29810))))
                                   (foldr f29909 proc acc a29809)))))
                          (cdr f29910 lst)))))
                 (car f29911 lst))))))
      (null? f29912 lst)))
  (define (append kont29913 lst1 lst2)
    (let ((f29917
           (lambda (a29811)
             (if a29811
               (kont29913 lst2)
               (let ((f29916
                      (lambda (a29812)
                        (let ((f29915
                               (lambda (a29813)
                                 (let ((f29914
                                        (lambda (a29814)
                                          (cons kont29913 a29812 a29814))))
                                   (append f29914 a29813 lst2)))))
                          (cdr f29915 lst1)))))
                 (car f29916 lst1))))))
      (null? f29917 lst1)))
  (define (hash . lst)
    (let ((kont29918 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29815 (apply-prim hash lst))) (kont29918 x29815)))))
  (define (hash-ref kont29920 h k)
    (let ((x29816 (prim hash-ref h k))) (kont29920 x29816)))
  (define (hash-set kont29921 h k v)
    (let ((x29817 (prim hash-set h k v))) (kont29921 x29817)))
  (define (hash-has-key? kont29922 h k)
    (let ((x29818 (prim hash-has-key? h k))) (kont29922 x29818)))
  (define (hash-count kont29923 h)
    (let ((x29819 (prim hash-count h))) (kont29923 x29819)))
  (define (call-foldl kont29924 lst)
    (let ((a29820 '0)) (foldl kont29924 + a29820 lst)))
  (define (brouhaha_main kont29925)
    (let ((a29821 '1))
      (let ((a29822 '2))
        (let ((a29823 '3))
          (let ((a29824 '4))
            (let ((a29825 '10))
              (let ((f29926 (lambda (a29826) (call-foldl kont29925 a29826))))
                (list f29926 a29821 a29822 a29823 a29824 a29825)))))))))
