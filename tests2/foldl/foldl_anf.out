'((define (+ . lst)
    (let ((kont30051 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29961 (apply-prim + lst))) (kont30051 x29961)))))
  (define (- . lst)
    (let ((kont30053 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29962 (apply-prim - lst))) (kont30053 x29962)))))
  (define (* . lst)
    (let ((kont30055 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29963 (apply-prim * lst))) (kont30055 x29963)))))
  (define (modulo kont30057 a b)
    (let ((x29964 (prim modulo a b))) (kont30057 x29964)))
  (define (/ . lst)
    (let ((kont30058 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29965 (apply-prim / lst))) (kont30058 x29965)))))
  (define (= . lst)
    (let ((kont30060 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29966 (apply-prim = lst))) (kont30060 x29966)))))
  (define (> . lst)
    (let ((kont30062 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29967 (apply-prim > lst))) (kont30062 x29967)))))
  (define (< . lst)
    (let ((kont30064 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29968 (apply-prim < lst))) (kont30064 x29968)))))
  (define (<= . lst)
    (let ((kont30066 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29969 (apply-prim <= lst))) (kont30066 x29969)))))
  (define (>= . lst)
    (let ((kont30068 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x29970 (apply-prim >= lst))) (kont30068 x29970)))))
  (define (null? kont30070 x)
    (let ((x29971 (prim null? x))) (kont30070 x29971)))
  (define (equal? kont30071 x y)
    (let ((x29972 (prim equal? x y))) (kont30071 x29972)))
  (define (eq? kont30072 x y)
    (let ((x29973 (prim eq? x y))) (kont30072 x29973)))
  (define (cons kont30073 a b)
    (let ((x29974 (prim cons a b))) (kont30073 x29974)))
  (define (car kont30074 lst)
    (let ((x29975 (prim car lst))) (kont30074 x29975)))
  (define (cdr kont30075 lst)
    (let ((x29976 (prim cdr lst))) (kont30075 x29976)))
  (define (even? kont30076 x)
    (let ((a29977 '0))
      (let ((a29978 '2))
        (let ((f30077 (lambda (a29979) (equal? kont30076 a29977 a29979))))
          (modulo f30077 x a29978)))))
  (define (odd? kont30078 x)
    (let ((a29980 '1))
      (let ((a29981 '2))
        (let ((f30079 (lambda (a29982) (equal? kont30078 a29980 a29982))))
          (modulo f30079 x a29981)))))
  (define (list . x)
    (let ((kont30080 (prim car x))) (let ((x (prim cdr x))) (kont30080 x))))
  (define (member? kont30082 x lst)
    (let ((f30086
           (lambda (a29983)
             (if a29983
               (let ((x29984 '#f)) (kont30082 x29984))
               (let ((f30085
                      (lambda (a29985)
                        (let ((f30084
                               (lambda (a29986)
                                 (if a29986
                                   (let ((x29987 '#t)) (kont30082 x29987))
                                   (let ((f30083
                                          (lambda (a29988)
                                            (member? kont30082 x a29988))))
                                     (cdr f30083 lst))))))
                          (equal? f30084 a29985 x)))))
                 (car f30085 lst))))))
      (null? f30086 lst)))
  (define (foldl kont30087 fun acc lst)
    (let ((f30091
           (lambda (a29989)
             (if a29989
               (kont30087 acc)
               (let ((f30090
                      (lambda (a29990)
                        (let ((f30089
                               (lambda (a29991)
                                 (let ((f30088
                                        (lambda (a29992)
                                          (foldl
                                           kont30087
                                           fun
                                           a29991
                                           a29992))))
                                   (cdr f30088 lst)))))
                          (fun f30089 a29990 acc)))))
                 (car f30090 lst))))))
      (null? f30091 lst)))
  (define (reverse-helper kont30092 lst lst2)
    (let ((f30096
           (lambda (a29993)
             (if a29993
               (kont30092 lst2)
               (let ((f30095
                      (lambda (a29994)
                        (let ((f30094
                               (lambda (a29995)
                                 (let ((f30093
                                        (lambda (a29996)
                                          (reverse-helper
                                           kont30092
                                           a29994
                                           a29996))))
                                   (cons f30093 a29995 lst2)))))
                          (car f30094 lst)))))
                 (cdr f30095 lst))))))
      (null? f30096 lst)))
  (define (reverse kont30097 lst)
    (let ((f30098 (lambda (a29997) (reverse-helper kont30097 lst a29997))))
      (list f30098)))
  (define (take-helper kont30099 lst n lst2)
    (let ((a29998 '0))
      (let ((f30105
             (lambda (a29999)
               (if a29999
                 (let ((f30100 (lambda (x30000) (kont30099 x30000))))
                   (reverse f30100 lst2))
                 (let ((f30104
                        (lambda (a30001)
                          (let ((a30002 '1))
                            (let ((f30103
                                   (lambda (a30003)
                                     (let ((f30102
                                            (lambda (a30004)
                                              (let ((f30101
                                                     (lambda (a30005)
                                                       (take-helper
                                                        kont30099
                                                        a30001
                                                        a30003
                                                        a30005))))
                                                (cons f30101 a30004 lst2)))))
                                       (car f30102 lst)))))
                              (- f30103 n a30002))))))
                   (cdr f30104 lst))))))
        (= f30105 n a29998))))
  (define (take kont30106 lst n)
    (let ((f30107 (lambda (a30006) (take-helper kont30106 lst n a30006))))
      (list f30107)))
  (define (length kont30108 lst)
    (let ((f30111
           (lambda (a30007)
             (if a30007
               (let ((x30008 '0)) (kont30108 x30008))
               (let ((a30009 '1))
                 (let ((f30110
                        (lambda (a30010)
                          (let ((f30109
                                 (lambda (a30011)
                                   (+ kont30108 a30009 a30011))))
                            (length f30109 a30010)))))
                   (cdr f30110 lst)))))))
      (null? f30111 lst)))
  (define (map kont30112 proc lst)
    (let ((f30118
           (lambda (a30012)
             (if a30012
               (let ((f30113 (lambda (x30013) (kont30112 x30013))))
                 (list f30113))
               (let ((f30117
                      (lambda (a30014)
                        (let ((f30116
                               (lambda (a30015)
                                 (let ((f30115
                                        (lambda (a30016)
                                          (let ((f30114
                                                 (lambda (a30017)
                                                   (cons
                                                    kont30112
                                                    a30015
                                                    a30017))))
                                            (map f30114 proc a30016)))))
                                   (cdr f30115 lst)))))
                          (proc f30116 a30014)))))
                 (car f30117 lst))))))
      (null? f30118 lst)))
  (define (filter kont30119 op lst)
    (let ((f30127
           (lambda (a30018)
             (if a30018
               (let ((f30120 (lambda (x30019) (kont30119 x30019))))
                 (list f30120))
               (let ((f30126
                      (lambda (a30020)
                        (let ((f30125
                               (lambda (a30021)
                                 (if a30021
                                   (let ((f30123
                                          (lambda (a30022)
                                            (let ((f30122
                                                   (lambda (a30023)
                                                     (let ((f30121
                                                            (lambda (a30024)
                                                              (cons
                                                               kont30119
                                                               a30022
                                                               a30024))))
                                                       (filter
                                                        f30121
                                                        op
                                                        a30023)))))
                                              (cdr f30122 lst)))))
                                     (car f30123 lst))
                                   (let ((f30124
                                          (lambda (a30025)
                                            (filter kont30119 op a30025))))
                                     (cdr f30124 lst))))))
                          (op f30125 a30020)))))
                 (car f30126 lst))))))
      (null? f30127 lst)))
  (define (drop kont30128 lst n)
    (let ((a30026 '0))
      (let ((f30131
             (lambda (a30027)
               (if a30027
                 (kont30128 lst)
                 (let ((f30130
                        (lambda (a30028)
                          (let ((a30029 '1))
                            (let ((f30129
                                   (lambda (a30030)
                                     (drop kont30128 a30028 a30030))))
                              (- f30129 n a30029))))))
                   (cdr f30130 lst))))))
        (= f30131 n a30026))))
  (define (foldr kont30132 proc acc lst)
    (let ((f30136
           (lambda (a30031)
             (if a30031
               (kont30132 acc)
               (let ((f30135
                      (lambda (a30032)
                        (let ((f30134
                               (lambda (a30033)
                                 (let ((f30133
                                        (lambda (a30034)
                                          (proc kont30132 a30032 a30034))))
                                   (foldr f30133 proc acc a30033)))))
                          (cdr f30134 lst)))))
                 (car f30135 lst))))))
      (null? f30136 lst)))
  (define (append kont30137 lst1 lst2)
    (let ((f30141
           (lambda (a30035)
             (if a30035
               (kont30137 lst2)
               (let ((f30140
                      (lambda (a30036)
                        (let ((f30139
                               (lambda (a30037)
                                 (let ((f30138
                                        (lambda (a30038)
                                          (cons kont30137 a30036 a30038))))
                                   (append f30138 a30037 lst2)))))
                          (cdr f30139 lst1)))))
                 (car f30140 lst1))))))
      (null? f30141 lst1)))
  (define (hash . lst)
    (let ((kont30142 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x30039 (apply-prim hash lst))) (kont30142 x30039)))))
  (define (hash-ref kont30144 h k)
    (let ((x30040 (prim hash-ref h k))) (kont30144 x30040)))
  (define (hash-set kont30145 h k v)
    (let ((x30041 (prim hash-set h k v))) (kont30145 x30041)))
  (define (hash-has-key? kont30146 h k)
    (let ((x30042 (prim hash-has-key? h k))) (kont30146 x30042)))
  (define (hash-count kont30147 h)
    (let ((x30043 (prim hash-count h))) (kont30147 x30043)))
  (define (call-foldl kont30148 lst)
    (let ((a30044 '0)) (foldl kont30148 + a30044 lst)))
  (define (brouhaha_main kont30149)
    (let ((a30045 '1))
      (let ((a30046 '2))
        (let ((a30047 '3))
          (let ((a30048 '4))
            (let ((a30049 '10))
              (let ((f30150 (lambda (a30050) (call-foldl kont30149 a30050))))
                (list f30150 a30045 a30046 a30047 a30048 a30049)))))))))
