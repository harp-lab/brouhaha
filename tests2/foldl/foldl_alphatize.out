'((define (+ . lst) (let ((x29737 (apply-prim + lst))) x29737))
  (define (- . lst) (let ((x29738 (apply-prim - lst))) x29738))
  (define (* . lst) (let ((x29739 (apply-prim * lst))) x29739))
  (define (modulo a b) (let ((x29740 (prim modulo a b))) x29740))
  (define (/ . lst) (let ((x29741 (apply-prim / lst))) x29741))
  (define (= . lst) (let ((x29742 (apply-prim = lst))) x29742))
  (define (> . lst) (let ((x29743 (apply-prim > lst))) x29743))
  (define (< . lst) (let ((x29744 (apply-prim < lst))) x29744))
  (define (<= . lst) (let ((x29745 (apply-prim <= lst))) x29745))
  (define (>= . lst) (let ((x29746 (apply-prim >= lst))) x29746))
  (define (null? x) (let ((x29747 (prim null? x))) x29747))
  (define (equal? x y) (let ((x29748 (prim equal? x y))) x29748))
  (define (eq? x y) (let ((x29749 (prim eq? x y))) x29749))
  (define (cons a b) (let ((x29750 (prim cons a b))) x29750))
  (define (car lst) (let ((x29751 (prim car lst))) x29751))
  (define (cdr lst) (let ((x29752 (prim cdr lst))) x29752))
  (define (even? x)
    (let ((a29753 '0))
      (let ((a29754 '2))
        (let ((a29755 (modulo x a29754))) (equal? a29753 a29755)))))
  (define (odd? x)
    (let ((a29756 '1))
      (let ((a29757 '2))
        (let ((a29758 (modulo x a29757))) (equal? a29756 a29758)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a29759 (null? lst)))
      (if a29759
        (let ((x29760 '#f)) x29760)
        (let ((a29761 (car lst)))
          (let ((a29762 (equal? a29761 x)))
            (if a29762
              (let ((x29763 '#t)) x29763)
              (let ((a29764 (cdr lst))) (member? x a29764))))))))
  (define (foldl fun acc lst)
    (let ((a29765 (null? lst)))
      (if a29765
        acc
        (let ((a29766 (car lst)))
          (let ((a29767 (fun a29766 acc)))
            (let ((a29768 (cdr lst))) (foldl fun a29767 a29768)))))))
  (define (reverse-helper lst lst2)
    (let ((a29769 (null? lst)))
      (if a29769
        lst2
        (let ((a29770 (cdr lst)))
          (let ((a29771 (car lst)))
            (let ((a29772 (cons a29771 lst2)))
              (reverse-helper a29770 a29772)))))))
  (define (reverse lst) (let ((a29773 (list))) (reverse-helper lst a29773)))
  (define (take-helper lst n lst2)
    (let ((a29774 '0))
      (let ((a29775 (= n a29774)))
        (if a29775
          (let ((x29776 (reverse lst2))) x29776)
          (let ((a29777 (cdr lst)))
            (let ((a29778 '1))
              (let ((a29779 (- n a29778)))
                (let ((a29780 (car lst)))
                  (let ((a29781 (cons a29780 lst2)))
                    (take-helper a29777 a29779 a29781))))))))))
  (define (take lst n) (let ((a29782 (list))) (take-helper lst n a29782)))
  (define (length lst)
    (let ((a29783 (null? lst)))
      (if a29783
        (let ((x29784 '0)) x29784)
        (let ((a29785 '1))
          (let ((a29786 (cdr lst)))
            (let ((a29787 (length a29786))) (+ a29785 a29787)))))))
  (define (map proc lst)
    (let ((a29788 (null? lst)))
      (if a29788
        (let ((x29789 (list))) x29789)
        (let ((a29790 (car lst)))
          (let ((a29791 (proc a29790)))
            (let ((a29792 (cdr lst)))
              (let ((a29793 (map proc a29792))) (cons a29791 a29793))))))))
  (define (filter op lst)
    (let ((a29794 (null? lst)))
      (if a29794
        (let ((x29795 (list))) x29795)
        (let ((a29796 (car lst)))
          (let ((a29797 (op a29796)))
            (if a29797
              (let ((a29798 (car lst)))
                (let ((a29799 (cdr lst)))
                  (let ((a29800 (filter op a29799))) (cons a29798 a29800))))
              (let ((a29801 (cdr lst))) (filter op a29801))))))))
  (define (drop lst n)
    (let ((a29802 '0))
      (let ((a29803 (= n a29802)))
        (if a29803
          lst
          (let ((a29804 (cdr lst)))
            (let ((a29805 '1))
              (let ((a29806 (- n a29805))) (drop a29804 a29806))))))))
  (define (foldr proc acc lst)
    (let ((a29807 (null? lst)))
      (if a29807
        acc
        (let ((a29808 (car lst)))
          (let ((a29809 (cdr lst)))
            (let ((a29810 (foldr proc acc a29809))) (proc a29808 a29810)))))))
  (define (append lst1 lst2)
    (let ((a29811 (null? lst1)))
      (if a29811
        lst2
        (let ((a29812 (car lst1)))
          (let ((a29813 (cdr lst1)))
            (let ((a29814 (append a29813 lst2))) (cons a29812 a29814)))))))
  (define (hash . lst) (let ((x29815 (apply-prim hash lst))) x29815))
  (define (hash-ref h k) (let ((x29816 (prim hash-ref h k))) x29816))
  (define (hash-set h k v) (let ((x29817 (prim hash-set h k v))) x29817))
  (define (hash-has-key? h k) (let ((x29818 (prim hash-has-key? h k))) x29818))
  (define (hash-count h) (let ((x29819 (prim hash-count h))) x29819))
  (define (call-foldl lst) (let ((a29820 '0)) (foldl + a29820 lst)))
  (define (brouhaha_main)
    (let ((a29821 '1))
      (let ((a29822 '2))
        (let ((a29823 '3))
          (let ((a29824 '4))
            (let ((a29825 '10))
              (let ((a29826 (list a29821 a29822 a29823 a29824 a29825)))
                (call-foldl a29826)))))))))
