'((define (+ . lst) (let ((x31149 (apply-prim + lst))) x31149))
  (define (- . lst) (let ((x31150 (apply-prim - lst))) x31150))
  (define (* . lst) (let ((x31151 (apply-prim * lst))) x31151))
  (define (modulo a b) (let ((x31152 (prim modulo a b))) x31152))
  (define (/ . lst) (let ((x31153 (apply-prim / lst))) x31153))
  (define (= . lst) (let ((x31154 (apply-prim = lst))) x31154))
  (define (> . lst) (let ((x31155 (apply-prim > lst))) x31155))
  (define (< . lst) (let ((x31156 (apply-prim < lst))) x31156))
  (define (<= . lst) (let ((x31157 (apply-prim <= lst))) x31157))
  (define (>= . lst) (let ((x31158 (apply-prim >= lst))) x31158))
  (define (null? x) (let ((x31159 (prim null? x))) x31159))
  (define (equal? x y) (let ((x31160 (prim equal? x y))) x31160))
  (define (eq? x y) (let ((x31161 (prim eq? x y))) x31161))
  (define (cons a b) (let ((x31162 (prim cons a b))) x31162))
  (define (car lst) (let ((x31163 (prim car lst))) x31163))
  (define (cdr lst) (let ((x31164 (prim cdr lst))) x31164))
  (define (even? x)
    (let ((a31165 '0))
      (let ((a31166 '2))
        (let ((a31167 (modulo x a31166))) (equal? a31165 a31167)))))
  (define (odd? x)
    (let ((a31168 '1))
      (let ((a31169 '2))
        (let ((a31170 (modulo x a31169))) (equal? a31168 a31170)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a31171 (null? lst)))
      (if a31171
        (let ((x31172 '#f)) x31172)
        (let ((a31173 (car lst)))
          (let ((a31174 (equal? a31173 x)))
            (if a31174
              (let ((x31175 '#t)) x31175)
              (let ((a31176 (cdr lst))) (member? x a31176))))))))
  (define (foldl fun acc lst)
    (let ((a31177 (null? lst)))
      (if a31177
        acc
        (let ((a31178 (car lst)))
          (let ((a31179 (fun a31178 acc)))
            (let ((a31180 (cdr lst))) (foldl fun a31179 a31180)))))))
  (define (reverse-helper lst lst2)
    (let ((a31181 (null? lst)))
      (if a31181
        lst2
        (let ((a31182 (cdr lst)))
          (let ((a31183 (car lst)))
            (let ((a31184 (cons a31183 lst2)))
              (reverse-helper a31182 a31184)))))))
  (define (reverse lst) (let ((a31185 (list))) (reverse-helper lst a31185)))
  (define (take-helper lst n lst2)
    (let ((a31186 '0))
      (let ((a31187 (= n a31186)))
        (if a31187
          (let ((x31188 (reverse lst2))) x31188)
          (let ((a31189 (cdr lst)))
            (let ((a31190 '1))
              (let ((a31191 (- n a31190)))
                (let ((a31192 (car lst)))
                  (let ((a31193 (cons a31192 lst2)))
                    (take-helper a31189 a31191 a31193))))))))))
  (define (take lst n) (let ((a31194 (list))) (take-helper lst n a31194)))
  (define (length lst)
    (let ((a31195 (null? lst)))
      (if a31195
        (let ((x31196 '0)) x31196)
        (let ((a31197 '1))
          (let ((a31198 (cdr lst)))
            (let ((a31199 (length a31198))) (+ a31197 a31199)))))))
  (define (map proc lst)
    (let ((a31200 (null? lst)))
      (if a31200
        (let ((x31201 (list))) x31201)
        (let ((a31202 (car lst)))
          (let ((a31203 (proc a31202)))
            (let ((a31204 (cdr lst)))
              (let ((a31205 (map proc a31204))) (cons a31203 a31205))))))))
  (define (filter op lst)
    (let ((a31206 (null? lst)))
      (if a31206
        (let ((x31207 (list))) x31207)
        (let ((a31208 (car lst)))
          (let ((a31209 (op a31208)))
            (if a31209
              (let ((a31210 (car lst)))
                (let ((a31211 (cdr lst)))
                  (let ((a31212 (filter op a31211))) (cons a31210 a31212))))
              (let ((a31213 (cdr lst))) (filter op a31213))))))))
  (define (drop lst n)
    (let ((a31214 '0))
      (let ((a31215 (= n a31214)))
        (if a31215
          lst
          (let ((a31216 (cdr lst)))
            (let ((a31217 '1))
              (let ((a31218 (- n a31217))) (drop a31216 a31218))))))))
  (define (foldr proc acc lst)
    (let ((a31219 (null? lst)))
      (if a31219
        acc
        (let ((a31220 (car lst)))
          (let ((a31221 (cdr lst)))
            (let ((a31222 (foldr proc acc a31221))) (proc a31220 a31222)))))))
  (define (append lst1 lst2)
    (let ((a31223 (null? lst1)))
      (if a31223
        lst2
        (let ((a31224 (car lst1)))
          (let ((a31225 (cdr lst1)))
            (let ((a31226 (append a31225 lst2))) (cons a31224 a31226)))))))
  (define (hash . lst) (let ((x31227 (apply-prim hash lst))) x31227))
  (define (hash-ref h k) (let ((x31228 (prim hash-ref h k))) x31228))
  (define (hash-set h k v) (let ((x31229 (prim hash-set h k v))) x31229))
  (define (hash-has-key? h k) (let ((x31230 (prim hash-has-key? h k))) x31230))
  (define (hash-count h) (let ((x31231 (prim hash-count h))) x31231))
  (define (call-foldl lst) (let ((a31232 '0)) (foldl + a31232 lst)))
  (define (brouhaha_main)
    (let ((a31233 '1))
      (let ((a31234 '2))
        (let ((a31235 '3))
          (let ((a31236 '4))
            (let ((a31237 '10))
              (let ((a31238 (list a31233 a31234 a31235 a31236 a31237)))
                (call-foldl a31238)))))))))
