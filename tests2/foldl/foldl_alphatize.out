'((define (+ . lst) (let ((x29961 (apply-prim + lst))) x29961))
  (define (- . lst) (let ((x29962 (apply-prim - lst))) x29962))
  (define (* . lst) (let ((x29963 (apply-prim * lst))) x29963))
  (define (modulo a b) (let ((x29964 (prim modulo a b))) x29964))
  (define (/ . lst) (let ((x29965 (apply-prim / lst))) x29965))
  (define (= . lst) (let ((x29966 (apply-prim = lst))) x29966))
  (define (> . lst) (let ((x29967 (apply-prim > lst))) x29967))
  (define (< . lst) (let ((x29968 (apply-prim < lst))) x29968))
  (define (<= . lst) (let ((x29969 (apply-prim <= lst))) x29969))
  (define (>= . lst) (let ((x29970 (apply-prim >= lst))) x29970))
  (define (null? x) (let ((x29971 (prim null? x))) x29971))
  (define (equal? x y) (let ((x29972 (prim equal? x y))) x29972))
  (define (eq? x y) (let ((x29973 (prim eq? x y))) x29973))
  (define (cons a b) (let ((x29974 (prim cons a b))) x29974))
  (define (car lst) (let ((x29975 (prim car lst))) x29975))
  (define (cdr lst) (let ((x29976 (prim cdr lst))) x29976))
  (define (even? x)
    (let ((a29977 '0))
      (let ((a29978 '2))
        (let ((a29979 (modulo x a29978))) (equal? a29977 a29979)))))
  (define (odd? x)
    (let ((a29980 '1))
      (let ((a29981 '2))
        (let ((a29982 (modulo x a29981))) (equal? a29980 a29982)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a29983 (null? lst)))
      (if a29983
        (let ((x29984 '#f)) x29984)
        (let ((a29985 (car lst)))
          (let ((a29986 (equal? a29985 x)))
            (if a29986
              (let ((x29987 '#t)) x29987)
              (let ((a29988 (cdr lst))) (member? x a29988))))))))
  (define (foldl fun acc lst)
    (let ((a29989 (null? lst)))
      (if a29989
        acc
        (let ((a29990 (car lst)))
          (let ((a29991 (fun a29990 acc)))
            (let ((a29992 (cdr lst))) (foldl fun a29991 a29992)))))))
  (define (reverse-helper lst lst2)
    (let ((a29993 (null? lst)))
      (if a29993
        lst2
        (let ((a29994 (cdr lst)))
          (let ((a29995 (car lst)))
            (let ((a29996 (cons a29995 lst2)))
              (reverse-helper a29994 a29996)))))))
  (define (reverse lst) (let ((a29997 (list))) (reverse-helper lst a29997)))
  (define (take-helper lst n lst2)
    (let ((a29998 '0))
      (let ((a29999 (= n a29998)))
        (if a29999
          (let ((x30000 (reverse lst2))) x30000)
          (let ((a30001 (cdr lst)))
            (let ((a30002 '1))
              (let ((a30003 (- n a30002)))
                (let ((a30004 (car lst)))
                  (let ((a30005 (cons a30004 lst2)))
                    (take-helper a30001 a30003 a30005))))))))))
  (define (take lst n) (let ((a30006 (list))) (take-helper lst n a30006)))
  (define (length lst)
    (let ((a30007 (null? lst)))
      (if a30007
        (let ((x30008 '0)) x30008)
        (let ((a30009 '1))
          (let ((a30010 (cdr lst)))
            (let ((a30011 (length a30010))) (+ a30009 a30011)))))))
  (define (map proc lst)
    (let ((a30012 (null? lst)))
      (if a30012
        (let ((x30013 (list))) x30013)
        (let ((a30014 (car lst)))
          (let ((a30015 (proc a30014)))
            (let ((a30016 (cdr lst)))
              (let ((a30017 (map proc a30016))) (cons a30015 a30017))))))))
  (define (filter op lst)
    (let ((a30018 (null? lst)))
      (if a30018
        (let ((x30019 (list))) x30019)
        (let ((a30020 (car lst)))
          (let ((a30021 (op a30020)))
            (if a30021
              (let ((a30022 (car lst)))
                (let ((a30023 (cdr lst)))
                  (let ((a30024 (filter op a30023))) (cons a30022 a30024))))
              (let ((a30025 (cdr lst))) (filter op a30025))))))))
  (define (drop lst n)
    (let ((a30026 '0))
      (let ((a30027 (= n a30026)))
        (if a30027
          lst
          (let ((a30028 (cdr lst)))
            (let ((a30029 '1))
              (let ((a30030 (- n a30029))) (drop a30028 a30030))))))))
  (define (foldr proc acc lst)
    (let ((a30031 (null? lst)))
      (if a30031
        acc
        (let ((a30032 (car lst)))
          (let ((a30033 (cdr lst)))
            (let ((a30034 (foldr proc acc a30033))) (proc a30032 a30034)))))))
  (define (append lst1 lst2)
    (let ((a30035 (null? lst1)))
      (if a30035
        lst2
        (let ((a30036 (car lst1)))
          (let ((a30037 (cdr lst1)))
            (let ((a30038 (append a30037 lst2))) (cons a30036 a30038)))))))
  (define (hash . lst) (let ((x30039 (apply-prim hash lst))) x30039))
  (define (hash-ref h k) (let ((x30040 (prim hash-ref h k))) x30040))
  (define (hash-set h k v) (let ((x30041 (prim hash-set h k v))) x30041))
  (define (hash-has-key? h k) (let ((x30042 (prim hash-has-key? h k))) x30042))
  (define (hash-count h) (let ((x30043 (prim hash-count h))) x30043))
  (define (call-foldl lst) (let ((a30044 '0)) (foldl + a30044 lst)))
  (define (brouhaha_main)
    (let ((a30045 '1))
      (let ((a30046 '2))
        (let ((a30047 '3))
          (let ((a30048 '4))
            (let ((a30049 '10))
              (let ((a30050 (list a30045 a30046 a30047 a30048 a30049)))
                (call-foldl a30050)))))))))
