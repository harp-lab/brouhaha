'((define (+ . lst) (let ((x29522 (apply-prim + lst))) x29522))
  (define (- . lst) (let ((x29523 (apply-prim - lst))) x29523))
  (define (* . lst) (let ((x29524 (apply-prim * lst))) x29524))
  (define (modulo a b) (let ((x29525 (prim modulo a b))) x29525))
  (define (/ . lst) (let ((x29526 (apply-prim / lst))) x29526))
  (define (= . lst) (let ((x29527 (apply-prim = lst))) x29527))
  (define (> . lst) (let ((x29528 (apply-prim > lst))) x29528))
  (define (< . lst) (let ((x29529 (apply-prim < lst))) x29529))
  (define (<= . lst) (let ((x29530 (apply-prim <= lst))) x29530))
  (define (>= . lst) (let ((x29531 (apply-prim >= lst))) x29531))
  (define (null? x) (let ((x29532 (prim null? x))) x29532))
  (define (equal? x y) (let ((x29533 (prim equal? x y))) x29533))
  (define (eq? x y) (let ((x29534 (prim eq? x y))) x29534))
  (define (cons a b) (let ((x29535 (prim cons a b))) x29535))
  (define (car lst) (let ((x29536 (prim car lst))) x29536))
  (define (cdr lst) (let ((x29537 (prim cdr lst))) x29537))
  (define (even? x)
    (let ((a29538 '0))
      (let ((a29539 '2))
        (let ((a29540 (modulo x a29539))) (equal? a29538 a29540)))))
  (define (odd? x)
    (let ((a29541 '1))
      (let ((a29542 '2))
        (let ((a29543 (modulo x a29542))) (equal? a29541 a29543)))))
  (define (list . x) x)
  (define (and . lst) (let ((x29544 (apply-prim and lst))) x29544))
  (define (or . lst) (let ((x29545 (apply-prim or lst))) x29545))
  (define (member? x lst)
    (let ((a29546 (null? lst)))
      (if a29546
        (let ((x29547 '#f)) x29547)
        (let ((a29548 (car lst)))
          (let ((a29549 (equal? a29548 x)))
            (if a29549
              (let ((x29550 '#t)) x29550)
              (let ((a29551 (cdr lst))) (member? x a29551))))))))
  (define (foldl fun acc lst)
    (let ((a29552 (null? lst)))
      (if a29552
        acc
        (let ((a29553 (car lst)))
          (let ((a29554 (fun a29553 acc)))
            (let ((a29555 (cdr lst))) (foldl fun a29554 a29555)))))))
  (define (reverse-helper lst lst2)
    (let ((a29556 (null? lst)))
      (if a29556
        lst2
        (let ((a29557 (cdr lst)))
          (let ((a29558 (car lst)))
            (let ((a29559 (cons a29558 lst2)))
              (reverse-helper a29557 a29559)))))))
  (define (reverse lst) (let ((a29560 (list))) (reverse-helper lst a29560)))
  (define (take-helper lst n lst2)
    (let ((a29561 '0))
      (let ((a29562 (= n a29561)))
        (if a29562
          (let ((x29563 (reverse lst2))) x29563)
          (let ((a29564 (cdr lst)))
            (let ((a29565 '1))
              (let ((a29566 (- n a29565)))
                (let ((a29567 (car lst)))
                  (let ((a29568 (cons a29567 lst2)))
                    (take-helper a29564 a29566 a29568))))))))))
  (define (take lst n) (let ((a29569 (list))) (take-helper lst n a29569)))
  (define (length lst)
    (let ((a29570 (null? lst)))
      (if a29570
        (let ((x29571 '0)) x29571)
        (let ((a29572 '1))
          (let ((a29573 (cdr lst)))
            (let ((a29574 (length a29573))) (+ a29572 a29574)))))))
  (define (map proc lst)
    (let ((a29575 (null? lst)))
      (if a29575
        (let ((x29576 (list))) x29576)
        (let ((a29577 (car lst)))
          (let ((a29578 (proc a29577)))
            (let ((a29579 (cdr lst)))
              (let ((a29580 (map proc a29579))) (cons a29578 a29580))))))))
  (define (filter op lst)
    (let ((a29581 (null? lst)))
      (if a29581
        (let ((x29582 (list))) x29582)
        (let ((a29583 (car lst)))
          (let ((a29584 (op a29583)))
            (if a29584
              (let ((a29585 (car lst)))
                (let ((a29586 (cdr lst)))
                  (let ((a29587 (filter op a29586))) (cons a29585 a29587))))
              (let ((a29588 (cdr lst))) (filter op a29588))))))))
  (define (drop lst n)
    (let ((a29589 '0))
      (let ((a29590 (= n a29589)))
        (if a29590
          lst
          (let ((a29591 (cdr lst)))
            (let ((a29592 '1))
              (let ((a29593 (- n a29592))) (drop a29591 a29593))))))))
  (define (foldr proc acc lst)
    (let ((a29594 (null? lst)))
      (if a29594
        acc
        (let ((a29595 (car lst)))
          (let ((a29596 (cdr lst)))
            (let ((a29597 (foldr proc acc a29596))) (proc a29595 a29597)))))))
  (define (append lst1 lst2)
    (let ((a29598 (null? lst1)))
      (if a29598
        lst2
        (let ((a29599 (car lst1)))
          (let ((a29600 (cdr lst1)))
            (let ((a29601 (append a29600 lst2))) (cons a29599 a29601)))))))
  (define (hash . lst) (let ((x29602 (apply-prim hash lst))) x29602))
  (define (hash-ref h k) (let ((x29603 (prim hash-ref h k))) x29603))
  (define (hash-set h k v) (let ((x29604 (prim hash-set h k v))) x29604))
  (define (hash-has-key? h k) (let ((x29605 (prim hash-has-key? h k))) x29605))
  (define (hash-count h) (let ((x29606 (prim hash-count h))) x29606))
  (define (call-foldl lst) (let ((a29607 '0)) (foldl + a29607 lst)))
  (define (brouhaha_main)
    (let ((a29608 '1))
      (let ((a29609 '2))
        (let ((a29610 '3))
          (let ((a29611 '4))
            (let ((a29612 '10))
              (let ((a29613 (list a29608 a29609 a29610 a29611 a29612)))
                (call-foldl a29613)))))))))
