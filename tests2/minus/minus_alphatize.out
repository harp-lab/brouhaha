'((define (+ . lst) (let ((x45432 (apply-prim + lst))) x45432))
  (define (- . lst) (let ((x45433 (apply-prim - lst))) x45433))
  (define (* . lst) (let ((x45434 (apply-prim * lst))) x45434))
  (define (modulo a b) (let ((x45435 (prim modulo a b))) x45435))
  (define (/ . lst) (let ((x45436 (apply-prim / lst))) x45436))
  (define (= . lst) (let ((x45437 (apply-prim = lst))) x45437))
  (define (> . lst) (let ((x45438 (apply-prim > lst))) x45438))
  (define (< . lst) (let ((x45439 (apply-prim < lst))) x45439))
  (define (<= . lst) (let ((x45440 (apply-prim <= lst))) x45440))
  (define (>= . lst) (let ((x45441 (apply-prim >= lst))) x45441))
  (define (null? x) (let ((x45442 (prim null? x))) x45442))
  (define (equal? x y) (let ((x45443 (prim equal? x y))) x45443))
  (define (eq? x y) (let ((x45444 (prim eq? x y))) x45444))
  (define (cons a b) (let ((x45445 (prim cons a b))) x45445))
  (define (car lst) (let ((x45446 (prim car lst))) x45446))
  (define (cdr lst) (let ((x45447 (prim cdr lst))) x45447))
  (define (even? x)
    (let ((a45448 '0))
      (let ((a45449 '2))
        (let ((a45450 (modulo x a45449))) (equal? a45448 a45450)))))
  (define (odd? x)
    (let ((a45451 '1))
      (let ((a45452 '2))
        (let ((a45453 (modulo x a45452))) (equal? a45451 a45453)))))
  (define (list . x) x)
  (define (and . lst) (let ((x45454 (apply-prim and lst))) x45454))
  (define (or . lst) (let ((x45455 (apply-prim or lst))) x45455))
  (define (member? x lst)
    (let ((a45456 (null? lst)))
      (if a45456
        (let ((x45457 '#f)) x45457)
        (let ((a45458 (car lst)))
          (let ((a45459 (equal? a45458 x)))
            (if a45459
              (let ((x45460 '#t)) x45460)
              (let ((a45461 (cdr lst))) (member? x a45461))))))))
  (define (foldl fun acc lst)
    (let ((a45462 (null? lst)))
      (if a45462
        acc
        (let ((a45463 (car lst)))
          (let ((a45464 (fun a45463 acc)))
            (let ((a45465 (cdr lst))) (foldl fun a45464 a45465)))))))
  (define (reverse-helper lst lst2)
    (let ((a45466 (null? lst)))
      (if a45466
        lst2
        (let ((a45467 (cdr lst)))
          (let ((a45468 (car lst)))
            (let ((a45469 (cons a45468 lst2)))
              (reverse-helper a45467 a45469)))))))
  (define (reverse lst) (let ((a45470 (list))) (reverse-helper lst a45470)))
  (define (take-helper lst n lst2)
    (let ((a45471 '0))
      (let ((a45472 (= n a45471)))
        (if a45472
          (let ((x45473 (reverse lst2))) x45473)
          (let ((a45474 (cdr lst)))
            (let ((a45475 '1))
              (let ((a45476 (- n a45475)))
                (let ((a45477 (car lst)))
                  (let ((a45478 (cons a45477 lst2)))
                    (take-helper a45474 a45476 a45478))))))))))
  (define (take lst n) (let ((a45479 (list))) (take-helper lst n a45479)))
  (define (length lst)
    (let ((a45480 (null? lst)))
      (if a45480
        (let ((x45481 '0)) x45481)
        (let ((a45482 '1))
          (let ((a45483 (cdr lst)))
            (let ((a45484 (length a45483))) (+ a45482 a45484)))))))
  (define (map proc lst)
    (let ((a45485 (null? lst)))
      (if a45485
        (let ((x45486 (list))) x45486)
        (let ((a45487 (car lst)))
          (let ((a45488 (proc a45487)))
            (let ((a45489 (cdr lst)))
              (let ((a45490 (map proc a45489))) (cons a45488 a45490))))))))
  (define (filter op lst)
    (let ((a45491 (null? lst)))
      (if a45491
        (let ((x45492 (list))) x45492)
        (let ((a45493 (car lst)))
          (let ((a45494 (op a45493)))
            (if a45494
              (let ((a45495 (car lst)))
                (let ((a45496 (cdr lst)))
                  (let ((a45497 (filter op a45496))) (cons a45495 a45497))))
              (let ((a45498 (cdr lst))) (filter op a45498))))))))
  (define (drop lst n)
    (let ((a45499 '0))
      (let ((a45500 (= n a45499)))
        (if a45500
          lst
          (let ((a45501 (cdr lst)))
            (let ((a45502 '1))
              (let ((a45503 (- n a45502))) (drop a45501 a45503))))))))
  (define (foldr proc acc lst)
    (let ((a45504 (null? lst)))
      (if a45504
        acc
        (let ((a45505 (car lst)))
          (let ((a45506 (cdr lst)))
            (let ((a45507 (foldr proc acc a45506))) (proc a45505 a45507)))))))
  (define (append lst1 lst2)
    (let ((a45508 (null? lst1)))
      (if a45508
        lst2
        (let ((a45509 (car lst1)))
          (let ((a45510 (cdr lst1)))
            (let ((a45511 (append a45510 lst2))) (cons a45509 a45511)))))))
  (define (hash . lst) (let ((x45512 (apply-prim hash lst))) x45512))
  (define (hash-ref h k) (let ((x45513 (prim hash-ref h k))) x45513))
  (define (hash-set h k v) (let ((x45514 (prim hash-set h k v))) x45514))
  (define (hash-has-key? h k) (let ((x45515 (prim hash-has-key? h k))) x45515))
  (define (hash-count h) (let ((x45516 (prim hash-count h))) x45516))
  (define (call)
    (let ((a45517 '100))
      (let ((a45518 '80))
        (let ((a45519 '10))
          (let ((a45520 '2)) (- a45517 a45518 a45519 a45520))))))
  (define (brouhaha_main) (let ((x45521 (call))) x45521)))
