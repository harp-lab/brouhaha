'((define (+ . lst)
    (let ((kont45522 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45432 (apply-prim + lst))) (kont45522 x45432)))))
  (define (- . lst)
    (let ((kont45524 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45433 (apply-prim - lst))) (kont45524 x45433)))))
  (define (* . lst)
    (let ((kont45526 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45434 (apply-prim * lst))) (kont45526 x45434)))))
  (define (modulo kont45528 a b)
    (let ((x45435 (prim modulo a b))) (kont45528 x45435)))
  (define (/ . lst)
    (let ((kont45529 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45436 (apply-prim / lst))) (kont45529 x45436)))))
  (define (= . lst)
    (let ((kont45531 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45437 (apply-prim = lst))) (kont45531 x45437)))))
  (define (> . lst)
    (let ((kont45533 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45438 (apply-prim > lst))) (kont45533 x45438)))))
  (define (< . lst)
    (let ((kont45535 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45439 (apply-prim < lst))) (kont45535 x45439)))))
  (define (<= . lst)
    (let ((kont45537 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45440 (apply-prim <= lst))) (kont45537 x45440)))))
  (define (>= . lst)
    (let ((kont45539 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45441 (apply-prim >= lst))) (kont45539 x45441)))))
  (define (null? kont45541 x)
    (let ((x45442 (prim null? x))) (kont45541 x45442)))
  (define (equal? kont45542 x y)
    (let ((x45443 (prim equal? x y))) (kont45542 x45443)))
  (define (eq? kont45543 x y)
    (let ((x45444 (prim eq? x y))) (kont45543 x45444)))
  (define (cons kont45544 a b)
    (let ((x45445 (prim cons a b))) (kont45544 x45445)))
  (define (car kont45545 lst)
    (let ((x45446 (prim car lst))) (kont45545 x45446)))
  (define (cdr kont45546 lst)
    (let ((x45447 (prim cdr lst))) (kont45546 x45447)))
  (define (even? kont45547 x)
    (let ((a45448 '0))
      (let ((a45449 '2))
        (let ((f45548 (lambda (a45450) (equal? kont45547 a45448 a45450))))
          (modulo f45548 x a45449)))))
  (define (odd? kont45549 x)
    (let ((a45451 '1))
      (let ((a45452 '2))
        (let ((f45550 (lambda (a45453) (equal? kont45549 a45451 a45453))))
          (modulo f45550 x a45452)))))
  (define (list . x)
    (let ((kont45551 (prim car x))) (let ((x (prim cdr x))) (kont45551 x))))
  (define (and . lst)
    (let ((kont45553 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45454 (apply-prim and lst))) (kont45553 x45454)))))
  (define (or . lst)
    (let ((kont45555 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45455 (apply-prim or lst))) (kont45555 x45455)))))
  (define (member? kont45557 x lst)
    (let ((f45561
           (lambda (a45456)
             (if a45456
               (let ((x45457 '#f)) (kont45557 x45457))
               (let ((f45560
                      (lambda (a45458)
                        (let ((f45559
                               (lambda (a45459)
                                 (if a45459
                                   (let ((x45460 '#t)) (kont45557 x45460))
                                   (let ((f45558
                                          (lambda (a45461)
                                            (member? kont45557 x a45461))))
                                     (cdr f45558 lst))))))
                          (equal? f45559 a45458 x)))))
                 (car f45560 lst))))))
      (null? f45561 lst)))
  (define (foldl kont45562 fun acc lst)
    (let ((f45566
           (lambda (a45462)
             (if a45462
               (kont45562 acc)
               (let ((f45565
                      (lambda (a45463)
                        (let ((f45564
                               (lambda (a45464)
                                 (let ((f45563
                                        (lambda (a45465)
                                          (foldl
                                           kont45562
                                           fun
                                           a45464
                                           a45465))))
                                   (cdr f45563 lst)))))
                          (fun f45564 a45463 acc)))))
                 (car f45565 lst))))))
      (null? f45566 lst)))
  (define (reverse-helper kont45567 lst lst2)
    (let ((f45571
           (lambda (a45466)
             (if a45466
               (kont45567 lst2)
               (let ((f45570
                      (lambda (a45467)
                        (let ((f45569
                               (lambda (a45468)
                                 (let ((f45568
                                        (lambda (a45469)
                                          (reverse-helper
                                           kont45567
                                           a45467
                                           a45469))))
                                   (cons f45568 a45468 lst2)))))
                          (car f45569 lst)))))
                 (cdr f45570 lst))))))
      (null? f45571 lst)))
  (define (reverse kont45572 lst)
    (let ((f45573 (lambda (a45470) (reverse-helper kont45572 lst a45470))))
      (list f45573)))
  (define (take-helper kont45574 lst n lst2)
    (let ((a45471 '0))
      (let ((f45580
             (lambda (a45472)
               (if a45472
                 (let ((f45575 (lambda (x45473) (kont45574 x45473))))
                   (reverse f45575 lst2))
                 (let ((f45579
                        (lambda (a45474)
                          (let ((a45475 '1))
                            (let ((f45578
                                   (lambda (a45476)
                                     (let ((f45577
                                            (lambda (a45477)
                                              (let ((f45576
                                                     (lambda (a45478)
                                                       (take-helper
                                                        kont45574
                                                        a45474
                                                        a45476
                                                        a45478))))
                                                (cons f45576 a45477 lst2)))))
                                       (car f45577 lst)))))
                              (- f45578 n a45475))))))
                   (cdr f45579 lst))))))
        (= f45580 n a45471))))
  (define (take kont45581 lst n)
    (let ((f45582 (lambda (a45479) (take-helper kont45581 lst n a45479))))
      (list f45582)))
  (define (length kont45583 lst)
    (let ((f45586
           (lambda (a45480)
             (if a45480
               (let ((x45481 '0)) (kont45583 x45481))
               (let ((a45482 '1))
                 (let ((f45585
                        (lambda (a45483)
                          (let ((f45584
                                 (lambda (a45484)
                                   (+ kont45583 a45482 a45484))))
                            (length f45584 a45483)))))
                   (cdr f45585 lst)))))))
      (null? f45586 lst)))
  (define (map kont45587 proc lst)
    (let ((f45593
           (lambda (a45485)
             (if a45485
               (let ((f45588 (lambda (x45486) (kont45587 x45486))))
                 (list f45588))
               (let ((f45592
                      (lambda (a45487)
                        (let ((f45591
                               (lambda (a45488)
                                 (let ((f45590
                                        (lambda (a45489)
                                          (let ((f45589
                                                 (lambda (a45490)
                                                   (cons
                                                    kont45587
                                                    a45488
                                                    a45490))))
                                            (map f45589 proc a45489)))))
                                   (cdr f45590 lst)))))
                          (proc f45591 a45487)))))
                 (car f45592 lst))))))
      (null? f45593 lst)))
  (define (filter kont45594 op lst)
    (let ((f45602
           (lambda (a45491)
             (if a45491
               (let ((f45595 (lambda (x45492) (kont45594 x45492))))
                 (list f45595))
               (let ((f45601
                      (lambda (a45493)
                        (let ((f45600
                               (lambda (a45494)
                                 (if a45494
                                   (let ((f45598
                                          (lambda (a45495)
                                            (let ((f45597
                                                   (lambda (a45496)
                                                     (let ((f45596
                                                            (lambda (a45497)
                                                              (cons
                                                               kont45594
                                                               a45495
                                                               a45497))))
                                                       (filter
                                                        f45596
                                                        op
                                                        a45496)))))
                                              (cdr f45597 lst)))))
                                     (car f45598 lst))
                                   (let ((f45599
                                          (lambda (a45498)
                                            (filter kont45594 op a45498))))
                                     (cdr f45599 lst))))))
                          (op f45600 a45493)))))
                 (car f45601 lst))))))
      (null? f45602 lst)))
  (define (drop kont45603 lst n)
    (let ((a45499 '0))
      (let ((f45606
             (lambda (a45500)
               (if a45500
                 (kont45603 lst)
                 (let ((f45605
                        (lambda (a45501)
                          (let ((a45502 '1))
                            (let ((f45604
                                   (lambda (a45503)
                                     (drop kont45603 a45501 a45503))))
                              (- f45604 n a45502))))))
                   (cdr f45605 lst))))))
        (= f45606 n a45499))))
  (define (foldr kont45607 proc acc lst)
    (let ((f45611
           (lambda (a45504)
             (if a45504
               (kont45607 acc)
               (let ((f45610
                      (lambda (a45505)
                        (let ((f45609
                               (lambda (a45506)
                                 (let ((f45608
                                        (lambda (a45507)
                                          (proc kont45607 a45505 a45507))))
                                   (foldr f45608 proc acc a45506)))))
                          (cdr f45609 lst)))))
                 (car f45610 lst))))))
      (null? f45611 lst)))
  (define (append kont45612 lst1 lst2)
    (let ((f45616
           (lambda (a45508)
             (if a45508
               (kont45612 lst2)
               (let ((f45615
                      (lambda (a45509)
                        (let ((f45614
                               (lambda (a45510)
                                 (let ((f45613
                                        (lambda (a45511)
                                          (cons kont45612 a45509 a45511))))
                                   (append f45613 a45510 lst2)))))
                          (cdr f45614 lst1)))))
                 (car f45615 lst1))))))
      (null? f45616 lst1)))
  (define (hash . lst)
    (let ((kont45617 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45512 (apply-prim hash lst))) (kont45617 x45512)))))
  (define (hash-ref kont45619 h k)
    (let ((x45513 (prim hash-ref h k))) (kont45619 x45513)))
  (define (hash-set kont45620 h k v)
    (let ((x45514 (prim hash-set h k v))) (kont45620 x45514)))
  (define (hash-has-key? kont45621 h k)
    (let ((x45515 (prim hash-has-key? h k))) (kont45621 x45515)))
  (define (hash-count kont45622 h)
    (let ((x45516 (prim hash-count h))) (kont45622 x45516)))
  (define (call kont45623)
    (let ((a45517 '100))
      (let ((a45518 '80))
        (let ((a45519 '10))
          (let ((a45520 '2)) (- kont45623 a45517 a45518 a45519 a45520))))))
  (define (brouhaha_main kont45624)
    (let ((f45625 (lambda (x45521) (kont45624 x45521)))) (call f45625))))
