'((define (+ . lst)
    (let ((kont22929 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22841 (apply-prim + lst))) (kont22929 x22841)))))
  (define (- . lst)
    (let ((kont22931 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22842 (apply-prim - lst))) (kont22931 x22842)))))
  (define (* . lst)
    (let ((kont22933 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22843 (apply-prim * lst))) (kont22933 x22843)))))
  (define (modulo kont22935 a b)
    (let ((x22844 (prim modulo a b))) (kont22935 x22844)))
  (define (/ . lst)
    (let ((kont22936 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22845 (apply-prim / lst))) (kont22936 x22845)))))
  (define (= . lst)
    (let ((kont22938 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22846 (apply-prim = lst))) (kont22938 x22846)))))
  (define (> . lst)
    (let ((kont22940 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22847 (apply-prim > lst))) (kont22940 x22847)))))
  (define (< . lst)
    (let ((kont22942 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22848 (apply-prim < lst))) (kont22942 x22848)))))
  (define (<= . lst)
    (let ((kont22944 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22849 (apply-prim <= lst))) (kont22944 x22849)))))
  (define (>= . lst)
    (let ((kont22946 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22850 (apply-prim >= lst))) (kont22946 x22850)))))
  (define (null? kont22948 x)
    (let ((x22851 (prim null? x))) (kont22948 x22851)))
  (define (equal? kont22949 x y)
    (let ((x22852 (prim equal? x y))) (kont22949 x22852)))
  (define (eq? kont22950 x y)
    (let ((x22853 (prim eq? x y))) (kont22950 x22853)))
  (define (cons kont22951 a b)
    (let ((x22854 (prim cons a b))) (kont22951 x22854)))
  (define (car kont22952 lst)
    (let ((x22855 (prim car lst))) (kont22952 x22855)))
  (define (cdr kont22953 lst)
    (let ((x22856 (prim cdr lst))) (kont22953 x22856)))
  (define (even? kont22954 x)
    (let ((a22857 '0))
      (let ((a22858 '2))
        (let ((f22955 (lambda (a22859) (equal? kont22954 a22857 a22859))))
          (modulo f22955 x a22858)))))
  (define (odd? kont22956 x)
    (let ((a22860 '1))
      (let ((a22861 '2))
        (let ((f22957 (lambda (a22862) (equal? kont22956 a22860 a22862))))
          (modulo f22957 x a22861)))))
  (define (list . x)
    (let ((kont22958 (prim car x))) (let ((x (prim cdr x))) (kont22958 x))))
  (define (member? kont22960 x lst)
    (let ((f22964
           (lambda (a22863)
             (if a22863
               (let ((x22864 '#f)) (kont22960 x22864))
               (let ((f22963
                      (lambda (a22865)
                        (let ((f22962
                               (lambda (a22866)
                                 (if a22866
                                   (let ((x22867 '#t)) (kont22960 x22867))
                                   (let ((f22961
                                          (lambda (a22868)
                                            (member? kont22960 x a22868))))
                                     (cdr f22961 lst))))))
                          (equal? f22962 a22865 x)))))
                 (car f22963 lst))))))
      (null? f22964 lst)))
  (define (foldl kont22965 fun acc lst)
    (let ((f22969
           (lambda (a22869)
             (if a22869
               (kont22965 acc)
               (let ((f22968
                      (lambda (a22870)
                        (let ((f22967
                               (lambda (a22871)
                                 (let ((f22966
                                        (lambda (a22872)
                                          (foldl
                                           kont22965
                                           fun
                                           a22871
                                           a22872))))
                                   (cdr f22966 lst)))))
                          (fun f22967 a22870 acc)))))
                 (car f22968 lst))))))
      (null? f22969 lst)))
  (define (reverse-helper kont22970 lst lst2)
    (let ((f22974
           (lambda (a22873)
             (if a22873
               (kont22970 lst2)
               (let ((f22973
                      (lambda (a22874)
                        (let ((f22972
                               (lambda (a22875)
                                 (let ((f22971
                                        (lambda (a22876)
                                          (reverse-helper
                                           kont22970
                                           a22874
                                           a22876))))
                                   (cons f22971 a22875 lst2)))))
                          (car f22972 lst)))))
                 (cdr f22973 lst))))))
      (null? f22974 lst)))
  (define (reverse kont22975 lst)
    (let ((f22976 (lambda (a22877) (reverse-helper kont22975 lst a22877))))
      (list f22976)))
  (define (take-helper kont22977 lst n lst2)
    (let ((a22878 '0))
      (let ((f22983
             (lambda (a22879)
               (if a22879
                 (let ((f22978 (lambda (x22880) (kont22977 x22880))))
                   (reverse f22978 lst2))
                 (let ((f22982
                        (lambda (a22881)
                          (let ((a22882 '1))
                            (let ((f22981
                                   (lambda (a22883)
                                     (let ((f22980
                                            (lambda (a22884)
                                              (let ((f22979
                                                     (lambda (a22885)
                                                       (take-helper
                                                        kont22977
                                                        a22881
                                                        a22883
                                                        a22885))))
                                                (cons f22979 a22884 lst2)))))
                                       (car f22980 lst)))))
                              (- f22981 n a22882))))))
                   (cdr f22982 lst))))))
        (= f22983 n a22878))))
  (define (take kont22984 lst n)
    (let ((f22985 (lambda (a22886) (take-helper kont22984 lst n a22886))))
      (list f22985)))
  (define (length kont22986 lst)
    (let ((f22989
           (lambda (a22887)
             (if a22887
               (let ((x22888 '0)) (kont22986 x22888))
               (let ((a22889 '1))
                 (let ((f22988
                        (lambda (a22890)
                          (let ((f22987
                                 (lambda (a22891)
                                   (+ kont22986 a22889 a22891))))
                            (length f22987 a22890)))))
                   (cdr f22988 lst)))))))
      (null? f22989 lst)))
  (define (map kont22990 proc lst)
    (let ((f22996
           (lambda (a22892)
             (if a22892
               (let ((f22991 (lambda (x22893) (kont22990 x22893))))
                 (list f22991))
               (let ((f22995
                      (lambda (a22894)
                        (let ((f22994
                               (lambda (a22895)
                                 (let ((f22993
                                        (lambda (a22896)
                                          (let ((f22992
                                                 (lambda (a22897)
                                                   (cons
                                                    kont22990
                                                    a22895
                                                    a22897))))
                                            (map f22992 proc a22896)))))
                                   (cdr f22993 lst)))))
                          (proc f22994 a22894)))))
                 (car f22995 lst))))))
      (null? f22996 lst)))
  (define (filter kont22997 op lst)
    (let ((f23005
           (lambda (a22898)
             (if a22898
               (let ((f22998 (lambda (x22899) (kont22997 x22899))))
                 (list f22998))
               (let ((f23004
                      (lambda (a22900)
                        (let ((f23003
                               (lambda (a22901)
                                 (if a22901
                                   (let ((f23001
                                          (lambda (a22902)
                                            (let ((f23000
                                                   (lambda (a22903)
                                                     (let ((f22999
                                                            (lambda (a22904)
                                                              (cons
                                                               kont22997
                                                               a22902
                                                               a22904))))
                                                       (filter
                                                        f22999
                                                        op
                                                        a22903)))))
                                              (cdr f23000 lst)))))
                                     (car f23001 lst))
                                   (let ((f23002
                                          (lambda (a22905)
                                            (filter kont22997 op a22905))))
                                     (cdr f23002 lst))))))
                          (op f23003 a22900)))))
                 (car f23004 lst))))))
      (null? f23005 lst)))
  (define (drop kont23006 lst n)
    (let ((a22906 '0))
      (let ((f23009
             (lambda (a22907)
               (if a22907
                 (kont23006 lst)
                 (let ((f23008
                        (lambda (a22908)
                          (let ((a22909 '1))
                            (let ((f23007
                                   (lambda (a22910)
                                     (drop kont23006 a22908 a22910))))
                              (- f23007 n a22909))))))
                   (cdr f23008 lst))))))
        (= f23009 n a22906))))
  (define (foldr kont23010 proc acc lst)
    (let ((f23014
           (lambda (a22911)
             (if a22911
               (kont23010 acc)
               (let ((f23013
                      (lambda (a22912)
                        (let ((f23012
                               (lambda (a22913)
                                 (let ((f23011
                                        (lambda (a22914)
                                          (proc kont23010 a22912 a22914))))
                                   (foldr f23011 proc acc a22913)))))
                          (cdr f23012 lst)))))
                 (car f23013 lst))))))
      (null? f23014 lst)))
  (define (append kont23015 lst1 lst2)
    (let ((f23019
           (lambda (a22915)
             (if a22915
               (kont23015 lst2)
               (let ((f23018
                      (lambda (a22916)
                        (let ((f23017
                               (lambda (a22917)
                                 (let ((f23016
                                        (lambda (a22918)
                                          (cons kont23015 a22916 a22918))))
                                   (append f23016 a22917 lst2)))))
                          (cdr f23017 lst1)))))
                 (car f23018 lst1))))))
      (null? f23019 lst1)))
  (define (hash . lst)
    (let ((kont23020 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x22919 (apply-prim hash lst))) (kont23020 x22919)))))
  (define (hash-ref kont23022 h k)
    (let ((x22920 (prim hash-ref h k))) (kont23022 x22920)))
  (define (hash-set kont23023 h k v)
    (let ((x22921 (prim hash-set h k v))) (kont23023 x22921)))
  (define (hash-has-key? kont23024 h k)
    (let ((x22922 (prim hash-has-key? h k))) (kont23024 x22922)))
  (define (hash-count kont23025 h)
    (let ((x22923 (prim hash-count h))) (kont23025 x22923)))
  (define (call kont23026)
    (let ((a22924 '1))
      (let ((a22925 '2))
        (let ((a22926 '3))
          (let ((f23027 (lambda (a22927) (filter kont23026 odd? a22927))))
            (list f23027 a22924 a22925 a22926))))))
  (define (brouhaha_main kont23028)
    (let ((f23029 (lambda (x22928) (kont23028 x22928)))) (call f23029))))
