'((define (+ . lst)
    (let ((kont21989 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21901 (apply-prim + lst))) (kont21989 x21901)))))
  (define (- . lst)
    (let ((kont21991 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21902 (apply-prim - lst))) (kont21991 x21902)))))
  (define (* . lst)
    (let ((kont21993 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21903 (apply-prim * lst))) (kont21993 x21903)))))
  (define (modulo kont21995 a b)
    (let ((x21904 (prim modulo a b))) (kont21995 x21904)))
  (define (/ . lst)
    (let ((kont21996 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21905 (apply-prim / lst))) (kont21996 x21905)))))
  (define (= . lst)
    (let ((kont21998 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21906 (apply-prim = lst))) (kont21998 x21906)))))
  (define (> . lst)
    (let ((kont22000 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21907 (apply-prim > lst))) (kont22000 x21907)))))
  (define (< . lst)
    (let ((kont22002 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21908 (apply-prim < lst))) (kont22002 x21908)))))
  (define (<= . lst)
    (let ((kont22004 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21909 (apply-prim <= lst))) (kont22004 x21909)))))
  (define (>= . lst)
    (let ((kont22006 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21910 (apply-prim >= lst))) (kont22006 x21910)))))
  (define (null? kont22008 x)
    (let ((x21911 (prim null? x))) (kont22008 x21911)))
  (define (equal? kont22009 x y)
    (let ((x21912 (prim equal? x y))) (kont22009 x21912)))
  (define (eq? kont22010 x y)
    (let ((x21913 (prim eq? x y))) (kont22010 x21913)))
  (define (cons kont22011 a b)
    (let ((x21914 (prim cons a b))) (kont22011 x21914)))
  (define (car kont22012 lst)
    (let ((x21915 (prim car lst))) (kont22012 x21915)))
  (define (cdr kont22013 lst)
    (let ((x21916 (prim cdr lst))) (kont22013 x21916)))
  (define (even? kont22014 x)
    (let ((a21917 '0))
      (let ((a21918 '2))
        (let ((f22015 (lambda (a21919) (equal? kont22014 a21917 a21919))))
          (modulo f22015 x a21918)))))
  (define (odd? kont22016 x)
    (let ((a21920 '1))
      (let ((a21921 '2))
        (let ((f22017 (lambda (a21922) (equal? kont22016 a21920 a21922))))
          (modulo f22017 x a21921)))))
  (define (list . x)
    (let ((kont22018 (prim car x))) (let ((x (prim cdr x))) (kont22018 x))))
  (define (member? kont22020 x lst)
    (let ((f22024
           (lambda (a21923)
             (if a21923
               (let ((x21924 '#f)) (kont22020 x21924))
               (let ((f22023
                      (lambda (a21925)
                        (let ((f22022
                               (lambda (a21926)
                                 (if a21926
                                   (let ((x21927 '#t)) (kont22020 x21927))
                                   (let ((f22021
                                          (lambda (a21928)
                                            (member? kont22020 x a21928))))
                                     (cdr f22021 lst))))))
                          (equal? f22022 a21925 x)))))
                 (car f22023 lst))))))
      (null? f22024 lst)))
  (define (foldl kont22025 fun acc lst)
    (let ((f22029
           (lambda (a21929)
             (if a21929
               (kont22025 acc)
               (let ((f22028
                      (lambda (a21930)
                        (let ((f22027
                               (lambda (a21931)
                                 (let ((f22026
                                        (lambda (a21932)
                                          (foldl
                                           kont22025
                                           fun
                                           a21931
                                           a21932))))
                                   (cdr f22026 lst)))))
                          (fun f22027 a21930 acc)))))
                 (car f22028 lst))))))
      (null? f22029 lst)))
  (define (reverse-helper kont22030 lst lst2)
    (let ((f22034
           (lambda (a21933)
             (if a21933
               (kont22030 lst2)
               (let ((f22033
                      (lambda (a21934)
                        (let ((f22032
                               (lambda (a21935)
                                 (let ((f22031
                                        (lambda (a21936)
                                          (reverse-helper
                                           kont22030
                                           a21934
                                           a21936))))
                                   (cons f22031 a21935 lst2)))))
                          (car f22032 lst)))))
                 (cdr f22033 lst))))))
      (null? f22034 lst)))
  (define (reverse kont22035 lst)
    (let ((f22036 (lambda (a21937) (reverse-helper kont22035 lst a21937))))
      (list f22036)))
  (define (take-helper kont22037 lst n lst2)
    (let ((a21938 '0))
      (let ((f22043
             (lambda (a21939)
               (if a21939
                 (let ((f22038 (lambda (x21940) (kont22037 x21940))))
                   (reverse f22038 lst2))
                 (let ((f22042
                        (lambda (a21941)
                          (let ((a21942 '1))
                            (let ((f22041
                                   (lambda (a21943)
                                     (let ((f22040
                                            (lambda (a21944)
                                              (let ((f22039
                                                     (lambda (a21945)
                                                       (take-helper
                                                        kont22037
                                                        a21941
                                                        a21943
                                                        a21945))))
                                                (cons f22039 a21944 lst2)))))
                                       (car f22040 lst)))))
                              (- f22041 n a21942))))))
                   (cdr f22042 lst))))))
        (= f22043 n a21938))))
  (define (take kont22044 lst n)
    (let ((f22045 (lambda (a21946) (take-helper kont22044 lst n a21946))))
      (list f22045)))
  (define (length kont22046 lst)
    (let ((f22049
           (lambda (a21947)
             (if a21947
               (let ((x21948 '0)) (kont22046 x21948))
               (let ((a21949 '1))
                 (let ((f22048
                        (lambda (a21950)
                          (let ((f22047
                                 (lambda (a21951)
                                   (+ kont22046 a21949 a21951))))
                            (length f22047 a21950)))))
                   (cdr f22048 lst)))))))
      (null? f22049 lst)))
  (define (map kont22050 proc lst)
    (let ((f22056
           (lambda (a21952)
             (if a21952
               (let ((f22051 (lambda (x21953) (kont22050 x21953))))
                 (list f22051))
               (let ((f22055
                      (lambda (a21954)
                        (let ((f22054
                               (lambda (a21955)
                                 (let ((f22053
                                        (lambda (a21956)
                                          (let ((f22052
                                                 (lambda (a21957)
                                                   (cons
                                                    kont22050
                                                    a21955
                                                    a21957))))
                                            (map f22052 proc a21956)))))
                                   (cdr f22053 lst)))))
                          (proc f22054 a21954)))))
                 (car f22055 lst))))))
      (null? f22056 lst)))
  (define (filter kont22057 op lst)
    (let ((f22065
           (lambda (a21958)
             (if a21958
               (let ((f22058 (lambda (x21959) (kont22057 x21959))))
                 (list f22058))
               (let ((f22064
                      (lambda (a21960)
                        (let ((f22063
                               (lambda (a21961)
                                 (if a21961
                                   (let ((f22061
                                          (lambda (a21962)
                                            (let ((f22060
                                                   (lambda (a21963)
                                                     (let ((f22059
                                                            (lambda (a21964)
                                                              (cons
                                                               kont22057
                                                               a21962
                                                               a21964))))
                                                       (filter
                                                        f22059
                                                        op
                                                        a21963)))))
                                              (cdr f22060 lst)))))
                                     (car f22061 lst))
                                   (let ((f22062
                                          (lambda (a21965)
                                            (filter kont22057 op a21965))))
                                     (cdr f22062 lst))))))
                          (op f22063 a21960)))))
                 (car f22064 lst))))))
      (null? f22065 lst)))
  (define (drop kont22066 lst n)
    (let ((a21966 '0))
      (let ((f22069
             (lambda (a21967)
               (if a21967
                 (kont22066 lst)
                 (let ((f22068
                        (lambda (a21968)
                          (let ((a21969 '1))
                            (let ((f22067
                                   (lambda (a21970)
                                     (drop kont22066 a21968 a21970))))
                              (- f22067 n a21969))))))
                   (cdr f22068 lst))))))
        (= f22069 n a21966))))
  (define (foldr kont22070 proc acc lst)
    (let ((f22074
           (lambda (a21971)
             (if a21971
               (kont22070 acc)
               (let ((f22073
                      (lambda (a21972)
                        (let ((f22072
                               (lambda (a21973)
                                 (let ((f22071
                                        (lambda (a21974)
                                          (proc kont22070 a21972 a21974))))
                                   (foldr f22071 proc acc a21973)))))
                          (cdr f22072 lst)))))
                 (car f22073 lst))))))
      (null? f22074 lst)))
  (define (append kont22075 lst1 lst2)
    (let ((f22079
           (lambda (a21975)
             (if a21975
               (kont22075 lst2)
               (let ((f22078
                      (lambda (a21976)
                        (let ((f22077
                               (lambda (a21977)
                                 (let ((f22076
                                        (lambda (a21978)
                                          (cons kont22075 a21976 a21978))))
                                   (append f22076 a21977 lst2)))))
                          (cdr f22077 lst1)))))
                 (car f22078 lst1))))))
      (null? f22079 lst1)))
  (define (hash . lst)
    (let ((kont22080 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x21979 (apply-prim hash lst))) (kont22080 x21979)))))
  (define (hash-ref kont22082 h k)
    (let ((x21980 (prim hash-ref h k))) (kont22082 x21980)))
  (define (hash-set kont22083 h k v)
    (let ((x21981 (prim hash-set h k v))) (kont22083 x21981)))
  (define (hash-has-key? kont22084 h k)
    (let ((x21982 (prim hash-has-key? h k))) (kont22084 x21982)))
  (define (hash-count kont22085 h)
    (let ((x21983 (prim hash-count h))) (kont22085 x21983)))
  (define (call kont22086)
    (let ((a21984 '1))
      (let ((a21985 '2))
        (let ((a21986 '3))
          (let ((f22087 (lambda (a21987) (filter kont22086 odd? a21987))))
            (list f22087 a21984 a21985 a21986))))))
  (define (brouhaha_main kont22088)
    (let ((f22089 (lambda (x21988) (kont22088 x21988)))) (call f22089))))
