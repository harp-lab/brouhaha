'((define (+ . lst) (let ((x22388 (apply-prim + lst))) x22388))
  (define (- . lst) (let ((x22389 (apply-prim - lst))) x22389))
  (define (* . lst) (let ((x22390 (apply-prim * lst))) x22390))
  (define (modulo a b) (let ((x22391 (prim modulo a b))) x22391))
  (define (/ . lst) (let ((x22392 (apply-prim / lst))) x22392))
  (define (= . lst) (let ((x22393 (apply-prim = lst))) x22393))
  (define (> . lst) (let ((x22394 (apply-prim > lst))) x22394))
  (define (< . lst) (let ((x22395 (apply-prim < lst))) x22395))
  (define (<= . lst) (let ((x22396 (apply-prim <= lst))) x22396))
  (define (>= . lst) (let ((x22397 (apply-prim >= lst))) x22397))
  (define (null? x) (let ((x22398 (prim null? x))) x22398))
  (define (equal? x y) (let ((x22399 (prim equal? x y))) x22399))
  (define (eq? x y) (let ((x22400 (prim eq? x y))) x22400))
  (define (cons a b) (let ((x22401 (prim cons a b))) x22401))
  (define (car lst) (let ((x22402 (prim car lst))) x22402))
  (define (cdr lst) (let ((x22403 (prim cdr lst))) x22403))
  (define (even? x)
    (let ((a22404 '0))
      (let ((a22405 '2))
        (let ((a22406 (modulo x a22405))) (equal? a22404 a22406)))))
  (define (odd? x)
    (let ((a22407 '1))
      (let ((a22408 '2))
        (let ((a22409 (modulo x a22408))) (equal? a22407 a22409)))))
  (define (list . x) x)
  (define (and . lst) (let ((x22410 (apply-prim and lst))) x22410))
  (define (or . lst) (let ((x22411 (apply-prim or lst))) x22411))
  (define (member? x lst)
    (let ((a22412 (null? lst)))
      (if a22412
        (let ((x22413 '#f)) x22413)
        (let ((a22414 (car lst)))
          (let ((a22415 (equal? a22414 x)))
            (if a22415
              (let ((x22416 '#t)) x22416)
              (let ((a22417 (cdr lst))) (member? x a22417))))))))
  (define (foldl fun acc lst)
    (let ((a22418 (null? lst)))
      (if a22418
        acc
        (let ((a22419 (car lst)))
          (let ((a22420 (fun a22419 acc)))
            (let ((a22421 (cdr lst))) (foldl fun a22420 a22421)))))))
  (define (reverse-helper lst lst2)
    (let ((a22422 (null? lst)))
      (if a22422
        lst2
        (let ((a22423 (cdr lst)))
          (let ((a22424 (car lst)))
            (let ((a22425 (cons a22424 lst2)))
              (reverse-helper a22423 a22425)))))))
  (define (reverse lst) (let ((a22426 (list))) (reverse-helper lst a22426)))
  (define (take-helper lst n lst2)
    (let ((a22427 '0))
      (let ((a22428 (= n a22427)))
        (if a22428
          (let ((x22429 (reverse lst2))) x22429)
          (let ((a22430 (cdr lst)))
            (let ((a22431 '1))
              (let ((a22432 (- n a22431)))
                (let ((a22433 (car lst)))
                  (let ((a22434 (cons a22433 lst2)))
                    (take-helper a22430 a22432 a22434))))))))))
  (define (take lst n) (let ((a22435 (list))) (take-helper lst n a22435)))
  (define (length lst)
    (let ((a22436 (null? lst)))
      (if a22436
        (let ((x22437 '0)) x22437)
        (let ((a22438 '1))
          (let ((a22439 (cdr lst)))
            (let ((a22440 (length a22439))) (+ a22438 a22440)))))))
  (define (map proc lst)
    (let ((a22441 (null? lst)))
      (if a22441
        (let ((x22442 (list))) x22442)
        (let ((a22443 (car lst)))
          (let ((a22444 (proc a22443)))
            (let ((a22445 (cdr lst)))
              (let ((a22446 (map proc a22445))) (cons a22444 a22446))))))))
  (define (filter op lst)
    (let ((a22447 (null? lst)))
      (if a22447
        (let ((x22448 (list))) x22448)
        (let ((a22449 (car lst)))
          (let ((a22450 (op a22449)))
            (if a22450
              (let ((a22451 (car lst)))
                (let ((a22452 (cdr lst)))
                  (let ((a22453 (filter op a22452))) (cons a22451 a22453))))
              (let ((a22454 (cdr lst))) (filter op a22454))))))))
  (define (drop lst n)
    (let ((a22455 '0))
      (let ((a22456 (= n a22455)))
        (if a22456
          lst
          (let ((a22457 (cdr lst)))
            (let ((a22458 '1))
              (let ((a22459 (- n a22458))) (drop a22457 a22459))))))))
  (define (foldr proc acc lst)
    (let ((a22460 (null? lst)))
      (if a22460
        acc
        (let ((a22461 (car lst)))
          (let ((a22462 (cdr lst)))
            (let ((a22463 (foldr proc acc a22462))) (proc a22461 a22463)))))))
  (define (append lst1 lst2)
    (let ((a22464 (null? lst1)))
      (if a22464
        lst2
        (let ((a22465 (car lst1)))
          (let ((a22466 (cdr lst1)))
            (let ((a22467 (append a22466 lst2))) (cons a22465 a22467)))))))
  (define (hash . lst) (let ((x22468 (apply-prim hash lst))) x22468))
  (define (hash-ref h k) (let ((x22469 (prim hash-ref h k))) x22469))
  (define (hash-set h k v) (let ((x22470 (prim hash-set h k v))) x22470))
  (define (hash-has-key? h k) (let ((x22471 (prim hash-has-key? h k))) x22471))
  (define (hash-count h) (let ((x22472 (prim hash-count h))) x22472))
  (define (call)
    (let ((a22473 '1))
      (let ((a22474 '2))
        (let ((a22475 '3))
          (let ((a22476 (list a22473 a22474 a22475))) (filter odd? a22476))))))
  (define (brouhaha_main) (let ((x22477 (call))) x22477)))
