'((define (+ . lst) (let ((x22841 (apply-prim + lst))) x22841))
  (define (- . lst) (let ((x22842 (apply-prim - lst))) x22842))
  (define (* . lst) (let ((x22843 (apply-prim * lst))) x22843))
  (define (modulo a b) (let ((x22844 (prim modulo a b))) x22844))
  (define (/ . lst) (let ((x22845 (apply-prim / lst))) x22845))
  (define (= . lst) (let ((x22846 (apply-prim = lst))) x22846))
  (define (> . lst) (let ((x22847 (apply-prim > lst))) x22847))
  (define (< . lst) (let ((x22848 (apply-prim < lst))) x22848))
  (define (<= . lst) (let ((x22849 (apply-prim <= lst))) x22849))
  (define (>= . lst) (let ((x22850 (apply-prim >= lst))) x22850))
  (define (null? x) (let ((x22851 (prim null? x))) x22851))
  (define (equal? x y) (let ((x22852 (prim equal? x y))) x22852))
  (define (eq? x y) (let ((x22853 (prim eq? x y))) x22853))
  (define (cons a b) (let ((x22854 (prim cons a b))) x22854))
  (define (car lst) (let ((x22855 (prim car lst))) x22855))
  (define (cdr lst) (let ((x22856 (prim cdr lst))) x22856))
  (define (even? x)
    (let ((a22857 '0))
      (let ((a22858 '2))
        (let ((a22859 (modulo x a22858))) (equal? a22857 a22859)))))
  (define (odd? x)
    (let ((a22860 '1))
      (let ((a22861 '2))
        (let ((a22862 (modulo x a22861))) (equal? a22860 a22862)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a22863 (null? lst)))
      (if a22863
        (let ((x22864 '#f)) x22864)
        (let ((a22865 (car lst)))
          (let ((a22866 (equal? a22865 x)))
            (if a22866
              (let ((x22867 '#t)) x22867)
              (let ((a22868 (cdr lst))) (member? x a22868))))))))
  (define (foldl fun acc lst)
    (let ((a22869 (null? lst)))
      (if a22869
        acc
        (let ((a22870 (car lst)))
          (let ((a22871 (fun a22870 acc)))
            (let ((a22872 (cdr lst))) (foldl fun a22871 a22872)))))))
  (define (reverse-helper lst lst2)
    (let ((a22873 (null? lst)))
      (if a22873
        lst2
        (let ((a22874 (cdr lst)))
          (let ((a22875 (car lst)))
            (let ((a22876 (cons a22875 lst2)))
              (reverse-helper a22874 a22876)))))))
  (define (reverse lst) (let ((a22877 (list))) (reverse-helper lst a22877)))
  (define (take-helper lst n lst2)
    (let ((a22878 '0))
      (let ((a22879 (= n a22878)))
        (if a22879
          (let ((x22880 (reverse lst2))) x22880)
          (let ((a22881 (cdr lst)))
            (let ((a22882 '1))
              (let ((a22883 (- n a22882)))
                (let ((a22884 (car lst)))
                  (let ((a22885 (cons a22884 lst2)))
                    (take-helper a22881 a22883 a22885))))))))))
  (define (take lst n) (let ((a22886 (list))) (take-helper lst n a22886)))
  (define (length lst)
    (let ((a22887 (null? lst)))
      (if a22887
        (let ((x22888 '0)) x22888)
        (let ((a22889 '1))
          (let ((a22890 (cdr lst)))
            (let ((a22891 (length a22890))) (+ a22889 a22891)))))))
  (define (map proc lst)
    (let ((a22892 (null? lst)))
      (if a22892
        (let ((x22893 (list))) x22893)
        (let ((a22894 (car lst)))
          (let ((a22895 (proc a22894)))
            (let ((a22896 (cdr lst)))
              (let ((a22897 (map proc a22896))) (cons a22895 a22897))))))))
  (define (filter op lst)
    (let ((a22898 (null? lst)))
      (if a22898
        (let ((x22899 (list))) x22899)
        (let ((a22900 (car lst)))
          (let ((a22901 (op a22900)))
            (if a22901
              (let ((a22902 (car lst)))
                (let ((a22903 (cdr lst)))
                  (let ((a22904 (filter op a22903))) (cons a22902 a22904))))
              (let ((a22905 (cdr lst))) (filter op a22905))))))))
  (define (drop lst n)
    (let ((a22906 '0))
      (let ((a22907 (= n a22906)))
        (if a22907
          lst
          (let ((a22908 (cdr lst)))
            (let ((a22909 '1))
              (let ((a22910 (- n a22909))) (drop a22908 a22910))))))))
  (define (foldr proc acc lst)
    (let ((a22911 (null? lst)))
      (if a22911
        acc
        (let ((a22912 (car lst)))
          (let ((a22913 (cdr lst)))
            (let ((a22914 (foldr proc acc a22913))) (proc a22912 a22914)))))))
  (define (append lst1 lst2)
    (let ((a22915 (null? lst1)))
      (if a22915
        lst2
        (let ((a22916 (car lst1)))
          (let ((a22917 (cdr lst1)))
            (let ((a22918 (append a22917 lst2))) (cons a22916 a22918)))))))
  (define (hash . lst) (let ((x22919 (apply-prim hash lst))) x22919))
  (define (hash-ref h k) (let ((x22920 (prim hash-ref h k))) x22920))
  (define (hash-set h k v) (let ((x22921 (prim hash-set h k v))) x22921))
  (define (hash-has-key? h k) (let ((x22922 (prim hash-has-key? h k))) x22922))
  (define (hash-count h) (let ((x22923 (prim hash-count h))) x22923))
  (define (call)
    (let ((a22924 '1))
      (let ((a22925 '2))
        (let ((a22926 '3))
          (let ((a22927 (list a22924 a22925 a22926))) (filter odd? a22927))))))
  (define (brouhaha_main) (let ((x22928 (call))) x22928)))
