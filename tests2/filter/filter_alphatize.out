'((define (+ . lst) (let ((x21901 (apply-prim + lst))) x21901))
  (define (- . lst) (let ((x21902 (apply-prim - lst))) x21902))
  (define (* . lst) (let ((x21903 (apply-prim * lst))) x21903))
  (define (modulo a b) (let ((x21904 (prim modulo a b))) x21904))
  (define (/ . lst) (let ((x21905 (apply-prim / lst))) x21905))
  (define (= . lst) (let ((x21906 (apply-prim = lst))) x21906))
  (define (> . lst) (let ((x21907 (apply-prim > lst))) x21907))
  (define (< . lst) (let ((x21908 (apply-prim < lst))) x21908))
  (define (<= . lst) (let ((x21909 (apply-prim <= lst))) x21909))
  (define (>= . lst) (let ((x21910 (apply-prim >= lst))) x21910))
  (define (null? x) (let ((x21911 (prim null? x))) x21911))
  (define (equal? x y) (let ((x21912 (prim equal? x y))) x21912))
  (define (eq? x y) (let ((x21913 (prim eq? x y))) x21913))
  (define (cons a b) (let ((x21914 (prim cons a b))) x21914))
  (define (car lst) (let ((x21915 (prim car lst))) x21915))
  (define (cdr lst) (let ((x21916 (prim cdr lst))) x21916))
  (define (even? x)
    (let ((a21917 '0))
      (let ((a21918 '2))
        (let ((a21919 (modulo x a21918))) (equal? a21917 a21919)))))
  (define (odd? x)
    (let ((a21920 '1))
      (let ((a21921 '2))
        (let ((a21922 (modulo x a21921))) (equal? a21920 a21922)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a21923 (null? lst)))
      (if a21923
        (let ((x21924 '#f)) x21924)
        (let ((a21925 (car lst)))
          (let ((a21926 (equal? a21925 x)))
            (if a21926
              (let ((x21927 '#t)) x21927)
              (let ((a21928 (cdr lst))) (member? x a21928))))))))
  (define (foldl fun acc lst)
    (let ((a21929 (null? lst)))
      (if a21929
        acc
        (let ((a21930 (car lst)))
          (let ((a21931 (fun a21930 acc)))
            (let ((a21932 (cdr lst))) (foldl fun a21931 a21932)))))))
  (define (reverse-helper lst lst2)
    (let ((a21933 (null? lst)))
      (if a21933
        lst2
        (let ((a21934 (cdr lst)))
          (let ((a21935 (car lst)))
            (let ((a21936 (cons a21935 lst2)))
              (reverse-helper a21934 a21936)))))))
  (define (reverse lst) (let ((a21937 (list))) (reverse-helper lst a21937)))
  (define (take-helper lst n lst2)
    (let ((a21938 '0))
      (let ((a21939 (= n a21938)))
        (if a21939
          (let ((x21940 (reverse lst2))) x21940)
          (let ((a21941 (cdr lst)))
            (let ((a21942 '1))
              (let ((a21943 (- n a21942)))
                (let ((a21944 (car lst)))
                  (let ((a21945 (cons a21944 lst2)))
                    (take-helper a21941 a21943 a21945))))))))))
  (define (take lst n) (let ((a21946 (list))) (take-helper lst n a21946)))
  (define (length lst)
    (let ((a21947 (null? lst)))
      (if a21947
        (let ((x21948 '0)) x21948)
        (let ((a21949 '1))
          (let ((a21950 (cdr lst)))
            (let ((a21951 (length a21950))) (+ a21949 a21951)))))))
  (define (map proc lst)
    (let ((a21952 (null? lst)))
      (if a21952
        (let ((x21953 (list))) x21953)
        (let ((a21954 (car lst)))
          (let ((a21955 (proc a21954)))
            (let ((a21956 (cdr lst)))
              (let ((a21957 (map proc a21956))) (cons a21955 a21957))))))))
  (define (filter op lst)
    (let ((a21958 (null? lst)))
      (if a21958
        (let ((x21959 (list))) x21959)
        (let ((a21960 (car lst)))
          (let ((a21961 (op a21960)))
            (if a21961
              (let ((a21962 (car lst)))
                (let ((a21963 (cdr lst)))
                  (let ((a21964 (filter op a21963))) (cons a21962 a21964))))
              (let ((a21965 (cdr lst))) (filter op a21965))))))))
  (define (drop lst n)
    (let ((a21966 '0))
      (let ((a21967 (= n a21966)))
        (if a21967
          lst
          (let ((a21968 (cdr lst)))
            (let ((a21969 '1))
              (let ((a21970 (- n a21969))) (drop a21968 a21970))))))))
  (define (foldr proc acc lst)
    (let ((a21971 (null? lst)))
      (if a21971
        acc
        (let ((a21972 (car lst)))
          (let ((a21973 (cdr lst)))
            (let ((a21974 (foldr proc acc a21973))) (proc a21972 a21974)))))))
  (define (append lst1 lst2)
    (let ((a21975 (null? lst1)))
      (if a21975
        lst2
        (let ((a21976 (car lst1)))
          (let ((a21977 (cdr lst1)))
            (let ((a21978 (append a21977 lst2))) (cons a21976 a21978)))))))
  (define (hash . lst) (let ((x21979 (apply-prim hash lst))) x21979))
  (define (hash-ref h k) (let ((x21980 (prim hash-ref h k))) x21980))
  (define (hash-set h k v) (let ((x21981 (prim hash-set h k v))) x21981))
  (define (hash-has-key? h k) (let ((x21982 (prim hash-has-key? h k))) x21982))
  (define (hash-count h) (let ((x21983 (prim hash-count h))) x21983))
  (define (call)
    (let ((a21984 '1))
      (let ((a21985 '2))
        (let ((a21986 '3))
          (let ((a21987 (list a21984 a21985 a21986))) (filter odd? a21987))))))
  (define (brouhaha_main) (let ((x21988 (call))) x21988)))
