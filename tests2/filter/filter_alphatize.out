'((define (+ . lst) (let ((x22845 (apply-prim + lst))) x22845))
  (define (- . lst) (let ((x22846 (apply-prim - lst))) x22846))
  (define (* . lst) (let ((x22847 (apply-prim * lst))) x22847))
  (define (modulo a b) (let ((x22848 (prim modulo a b))) x22848))
  (define (/ . lst) (let ((x22849 (apply-prim / lst))) x22849))
  (define (= . lst) (let ((x22850 (apply-prim = lst))) x22850))
  (define (> . lst) (let ((x22851 (apply-prim > lst))) x22851))
  (define (< . lst) (let ((x22852 (apply-prim < lst))) x22852))
  (define (<= . lst) (let ((x22853 (apply-prim <= lst))) x22853))
  (define (>= . lst) (let ((x22854 (apply-prim >= lst))) x22854))
  (define (null? x) (let ((x22855 (prim null? x))) x22855))
  (define (equal? x y) (let ((x22856 (prim equal? x y))) x22856))
  (define (eq? x y) (let ((x22857 (prim eq? x y))) x22857))
  (define (cons a b) (let ((x22858 (prim cons a b))) x22858))
  (define (car lst) (let ((x22859 (prim car lst))) x22859))
  (define (cdr lst) (let ((x22860 (prim cdr lst))) x22860))
  (define (even? x)
    (let ((a22861 '0))
      (let ((a22862 '2))
        (let ((a22863 (modulo x a22862))) (equal? a22861 a22863)))))
  (define (odd? x)
    (let ((a22864 '1))
      (let ((a22865 '2))
        (let ((a22866 (modulo x a22865))) (equal? a22864 a22866)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a22867 (null? lst)))
      (if a22867
        (let ((x22868 '#f)) x22868)
        (let ((a22869 (car lst)))
          (let ((a22870 (equal? a22869 x)))
            (if a22870
              (let ((x22871 '#t)) x22871)
              (let ((a22872 (cdr lst))) (member? x a22872))))))))
  (define (foldl fun acc lst)
    (let ((a22873 (null? lst)))
      (if a22873
        acc
        (let ((a22874 (car lst)))
          (let ((a22875 (fun a22874 acc)))
            (let ((a22876 (cdr lst))) (foldl fun a22875 a22876)))))))
  (define (reverse-helper lst lst2)
    (let ((a22877 (null? lst)))
      (if a22877
        lst2
        (let ((a22878 (cdr lst)))
          (let ((a22879 (car lst)))
            (let ((a22880 (cons a22879 lst2)))
              (reverse-helper a22878 a22880)))))))
  (define (reverse lst) (let ((a22881 (list))) (reverse-helper lst a22881)))
  (define (take-helper lst n lst2)
    (let ((a22882 '0))
      (let ((a22883 (= n a22882)))
        (if a22883
          (let ((x22884 (reverse lst2))) x22884)
          (let ((a22885 (cdr lst)))
            (let ((a22886 '1))
              (let ((a22887 (- n a22886)))
                (let ((a22888 (car lst)))
                  (let ((a22889 (cons a22888 lst2)))
                    (take-helper a22885 a22887 a22889))))))))))
  (define (take lst n) (let ((a22890 (list))) (take-helper lst n a22890)))
  (define (length lst)
    (let ((a22891 (null? lst)))
      (if a22891
        (let ((x22892 '0)) x22892)
        (let ((a22893 '1))
          (let ((a22894 (cdr lst)))
            (let ((a22895 (length a22894))) (+ a22893 a22895)))))))
  (define (map proc lst)
    (let ((a22896 (null? lst)))
      (if a22896
        (let ((x22897 (list))) x22897)
        (let ((a22898 (car lst)))
          (let ((a22899 (proc a22898)))
            (let ((a22900 (cdr lst)))
              (let ((a22901 (map proc a22900))) (cons a22899 a22901))))))))
  (define (filter op lst)
    (let ((a22902 (null? lst)))
      (if a22902
        (let ((x22903 (list))) x22903)
        (let ((a22904 (car lst)))
          (let ((a22905 (op a22904)))
            (if a22905
              (let ((a22906 (car lst)))
                (let ((a22907 (cdr lst)))
                  (let ((a22908 (filter op a22907))) (cons a22906 a22908))))
              (let ((a22909 (cdr lst))) (filter op a22909))))))))
  (define (drop lst n)
    (let ((a22910 '0))
      (let ((a22911 (= n a22910)))
        (if a22911
          lst
          (let ((a22912 (cdr lst)))
            (let ((a22913 '1))
              (let ((a22914 (- n a22913))) (drop a22912 a22914))))))))
  (define (foldr proc acc lst)
    (let ((a22915 (null? lst)))
      (if a22915
        acc
        (let ((a22916 (car lst)))
          (let ((a22917 (cdr lst)))
            (let ((a22918 (foldr proc acc a22917))) (proc a22916 a22918)))))))
  (define (append lst1 lst2)
    (let ((a22919 (null? lst1)))
      (if a22919
        lst2
        (let ((a22920 (car lst1)))
          (let ((a22921 (cdr lst1)))
            (let ((a22922 (append a22921 lst2))) (cons a22920 a22922)))))))
  (define (hash . lst) (let ((x22923 (apply-prim hash lst))) x22923))
  (define (hash-ref h k) (let ((x22924 (prim hash-ref h k))) x22924))
  (define (hash-set h k v) (let ((x22925 (prim hash-set h k v))) x22925))
  (define (hash-has-key? h k) (let ((x22926 (prim hash-has-key? h k))) x22926))
  (define (hash-count h) (let ((x22927 (prim hash-count h))) x22927))
  (define (call)
    (let ((a22928 '1))
      (let ((a22929 '2))
        (let ((a22930 '3))
          (let ((a22931 (list a22928 a22929 a22930))) (filter odd? a22931))))))
  (define (brouhaha_main) (let ((x22932 (call))) x22932)))
