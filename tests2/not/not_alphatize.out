'((define (+ . lst) (let ((x50251 (apply-prim + lst))) x50251))
  (define (- . lst) (let ((x50252 (apply-prim - lst))) x50252))
  (define (* . lst) (let ((x50253 (apply-prim * lst))) x50253))
  (define (modulo a b) (let ((x50254 (prim modulo a b))) x50254))
  (define (/ . lst) (let ((x50255 (apply-prim / lst))) x50255))
  (define (= . lst) (let ((x50256 (apply-prim = lst))) x50256))
  (define (> . lst) (let ((x50257 (apply-prim > lst))) x50257))
  (define (< . lst) (let ((x50258 (apply-prim < lst))) x50258))
  (define (<= . lst) (let ((x50259 (apply-prim <= lst))) x50259))
  (define (>= . lst) (let ((x50260 (apply-prim >= lst))) x50260))
  (define (null? x) (let ((x50261 (prim null? x))) x50261))
  (define (equal? x y) (let ((x50262 (prim equal? x y))) x50262))
  (define (eq? x y) (let ((x50263 (prim eq? x y))) x50263))
  (define (cons a b) (let ((x50264 (prim cons a b))) x50264))
  (define (car lst) (let ((x50265 (prim car lst))) x50265))
  (define (cdr lst) (let ((x50266 (prim cdr lst))) x50266))
  (define (even? x)
    (let ((a50267 '0))
      (let ((a50268 '2))
        (let ((a50269 (modulo x a50268))) (equal? a50267 a50269)))))
  (define (odd? x)
    (let ((a50270 '1))
      (let ((a50271 '2))
        (let ((a50272 (modulo x a50271))) (equal? a50270 a50272)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a50273 (null? lst)))
      (if a50273
        (let ((x50274 '#f)) x50274)
        (let ((a50275 (car lst)))
          (let ((a50276 (equal? a50275 x)))
            (if a50276
              (let ((x50277 '#t)) x50277)
              (let ((a50278 (cdr lst))) (member? x a50278))))))))
  (define (foldl fun acc lst)
    (let ((a50279 (null? lst)))
      (if a50279
        acc
        (let ((a50280 (car lst)))
          (let ((a50281 (fun a50280 acc)))
            (let ((a50282 (cdr lst))) (foldl fun a50281 a50282)))))))
  (define (reverse-helper lst lst2)
    (let ((a50283 (null? lst)))
      (if a50283
        lst2
        (let ((a50284 (cdr lst)))
          (let ((a50285 (car lst)))
            (let ((a50286 (cons a50285 lst2)))
              (reverse-helper a50284 a50286)))))))
  (define (reverse lst) (let ((a50287 (list))) (reverse-helper lst a50287)))
  (define (take-helper lst n lst2)
    (let ((a50288 '0))
      (let ((a50289 (= n a50288)))
        (if a50289
          (let ((x50290 (reverse lst2))) x50290)
          (let ((a50291 (cdr lst)))
            (let ((a50292 '1))
              (let ((a50293 (- n a50292)))
                (let ((a50294 (car lst)))
                  (let ((a50295 (cons a50294 lst2)))
                    (take-helper a50291 a50293 a50295))))))))))
  (define (take lst n) (let ((a50296 (list))) (take-helper lst n a50296)))
  (define (length lst)
    (let ((a50297 (null? lst)))
      (if a50297
        (let ((x50298 '0)) x50298)
        (let ((a50299 '1))
          (let ((a50300 (cdr lst)))
            (let ((a50301 (length a50300))) (+ a50299 a50301)))))))
  (define (map proc lst)
    (let ((a50302 (null? lst)))
      (if a50302
        (let ((x50303 (list))) x50303)
        (let ((a50304 (car lst)))
          (let ((a50305 (proc a50304)))
            (let ((a50306 (cdr lst)))
              (let ((a50307 (map proc a50306))) (cons a50305 a50307))))))))
  (define (filter op lst)
    (let ((a50308 (null? lst)))
      (if a50308
        (let ((x50309 (list))) x50309)
        (let ((a50310 (car lst)))
          (let ((a50311 (op a50310)))
            (if a50311
              (let ((a50312 (car lst)))
                (let ((a50313 (cdr lst)))
                  (let ((a50314 (filter op a50313))) (cons a50312 a50314))))
              (let ((a50315 (cdr lst))) (filter op a50315))))))))
  (define (drop lst n)
    (let ((a50316 '0))
      (let ((a50317 (= n a50316)))
        (if a50317
          lst
          (let ((a50318 (cdr lst)))
            (let ((a50319 '1))
              (let ((a50320 (- n a50319))) (drop a50318 a50320))))))))
  (define (foldr proc acc lst)
    (let ((a50321 (null? lst)))
      (if a50321
        acc
        (let ((a50322 (car lst)))
          (let ((a50323 (cdr lst)))
            (let ((a50324 (foldr proc acc a50323))) (proc a50322 a50324)))))))
  (define (append lst1 lst2)
    (let ((a50325 (null? lst1)))
      (if a50325
        lst2
        (let ((a50326 (car lst1)))
          (let ((a50327 (cdr lst1)))
            (let ((a50328 (append a50327 lst2))) (cons a50326 a50328)))))))
  (define (hash . lst) (let ((x50329 (apply-prim hash lst))) x50329))
  (define (hash-ref h k) (let ((x50330 (prim hash-ref h k))) x50330))
  (define (hash-set h k v) (let ((x50331 (prim hash-set h k v))) x50331))
  (define (hash-has-key? h k) (let ((x50332 (prim hash-has-key? h k))) x50332))
  (define (hash-count h) (let ((x50333 (prim hash-count h))) x50333))
  (define (call)
    (let ((a50334 '#f))
      (if a50334 (let ((x50335 '#f)) x50335) (let ((x50336 '#t)) x50336))))
  (define (brouhaha_main) (let ((x50337 (call))) x50337)))
