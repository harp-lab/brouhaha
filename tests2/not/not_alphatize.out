'((define (+ . lst) (let ((x49306 (apply-prim + lst))) x49306))
  (define (- . lst) (let ((x49307 (apply-prim - lst))) x49307))
  (define (* . lst) (let ((x49308 (apply-prim * lst))) x49308))
  (define (modulo a b) (let ((x49309 (prim modulo a b))) x49309))
  (define (/ . lst) (let ((x49310 (apply-prim / lst))) x49310))
  (define (= . lst) (let ((x49311 (apply-prim = lst))) x49311))
  (define (> . lst) (let ((x49312 (apply-prim > lst))) x49312))
  (define (< . lst) (let ((x49313 (apply-prim < lst))) x49313))
  (define (<= . lst) (let ((x49314 (apply-prim <= lst))) x49314))
  (define (>= . lst) (let ((x49315 (apply-prim >= lst))) x49315))
  (define (null? x) (let ((x49316 (prim null? x))) x49316))
  (define (equal? x y) (let ((x49317 (prim equal? x y))) x49317))
  (define (eq? x y) (let ((x49318 (prim eq? x y))) x49318))
  (define (cons a b) (let ((x49319 (prim cons a b))) x49319))
  (define (car lst) (let ((x49320 (prim car lst))) x49320))
  (define (cdr lst) (let ((x49321 (prim cdr lst))) x49321))
  (define (even? x)
    (let ((a49322 '0))
      (let ((a49323 '2))
        (let ((a49324 (modulo x a49323))) (equal? a49322 a49324)))))
  (define (odd? x)
    (let ((a49325 '1))
      (let ((a49326 '2))
        (let ((a49327 (modulo x a49326))) (equal? a49325 a49327)))))
  (define (list . x) x)
  (define (and . lst) (let ((x49328 (apply-prim and lst))) x49328))
  (define (or . lst) (let ((x49329 (apply-prim or lst))) x49329))
  (define (member? x lst)
    (let ((a49330 (null? lst)))
      (if a49330
        (let ((x49331 '#f)) x49331)
        (let ((a49332 (car lst)))
          (let ((a49333 (equal? a49332 x)))
            (if a49333
              (let ((x49334 '#t)) x49334)
              (let ((a49335 (cdr lst))) (member? x a49335))))))))
  (define (foldl fun acc lst)
    (let ((a49336 (null? lst)))
      (if a49336
        acc
        (let ((a49337 (car lst)))
          (let ((a49338 (fun a49337 acc)))
            (let ((a49339 (cdr lst))) (foldl fun a49338 a49339)))))))
  (define (reverse-helper lst lst2)
    (let ((a49340 (null? lst)))
      (if a49340
        lst2
        (let ((a49341 (cdr lst)))
          (let ((a49342 (car lst)))
            (let ((a49343 (cons a49342 lst2)))
              (reverse-helper a49341 a49343)))))))
  (define (reverse lst) (let ((a49344 (list))) (reverse-helper lst a49344)))
  (define (take-helper lst n lst2)
    (let ((a49345 '0))
      (let ((a49346 (= n a49345)))
        (if a49346
          (let ((x49347 (reverse lst2))) x49347)
          (let ((a49348 (cdr lst)))
            (let ((a49349 '1))
              (let ((a49350 (- n a49349)))
                (let ((a49351 (car lst)))
                  (let ((a49352 (cons a49351 lst2)))
                    (take-helper a49348 a49350 a49352))))))))))
  (define (take lst n) (let ((a49353 (list))) (take-helper lst n a49353)))
  (define (length lst)
    (let ((a49354 (null? lst)))
      (if a49354
        (let ((x49355 '0)) x49355)
        (let ((a49356 '1))
          (let ((a49357 (cdr lst)))
            (let ((a49358 (length a49357))) (+ a49356 a49358)))))))
  (define (map proc lst)
    (let ((a49359 (null? lst)))
      (if a49359
        (let ((x49360 (list))) x49360)
        (let ((a49361 (car lst)))
          (let ((a49362 (proc a49361)))
            (let ((a49363 (cdr lst)))
              (let ((a49364 (map proc a49363))) (cons a49362 a49364))))))))
  (define (filter op lst)
    (let ((a49365 (null? lst)))
      (if a49365
        (let ((x49366 (list))) x49366)
        (let ((a49367 (car lst)))
          (let ((a49368 (op a49367)))
            (if a49368
              (let ((a49369 (car lst)))
                (let ((a49370 (cdr lst)))
                  (let ((a49371 (filter op a49370))) (cons a49369 a49371))))
              (let ((a49372 (cdr lst))) (filter op a49372))))))))
  (define (drop lst n)
    (let ((a49373 '0))
      (let ((a49374 (= n a49373)))
        (if a49374
          lst
          (let ((a49375 (cdr lst)))
            (let ((a49376 '1))
              (let ((a49377 (- n a49376))) (drop a49375 a49377))))))))
  (define (foldr proc acc lst)
    (let ((a49378 (null? lst)))
      (if a49378
        acc
        (let ((a49379 (car lst)))
          (let ((a49380 (cdr lst)))
            (let ((a49381 (foldr proc acc a49380))) (proc a49379 a49381)))))))
  (define (append lst1 lst2)
    (let ((a49382 (null? lst1)))
      (if a49382
        lst2
        (let ((a49383 (car lst1)))
          (let ((a49384 (cdr lst1)))
            (let ((a49385 (append a49384 lst2))) (cons a49383 a49385)))))))
  (define (hash . lst) (let ((x49386 (apply-prim hash lst))) x49386))
  (define (hash-ref h k) (let ((x49387 (prim hash-ref h k))) x49387))
  (define (hash-set h k v) (let ((x49388 (prim hash-set h k v))) x49388))
  (define (hash-has-key? h k) (let ((x49389 (prim hash-has-key? h k))) x49389))
  (define (hash-count h) (let ((x49390 (prim hash-count h))) x49390))
  (define (call)
    (let ((a49391 '#f))
      (if a49391 (let ((x49392 '#f)) x49392) (let ((x49393 '#t)) x49393))))
  (define (brouhaha_main) (let ((x49394 (call))) x49394)))
