'((define (+ . lst) (let ((x48467 (apply-prim + lst))) x48467))
  (define (- . lst) (let ((x48468 (apply-prim - lst))) x48468))
  (define (* . lst) (let ((x48469 (apply-prim * lst))) x48469))
  (define (modulo a b) (let ((x48470 (prim modulo a b))) x48470))
  (define (/ . lst) (let ((x48471 (apply-prim / lst))) x48471))
  (define (= . lst) (let ((x48472 (apply-prim = lst))) x48472))
  (define (> . lst) (let ((x48473 (apply-prim > lst))) x48473))
  (define (< . lst) (let ((x48474 (apply-prim < lst))) x48474))
  (define (<= . lst) (let ((x48475 (apply-prim <= lst))) x48475))
  (define (>= . lst) (let ((x48476 (apply-prim >= lst))) x48476))
  (define (null? x) (let ((x48477 (prim null? x))) x48477))
  (define (equal? x y) (let ((x48478 (prim equal? x y))) x48478))
  (define (eq? x y) (let ((x48479 (prim eq? x y))) x48479))
  (define (cons a b) (let ((x48480 (prim cons a b))) x48480))
  (define (car lst) (let ((x48481 (prim car lst))) x48481))
  (define (cdr lst) (let ((x48482 (prim cdr lst))) x48482))
  (define (even? x)
    (let ((a48483 '0))
      (let ((a48484 '2))
        (let ((a48485 (modulo x a48484))) (equal? a48483 a48485)))))
  (define (odd? x)
    (let ((a48486 '1))
      (let ((a48487 '2))
        (let ((a48488 (modulo x a48487))) (equal? a48486 a48488)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a48489 (null? lst)))
      (if a48489
        (let ((x48490 '#f)) x48490)
        (let ((a48491 (car lst)))
          (let ((a48492 (equal? a48491 x)))
            (if a48492
              (let ((x48493 '#t)) x48493)
              (let ((a48494 (cdr lst))) (member? x a48494))))))))
  (define (foldl fun acc lst)
    (let ((a48495 (null? lst)))
      (if a48495
        acc
        (let ((a48496 (car lst)))
          (let ((a48497 (fun a48496 acc)))
            (let ((a48498 (cdr lst))) (foldl fun a48497 a48498)))))))
  (define (reverse-helper lst lst2)
    (let ((a48499 (null? lst)))
      (if a48499
        lst2
        (let ((a48500 (cdr lst)))
          (let ((a48501 (car lst)))
            (let ((a48502 (cons a48501 lst2)))
              (reverse-helper a48500 a48502)))))))
  (define (reverse lst) (let ((a48503 (list))) (reverse-helper lst a48503)))
  (define (take-helper lst n lst2)
    (let ((a48504 '0))
      (let ((a48505 (= n a48504)))
        (if a48505
          (let ((x48506 (reverse lst2))) x48506)
          (let ((a48507 (cdr lst)))
            (let ((a48508 '1))
              (let ((a48509 (- n a48508)))
                (let ((a48510 (car lst)))
                  (let ((a48511 (cons a48510 lst2)))
                    (take-helper a48507 a48509 a48511))))))))))
  (define (take lst n) (let ((a48512 (list))) (take-helper lst n a48512)))
  (define (length lst)
    (let ((a48513 (null? lst)))
      (if a48513
        (let ((x48514 '0)) x48514)
        (let ((a48515 '1))
          (let ((a48516 (cdr lst)))
            (let ((a48517 (length a48516))) (+ a48515 a48517)))))))
  (define (map proc lst)
    (let ((a48518 (null? lst)))
      (if a48518
        (let ((x48519 (list))) x48519)
        (let ((a48520 (car lst)))
          (let ((a48521 (proc a48520)))
            (let ((a48522 (cdr lst)))
              (let ((a48523 (map proc a48522))) (cons a48521 a48523))))))))
  (define (filter op lst)
    (let ((a48524 (null? lst)))
      (if a48524
        (let ((x48525 (list))) x48525)
        (let ((a48526 (car lst)))
          (let ((a48527 (op a48526)))
            (if a48527
              (let ((a48528 (car lst)))
                (let ((a48529 (cdr lst)))
                  (let ((a48530 (filter op a48529))) (cons a48528 a48530))))
              (let ((a48531 (cdr lst))) (filter op a48531))))))))
  (define (drop lst n)
    (let ((a48532 '0))
      (let ((a48533 (= n a48532)))
        (if a48533
          lst
          (let ((a48534 (cdr lst)))
            (let ((a48535 '1))
              (let ((a48536 (- n a48535))) (drop a48534 a48536))))))))
  (define (foldr proc acc lst)
    (let ((a48537 (null? lst)))
      (if a48537
        acc
        (let ((a48538 (car lst)))
          (let ((a48539 (cdr lst)))
            (let ((a48540 (foldr proc acc a48539))) (proc a48538 a48540)))))))
  (define (append lst1 lst2)
    (let ((a48541 (null? lst1)))
      (if a48541
        lst2
        (let ((a48542 (car lst1)))
          (let ((a48543 (cdr lst1)))
            (let ((a48544 (append a48543 lst2))) (cons a48542 a48544)))))))
  (define (hash . lst) (let ((x48545 (apply-prim hash lst))) x48545))
  (define (hash-ref h k) (let ((x48546 (prim hash-ref h k))) x48546))
  (define (hash-set h k v) (let ((x48547 (prim hash-set h k v))) x48547))
  (define (hash-has-key? h k) (let ((x48548 (prim hash-has-key? h k))) x48548))
  (define (hash-count h) (let ((x48549 (prim hash-count h))) x48549))
  (define (call)
    (let ((a48550 '#f))
      (if a48550 (let ((x48551 '#f)) x48551) (let ((x48552 '#t)) x48552))))
  (define (brouhaha_main) (let ((x48553 (call))) x48553)))
