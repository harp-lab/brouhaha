'((define (+ . lst) (let ((x46715 (apply-prim + lst))) x46715))
  (define (- . lst) (let ((x46716 (apply-prim - lst))) x46716))
  (define (* . lst) (let ((x46717 (apply-prim * lst))) x46717))
  (define (modulo a b) (let ((x46718 (prim modulo a b))) x46718))
  (define (/ . lst) (let ((x46719 (apply-prim / lst))) x46719))
  (define (= . lst) (let ((x46720 (apply-prim = lst))) x46720))
  (define (> . lst) (let ((x46721 (apply-prim > lst))) x46721))
  (define (< . lst) (let ((x46722 (apply-prim < lst))) x46722))
  (define (<= . lst) (let ((x46723 (apply-prim <= lst))) x46723))
  (define (>= . lst) (let ((x46724 (apply-prim >= lst))) x46724))
  (define (null? x) (let ((x46725 (prim null? x))) x46725))
  (define (equal? x y) (let ((x46726 (prim equal? x y))) x46726))
  (define (eq? x y) (let ((x46727 (prim eq? x y))) x46727))
  (define (cons a b) (let ((x46728 (prim cons a b))) x46728))
  (define (car lst) (let ((x46729 (prim car lst))) x46729))
  (define (cdr lst) (let ((x46730 (prim cdr lst))) x46730))
  (define (even? x)
    (let ((a46731 '0))
      (let ((a46732 '2))
        (let ((a46733 (modulo x a46732))) (equal? a46731 a46733)))))
  (define (odd? x)
    (let ((a46734 '1))
      (let ((a46735 '2))
        (let ((a46736 (modulo x a46735))) (equal? a46734 a46736)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a46737 (null? lst)))
      (if a46737
        (let ((x46738 '#f)) x46738)
        (let ((a46739 (car lst)))
          (let ((a46740 (equal? a46739 x)))
            (if a46740
              (let ((x46741 '#t)) x46741)
              (let ((a46742 (cdr lst))) (member? x a46742))))))))
  (define (foldl fun acc lst)
    (let ((a46743 (null? lst)))
      (if a46743
        acc
        (let ((a46744 (car lst)))
          (let ((a46745 (fun a46744 acc)))
            (let ((a46746 (cdr lst))) (foldl fun a46745 a46746)))))))
  (define (reverse-helper lst lst2)
    (let ((a46747 (null? lst)))
      (if a46747
        lst2
        (let ((a46748 (cdr lst)))
          (let ((a46749 (car lst)))
            (let ((a46750 (cons a46749 lst2)))
              (reverse-helper a46748 a46750)))))))
  (define (reverse lst) (let ((a46751 (list))) (reverse-helper lst a46751)))
  (define (take-helper lst n lst2)
    (let ((a46752 '0))
      (let ((a46753 (= n a46752)))
        (if a46753
          (let ((x46754 (reverse lst2))) x46754)
          (let ((a46755 (cdr lst)))
            (let ((a46756 '1))
              (let ((a46757 (- n a46756)))
                (let ((a46758 (car lst)))
                  (let ((a46759 (cons a46758 lst2)))
                    (take-helper a46755 a46757 a46759))))))))))
  (define (take lst n) (let ((a46760 (list))) (take-helper lst n a46760)))
  (define (length lst)
    (let ((a46761 (null? lst)))
      (if a46761
        (let ((x46762 '0)) x46762)
        (let ((a46763 '1))
          (let ((a46764 (cdr lst)))
            (let ((a46765 (length a46764))) (+ a46763 a46765)))))))
  (define (map proc lst)
    (let ((a46766 (null? lst)))
      (if a46766
        (let ((x46767 (list))) x46767)
        (let ((a46768 (car lst)))
          (let ((a46769 (proc a46768)))
            (let ((a46770 (cdr lst)))
              (let ((a46771 (map proc a46770))) (cons a46769 a46771))))))))
  (define (filter op lst)
    (let ((a46772 (null? lst)))
      (if a46772
        (let ((x46773 (list))) x46773)
        (let ((a46774 (car lst)))
          (let ((a46775 (op a46774)))
            (if a46775
              (let ((a46776 (car lst)))
                (let ((a46777 (cdr lst)))
                  (let ((a46778 (filter op a46777))) (cons a46776 a46778))))
              (let ((a46779 (cdr lst))) (filter op a46779))))))))
  (define (drop lst n)
    (let ((a46780 '0))
      (let ((a46781 (= n a46780)))
        (if a46781
          lst
          (let ((a46782 (cdr lst)))
            (let ((a46783 '1))
              (let ((a46784 (- n a46783))) (drop a46782 a46784))))))))
  (define (foldr proc acc lst)
    (let ((a46785 (null? lst)))
      (if a46785
        acc
        (let ((a46786 (car lst)))
          (let ((a46787 (cdr lst)))
            (let ((a46788 (foldr proc acc a46787))) (proc a46786 a46788)))))))
  (define (append lst1 lst2)
    (let ((a46789 (null? lst1)))
      (if a46789
        lst2
        (let ((a46790 (car lst1)))
          (let ((a46791 (cdr lst1)))
            (let ((a46792 (append a46791 lst2))) (cons a46790 a46792)))))))
  (define (hash . lst) (let ((x46793 (apply-prim hash lst))) x46793))
  (define (hash-ref h k) (let ((x46794 (prim hash-ref h k))) x46794))
  (define (hash-set h k v) (let ((x46795 (prim hash-set h k v))) x46795))
  (define (hash-has-key? h k) (let ((x46796 (prim hash-has-key? h k))) x46796))
  (define (hash-count h) (let ((x46797 (prim hash-count h))) x46797))
  (define (call)
    (let ((a46798 '#f))
      (if a46798 (let ((x46799 '#f)) x46799) (let ((x46800 '#t)) x46800))))
  (define (brouhaha_main) (let ((x46801 (call))) x46801)))
