'((define (+ . lst)
    (let ((kont4855448654 (prim car lst)))
      (let ((lst48655 (prim cdr lst)))
        (let ((x4846748656 (apply-prim + lst48655)))
          (kont4855448654 x4846748656)))))
  (define (- . lst)
    (let ((kont4855648657 (prim car lst)))
      (let ((lst48658 (prim cdr lst)))
        (let ((x4846848659 (apply-prim - lst48658)))
          (kont4855648657 x4846848659)))))
  (define (* . lst)
    (let ((kont4855848660 (prim car lst)))
      (let ((lst48661 (prim cdr lst)))
        (let ((x4846948662 (apply-prim * lst48661)))
          (kont4855848660 x4846948662)))))
  (define (modulo kont48560 a b)
    (let ((x4847048663 (prim modulo a b))) (kont48560 x4847048663)))
  (define (/ . lst)
    (let ((kont4856148664 (prim car lst)))
      (let ((lst48665 (prim cdr lst)))
        (let ((x4847148666 (apply-prim / lst48665)))
          (kont4856148664 x4847148666)))))
  (define (= . lst)
    (let ((kont4856348667 (prim car lst)))
      (let ((lst48668 (prim cdr lst)))
        (let ((x4847248669 (apply-prim = lst48668)))
          (kont4856348667 x4847248669)))))
  (define (> . lst)
    (let ((kont4856548670 (prim car lst)))
      (let ((lst48671 (prim cdr lst)))
        (let ((x4847348672 (apply-prim > lst48671)))
          (kont4856548670 x4847348672)))))
  (define (< . lst)
    (let ((kont4856748673 (prim car lst)))
      (let ((lst48674 (prim cdr lst)))
        (let ((x4847448675 (apply-prim < lst48674)))
          (kont4856748673 x4847448675)))))
  (define (<= . lst)
    (let ((kont4856948676 (prim car lst)))
      (let ((lst48677 (prim cdr lst)))
        (let ((x4847548678 (apply-prim <= lst48677)))
          (kont4856948676 x4847548678)))))
  (define (>= . lst)
    (let ((kont4857148679 (prim car lst)))
      (let ((lst48680 (prim cdr lst)))
        (let ((x4847648681 (apply-prim >= lst48680)))
          (kont4857148679 x4847648681)))))
  (define (null? kont48573 x)
    (let ((x4847748682 (prim null? x))) (kont48573 x4847748682)))
  (define (equal? kont48574 x y)
    (let ((x4847848683 (prim equal? x y))) (kont48574 x4847848683)))
  (define (eq? kont48575 x y)
    (let ((x4847948684 (prim eq? x y))) (kont48575 x4847948684)))
  (define (cons kont48576 a b)
    (let ((x4848048685 (prim cons a b))) (kont48576 x4848048685)))
  (define (car kont48577 lst)
    (let ((x4848148686 (prim car lst))) (kont48577 x4848148686)))
  (define (cdr kont48578 lst)
    (let ((x4848248687 (prim cdr lst))) (kont48578 x4848248687)))
  (define (even? kont48579 x)
    (let ((a4848348688 '0))
      (let ((a4848448689 '2))
        (let ((f4858048690
               (lambda (a4848548691)
                 (equal? kont48579 a4848348688 a4848548691))))
          (modulo f4858048690 x a4848448689)))))
  (define (odd? kont48581 x)
    (let ((a4848648692 '1))
      (let ((a4848748693 '2))
        (let ((f4858248694
               (lambda (a4848848695)
                 (equal? kont48581 a4848648692 a4848848695))))
          (modulo f4858248694 x a4848748693)))))
  (define (list . x)
    (let ((kont4858348696 (prim car x)))
      (let ((x48697 (prim cdr x))) (kont4858348696 x48697))))
  (define (member? kont48585 x lst)
    (let ((f4858948698
           (lambda (a4848948699)
             (if a4848948699
               (let ((x4849048700 '#f)) (kont48585 x4849048700))
               (let ((f4858848701
                      (lambda (a4849148702)
                        (let ((f4858748703
                               (lambda (a4849248704)
                                 (if a4849248704
                                   (let ((x4849348705 '#t))
                                     (kont48585 x4849348705))
                                   (let ((f4858648706
                                          (lambda (a4849448707)
                                            (member?
                                             kont48585
                                             x
                                             a4849448707))))
                                     (cdr f4858648706 lst))))))
                          (equal? f4858748703 a4849148702 x)))))
                 (car f4858848701 lst))))))
      (null? f4858948698 lst)))
  (define (foldl kont48590 fun acc lst)
    (let ((f4859448708
           (lambda (a4849548709)
             (if a4849548709
               (kont48590 acc)
               (let ((f4859348710
                      (lambda (a4849648711)
                        (let ((f4859248712
                               (lambda (a4849748713)
                                 (let ((f4859148714
                                        (lambda (a4849848715)
                                          (foldl
                                           kont48590
                                           fun
                                           a4849748713
                                           a4849848715))))
                                   (cdr f4859148714 lst)))))
                          (fun f4859248712 a4849648711 acc)))))
                 (car f4859348710 lst))))))
      (null? f4859448708 lst)))
  (define (reverse-helper kont48595 lst lst2)
    (let ((f4859948716
           (lambda (a4849948717)
             (if a4849948717
               (kont48595 lst2)
               (let ((f4859848718
                      (lambda (a4850048719)
                        (let ((f4859748720
                               (lambda (a4850148721)
                                 (let ((f4859648722
                                        (lambda (a4850248723)
                                          (reverse-helper
                                           kont48595
                                           a4850048719
                                           a4850248723))))
                                   (cons f4859648722 a4850148721 lst2)))))
                          (car f4859748720 lst)))))
                 (cdr f4859848718 lst))))))
      (null? f4859948716 lst)))
  (define (reverse kont48600 lst)
    (let ((f4860148724
           (lambda (a4850348725) (reverse-helper kont48600 lst a4850348725))))
      (list f4860148724)))
  (define (take-helper kont48602 lst n lst2)
    (let ((a4850448726 '0))
      (let ((f4860848727
             (lambda (a4850548728)
               (if a4850548728
                 (let ((f4860348729
                        (lambda (x4850648730) (kont48602 x4850648730))))
                   (reverse f4860348729 lst2))
                 (let ((f4860748731
                        (lambda (a4850748732)
                          (let ((a4850848733 '1))
                            (let ((f4860648734
                                   (lambda (a4850948735)
                                     (let ((f4860548736
                                            (lambda (a4851048737)
                                              (let ((f4860448738
                                                     (lambda (a4851148739)
                                                       (take-helper
                                                        kont48602
                                                        a4850748732
                                                        a4850948735
                                                        a4851148739))))
                                                (cons
                                                 f4860448738
                                                 a4851048737
                                                 lst2)))))
                                       (car f4860548736 lst)))))
                              (- f4860648734 n a4850848733))))))
                   (cdr f4860748731 lst))))))
        (= f4860848727 n a4850448726))))
  (define (take kont48609 lst n)
    (let ((f4861048740
           (lambda (a4851248741) (take-helper kont48609 lst n a4851248741))))
      (list f4861048740)))
  (define (length kont48611 lst)
    (let ((f4861448742
           (lambda (a4851348743)
             (if a4851348743
               (let ((x4851448744 '0)) (kont48611 x4851448744))
               (let ((a4851548745 '1))
                 (let ((f4861348746
                        (lambda (a4851648747)
                          (let ((f4861248748
                                 (lambda (a4851748749)
                                   (+ kont48611 a4851548745 a4851748749))))
                            (length f4861248748 a4851648747)))))
                   (cdr f4861348746 lst)))))))
      (null? f4861448742 lst)))
  (define (map kont48615 proc lst)
    (let ((f4862148750
           (lambda (a4851848751)
             (if a4851848751
               (let ((f4861648752
                      (lambda (x4851948753) (kont48615 x4851948753))))
                 (list f4861648752))
               (let ((f4862048754
                      (lambda (a4852048755)
                        (let ((f4861948756
                               (lambda (a4852148757)
                                 (let ((f4861848758
                                        (lambda (a4852248759)
                                          (let ((f4861748760
                                                 (lambda (a4852348761)
                                                   (cons
                                                    kont48615
                                                    a4852148757
                                                    a4852348761))))
                                            (map
                                             f4861748760
                                             proc
                                             a4852248759)))))
                                   (cdr f4861848758 lst)))))
                          (proc f4861948756 a4852048755)))))
                 (car f4862048754 lst))))))
      (null? f4862148750 lst)))
  (define (filter kont48622 op lst)
    (let ((f4863048762
           (lambda (a4852448763)
             (if a4852448763
               (let ((f4862348764
                      (lambda (x4852548765) (kont48622 x4852548765))))
                 (list f4862348764))
               (let ((f4862948766
                      (lambda (a4852648767)
                        (let ((f4862848768
                               (lambda (a4852748769)
                                 (if a4852748769
                                   (let ((f4862648770
                                          (lambda (a4852848771)
                                            (let ((f4862548772
                                                   (lambda (a4852948773)
                                                     (let ((f4862448774
                                                            (lambda (a4853048775)
                                                              (cons
                                                               kont48622
                                                               a4852848771
                                                               a4853048775))))
                                                       (filter
                                                        f4862448774
                                                        op
                                                        a4852948773)))))
                                              (cdr f4862548772 lst)))))
                                     (car f4862648770 lst))
                                   (let ((f4862748776
                                          (lambda (a4853148777)
                                            (filter
                                             kont48622
                                             op
                                             a4853148777))))
                                     (cdr f4862748776 lst))))))
                          (op f4862848768 a4852648767)))))
                 (car f4862948766 lst))))))
      (null? f4863048762 lst)))
  (define (drop kont48631 lst n)
    (let ((a4853248778 '0))
      (let ((f4863448779
             (lambda (a4853348780)
               (if a4853348780
                 (kont48631 lst)
                 (let ((f4863348781
                        (lambda (a4853448782)
                          (let ((a4853548783 '1))
                            (let ((f4863248784
                                   (lambda (a4853648785)
                                     (drop
                                      kont48631
                                      a4853448782
                                      a4853648785))))
                              (- f4863248784 n a4853548783))))))
                   (cdr f4863348781 lst))))))
        (= f4863448779 n a4853248778))))
  (define (foldr kont48635 proc acc lst)
    (let ((f4863948786
           (lambda (a4853748787)
             (if a4853748787
               (kont48635 acc)
               (let ((f4863848788
                      (lambda (a4853848789)
                        (let ((f4863748790
                               (lambda (a4853948791)
                                 (let ((f4863648792
                                        (lambda (a4854048793)
                                          (proc
                                           kont48635
                                           a4853848789
                                           a4854048793))))
                                   (foldr f4863648792 proc acc a4853948791)))))
                          (cdr f4863748790 lst)))))
                 (car f4863848788 lst))))))
      (null? f4863948786 lst)))
  (define (append kont48640 lst1 lst2)
    (let ((f4864448794
           (lambda (a4854148795)
             (if a4854148795
               (kont48640 lst2)
               (let ((f4864348796
                      (lambda (a4854248797)
                        (let ((f4864248798
                               (lambda (a4854348799)
                                 (let ((f4864148800
                                        (lambda (a4854448801)
                                          (cons
                                           kont48640
                                           a4854248797
                                           a4854448801))))
                                   (append f4864148800 a4854348799 lst2)))))
                          (cdr f4864248798 lst1)))))
                 (car f4864348796 lst1))))))
      (null? f4864448794 lst1)))
  (define (hash . lst)
    (let ((kont4864548802 (prim car lst)))
      (let ((lst48803 (prim cdr lst)))
        (let ((x4854548804 (apply-prim hash lst48803)))
          (kont4864548802 x4854548804)))))
  (define (hash-ref kont48647 h k)
    (let ((x4854648805 (prim hash-ref h k))) (kont48647 x4854648805)))
  (define (hash-set kont48648 h k v)
    (let ((x4854748806 (prim hash-set h k v))) (kont48648 x4854748806)))
  (define (hash-has-key? kont48649 h k)
    (let ((x4854848807 (prim hash-has-key? h k))) (kont48649 x4854848807)))
  (define (hash-count kont48650 h)
    (let ((x4854948808 (prim hash-count h))) (kont48650 x4854948808)))
  (define (call kont48651)
    (let ((a4855048809 '#f))
      (if a4855048809
        (let ((x4855148810 '#f)) (kont48651 x4855148810))
        (let ((x4855248811 '#t)) (kont48651 x4855248811)))))
  (define (brouhaha_main kont48652)
    (let ((f4865348812 (lambda (x4855348813) (kont48652 x4855348813))))
      (call f4865348812))))
