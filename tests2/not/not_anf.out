'((define (+ . lst)
    (let ((kont48554 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48467 (apply-prim + lst))) (kont48554 x48467)))))
  (define (- . lst)
    (let ((kont48556 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48468 (apply-prim - lst))) (kont48556 x48468)))))
  (define (* . lst)
    (let ((kont48558 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48469 (apply-prim * lst))) (kont48558 x48469)))))
  (define (modulo kont48560 a b)
    (let ((x48470 (prim modulo a b))) (kont48560 x48470)))
  (define (/ . lst)
    (let ((kont48561 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48471 (apply-prim / lst))) (kont48561 x48471)))))
  (define (= . lst)
    (let ((kont48563 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48472 (apply-prim = lst))) (kont48563 x48472)))))
  (define (> . lst)
    (let ((kont48565 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48473 (apply-prim > lst))) (kont48565 x48473)))))
  (define (< . lst)
    (let ((kont48567 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48474 (apply-prim < lst))) (kont48567 x48474)))))
  (define (<= . lst)
    (let ((kont48569 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48475 (apply-prim <= lst))) (kont48569 x48475)))))
  (define (>= . lst)
    (let ((kont48571 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48476 (apply-prim >= lst))) (kont48571 x48476)))))
  (define (null? kont48573 x)
    (let ((x48477 (prim null? x))) (kont48573 x48477)))
  (define (equal? kont48574 x y)
    (let ((x48478 (prim equal? x y))) (kont48574 x48478)))
  (define (eq? kont48575 x y)
    (let ((x48479 (prim eq? x y))) (kont48575 x48479)))
  (define (cons kont48576 a b)
    (let ((x48480 (prim cons a b))) (kont48576 x48480)))
  (define (car kont48577 lst)
    (let ((x48481 (prim car lst))) (kont48577 x48481)))
  (define (cdr kont48578 lst)
    (let ((x48482 (prim cdr lst))) (kont48578 x48482)))
  (define (even? kont48579 x)
    (let ((a48483 '0))
      (let ((a48484 '2))
        (let ((f48580 (lambda (a48485) (equal? kont48579 a48483 a48485))))
          (modulo f48580 x a48484)))))
  (define (odd? kont48581 x)
    (let ((a48486 '1))
      (let ((a48487 '2))
        (let ((f48582 (lambda (a48488) (equal? kont48581 a48486 a48488))))
          (modulo f48582 x a48487)))))
  (define (list . x)
    (let ((kont48583 (prim car x))) (let ((x (prim cdr x))) (kont48583 x))))
  (define (member? kont48585 x lst)
    (let ((f48589
           (lambda (a48489)
             (if a48489
               (let ((x48490 '#f)) (kont48585 x48490))
               (let ((f48588
                      (lambda (a48491)
                        (let ((f48587
                               (lambda (a48492)
                                 (if a48492
                                   (let ((x48493 '#t)) (kont48585 x48493))
                                   (let ((f48586
                                          (lambda (a48494)
                                            (member? kont48585 x a48494))))
                                     (cdr f48586 lst))))))
                          (equal? f48587 a48491 x)))))
                 (car f48588 lst))))))
      (null? f48589 lst)))
  (define (foldl kont48590 fun acc lst)
    (let ((f48594
           (lambda (a48495)
             (if a48495
               (kont48590 acc)
               (let ((f48593
                      (lambda (a48496)
                        (let ((f48592
                               (lambda (a48497)
                                 (let ((f48591
                                        (lambda (a48498)
                                          (foldl
                                           kont48590
                                           fun
                                           a48497
                                           a48498))))
                                   (cdr f48591 lst)))))
                          (fun f48592 a48496 acc)))))
                 (car f48593 lst))))))
      (null? f48594 lst)))
  (define (reverse-helper kont48595 lst lst2)
    (let ((f48599
           (lambda (a48499)
             (if a48499
               (kont48595 lst2)
               (let ((f48598
                      (lambda (a48500)
                        (let ((f48597
                               (lambda (a48501)
                                 (let ((f48596
                                        (lambda (a48502)
                                          (reverse-helper
                                           kont48595
                                           a48500
                                           a48502))))
                                   (cons f48596 a48501 lst2)))))
                          (car f48597 lst)))))
                 (cdr f48598 lst))))))
      (null? f48599 lst)))
  (define (reverse kont48600 lst)
    (let ((f48601 (lambda (a48503) (reverse-helper kont48600 lst a48503))))
      (list f48601)))
  (define (take-helper kont48602 lst n lst2)
    (let ((a48504 '0))
      (let ((f48608
             (lambda (a48505)
               (if a48505
                 (let ((f48603 (lambda (x48506) (kont48602 x48506))))
                   (reverse f48603 lst2))
                 (let ((f48607
                        (lambda (a48507)
                          (let ((a48508 '1))
                            (let ((f48606
                                   (lambda (a48509)
                                     (let ((f48605
                                            (lambda (a48510)
                                              (let ((f48604
                                                     (lambda (a48511)
                                                       (take-helper
                                                        kont48602
                                                        a48507
                                                        a48509
                                                        a48511))))
                                                (cons f48604 a48510 lst2)))))
                                       (car f48605 lst)))))
                              (- f48606 n a48508))))))
                   (cdr f48607 lst))))))
        (= f48608 n a48504))))
  (define (take kont48609 lst n)
    (let ((f48610 (lambda (a48512) (take-helper kont48609 lst n a48512))))
      (list f48610)))
  (define (length kont48611 lst)
    (let ((f48614
           (lambda (a48513)
             (if a48513
               (let ((x48514 '0)) (kont48611 x48514))
               (let ((a48515 '1))
                 (let ((f48613
                        (lambda (a48516)
                          (let ((f48612
                                 (lambda (a48517)
                                   (+ kont48611 a48515 a48517))))
                            (length f48612 a48516)))))
                   (cdr f48613 lst)))))))
      (null? f48614 lst)))
  (define (map kont48615 proc lst)
    (let ((f48621
           (lambda (a48518)
             (if a48518
               (let ((f48616 (lambda (x48519) (kont48615 x48519))))
                 (list f48616))
               (let ((f48620
                      (lambda (a48520)
                        (let ((f48619
                               (lambda (a48521)
                                 (let ((f48618
                                        (lambda (a48522)
                                          (let ((f48617
                                                 (lambda (a48523)
                                                   (cons
                                                    kont48615
                                                    a48521
                                                    a48523))))
                                            (map f48617 proc a48522)))))
                                   (cdr f48618 lst)))))
                          (proc f48619 a48520)))))
                 (car f48620 lst))))))
      (null? f48621 lst)))
  (define (filter kont48622 op lst)
    (let ((f48630
           (lambda (a48524)
             (if a48524
               (let ((f48623 (lambda (x48525) (kont48622 x48525))))
                 (list f48623))
               (let ((f48629
                      (lambda (a48526)
                        (let ((f48628
                               (lambda (a48527)
                                 (if a48527
                                   (let ((f48626
                                          (lambda (a48528)
                                            (let ((f48625
                                                   (lambda (a48529)
                                                     (let ((f48624
                                                            (lambda (a48530)
                                                              (cons
                                                               kont48622
                                                               a48528
                                                               a48530))))
                                                       (filter
                                                        f48624
                                                        op
                                                        a48529)))))
                                              (cdr f48625 lst)))))
                                     (car f48626 lst))
                                   (let ((f48627
                                          (lambda (a48531)
                                            (filter kont48622 op a48531))))
                                     (cdr f48627 lst))))))
                          (op f48628 a48526)))))
                 (car f48629 lst))))))
      (null? f48630 lst)))
  (define (drop kont48631 lst n)
    (let ((a48532 '0))
      (let ((f48634
             (lambda (a48533)
               (if a48533
                 (kont48631 lst)
                 (let ((f48633
                        (lambda (a48534)
                          (let ((a48535 '1))
                            (let ((f48632
                                   (lambda (a48536)
                                     (drop kont48631 a48534 a48536))))
                              (- f48632 n a48535))))))
                   (cdr f48633 lst))))))
        (= f48634 n a48532))))
  (define (foldr kont48635 proc acc lst)
    (let ((f48639
           (lambda (a48537)
             (if a48537
               (kont48635 acc)
               (let ((f48638
                      (lambda (a48538)
                        (let ((f48637
                               (lambda (a48539)
                                 (let ((f48636
                                        (lambda (a48540)
                                          (proc kont48635 a48538 a48540))))
                                   (foldr f48636 proc acc a48539)))))
                          (cdr f48637 lst)))))
                 (car f48638 lst))))))
      (null? f48639 lst)))
  (define (append kont48640 lst1 lst2)
    (let ((f48644
           (lambda (a48541)
             (if a48541
               (kont48640 lst2)
               (let ((f48643
                      (lambda (a48542)
                        (let ((f48642
                               (lambda (a48543)
                                 (let ((f48641
                                        (lambda (a48544)
                                          (cons kont48640 a48542 a48544))))
                                   (append f48641 a48543 lst2)))))
                          (cdr f48642 lst1)))))
                 (car f48643 lst1))))))
      (null? f48644 lst1)))
  (define (hash . lst)
    (let ((kont48645 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48545 (apply-prim hash lst))) (kont48645 x48545)))))
  (define (hash-ref kont48647 h k)
    (let ((x48546 (prim hash-ref h k))) (kont48647 x48546)))
  (define (hash-set kont48648 h k v)
    (let ((x48547 (prim hash-set h k v))) (kont48648 x48547)))
  (define (hash-has-key? kont48649 h k)
    (let ((x48548 (prim hash-has-key? h k))) (kont48649 x48548)))
  (define (hash-count kont48650 h)
    (let ((x48549 (prim hash-count h))) (kont48650 x48549)))
  (define (call kont48651)
    (let ((a48550 '#f))
      (if a48550
        (let ((x48551 '#f)) (kont48651 x48551))
        (let ((x48552 '#t)) (kont48651 x48552)))))
  (define (brouhaha_main kont48652)
    (let ((f48653 (lambda (x48553) (kont48652 x48553)))) (call f48653))))
