'((define (+ . lst)
    (let ((kont49395 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49306 (apply-prim + lst))) (kont49395 x49306)))))
  (define (- . lst)
    (let ((kont49397 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49307 (apply-prim - lst))) (kont49397 x49307)))))
  (define (* . lst)
    (let ((kont49399 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49308 (apply-prim * lst))) (kont49399 x49308)))))
  (define (modulo kont49401 a b)
    (let ((x49309 (prim modulo a b))) (kont49401 x49309)))
  (define (/ . lst)
    (let ((kont49402 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49310 (apply-prim / lst))) (kont49402 x49310)))))
  (define (= . lst)
    (let ((kont49404 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49311 (apply-prim = lst))) (kont49404 x49311)))))
  (define (> . lst)
    (let ((kont49406 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49312 (apply-prim > lst))) (kont49406 x49312)))))
  (define (< . lst)
    (let ((kont49408 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49313 (apply-prim < lst))) (kont49408 x49313)))))
  (define (<= . lst)
    (let ((kont49410 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49314 (apply-prim <= lst))) (kont49410 x49314)))))
  (define (>= . lst)
    (let ((kont49412 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49315 (apply-prim >= lst))) (kont49412 x49315)))))
  (define (null? kont49414 x)
    (let ((x49316 (prim null? x))) (kont49414 x49316)))
  (define (equal? kont49415 x y)
    (let ((x49317 (prim equal? x y))) (kont49415 x49317)))
  (define (eq? kont49416 x y)
    (let ((x49318 (prim eq? x y))) (kont49416 x49318)))
  (define (cons kont49417 a b)
    (let ((x49319 (prim cons a b))) (kont49417 x49319)))
  (define (car kont49418 lst)
    (let ((x49320 (prim car lst))) (kont49418 x49320)))
  (define (cdr kont49419 lst)
    (let ((x49321 (prim cdr lst))) (kont49419 x49321)))
  (define (even? kont49420 x)
    (let ((a49322 '0))
      (let ((a49323 '2))
        (let ((f49421 (lambda (a49324) (equal? kont49420 a49322 a49324))))
          (modulo f49421 x a49323)))))
  (define (odd? kont49422 x)
    (let ((a49325 '1))
      (let ((a49326 '2))
        (let ((f49423 (lambda (a49327) (equal? kont49422 a49325 a49327))))
          (modulo f49423 x a49326)))))
  (define (list . x)
    (let ((kont49424 (prim car x))) (let ((x (prim cdr x))) (kont49424 x))))
  (define (and . lst)
    (let ((kont49426 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49328 (apply-prim and lst))) (kont49426 x49328)))))
  (define (or . lst)
    (let ((kont49428 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49329 (apply-prim or lst))) (kont49428 x49329)))))
  (define (member? kont49430 x lst)
    (let ((f49434
           (lambda (a49330)
             (if a49330
               (let ((x49331 '#f)) (kont49430 x49331))
               (let ((f49433
                      (lambda (a49332)
                        (let ((f49432
                               (lambda (a49333)
                                 (if a49333
                                   (let ((x49334 '#t)) (kont49430 x49334))
                                   (let ((f49431
                                          (lambda (a49335)
                                            (member? kont49430 x a49335))))
                                     (cdr f49431 lst))))))
                          (equal? f49432 a49332 x)))))
                 (car f49433 lst))))))
      (null? f49434 lst)))
  (define (foldl kont49435 fun acc lst)
    (let ((f49439
           (lambda (a49336)
             (if a49336
               (kont49435 acc)
               (let ((f49438
                      (lambda (a49337)
                        (let ((f49437
                               (lambda (a49338)
                                 (let ((f49436
                                        (lambda (a49339)
                                          (foldl
                                           kont49435
                                           fun
                                           a49338
                                           a49339))))
                                   (cdr f49436 lst)))))
                          (fun f49437 a49337 acc)))))
                 (car f49438 lst))))))
      (null? f49439 lst)))
  (define (reverse-helper kont49440 lst lst2)
    (let ((f49444
           (lambda (a49340)
             (if a49340
               (kont49440 lst2)
               (let ((f49443
                      (lambda (a49341)
                        (let ((f49442
                               (lambda (a49342)
                                 (let ((f49441
                                        (lambda (a49343)
                                          (reverse-helper
                                           kont49440
                                           a49341
                                           a49343))))
                                   (cons f49441 a49342 lst2)))))
                          (car f49442 lst)))))
                 (cdr f49443 lst))))))
      (null? f49444 lst)))
  (define (reverse kont49445 lst)
    (let ((f49446 (lambda (a49344) (reverse-helper kont49445 lst a49344))))
      (list f49446)))
  (define (take-helper kont49447 lst n lst2)
    (let ((a49345 '0))
      (let ((f49453
             (lambda (a49346)
               (if a49346
                 (let ((f49448 (lambda (x49347) (kont49447 x49347))))
                   (reverse f49448 lst2))
                 (let ((f49452
                        (lambda (a49348)
                          (let ((a49349 '1))
                            (let ((f49451
                                   (lambda (a49350)
                                     (let ((f49450
                                            (lambda (a49351)
                                              (let ((f49449
                                                     (lambda (a49352)
                                                       (take-helper
                                                        kont49447
                                                        a49348
                                                        a49350
                                                        a49352))))
                                                (cons f49449 a49351 lst2)))))
                                       (car f49450 lst)))))
                              (- f49451 n a49349))))))
                   (cdr f49452 lst))))))
        (= f49453 n a49345))))
  (define (take kont49454 lst n)
    (let ((f49455 (lambda (a49353) (take-helper kont49454 lst n a49353))))
      (list f49455)))
  (define (length kont49456 lst)
    (let ((f49459
           (lambda (a49354)
             (if a49354
               (let ((x49355 '0)) (kont49456 x49355))
               (let ((a49356 '1))
                 (let ((f49458
                        (lambda (a49357)
                          (let ((f49457
                                 (lambda (a49358)
                                   (+ kont49456 a49356 a49358))))
                            (length f49457 a49357)))))
                   (cdr f49458 lst)))))))
      (null? f49459 lst)))
  (define (map kont49460 proc lst)
    (let ((f49466
           (lambda (a49359)
             (if a49359
               (let ((f49461 (lambda (x49360) (kont49460 x49360))))
                 (list f49461))
               (let ((f49465
                      (lambda (a49361)
                        (let ((f49464
                               (lambda (a49362)
                                 (let ((f49463
                                        (lambda (a49363)
                                          (let ((f49462
                                                 (lambda (a49364)
                                                   (cons
                                                    kont49460
                                                    a49362
                                                    a49364))))
                                            (map f49462 proc a49363)))))
                                   (cdr f49463 lst)))))
                          (proc f49464 a49361)))))
                 (car f49465 lst))))))
      (null? f49466 lst)))
  (define (filter kont49467 op lst)
    (let ((f49475
           (lambda (a49365)
             (if a49365
               (let ((f49468 (lambda (x49366) (kont49467 x49366))))
                 (list f49468))
               (let ((f49474
                      (lambda (a49367)
                        (let ((f49473
                               (lambda (a49368)
                                 (if a49368
                                   (let ((f49471
                                          (lambda (a49369)
                                            (let ((f49470
                                                   (lambda (a49370)
                                                     (let ((f49469
                                                            (lambda (a49371)
                                                              (cons
                                                               kont49467
                                                               a49369
                                                               a49371))))
                                                       (filter
                                                        f49469
                                                        op
                                                        a49370)))))
                                              (cdr f49470 lst)))))
                                     (car f49471 lst))
                                   (let ((f49472
                                          (lambda (a49372)
                                            (filter kont49467 op a49372))))
                                     (cdr f49472 lst))))))
                          (op f49473 a49367)))))
                 (car f49474 lst))))))
      (null? f49475 lst)))
  (define (drop kont49476 lst n)
    (let ((a49373 '0))
      (let ((f49479
             (lambda (a49374)
               (if a49374
                 (kont49476 lst)
                 (let ((f49478
                        (lambda (a49375)
                          (let ((a49376 '1))
                            (let ((f49477
                                   (lambda (a49377)
                                     (drop kont49476 a49375 a49377))))
                              (- f49477 n a49376))))))
                   (cdr f49478 lst))))))
        (= f49479 n a49373))))
  (define (foldr kont49480 proc acc lst)
    (let ((f49484
           (lambda (a49378)
             (if a49378
               (kont49480 acc)
               (let ((f49483
                      (lambda (a49379)
                        (let ((f49482
                               (lambda (a49380)
                                 (let ((f49481
                                        (lambda (a49381)
                                          (proc kont49480 a49379 a49381))))
                                   (foldr f49481 proc acc a49380)))))
                          (cdr f49482 lst)))))
                 (car f49483 lst))))))
      (null? f49484 lst)))
  (define (append kont49485 lst1 lst2)
    (let ((f49489
           (lambda (a49382)
             (if a49382
               (kont49485 lst2)
               (let ((f49488
                      (lambda (a49383)
                        (let ((f49487
                               (lambda (a49384)
                                 (let ((f49486
                                        (lambda (a49385)
                                          (cons kont49485 a49383 a49385))))
                                   (append f49486 a49384 lst2)))))
                          (cdr f49487 lst1)))))
                 (car f49488 lst1))))))
      (null? f49489 lst1)))
  (define (hash . lst)
    (let ((kont49490 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x49386 (apply-prim hash lst))) (kont49490 x49386)))))
  (define (hash-ref kont49492 h k)
    (let ((x49387 (prim hash-ref h k))) (kont49492 x49387)))
  (define (hash-set kont49493 h k v)
    (let ((x49388 (prim hash-set h k v))) (kont49493 x49388)))
  (define (hash-has-key? kont49494 h k)
    (let ((x49389 (prim hash-has-key? h k))) (kont49494 x49389)))
  (define (hash-count kont49495 h)
    (let ((x49390 (prim hash-count h))) (kont49495 x49390)))
  (define (call kont49496)
    (let ((a49391 '#f))
      (if a49391
        (let ((x49392 '#f)) (kont49496 x49392))
        (let ((x49393 '#t)) (kont49496 x49393)))))
  (define (brouhaha_main kont49497)
    (let ((f49498 (lambda (x49394) (kont49497 x49394)))) (call f49498))))
