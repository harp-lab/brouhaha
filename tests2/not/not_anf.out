'((define (+ . lst)
    (let ((kont50338 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50251 (apply-prim + lst))) (kont50338 x50251)))))
  (define (- . lst)
    (let ((kont50340 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50252 (apply-prim - lst))) (kont50340 x50252)))))
  (define (* . lst)
    (let ((kont50342 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50253 (apply-prim * lst))) (kont50342 x50253)))))
  (define (modulo kont50344 a b)
    (let ((x50254 (prim modulo a b))) (kont50344 x50254)))
  (define (/ . lst)
    (let ((kont50345 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50255 (apply-prim / lst))) (kont50345 x50255)))))
  (define (= . lst)
    (let ((kont50347 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50256 (apply-prim = lst))) (kont50347 x50256)))))
  (define (> . lst)
    (let ((kont50349 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50257 (apply-prim > lst))) (kont50349 x50257)))))
  (define (< . lst)
    (let ((kont50351 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50258 (apply-prim < lst))) (kont50351 x50258)))))
  (define (<= . lst)
    (let ((kont50353 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50259 (apply-prim <= lst))) (kont50353 x50259)))))
  (define (>= . lst)
    (let ((kont50355 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50260 (apply-prim >= lst))) (kont50355 x50260)))))
  (define (null? kont50357 x)
    (let ((x50261 (prim null? x))) (kont50357 x50261)))
  (define (equal? kont50358 x y)
    (let ((x50262 (prim equal? x y))) (kont50358 x50262)))
  (define (eq? kont50359 x y)
    (let ((x50263 (prim eq? x y))) (kont50359 x50263)))
  (define (cons kont50360 a b)
    (let ((x50264 (prim cons a b))) (kont50360 x50264)))
  (define (car kont50361 lst)
    (let ((x50265 (prim car lst))) (kont50361 x50265)))
  (define (cdr kont50362 lst)
    (let ((x50266 (prim cdr lst))) (kont50362 x50266)))
  (define (even? kont50363 x)
    (let ((a50267 '0))
      (let ((a50268 '2))
        (let ((f50364 (lambda (a50269) (equal? kont50363 a50267 a50269))))
          (modulo f50364 x a50268)))))
  (define (odd? kont50365 x)
    (let ((a50270 '1))
      (let ((a50271 '2))
        (let ((f50366 (lambda (a50272) (equal? kont50365 a50270 a50272))))
          (modulo f50366 x a50271)))))
  (define (list . x)
    (let ((kont50367 (prim car x))) (let ((x (prim cdr x))) (kont50367 x))))
  (define (member? kont50369 x lst)
    (let ((f50373
           (lambda (a50273)
             (if a50273
               (let ((x50274 '#f)) (kont50369 x50274))
               (let ((f50372
                      (lambda (a50275)
                        (let ((f50371
                               (lambda (a50276)
                                 (if a50276
                                   (let ((x50277 '#t)) (kont50369 x50277))
                                   (let ((f50370
                                          (lambda (a50278)
                                            (member? kont50369 x a50278))))
                                     (cdr f50370 lst))))))
                          (equal? f50371 a50275 x)))))
                 (car f50372 lst))))))
      (null? f50373 lst)))
  (define (foldl kont50374 fun acc lst)
    (let ((f50378
           (lambda (a50279)
             (if a50279
               (kont50374 acc)
               (let ((f50377
                      (lambda (a50280)
                        (let ((f50376
                               (lambda (a50281)
                                 (let ((f50375
                                        (lambda (a50282)
                                          (foldl
                                           kont50374
                                           fun
                                           a50281
                                           a50282))))
                                   (cdr f50375 lst)))))
                          (fun f50376 a50280 acc)))))
                 (car f50377 lst))))))
      (null? f50378 lst)))
  (define (reverse-helper kont50379 lst lst2)
    (let ((f50383
           (lambda (a50283)
             (if a50283
               (kont50379 lst2)
               (let ((f50382
                      (lambda (a50284)
                        (let ((f50381
                               (lambda (a50285)
                                 (let ((f50380
                                        (lambda (a50286)
                                          (reverse-helper
                                           kont50379
                                           a50284
                                           a50286))))
                                   (cons f50380 a50285 lst2)))))
                          (car f50381 lst)))))
                 (cdr f50382 lst))))))
      (null? f50383 lst)))
  (define (reverse kont50384 lst)
    (let ((f50385 (lambda (a50287) (reverse-helper kont50384 lst a50287))))
      (list f50385)))
  (define (take-helper kont50386 lst n lst2)
    (let ((a50288 '0))
      (let ((f50392
             (lambda (a50289)
               (if a50289
                 (let ((f50387 (lambda (x50290) (kont50386 x50290))))
                   (reverse f50387 lst2))
                 (let ((f50391
                        (lambda (a50291)
                          (let ((a50292 '1))
                            (let ((f50390
                                   (lambda (a50293)
                                     (let ((f50389
                                            (lambda (a50294)
                                              (let ((f50388
                                                     (lambda (a50295)
                                                       (take-helper
                                                        kont50386
                                                        a50291
                                                        a50293
                                                        a50295))))
                                                (cons f50388 a50294 lst2)))))
                                       (car f50389 lst)))))
                              (- f50390 n a50292))))))
                   (cdr f50391 lst))))))
        (= f50392 n a50288))))
  (define (take kont50393 lst n)
    (let ((f50394 (lambda (a50296) (take-helper kont50393 lst n a50296))))
      (list f50394)))
  (define (length kont50395 lst)
    (let ((f50398
           (lambda (a50297)
             (if a50297
               (let ((x50298 '0)) (kont50395 x50298))
               (let ((a50299 '1))
                 (let ((f50397
                        (lambda (a50300)
                          (let ((f50396
                                 (lambda (a50301)
                                   (+ kont50395 a50299 a50301))))
                            (length f50396 a50300)))))
                   (cdr f50397 lst)))))))
      (null? f50398 lst)))
  (define (map kont50399 proc lst)
    (let ((f50405
           (lambda (a50302)
             (if a50302
               (let ((f50400 (lambda (x50303) (kont50399 x50303))))
                 (list f50400))
               (let ((f50404
                      (lambda (a50304)
                        (let ((f50403
                               (lambda (a50305)
                                 (let ((f50402
                                        (lambda (a50306)
                                          (let ((f50401
                                                 (lambda (a50307)
                                                   (cons
                                                    kont50399
                                                    a50305
                                                    a50307))))
                                            (map f50401 proc a50306)))))
                                   (cdr f50402 lst)))))
                          (proc f50403 a50304)))))
                 (car f50404 lst))))))
      (null? f50405 lst)))
  (define (filter kont50406 op lst)
    (let ((f50414
           (lambda (a50308)
             (if a50308
               (let ((f50407 (lambda (x50309) (kont50406 x50309))))
                 (list f50407))
               (let ((f50413
                      (lambda (a50310)
                        (let ((f50412
                               (lambda (a50311)
                                 (if a50311
                                   (let ((f50410
                                          (lambda (a50312)
                                            (let ((f50409
                                                   (lambda (a50313)
                                                     (let ((f50408
                                                            (lambda (a50314)
                                                              (cons
                                                               kont50406
                                                               a50312
                                                               a50314))))
                                                       (filter
                                                        f50408
                                                        op
                                                        a50313)))))
                                              (cdr f50409 lst)))))
                                     (car f50410 lst))
                                   (let ((f50411
                                          (lambda (a50315)
                                            (filter kont50406 op a50315))))
                                     (cdr f50411 lst))))))
                          (op f50412 a50310)))))
                 (car f50413 lst))))))
      (null? f50414 lst)))
  (define (drop kont50415 lst n)
    (let ((a50316 '0))
      (let ((f50418
             (lambda (a50317)
               (if a50317
                 (kont50415 lst)
                 (let ((f50417
                        (lambda (a50318)
                          (let ((a50319 '1))
                            (let ((f50416
                                   (lambda (a50320)
                                     (drop kont50415 a50318 a50320))))
                              (- f50416 n a50319))))))
                   (cdr f50417 lst))))))
        (= f50418 n a50316))))
  (define (foldr kont50419 proc acc lst)
    (let ((f50423
           (lambda (a50321)
             (if a50321
               (kont50419 acc)
               (let ((f50422
                      (lambda (a50322)
                        (let ((f50421
                               (lambda (a50323)
                                 (let ((f50420
                                        (lambda (a50324)
                                          (proc kont50419 a50322 a50324))))
                                   (foldr f50420 proc acc a50323)))))
                          (cdr f50421 lst)))))
                 (car f50422 lst))))))
      (null? f50423 lst)))
  (define (append kont50424 lst1 lst2)
    (let ((f50428
           (lambda (a50325)
             (if a50325
               (kont50424 lst2)
               (let ((f50427
                      (lambda (a50326)
                        (let ((f50426
                               (lambda (a50327)
                                 (let ((f50425
                                        (lambda (a50328)
                                          (cons kont50424 a50326 a50328))))
                                   (append f50425 a50327 lst2)))))
                          (cdr f50426 lst1)))))
                 (car f50427 lst1))))))
      (null? f50428 lst1)))
  (define (hash . lst)
    (let ((kont50429 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x50329 (apply-prim hash lst))) (kont50429 x50329)))))
  (define (hash-ref kont50431 h k)
    (let ((x50330 (prim hash-ref h k))) (kont50431 x50330)))
  (define (hash-set kont50432 h k v)
    (let ((x50331 (prim hash-set h k v))) (kont50432 x50331)))
  (define (hash-has-key? kont50433 h k)
    (let ((x50332 (prim hash-has-key? h k))) (kont50433 x50332)))
  (define (hash-count kont50434 h)
    (let ((x50333 (prim hash-count h))) (kont50434 x50333)))
  (define (call kont50435)
    (let ((a50334 '#f))
      (if a50334
        (let ((x50335 '#f)) (kont50435 x50335))
        (let ((x50336 '#t)) (kont50435 x50336)))))
  (define (brouhaha_main kont50436)
    (let ((f50437 (lambda (x50337) (kont50436 x50337)))) (call f50437))))
