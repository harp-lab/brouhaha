'((define (+ . lst)
    (let ((kont46802 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46715 (apply-prim + lst))) (kont46802 x46715)))))
  (define (- . lst)
    (let ((kont46804 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46716 (apply-prim - lst))) (kont46804 x46716)))))
  (define (* . lst)
    (let ((kont46806 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46717 (apply-prim * lst))) (kont46806 x46717)))))
  (define (modulo kont46808 a b)
    (let ((x46718 (prim modulo a b))) (kont46808 x46718)))
  (define (/ . lst)
    (let ((kont46809 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46719 (apply-prim / lst))) (kont46809 x46719)))))
  (define (= . lst)
    (let ((kont46811 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46720 (apply-prim = lst))) (kont46811 x46720)))))
  (define (> . lst)
    (let ((kont46813 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46721 (apply-prim > lst))) (kont46813 x46721)))))
  (define (< . lst)
    (let ((kont46815 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46722 (apply-prim < lst))) (kont46815 x46722)))))
  (define (<= . lst)
    (let ((kont46817 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46723 (apply-prim <= lst))) (kont46817 x46723)))))
  (define (>= . lst)
    (let ((kont46819 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46724 (apply-prim >= lst))) (kont46819 x46724)))))
  (define (null? kont46821 x)
    (let ((x46725 (prim null? x))) (kont46821 x46725)))
  (define (equal? kont46822 x y)
    (let ((x46726 (prim equal? x y))) (kont46822 x46726)))
  (define (eq? kont46823 x y)
    (let ((x46727 (prim eq? x y))) (kont46823 x46727)))
  (define (cons kont46824 a b)
    (let ((x46728 (prim cons a b))) (kont46824 x46728)))
  (define (car kont46825 lst)
    (let ((x46729 (prim car lst))) (kont46825 x46729)))
  (define (cdr kont46826 lst)
    (let ((x46730 (prim cdr lst))) (kont46826 x46730)))
  (define (even? kont46827 x)
    (let ((a46731 '0))
      (let ((a46732 '2))
        (let ((f46828 (lambda (a46733) (equal? kont46827 a46731 a46733))))
          (modulo f46828 x a46732)))))
  (define (odd? kont46829 x)
    (let ((a46734 '1))
      (let ((a46735 '2))
        (let ((f46830 (lambda (a46736) (equal? kont46829 a46734 a46736))))
          (modulo f46830 x a46735)))))
  (define (list . x)
    (let ((kont46831 (prim car x))) (let ((x (prim cdr x))) (kont46831 x))))
  (define (member? kont46833 x lst)
    (let ((f46837
           (lambda (a46737)
             (if a46737
               (let ((x46738 '#f)) (kont46833 x46738))
               (let ((f46836
                      (lambda (a46739)
                        (let ((f46835
                               (lambda (a46740)
                                 (if a46740
                                   (let ((x46741 '#t)) (kont46833 x46741))
                                   (let ((f46834
                                          (lambda (a46742)
                                            (member? kont46833 x a46742))))
                                     (cdr f46834 lst))))))
                          (equal? f46835 a46739 x)))))
                 (car f46836 lst))))))
      (null? f46837 lst)))
  (define (foldl kont46838 fun acc lst)
    (let ((f46842
           (lambda (a46743)
             (if a46743
               (kont46838 acc)
               (let ((f46841
                      (lambda (a46744)
                        (let ((f46840
                               (lambda (a46745)
                                 (let ((f46839
                                        (lambda (a46746)
                                          (foldl
                                           kont46838
                                           fun
                                           a46745
                                           a46746))))
                                   (cdr f46839 lst)))))
                          (fun f46840 a46744 acc)))))
                 (car f46841 lst))))))
      (null? f46842 lst)))
  (define (reverse-helper kont46843 lst lst2)
    (let ((f46847
           (lambda (a46747)
             (if a46747
               (kont46843 lst2)
               (let ((f46846
                      (lambda (a46748)
                        (let ((f46845
                               (lambda (a46749)
                                 (let ((f46844
                                        (lambda (a46750)
                                          (reverse-helper
                                           kont46843
                                           a46748
                                           a46750))))
                                   (cons f46844 a46749 lst2)))))
                          (car f46845 lst)))))
                 (cdr f46846 lst))))))
      (null? f46847 lst)))
  (define (reverse kont46848 lst)
    (let ((f46849 (lambda (a46751) (reverse-helper kont46848 lst a46751))))
      (list f46849)))
  (define (take-helper kont46850 lst n lst2)
    (let ((a46752 '0))
      (let ((f46856
             (lambda (a46753)
               (if a46753
                 (let ((f46851 (lambda (x46754) (kont46850 x46754))))
                   (reverse f46851 lst2))
                 (let ((f46855
                        (lambda (a46755)
                          (let ((a46756 '1))
                            (let ((f46854
                                   (lambda (a46757)
                                     (let ((f46853
                                            (lambda (a46758)
                                              (let ((f46852
                                                     (lambda (a46759)
                                                       (take-helper
                                                        kont46850
                                                        a46755
                                                        a46757
                                                        a46759))))
                                                (cons f46852 a46758 lst2)))))
                                       (car f46853 lst)))))
                              (- f46854 n a46756))))))
                   (cdr f46855 lst))))))
        (= f46856 n a46752))))
  (define (take kont46857 lst n)
    (let ((f46858 (lambda (a46760) (take-helper kont46857 lst n a46760))))
      (list f46858)))
  (define (length kont46859 lst)
    (let ((f46862
           (lambda (a46761)
             (if a46761
               (let ((x46762 '0)) (kont46859 x46762))
               (let ((a46763 '1))
                 (let ((f46861
                        (lambda (a46764)
                          (let ((f46860
                                 (lambda (a46765)
                                   (+ kont46859 a46763 a46765))))
                            (length f46860 a46764)))))
                   (cdr f46861 lst)))))))
      (null? f46862 lst)))
  (define (map kont46863 proc lst)
    (let ((f46869
           (lambda (a46766)
             (if a46766
               (let ((f46864 (lambda (x46767) (kont46863 x46767))))
                 (list f46864))
               (let ((f46868
                      (lambda (a46768)
                        (let ((f46867
                               (lambda (a46769)
                                 (let ((f46866
                                        (lambda (a46770)
                                          (let ((f46865
                                                 (lambda (a46771)
                                                   (cons
                                                    kont46863
                                                    a46769
                                                    a46771))))
                                            (map f46865 proc a46770)))))
                                   (cdr f46866 lst)))))
                          (proc f46867 a46768)))))
                 (car f46868 lst))))))
      (null? f46869 lst)))
  (define (filter kont46870 op lst)
    (let ((f46878
           (lambda (a46772)
             (if a46772
               (let ((f46871 (lambda (x46773) (kont46870 x46773))))
                 (list f46871))
               (let ((f46877
                      (lambda (a46774)
                        (let ((f46876
                               (lambda (a46775)
                                 (if a46775
                                   (let ((f46874
                                          (lambda (a46776)
                                            (let ((f46873
                                                   (lambda (a46777)
                                                     (let ((f46872
                                                            (lambda (a46778)
                                                              (cons
                                                               kont46870
                                                               a46776
                                                               a46778))))
                                                       (filter
                                                        f46872
                                                        op
                                                        a46777)))))
                                              (cdr f46873 lst)))))
                                     (car f46874 lst))
                                   (let ((f46875
                                          (lambda (a46779)
                                            (filter kont46870 op a46779))))
                                     (cdr f46875 lst))))))
                          (op f46876 a46774)))))
                 (car f46877 lst))))))
      (null? f46878 lst)))
  (define (drop kont46879 lst n)
    (let ((a46780 '0))
      (let ((f46882
             (lambda (a46781)
               (if a46781
                 (kont46879 lst)
                 (let ((f46881
                        (lambda (a46782)
                          (let ((a46783 '1))
                            (let ((f46880
                                   (lambda (a46784)
                                     (drop kont46879 a46782 a46784))))
                              (- f46880 n a46783))))))
                   (cdr f46881 lst))))))
        (= f46882 n a46780))))
  (define (foldr kont46883 proc acc lst)
    (let ((f46887
           (lambda (a46785)
             (if a46785
               (kont46883 acc)
               (let ((f46886
                      (lambda (a46786)
                        (let ((f46885
                               (lambda (a46787)
                                 (let ((f46884
                                        (lambda (a46788)
                                          (proc kont46883 a46786 a46788))))
                                   (foldr f46884 proc acc a46787)))))
                          (cdr f46885 lst)))))
                 (car f46886 lst))))))
      (null? f46887 lst)))
  (define (append kont46888 lst1 lst2)
    (let ((f46892
           (lambda (a46789)
             (if a46789
               (kont46888 lst2)
               (let ((f46891
                      (lambda (a46790)
                        (let ((f46890
                               (lambda (a46791)
                                 (let ((f46889
                                        (lambda (a46792)
                                          (cons kont46888 a46790 a46792))))
                                   (append f46889 a46791 lst2)))))
                          (cdr f46890 lst1)))))
                 (car f46891 lst1))))))
      (null? f46892 lst1)))
  (define (hash . lst)
    (let ((kont46893 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x46793 (apply-prim hash lst))) (kont46893 x46793)))))
  (define (hash-ref kont46895 h k)
    (let ((x46794 (prim hash-ref h k))) (kont46895 x46794)))
  (define (hash-set kont46896 h k v)
    (let ((x46795 (prim hash-set h k v))) (kont46896 x46795)))
  (define (hash-has-key? kont46897 h k)
    (let ((x46796 (prim hash-has-key? h k))) (kont46897 x46796)))
  (define (hash-count kont46898 h)
    (let ((x46797 (prim hash-count h))) (kont46898 x46797)))
  (define (call kont46899)
    (let ((a46798 '#f))
      (if a46798
        (let ((x46799 '#f)) (kont46899 x46799))
        (let ((x46800 '#t)) (kont46899 x46800)))))
  (define (brouhaha_main kont46900)
    (let ((f46901 (lambda (x46801) (kont46900 x46801)))) (call f46901))))
