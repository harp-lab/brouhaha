'((define (+ . lst)
    (let ((kont12085 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12000 (apply-prim + lst))) (kont12085 x12000)))))
  (define (- . lst)
    (let ((kont12087 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12001 (apply-prim - lst))) (kont12087 x12001)))))
  (define (* . lst)
    (let ((kont12089 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12002 (apply-prim * lst))) (kont12089 x12002)))))
  (define (modulo kont12091 a b)
    (let ((x12003 (prim modulo a b))) (kont12091 x12003)))
  (define (/ . lst)
    (let ((kont12092 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12004 (apply-prim / lst))) (kont12092 x12004)))))
  (define (= . lst)
    (let ((kont12094 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12005 (apply-prim = lst))) (kont12094 x12005)))))
  (define (> . lst)
    (let ((kont12096 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12006 (apply-prim > lst))) (kont12096 x12006)))))
  (define (< . lst)
    (let ((kont12098 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12007 (apply-prim < lst))) (kont12098 x12007)))))
  (define (<= . lst)
    (let ((kont12100 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12008 (apply-prim <= lst))) (kont12100 x12008)))))
  (define (>= . lst)
    (let ((kont12102 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12009 (apply-prim >= lst))) (kont12102 x12009)))))
  (define (null? kont12104 x)
    (let ((x12010 (prim null? x))) (kont12104 x12010)))
  (define (equal? kont12105 x y)
    (let ((x12011 (prim equal? x y))) (kont12105 x12011)))
  (define (eq? kont12106 x y)
    (let ((x12012 (prim eq? x y))) (kont12106 x12012)))
  (define (cons kont12107 a b)
    (let ((x12013 (prim cons a b))) (kont12107 x12013)))
  (define (car kont12108 lst)
    (let ((x12014 (prim car lst))) (kont12108 x12014)))
  (define (cdr kont12109 lst)
    (let ((x12015 (prim cdr lst))) (kont12109 x12015)))
  (define (even? kont12110 x)
    (let ((a12016 '0))
      (let ((a12017 '2))
        (let ((f12111 (lambda (a12018) (equal? kont12110 a12016 a12018))))
          (modulo f12111 x a12017)))))
  (define (odd? kont12112 x)
    (let ((a12019 '1))
      (let ((a12020 '2))
        (let ((f12113 (lambda (a12021) (equal? kont12112 a12019 a12021))))
          (modulo f12113 x a12020)))))
  (define (list . x)
    (let ((kont12114 (prim car x))) (let ((x (prim cdr x))) (kont12114 x))))
  (define (member? kont12116 x lst)
    (let ((f12120
           (lambda (a12022)
             (if a12022
               (let ((x12023 '#f)) (kont12116 x12023))
               (let ((f12119
                      (lambda (a12024)
                        (let ((f12118
                               (lambda (a12025)
                                 (if a12025
                                   (let ((x12026 '#t)) (kont12116 x12026))
                                   (let ((f12117
                                          (lambda (a12027)
                                            (member? kont12116 x a12027))))
                                     (cdr f12117 lst))))))
                          (equal? f12118 a12024 x)))))
                 (car f12119 lst))))))
      (null? f12120 lst)))
  (define (foldl kont12121 fun acc lst)
    (let ((f12125
           (lambda (a12028)
             (if a12028
               (kont12121 acc)
               (let ((f12124
                      (lambda (a12029)
                        (let ((f12123
                               (lambda (a12030)
                                 (let ((f12122
                                        (lambda (a12031)
                                          (foldl
                                           kont12121
                                           fun
                                           a12030
                                           a12031))))
                                   (cdr f12122 lst)))))
                          (fun f12123 a12029 acc)))))
                 (car f12124 lst))))))
      (null? f12125 lst)))
  (define (reverse-helper kont12126 lst lst2)
    (let ((f12130
           (lambda (a12032)
             (if a12032
               (kont12126 lst2)
               (let ((f12129
                      (lambda (a12033)
                        (let ((f12128
                               (lambda (a12034)
                                 (let ((f12127
                                        (lambda (a12035)
                                          (reverse-helper
                                           kont12126
                                           a12033
                                           a12035))))
                                   (cons f12127 a12034 lst2)))))
                          (car f12128 lst)))))
                 (cdr f12129 lst))))))
      (null? f12130 lst)))
  (define (reverse kont12131 lst)
    (let ((f12132 (lambda (a12036) (reverse-helper kont12131 lst a12036))))
      (list f12132)))
  (define (take-helper kont12133 lst n lst2)
    (let ((a12037 '0))
      (let ((f12139
             (lambda (a12038)
               (if a12038
                 (let ((f12134 (lambda (x12039) (kont12133 x12039))))
                   (reverse f12134 lst2))
                 (let ((f12138
                        (lambda (a12040)
                          (let ((a12041 '1))
                            (let ((f12137
                                   (lambda (a12042)
                                     (let ((f12136
                                            (lambda (a12043)
                                              (let ((f12135
                                                     (lambda (a12044)
                                                       (take-helper
                                                        kont12133
                                                        a12040
                                                        a12042
                                                        a12044))))
                                                (cons f12135 a12043 lst2)))))
                                       (car f12136 lst)))))
                              (- f12137 n a12041))))))
                   (cdr f12138 lst))))))
        (= f12139 n a12037))))
  (define (take kont12140 lst n)
    (let ((f12141 (lambda (a12045) (take-helper kont12140 lst n a12045))))
      (list f12141)))
  (define (length kont12142 lst)
    (let ((f12145
           (lambda (a12046)
             (if a12046
               (let ((x12047 '0)) (kont12142 x12047))
               (let ((a12048 '1))
                 (let ((f12144
                        (lambda (a12049)
                          (let ((f12143
                                 (lambda (a12050)
                                   (+ kont12142 a12048 a12050))))
                            (length f12143 a12049)))))
                   (cdr f12144 lst)))))))
      (null? f12145 lst)))
  (define (map kont12146 proc lst)
    (let ((f12152
           (lambda (a12051)
             (if a12051
               (let ((f12147 (lambda (x12052) (kont12146 x12052))))
                 (list f12147))
               (let ((f12151
                      (lambda (a12053)
                        (let ((f12150
                               (lambda (a12054)
                                 (let ((f12149
                                        (lambda (a12055)
                                          (let ((f12148
                                                 (lambda (a12056)
                                                   (cons
                                                    kont12146
                                                    a12054
                                                    a12056))))
                                            (map f12148 proc a12055)))))
                                   (cdr f12149 lst)))))
                          (proc f12150 a12053)))))
                 (car f12151 lst))))))
      (null? f12152 lst)))
  (define (filter kont12153 op lst)
    (let ((f12161
           (lambda (a12057)
             (if a12057
               (let ((f12154 (lambda (x12058) (kont12153 x12058))))
                 (list f12154))
               (let ((f12160
                      (lambda (a12059)
                        (let ((f12159
                               (lambda (a12060)
                                 (if a12060
                                   (let ((f12157
                                          (lambda (a12061)
                                            (let ((f12156
                                                   (lambda (a12062)
                                                     (let ((f12155
                                                            (lambda (a12063)
                                                              (cons
                                                               kont12153
                                                               a12061
                                                               a12063))))
                                                       (filter
                                                        f12155
                                                        op
                                                        a12062)))))
                                              (cdr f12156 lst)))))
                                     (car f12157 lst))
                                   (let ((f12158
                                          (lambda (a12064)
                                            (filter kont12153 op a12064))))
                                     (cdr f12158 lst))))))
                          (op f12159 a12059)))))
                 (car f12160 lst))))))
      (null? f12161 lst)))
  (define (drop kont12162 lst n)
    (let ((a12065 '0))
      (let ((f12165
             (lambda (a12066)
               (if a12066
                 (kont12162 lst)
                 (let ((f12164
                        (lambda (a12067)
                          (let ((a12068 '1))
                            (let ((f12163
                                   (lambda (a12069)
                                     (drop kont12162 a12067 a12069))))
                              (- f12163 n a12068))))))
                   (cdr f12164 lst))))))
        (= f12165 n a12065))))
  (define (foldr kont12166 proc acc lst)
    (let ((f12170
           (lambda (a12070)
             (if a12070
               (kont12166 acc)
               (let ((f12169
                      (lambda (a12071)
                        (let ((f12168
                               (lambda (a12072)
                                 (let ((f12167
                                        (lambda (a12073)
                                          (proc kont12166 a12071 a12073))))
                                   (foldr f12167 proc acc a12072)))))
                          (cdr f12168 lst)))))
                 (car f12169 lst))))))
      (null? f12170 lst)))
  (define (append kont12171 lst1 lst2)
    (let ((f12175
           (lambda (a12074)
             (if a12074
               (kont12171 lst2)
               (let ((f12174
                      (lambda (a12075)
                        (let ((f12173
                               (lambda (a12076)
                                 (let ((f12172
                                        (lambda (a12077)
                                          (cons kont12171 a12075 a12077))))
                                   (append f12172 a12076 lst2)))))
                          (cdr f12173 lst1)))))
                 (car f12174 lst1))))))
      (null? f12175 lst1)))
  (define (hash . lst)
    (let ((kont12176 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12078 (apply-prim hash lst))) (kont12176 x12078)))))
  (define (hash-ref kont12178 h k)
    (let ((x12079 (prim hash-ref h k))) (kont12178 x12079)))
  (define (hash-set kont12179 h k v)
    (let ((x12080 (prim hash-set h k v))) (kont12179 x12080)))
  (define (hash-has-key? kont12180 h k)
    (let ((x12081 (prim hash-has-key? h k))) (kont12180 x12081)))
  (define (hash-count kont12181 h)
    (let ((x12082 (prim hash-count h))) (kont12181 x12082)))
  (define (call kont12182) (let ((a12083 '5)) (even? kont12182 a12083)))
  (define (brouhaha_main kont12183)
    (let ((f12184 (lambda (x12084) (kont12183 x12084)))) (call f12184))))
