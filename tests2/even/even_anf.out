'((define (+ . lst)
    (let ((kont12409 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12324 (apply-prim + lst))) (kont12409 x12324)))))
  (define (- . lst)
    (let ((kont12411 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12325 (apply-prim - lst))) (kont12411 x12325)))))
  (define (* . lst)
    (let ((kont12413 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12326 (apply-prim * lst))) (kont12413 x12326)))))
  (define (modulo kont12415 a b)
    (let ((x12327 (prim modulo a b))) (kont12415 x12327)))
  (define (/ . lst)
    (let ((kont12416 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12328 (apply-prim / lst))) (kont12416 x12328)))))
  (define (= . lst)
    (let ((kont12418 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12329 (apply-prim = lst))) (kont12418 x12329)))))
  (define (> . lst)
    (let ((kont12420 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12330 (apply-prim > lst))) (kont12420 x12330)))))
  (define (< . lst)
    (let ((kont12422 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12331 (apply-prim < lst))) (kont12422 x12331)))))
  (define (<= . lst)
    (let ((kont12424 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12332 (apply-prim <= lst))) (kont12424 x12332)))))
  (define (>= . lst)
    (let ((kont12426 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12333 (apply-prim >= lst))) (kont12426 x12333)))))
  (define (null? kont12428 x)
    (let ((x12334 (prim null? x))) (kont12428 x12334)))
  (define (equal? kont12429 x y)
    (let ((x12335 (prim equal? x y))) (kont12429 x12335)))
  (define (eq? kont12430 x y)
    (let ((x12336 (prim eq? x y))) (kont12430 x12336)))
  (define (cons kont12431 a b)
    (let ((x12337 (prim cons a b))) (kont12431 x12337)))
  (define (car kont12432 lst)
    (let ((x12338 (prim car lst))) (kont12432 x12338)))
  (define (cdr kont12433 lst)
    (let ((x12339 (prim cdr lst))) (kont12433 x12339)))
  (define (even? kont12434 x)
    (let ((a12340 '0))
      (let ((a12341 '2))
        (let ((f12435 (lambda (a12342) (equal? kont12434 a12340 a12342))))
          (modulo f12435 x a12341)))))
  (define (odd? kont12436 x)
    (let ((a12343 '1))
      (let ((a12344 '2))
        (let ((f12437 (lambda (a12345) (equal? kont12436 a12343 a12345))))
          (modulo f12437 x a12344)))))
  (define (list . x)
    (let ((kont12438 (prim car x))) (let ((x (prim cdr x))) (kont12438 x))))
  (define (member? kont12440 x lst)
    (let ((f12444
           (lambda (a12346)
             (if a12346
               (let ((x12347 '#f)) (kont12440 x12347))
               (let ((f12443
                      (lambda (a12348)
                        (let ((f12442
                               (lambda (a12349)
                                 (if a12349
                                   (let ((x12350 '#t)) (kont12440 x12350))
                                   (let ((f12441
                                          (lambda (a12351)
                                            (member? kont12440 x a12351))))
                                     (cdr f12441 lst))))))
                          (equal? f12442 a12348 x)))))
                 (car f12443 lst))))))
      (null? f12444 lst)))
  (define (foldl kont12445 fun acc lst)
    (let ((f12449
           (lambda (a12352)
             (if a12352
               (kont12445 acc)
               (let ((f12448
                      (lambda (a12353)
                        (let ((f12447
                               (lambda (a12354)
                                 (let ((f12446
                                        (lambda (a12355)
                                          (foldl
                                           kont12445
                                           fun
                                           a12354
                                           a12355))))
                                   (cdr f12446 lst)))))
                          (fun f12447 a12353 acc)))))
                 (car f12448 lst))))))
      (null? f12449 lst)))
  (define (reverse-helper kont12450 lst lst2)
    (let ((f12454
           (lambda (a12356)
             (if a12356
               (kont12450 lst2)
               (let ((f12453
                      (lambda (a12357)
                        (let ((f12452
                               (lambda (a12358)
                                 (let ((f12451
                                        (lambda (a12359)
                                          (reverse-helper
                                           kont12450
                                           a12357
                                           a12359))))
                                   (cons f12451 a12358 lst2)))))
                          (car f12452 lst)))))
                 (cdr f12453 lst))))))
      (null? f12454 lst)))
  (define (reverse kont12455 lst)
    (let ((f12456 (lambda (a12360) (reverse-helper kont12455 lst a12360))))
      (list f12456)))
  (define (take-helper kont12457 lst n lst2)
    (let ((a12361 '0))
      (let ((f12463
             (lambda (a12362)
               (if a12362
                 (let ((f12458 (lambda (x12363) (kont12457 x12363))))
                   (reverse f12458 lst2))
                 (let ((f12462
                        (lambda (a12364)
                          (let ((a12365 '1))
                            (let ((f12461
                                   (lambda (a12366)
                                     (let ((f12460
                                            (lambda (a12367)
                                              (let ((f12459
                                                     (lambda (a12368)
                                                       (take-helper
                                                        kont12457
                                                        a12364
                                                        a12366
                                                        a12368))))
                                                (cons f12459 a12367 lst2)))))
                                       (car f12460 lst)))))
                              (- f12461 n a12365))))))
                   (cdr f12462 lst))))))
        (= f12463 n a12361))))
  (define (take kont12464 lst n)
    (let ((f12465 (lambda (a12369) (take-helper kont12464 lst n a12369))))
      (list f12465)))
  (define (length kont12466 lst)
    (let ((f12469
           (lambda (a12370)
             (if a12370
               (let ((x12371 '0)) (kont12466 x12371))
               (let ((a12372 '1))
                 (let ((f12468
                        (lambda (a12373)
                          (let ((f12467
                                 (lambda (a12374)
                                   (+ kont12466 a12372 a12374))))
                            (length f12467 a12373)))))
                   (cdr f12468 lst)))))))
      (null? f12469 lst)))
  (define (map kont12470 proc lst)
    (let ((f12476
           (lambda (a12375)
             (if a12375
               (let ((f12471 (lambda (x12376) (kont12470 x12376))))
                 (list f12471))
               (let ((f12475
                      (lambda (a12377)
                        (let ((f12474
                               (lambda (a12378)
                                 (let ((f12473
                                        (lambda (a12379)
                                          (let ((f12472
                                                 (lambda (a12380)
                                                   (cons
                                                    kont12470
                                                    a12378
                                                    a12380))))
                                            (map f12472 proc a12379)))))
                                   (cdr f12473 lst)))))
                          (proc f12474 a12377)))))
                 (car f12475 lst))))))
      (null? f12476 lst)))
  (define (filter kont12477 op lst)
    (let ((f12485
           (lambda (a12381)
             (if a12381
               (let ((f12478 (lambda (x12382) (kont12477 x12382))))
                 (list f12478))
               (let ((f12484
                      (lambda (a12383)
                        (let ((f12483
                               (lambda (a12384)
                                 (if a12384
                                   (let ((f12481
                                          (lambda (a12385)
                                            (let ((f12480
                                                   (lambda (a12386)
                                                     (let ((f12479
                                                            (lambda (a12387)
                                                              (cons
                                                               kont12477
                                                               a12385
                                                               a12387))))
                                                       (filter
                                                        f12479
                                                        op
                                                        a12386)))))
                                              (cdr f12480 lst)))))
                                     (car f12481 lst))
                                   (let ((f12482
                                          (lambda (a12388)
                                            (filter kont12477 op a12388))))
                                     (cdr f12482 lst))))))
                          (op f12483 a12383)))))
                 (car f12484 lst))))))
      (null? f12485 lst)))
  (define (drop kont12486 lst n)
    (let ((a12389 '0))
      (let ((f12489
             (lambda (a12390)
               (if a12390
                 (kont12486 lst)
                 (let ((f12488
                        (lambda (a12391)
                          (let ((a12392 '1))
                            (let ((f12487
                                   (lambda (a12393)
                                     (drop kont12486 a12391 a12393))))
                              (- f12487 n a12392))))))
                   (cdr f12488 lst))))))
        (= f12489 n a12389))))
  (define (foldr kont12490 proc acc lst)
    (let ((f12494
           (lambda (a12394)
             (if a12394
               (kont12490 acc)
               (let ((f12493
                      (lambda (a12395)
                        (let ((f12492
                               (lambda (a12396)
                                 (let ((f12491
                                        (lambda (a12397)
                                          (proc kont12490 a12395 a12397))))
                                   (foldr f12491 proc acc a12396)))))
                          (cdr f12492 lst)))))
                 (car f12493 lst))))))
      (null? f12494 lst)))
  (define (append kont12495 lst1 lst2)
    (let ((f12499
           (lambda (a12398)
             (if a12398
               (kont12495 lst2)
               (let ((f12498
                      (lambda (a12399)
                        (let ((f12497
                               (lambda (a12400)
                                 (let ((f12496
                                        (lambda (a12401)
                                          (cons kont12495 a12399 a12401))))
                                   (append f12496 a12400 lst2)))))
                          (cdr f12497 lst1)))))
                 (car f12498 lst1))))))
      (null? f12499 lst1)))
  (define (hash . lst)
    (let ((kont12500 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x12402 (apply-prim hash lst))) (kont12500 x12402)))))
  (define (hash-ref kont12502 h k)
    (let ((x12403 (prim hash-ref h k))) (kont12502 x12403)))
  (define (hash-set kont12503 h k v)
    (let ((x12404 (prim hash-set h k v))) (kont12503 x12404)))
  (define (hash-has-key? kont12504 h k)
    (let ((x12405 (prim hash-has-key? h k))) (kont12504 x12405)))
  (define (hash-count kont12505 h)
    (let ((x12406 (prim hash-count h))) (kont12505 x12406)))
  (define (call kont12506) (let ((a12407 '5)) (even? kont12506 a12407)))
  (define (brouhaha_main kont12507)
    (let ((f12508 (lambda (x12408) (kont12507 x12408)))) (call f12508))))
