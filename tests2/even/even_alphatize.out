'((define (+ . lst) (let ((x12000 (apply-prim + lst))) x12000))
  (define (- . lst) (let ((x12001 (apply-prim - lst))) x12001))
  (define (* . lst) (let ((x12002 (apply-prim * lst))) x12002))
  (define (modulo a b) (let ((x12003 (prim modulo a b))) x12003))
  (define (/ . lst) (let ((x12004 (apply-prim / lst))) x12004))
  (define (= . lst) (let ((x12005 (apply-prim = lst))) x12005))
  (define (> . lst) (let ((x12006 (apply-prim > lst))) x12006))
  (define (< . lst) (let ((x12007 (apply-prim < lst))) x12007))
  (define (<= . lst) (let ((x12008 (apply-prim <= lst))) x12008))
  (define (>= . lst) (let ((x12009 (apply-prim >= lst))) x12009))
  (define (null? x) (let ((x12010 (prim null? x))) x12010))
  (define (equal? x y) (let ((x12011 (prim equal? x y))) x12011))
  (define (eq? x y) (let ((x12012 (prim eq? x y))) x12012))
  (define (cons a b) (let ((x12013 (prim cons a b))) x12013))
  (define (car lst) (let ((x12014 (prim car lst))) x12014))
  (define (cdr lst) (let ((x12015 (prim cdr lst))) x12015))
  (define (even? x)
    (let ((a12016 '0))
      (let ((a12017 '2))
        (let ((a12018 (modulo x a12017))) (equal? a12016 a12018)))))
  (define (odd? x)
    (let ((a12019 '1))
      (let ((a12020 '2))
        (let ((a12021 (modulo x a12020))) (equal? a12019 a12021)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a12022 (null? lst)))
      (if a12022
        (let ((x12023 '#f)) x12023)
        (let ((a12024 (car lst)))
          (let ((a12025 (equal? a12024 x)))
            (if a12025
              (let ((x12026 '#t)) x12026)
              (let ((a12027 (cdr lst))) (member? x a12027))))))))
  (define (foldl fun acc lst)
    (let ((a12028 (null? lst)))
      (if a12028
        acc
        (let ((a12029 (car lst)))
          (let ((a12030 (fun a12029 acc)))
            (let ((a12031 (cdr lst))) (foldl fun a12030 a12031)))))))
  (define (reverse-helper lst lst2)
    (let ((a12032 (null? lst)))
      (if a12032
        lst2
        (let ((a12033 (cdr lst)))
          (let ((a12034 (car lst)))
            (let ((a12035 (cons a12034 lst2)))
              (reverse-helper a12033 a12035)))))))
  (define (reverse lst) (let ((a12036 (list))) (reverse-helper lst a12036)))
  (define (take-helper lst n lst2)
    (let ((a12037 '0))
      (let ((a12038 (= n a12037)))
        (if a12038
          (let ((x12039 (reverse lst2))) x12039)
          (let ((a12040 (cdr lst)))
            (let ((a12041 '1))
              (let ((a12042 (- n a12041)))
                (let ((a12043 (car lst)))
                  (let ((a12044 (cons a12043 lst2)))
                    (take-helper a12040 a12042 a12044))))))))))
  (define (take lst n) (let ((a12045 (list))) (take-helper lst n a12045)))
  (define (length lst)
    (let ((a12046 (null? lst)))
      (if a12046
        (let ((x12047 '0)) x12047)
        (let ((a12048 '1))
          (let ((a12049 (cdr lst)))
            (let ((a12050 (length a12049))) (+ a12048 a12050)))))))
  (define (map proc lst)
    (let ((a12051 (null? lst)))
      (if a12051
        (let ((x12052 (list))) x12052)
        (let ((a12053 (car lst)))
          (let ((a12054 (proc a12053)))
            (let ((a12055 (cdr lst)))
              (let ((a12056 (map proc a12055))) (cons a12054 a12056))))))))
  (define (filter op lst)
    (let ((a12057 (null? lst)))
      (if a12057
        (let ((x12058 (list))) x12058)
        (let ((a12059 (car lst)))
          (let ((a12060 (op a12059)))
            (if a12060
              (let ((a12061 (car lst)))
                (let ((a12062 (cdr lst)))
                  (let ((a12063 (filter op a12062))) (cons a12061 a12063))))
              (let ((a12064 (cdr lst))) (filter op a12064))))))))
  (define (drop lst n)
    (let ((a12065 '0))
      (let ((a12066 (= n a12065)))
        (if a12066
          lst
          (let ((a12067 (cdr lst)))
            (let ((a12068 '1))
              (let ((a12069 (- n a12068))) (drop a12067 a12069))))))))
  (define (foldr proc acc lst)
    (let ((a12070 (null? lst)))
      (if a12070
        acc
        (let ((a12071 (car lst)))
          (let ((a12072 (cdr lst)))
            (let ((a12073 (foldr proc acc a12072))) (proc a12071 a12073)))))))
  (define (append lst1 lst2)
    (let ((a12074 (null? lst1)))
      (if a12074
        lst2
        (let ((a12075 (car lst1)))
          (let ((a12076 (cdr lst1)))
            (let ((a12077 (append a12076 lst2))) (cons a12075 a12077)))))))
  (define (hash . lst) (let ((x12078 (apply-prim hash lst))) x12078))
  (define (hash-ref h k) (let ((x12079 (prim hash-ref h k))) x12079))
  (define (hash-set h k v) (let ((x12080 (prim hash-set h k v))) x12080))
  (define (hash-has-key? h k) (let ((x12081 (prim hash-has-key? h k))) x12081))
  (define (hash-count h) (let ((x12082 (prim hash-count h))) x12082))
  (define (call) (let ((a12083 '5)) (even? a12083)))
  (define (brouhaha_main) (let ((x12084 (call))) x12084)))
