'((define (+ . lst) (let ((x12324 (apply-prim + lst))) x12324))
  (define (- . lst) (let ((x12325 (apply-prim - lst))) x12325))
  (define (* . lst) (let ((x12326 (apply-prim * lst))) x12326))
  (define (modulo a b) (let ((x12327 (prim modulo a b))) x12327))
  (define (/ . lst) (let ((x12328 (apply-prim / lst))) x12328))
  (define (= . lst) (let ((x12329 (apply-prim = lst))) x12329))
  (define (> . lst) (let ((x12330 (apply-prim > lst))) x12330))
  (define (< . lst) (let ((x12331 (apply-prim < lst))) x12331))
  (define (<= . lst) (let ((x12332 (apply-prim <= lst))) x12332))
  (define (>= . lst) (let ((x12333 (apply-prim >= lst))) x12333))
  (define (null? x) (let ((x12334 (prim null? x))) x12334))
  (define (equal? x y) (let ((x12335 (prim equal? x y))) x12335))
  (define (eq? x y) (let ((x12336 (prim eq? x y))) x12336))
  (define (cons a b) (let ((x12337 (prim cons a b))) x12337))
  (define (car lst) (let ((x12338 (prim car lst))) x12338))
  (define (cdr lst) (let ((x12339 (prim cdr lst))) x12339))
  (define (even? x)
    (let ((a12340 '0))
      (let ((a12341 '2))
        (let ((a12342 (modulo x a12341))) (equal? a12340 a12342)))))
  (define (odd? x)
    (let ((a12343 '1))
      (let ((a12344 '2))
        (let ((a12345 (modulo x a12344))) (equal? a12343 a12345)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a12346 (null? lst)))
      (if a12346
        (let ((x12347 '#f)) x12347)
        (let ((a12348 (car lst)))
          (let ((a12349 (equal? a12348 x)))
            (if a12349
              (let ((x12350 '#t)) x12350)
              (let ((a12351 (cdr lst))) (member? x a12351))))))))
  (define (foldl fun acc lst)
    (let ((a12352 (null? lst)))
      (if a12352
        acc
        (let ((a12353 (car lst)))
          (let ((a12354 (fun a12353 acc)))
            (let ((a12355 (cdr lst))) (foldl fun a12354 a12355)))))))
  (define (reverse-helper lst lst2)
    (let ((a12356 (null? lst)))
      (if a12356
        lst2
        (let ((a12357 (cdr lst)))
          (let ((a12358 (car lst)))
            (let ((a12359 (cons a12358 lst2)))
              (reverse-helper a12357 a12359)))))))
  (define (reverse lst) (let ((a12360 (list))) (reverse-helper lst a12360)))
  (define (take-helper lst n lst2)
    (let ((a12361 '0))
      (let ((a12362 (= n a12361)))
        (if a12362
          (let ((x12363 (reverse lst2))) x12363)
          (let ((a12364 (cdr lst)))
            (let ((a12365 '1))
              (let ((a12366 (- n a12365)))
                (let ((a12367 (car lst)))
                  (let ((a12368 (cons a12367 lst2)))
                    (take-helper a12364 a12366 a12368))))))))))
  (define (take lst n) (let ((a12369 (list))) (take-helper lst n a12369)))
  (define (length lst)
    (let ((a12370 (null? lst)))
      (if a12370
        (let ((x12371 '0)) x12371)
        (let ((a12372 '1))
          (let ((a12373 (cdr lst)))
            (let ((a12374 (length a12373))) (+ a12372 a12374)))))))
  (define (map proc lst)
    (let ((a12375 (null? lst)))
      (if a12375
        (let ((x12376 (list))) x12376)
        (let ((a12377 (car lst)))
          (let ((a12378 (proc a12377)))
            (let ((a12379 (cdr lst)))
              (let ((a12380 (map proc a12379))) (cons a12378 a12380))))))))
  (define (filter op lst)
    (let ((a12381 (null? lst)))
      (if a12381
        (let ((x12382 (list))) x12382)
        (let ((a12383 (car lst)))
          (let ((a12384 (op a12383)))
            (if a12384
              (let ((a12385 (car lst)))
                (let ((a12386 (cdr lst)))
                  (let ((a12387 (filter op a12386))) (cons a12385 a12387))))
              (let ((a12388 (cdr lst))) (filter op a12388))))))))
  (define (drop lst n)
    (let ((a12389 '0))
      (let ((a12390 (= n a12389)))
        (if a12390
          lst
          (let ((a12391 (cdr lst)))
            (let ((a12392 '1))
              (let ((a12393 (- n a12392))) (drop a12391 a12393))))))))
  (define (foldr proc acc lst)
    (let ((a12394 (null? lst)))
      (if a12394
        acc
        (let ((a12395 (car lst)))
          (let ((a12396 (cdr lst)))
            (let ((a12397 (foldr proc acc a12396))) (proc a12395 a12397)))))))
  (define (append lst1 lst2)
    (let ((a12398 (null? lst1)))
      (if a12398
        lst2
        (let ((a12399 (car lst1)))
          (let ((a12400 (cdr lst1)))
            (let ((a12401 (append a12400 lst2))) (cons a12399 a12401)))))))
  (define (hash . lst) (let ((x12402 (apply-prim hash lst))) x12402))
  (define (hash-ref h k) (let ((x12403 (prim hash-ref h k))) x12403))
  (define (hash-set h k v) (let ((x12404 (prim hash-set h k v))) x12404))
  (define (hash-has-key? h k) (let ((x12405 (prim hash-has-key? h k))) x12405))
  (define (hash-count h) (let ((x12406 (prim hash-count h))) x12406))
  (define (call) (let ((a12407 '5)) (even? a12407)))
  (define (brouhaha_main) (let ((x12408 (call))) x12408)))
