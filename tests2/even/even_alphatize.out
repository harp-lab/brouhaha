'((define (+ . lst) (let ((x12328 (apply-prim + lst))) x12328))
  (define (- . lst) (let ((x12329 (apply-prim - lst))) x12329))
  (define (* . lst) (let ((x12330 (apply-prim * lst))) x12330))
  (define (modulo a b) (let ((x12331 (prim modulo a b))) x12331))
  (define (/ . lst) (let ((x12332 (apply-prim / lst))) x12332))
  (define (= . lst) (let ((x12333 (apply-prim = lst))) x12333))
  (define (> . lst) (let ((x12334 (apply-prim > lst))) x12334))
  (define (< . lst) (let ((x12335 (apply-prim < lst))) x12335))
  (define (<= . lst) (let ((x12336 (apply-prim <= lst))) x12336))
  (define (>= . lst) (let ((x12337 (apply-prim >= lst))) x12337))
  (define (null? x) (let ((x12338 (prim null? x))) x12338))
  (define (equal? x y) (let ((x12339 (prim equal? x y))) x12339))
  (define (eq? x y) (let ((x12340 (prim eq? x y))) x12340))
  (define (cons a b) (let ((x12341 (prim cons a b))) x12341))
  (define (car lst) (let ((x12342 (prim car lst))) x12342))
  (define (cdr lst) (let ((x12343 (prim cdr lst))) x12343))
  (define (even? x)
    (let ((a12344 '0))
      (let ((a12345 '2))
        (let ((a12346 (modulo x a12345))) (equal? a12344 a12346)))))
  (define (odd? x)
    (let ((a12347 '1))
      (let ((a12348 '2))
        (let ((a12349 (modulo x a12348))) (equal? a12347 a12349)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a12350 (null? lst)))
      (if a12350
        (let ((x12351 '#f)) x12351)
        (let ((a12352 (car lst)))
          (let ((a12353 (equal? a12352 x)))
            (if a12353
              (let ((x12354 '#t)) x12354)
              (let ((a12355 (cdr lst))) (member? x a12355))))))))
  (define (foldl fun acc lst)
    (let ((a12356 (null? lst)))
      (if a12356
        acc
        (let ((a12357 (car lst)))
          (let ((a12358 (fun a12357 acc)))
            (let ((a12359 (cdr lst))) (foldl fun a12358 a12359)))))))
  (define (reverse-helper lst lst2)
    (let ((a12360 (null? lst)))
      (if a12360
        lst2
        (let ((a12361 (cdr lst)))
          (let ((a12362 (car lst)))
            (let ((a12363 (cons a12362 lst2)))
              (reverse-helper a12361 a12363)))))))
  (define (reverse lst) (let ((a12364 (list))) (reverse-helper lst a12364)))
  (define (take-helper lst n lst2)
    (let ((a12365 '0))
      (let ((a12366 (= n a12365)))
        (if a12366
          (let ((x12367 (reverse lst2))) x12367)
          (let ((a12368 (cdr lst)))
            (let ((a12369 '1))
              (let ((a12370 (- n a12369)))
                (let ((a12371 (car lst)))
                  (let ((a12372 (cons a12371 lst2)))
                    (take-helper a12368 a12370 a12372))))))))))
  (define (take lst n) (let ((a12373 (list))) (take-helper lst n a12373)))
  (define (length lst)
    (let ((a12374 (null? lst)))
      (if a12374
        (let ((x12375 '0)) x12375)
        (let ((a12376 '1))
          (let ((a12377 (cdr lst)))
            (let ((a12378 (length a12377))) (+ a12376 a12378)))))))
  (define (map proc lst)
    (let ((a12379 (null? lst)))
      (if a12379
        (let ((x12380 (list))) x12380)
        (let ((a12381 (car lst)))
          (let ((a12382 (proc a12381)))
            (let ((a12383 (cdr lst)))
              (let ((a12384 (map proc a12383))) (cons a12382 a12384))))))))
  (define (filter op lst)
    (let ((a12385 (null? lst)))
      (if a12385
        (let ((x12386 (list))) x12386)
        (let ((a12387 (car lst)))
          (let ((a12388 (op a12387)))
            (if a12388
              (let ((a12389 (car lst)))
                (let ((a12390 (cdr lst)))
                  (let ((a12391 (filter op a12390))) (cons a12389 a12391))))
              (let ((a12392 (cdr lst))) (filter op a12392))))))))
  (define (drop lst n)
    (let ((a12393 '0))
      (let ((a12394 (= n a12393)))
        (if a12394
          lst
          (let ((a12395 (cdr lst)))
            (let ((a12396 '1))
              (let ((a12397 (- n a12396))) (drop a12395 a12397))))))))
  (define (foldr proc acc lst)
    (let ((a12398 (null? lst)))
      (if a12398
        acc
        (let ((a12399 (car lst)))
          (let ((a12400 (cdr lst)))
            (let ((a12401 (foldr proc acc a12400))) (proc a12399 a12401)))))))
  (define (append lst1 lst2)
    (let ((a12402 (null? lst1)))
      (if a12402
        lst2
        (let ((a12403 (car lst1)))
          (let ((a12404 (cdr lst1)))
            (let ((a12405 (append a12404 lst2))) (cons a12403 a12405)))))))
  (define (hash . lst) (let ((x12406 (apply-prim hash lst))) x12406))
  (define (hash-ref h k) (let ((x12407 (prim hash-ref h k))) x12407))
  (define (hash-set h k v) (let ((x12408 (prim hash-set h k v))) x12408))
  (define (hash-has-key? h k) (let ((x12409 (prim hash-has-key? h k))) x12409))
  (define (hash-count h) (let ((x12410 (prim hash-count h))) x12410))
  (define (call) (let ((a12411 '5)) (even? a12411)))
  (define (brouhaha_main) (let ((x12412 (call))) x12412)))
