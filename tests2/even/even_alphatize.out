'((define (+ . lst) (let ((x11843 (apply-prim + lst))) x11843))
  (define (- . lst) (let ((x11844 (apply-prim - lst))) x11844))
  (define (* . lst) (let ((x11845 (apply-prim * lst))) x11845))
  (define (modulo a b) (let ((x11846 (prim modulo a b))) x11846))
  (define (/ . lst) (let ((x11847 (apply-prim / lst))) x11847))
  (define (= . lst) (let ((x11848 (apply-prim = lst))) x11848))
  (define (> . lst) (let ((x11849 (apply-prim > lst))) x11849))
  (define (< . lst) (let ((x11850 (apply-prim < lst))) x11850))
  (define (<= . lst) (let ((x11851 (apply-prim <= lst))) x11851))
  (define (>= . lst) (let ((x11852 (apply-prim >= lst))) x11852))
  (define (null? x) (let ((x11853 (prim null? x))) x11853))
  (define (equal? x y) (let ((x11854 (prim equal? x y))) x11854))
  (define (eq? x y) (let ((x11855 (prim eq? x y))) x11855))
  (define (cons a b) (let ((x11856 (prim cons a b))) x11856))
  (define (car lst) (let ((x11857 (prim car lst))) x11857))
  (define (cdr lst) (let ((x11858 (prim cdr lst))) x11858))
  (define (even? x)
    (let ((a11859 '0))
      (let ((a11860 '2))
        (let ((a11861 (modulo x a11860))) (equal? a11859 a11861)))))
  (define (odd? x)
    (let ((a11862 '1))
      (let ((a11863 '2))
        (let ((a11864 (modulo x a11863))) (equal? a11862 a11864)))))
  (define (list . x) x)
  (define (and . lst) (let ((x11865 (apply-prim and lst))) x11865))
  (define (or . lst) (let ((x11866 (apply-prim or lst))) x11866))
  (define (member? x lst)
    (let ((a11867 (null? lst)))
      (if a11867
        (let ((x11868 '#f)) x11868)
        (let ((a11869 (car lst)))
          (let ((a11870 (equal? a11869 x)))
            (if a11870
              (let ((x11871 '#t)) x11871)
              (let ((a11872 (cdr lst))) (member? x a11872))))))))
  (define (foldl fun acc lst)
    (let ((a11873 (null? lst)))
      (if a11873
        acc
        (let ((a11874 (car lst)))
          (let ((a11875 (fun a11874 acc)))
            (let ((a11876 (cdr lst))) (foldl fun a11875 a11876)))))))
  (define (reverse-helper lst lst2)
    (let ((a11877 (null? lst)))
      (if a11877
        lst2
        (let ((a11878 (cdr lst)))
          (let ((a11879 (car lst)))
            (let ((a11880 (cons a11879 lst2)))
              (reverse-helper a11878 a11880)))))))
  (define (reverse lst) (let ((a11881 (list))) (reverse-helper lst a11881)))
  (define (take-helper lst n lst2)
    (let ((a11882 '0))
      (let ((a11883 (= n a11882)))
        (if a11883
          (let ((x11884 (reverse lst2))) x11884)
          (let ((a11885 (cdr lst)))
            (let ((a11886 '1))
              (let ((a11887 (- n a11886)))
                (let ((a11888 (car lst)))
                  (let ((a11889 (cons a11888 lst2)))
                    (take-helper a11885 a11887 a11889))))))))))
  (define (take lst n) (let ((a11890 (list))) (take-helper lst n a11890)))
  (define (length lst)
    (let ((a11891 (null? lst)))
      (if a11891
        (let ((x11892 '0)) x11892)
        (let ((a11893 '1))
          (let ((a11894 (cdr lst)))
            (let ((a11895 (length a11894))) (+ a11893 a11895)))))))
  (define (map proc lst)
    (let ((a11896 (null? lst)))
      (if a11896
        (let ((x11897 (list))) x11897)
        (let ((a11898 (car lst)))
          (let ((a11899 (proc a11898)))
            (let ((a11900 (cdr lst)))
              (let ((a11901 (map proc a11900))) (cons a11899 a11901))))))))
  (define (filter op lst)
    (let ((a11902 (null? lst)))
      (if a11902
        (let ((x11903 (list))) x11903)
        (let ((a11904 (car lst)))
          (let ((a11905 (op a11904)))
            (if a11905
              (let ((a11906 (car lst)))
                (let ((a11907 (cdr lst)))
                  (let ((a11908 (filter op a11907))) (cons a11906 a11908))))
              (let ((a11909 (cdr lst))) (filter op a11909))))))))
  (define (drop lst n)
    (let ((a11910 '0))
      (let ((a11911 (= n a11910)))
        (if a11911
          lst
          (let ((a11912 (cdr lst)))
            (let ((a11913 '1))
              (let ((a11914 (- n a11913))) (drop a11912 a11914))))))))
  (define (foldr proc acc lst)
    (let ((a11915 (null? lst)))
      (if a11915
        acc
        (let ((a11916 (car lst)))
          (let ((a11917 (cdr lst)))
            (let ((a11918 (foldr proc acc a11917))) (proc a11916 a11918)))))))
  (define (append lst1 lst2)
    (let ((a11919 (null? lst1)))
      (if a11919
        lst2
        (let ((a11920 (car lst1)))
          (let ((a11921 (cdr lst1)))
            (let ((a11922 (append a11921 lst2))) (cons a11920 a11922)))))))
  (define (hash . lst) (let ((x11923 (apply-prim hash lst))) x11923))
  (define (hash-ref h k) (let ((x11924 (prim hash-ref h k))) x11924))
  (define (hash-set h k v) (let ((x11925 (prim hash-set h k v))) x11925))
  (define (hash-has-key? h k) (let ((x11926 (prim hash-has-key? h k))) x11926))
  (define (hash-count h) (let ((x11927 (prim hash-count h))) x11927))
  (define (call) (let ((a11928 '5)) (even? a11928)))
  (define (brouhaha_main) (let ((x11929 (call))) x11929)))
