'((define (+ . lst)
    (let ((kont1240912509 (prim car lst)))
      (let ((lst12510 (prim cdr lst)))
        (let ((x1232412511 (apply-prim + lst12510)))
          (kont1240912509 x1232412511)))))
  (define (- . lst)
    (let ((kont1241112512 (prim car lst)))
      (let ((lst12513 (prim cdr lst)))
        (let ((x1232512514 (apply-prim - lst12513)))
          (kont1241112512 x1232512514)))))
  (define (* . lst)
    (let ((kont1241312515 (prim car lst)))
      (let ((lst12516 (prim cdr lst)))
        (let ((x1232612517 (apply-prim * lst12516)))
          (kont1241312515 x1232612517)))))
  (define (modulo kont12415 a b)
    (let ((x1232712518 (prim modulo a b))) (kont12415 x1232712518)))
  (define (/ . lst)
    (let ((kont1241612519 (prim car lst)))
      (let ((lst12520 (prim cdr lst)))
        (let ((x1232812521 (apply-prim / lst12520)))
          (kont1241612519 x1232812521)))))
  (define (= . lst)
    (let ((kont1241812522 (prim car lst)))
      (let ((lst12523 (prim cdr lst)))
        (let ((x1232912524 (apply-prim = lst12523)))
          (kont1241812522 x1232912524)))))
  (define (> . lst)
    (let ((kont1242012525 (prim car lst)))
      (let ((lst12526 (prim cdr lst)))
        (let ((x1233012527 (apply-prim > lst12526)))
          (kont1242012525 x1233012527)))))
  (define (< . lst)
    (let ((kont1242212528 (prim car lst)))
      (let ((lst12529 (prim cdr lst)))
        (let ((x1233112530 (apply-prim < lst12529)))
          (kont1242212528 x1233112530)))))
  (define (<= . lst)
    (let ((kont1242412531 (prim car lst)))
      (let ((lst12532 (prim cdr lst)))
        (let ((x1233212533 (apply-prim <= lst12532)))
          (kont1242412531 x1233212533)))))
  (define (>= . lst)
    (let ((kont1242612534 (prim car lst)))
      (let ((lst12535 (prim cdr lst)))
        (let ((x1233312536 (apply-prim >= lst12535)))
          (kont1242612534 x1233312536)))))
  (define (null? kont12428 x)
    (let ((x1233412537 (prim null? x))) (kont12428 x1233412537)))
  (define (equal? kont12429 x y)
    (let ((x1233512538 (prim equal? x y))) (kont12429 x1233512538)))
  (define (eq? kont12430 x y)
    (let ((x1233612539 (prim eq? x y))) (kont12430 x1233612539)))
  (define (cons kont12431 a b)
    (let ((x1233712540 (prim cons a b))) (kont12431 x1233712540)))
  (define (car kont12432 lst)
    (let ((x1233812541 (prim car lst))) (kont12432 x1233812541)))
  (define (cdr kont12433 lst)
    (let ((x1233912542 (prim cdr lst))) (kont12433 x1233912542)))
  (define (even? kont12434 x)
    (let ((a1234012543 '0))
      (let ((a1234112544 '2))
        (let ((f1243512545
               (lambda (a1234212546)
                 (equal? kont12434 a1234012543 a1234212546))))
          (modulo f1243512545 x a1234112544)))))
  (define (odd? kont12436 x)
    (let ((a1234312547 '1))
      (let ((a1234412548 '2))
        (let ((f1243712549
               (lambda (a1234512550)
                 (equal? kont12436 a1234312547 a1234512550))))
          (modulo f1243712549 x a1234412548)))))
  (define (list . x)
    (let ((kont1243812551 (prim car x)))
      (let ((x12552 (prim cdr x))) (kont1243812551 x12552))))
  (define (member? kont12440 x lst)
    (let ((f1244412553
           (lambda (a1234612554)
             (if a1234612554
               (let ((x1234712555 '#f)) (kont12440 x1234712555))
               (let ((f1244312556
                      (lambda (a1234812557)
                        (let ((f1244212558
                               (lambda (a1234912559)
                                 (if a1234912559
                                   (let ((x1235012560 '#t))
                                     (kont12440 x1235012560))
                                   (let ((f1244112561
                                          (lambda (a1235112562)
                                            (member?
                                             kont12440
                                             x
                                             a1235112562))))
                                     (cdr f1244112561 lst))))))
                          (equal? f1244212558 a1234812557 x)))))
                 (car f1244312556 lst))))))
      (null? f1244412553 lst)))
  (define (foldl kont12445 fun acc lst)
    (let ((f1244912563
           (lambda (a1235212564)
             (if a1235212564
               (kont12445 acc)
               (let ((f1244812565
                      (lambda (a1235312566)
                        (let ((f1244712567
                               (lambda (a1235412568)
                                 (let ((f1244612569
                                        (lambda (a1235512570)
                                          (foldl
                                           kont12445
                                           fun
                                           a1235412568
                                           a1235512570))))
                                   (cdr f1244612569 lst)))))
                          (fun f1244712567 a1235312566 acc)))))
                 (car f1244812565 lst))))))
      (null? f1244912563 lst)))
  (define (reverse-helper kont12450 lst lst2)
    (let ((f1245412571
           (lambda (a1235612572)
             (if a1235612572
               (kont12450 lst2)
               (let ((f1245312573
                      (lambda (a1235712574)
                        (let ((f1245212575
                               (lambda (a1235812576)
                                 (let ((f1245112577
                                        (lambda (a1235912578)
                                          (reverse-helper
                                           kont12450
                                           a1235712574
                                           a1235912578))))
                                   (cons f1245112577 a1235812576 lst2)))))
                          (car f1245212575 lst)))))
                 (cdr f1245312573 lst))))))
      (null? f1245412571 lst)))
  (define (reverse kont12455 lst)
    (let ((f1245612579
           (lambda (a1236012580) (reverse-helper kont12455 lst a1236012580))))
      (list f1245612579)))
  (define (take-helper kont12457 lst n lst2)
    (let ((a1236112581 '0))
      (let ((f1246312582
             (lambda (a1236212583)
               (if a1236212583
                 (let ((f1245812584
                        (lambda (x1236312585) (kont12457 x1236312585))))
                   (reverse f1245812584 lst2))
                 (let ((f1246212586
                        (lambda (a1236412587)
                          (let ((a1236512588 '1))
                            (let ((f1246112589
                                   (lambda (a1236612590)
                                     (let ((f1246012591
                                            (lambda (a1236712592)
                                              (let ((f1245912593
                                                     (lambda (a1236812594)
                                                       (take-helper
                                                        kont12457
                                                        a1236412587
                                                        a1236612590
                                                        a1236812594))))
                                                (cons
                                                 f1245912593
                                                 a1236712592
                                                 lst2)))))
                                       (car f1246012591 lst)))))
                              (- f1246112589 n a1236512588))))))
                   (cdr f1246212586 lst))))))
        (= f1246312582 n a1236112581))))
  (define (take kont12464 lst n)
    (let ((f1246512595
           (lambda (a1236912596) (take-helper kont12464 lst n a1236912596))))
      (list f1246512595)))
  (define (length kont12466 lst)
    (let ((f1246912597
           (lambda (a1237012598)
             (if a1237012598
               (let ((x1237112599 '0)) (kont12466 x1237112599))
               (let ((a1237212600 '1))
                 (let ((f1246812601
                        (lambda (a1237312602)
                          (let ((f1246712603
                                 (lambda (a1237412604)
                                   (+ kont12466 a1237212600 a1237412604))))
                            (length f1246712603 a1237312602)))))
                   (cdr f1246812601 lst)))))))
      (null? f1246912597 lst)))
  (define (map kont12470 proc lst)
    (let ((f1247612605
           (lambda (a1237512606)
             (if a1237512606
               (let ((f1247112607
                      (lambda (x1237612608) (kont12470 x1237612608))))
                 (list f1247112607))
               (let ((f1247512609
                      (lambda (a1237712610)
                        (let ((f1247412611
                               (lambda (a1237812612)
                                 (let ((f1247312613
                                        (lambda (a1237912614)
                                          (let ((f1247212615
                                                 (lambda (a1238012616)
                                                   (cons
                                                    kont12470
                                                    a1237812612
                                                    a1238012616))))
                                            (map
                                             f1247212615
                                             proc
                                             a1237912614)))))
                                   (cdr f1247312613 lst)))))
                          (proc f1247412611 a1237712610)))))
                 (car f1247512609 lst))))))
      (null? f1247612605 lst)))
  (define (filter kont12477 op lst)
    (let ((f1248512617
           (lambda (a1238112618)
             (if a1238112618
               (let ((f1247812619
                      (lambda (x1238212620) (kont12477 x1238212620))))
                 (list f1247812619))
               (let ((f1248412621
                      (lambda (a1238312622)
                        (let ((f1248312623
                               (lambda (a1238412624)
                                 (if a1238412624
                                   (let ((f1248112625
                                          (lambda (a1238512626)
                                            (let ((f1248012627
                                                   (lambda (a1238612628)
                                                     (let ((f1247912629
                                                            (lambda (a1238712630)
                                                              (cons
                                                               kont12477
                                                               a1238512626
                                                               a1238712630))))
                                                       (filter
                                                        f1247912629
                                                        op
                                                        a1238612628)))))
                                              (cdr f1248012627 lst)))))
                                     (car f1248112625 lst))
                                   (let ((f1248212631
                                          (lambda (a1238812632)
                                            (filter
                                             kont12477
                                             op
                                             a1238812632))))
                                     (cdr f1248212631 lst))))))
                          (op f1248312623 a1238312622)))))
                 (car f1248412621 lst))))))
      (null? f1248512617 lst)))
  (define (drop kont12486 lst n)
    (let ((a1238912633 '0))
      (let ((f1248912634
             (lambda (a1239012635)
               (if a1239012635
                 (kont12486 lst)
                 (let ((f1248812636
                        (lambda (a1239112637)
                          (let ((a1239212638 '1))
                            (let ((f1248712639
                                   (lambda (a1239312640)
                                     (drop
                                      kont12486
                                      a1239112637
                                      a1239312640))))
                              (- f1248712639 n a1239212638))))))
                   (cdr f1248812636 lst))))))
        (= f1248912634 n a1238912633))))
  (define (foldr kont12490 proc acc lst)
    (let ((f1249412641
           (lambda (a1239412642)
             (if a1239412642
               (kont12490 acc)
               (let ((f1249312643
                      (lambda (a1239512644)
                        (let ((f1249212645
                               (lambda (a1239612646)
                                 (let ((f1249112647
                                        (lambda (a1239712648)
                                          (proc
                                           kont12490
                                           a1239512644
                                           a1239712648))))
                                   (foldr f1249112647 proc acc a1239612646)))))
                          (cdr f1249212645 lst)))))
                 (car f1249312643 lst))))))
      (null? f1249412641 lst)))
  (define (append kont12495 lst1 lst2)
    (let ((f1249912649
           (lambda (a1239812650)
             (if a1239812650
               (kont12495 lst2)
               (let ((f1249812651
                      (lambda (a1239912652)
                        (let ((f1249712653
                               (lambda (a1240012654)
                                 (let ((f1249612655
                                        (lambda (a1240112656)
                                          (cons
                                           kont12495
                                           a1239912652
                                           a1240112656))))
                                   (append f1249612655 a1240012654 lst2)))))
                          (cdr f1249712653 lst1)))))
                 (car f1249812651 lst1))))))
      (null? f1249912649 lst1)))
  (define (hash . lst)
    (let ((kont1250012657 (prim car lst)))
      (let ((lst12658 (prim cdr lst)))
        (let ((x1240212659 (apply-prim hash lst12658)))
          (kont1250012657 x1240212659)))))
  (define (hash-ref kont12502 h k)
    (let ((x1240312660 (prim hash-ref h k))) (kont12502 x1240312660)))
  (define (hash-set kont12503 h k v)
    (let ((x1240412661 (prim hash-set h k v))) (kont12503 x1240412661)))
  (define (hash-has-key? kont12504 h k)
    (let ((x1240512662 (prim hash-has-key? h k))) (kont12504 x1240512662)))
  (define (hash-count kont12505 h)
    (let ((x1240612663 (prim hash-count h))) (kont12505 x1240612663)))
  (define (call kont12506)
    (let ((a1240712664 '5)) (even? kont12506 a1240712664)))
  (define (brouhaha_main kont12507)
    (let ((f1250812665 (lambda (x1240812666) (kont12507 x1240812666))))
      (call f1250812665))))
