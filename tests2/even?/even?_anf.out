'((define (+ . lst)
    (let ((kont7334 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7311 (apply-prim + lst))) (kont7334 x7311)))))
  (define (- . lst)
    (let ((kont7336 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7312 (apply-prim - lst))) (kont7336 x7312)))))
  (define (* . lst)
    (let ((kont7338 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7313 (apply-prim * lst))) (kont7338 x7313)))))
  (define (modulo kont7340 a b)
    (let ((x7314 (prim modulo a b))) (kont7340 x7314)))
  (define (= . lst)
    (let ((kont7341 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7315 (apply-prim = lst))) (kont7341 x7315)))))
  (define (> . lst)
    (let ((kont7343 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7316 (apply-prim > lst))) (kont7343 x7316)))))
  (define (< . lst)
    (let ((kont7345 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7317 (apply-prim < lst))) (kont7345 x7317)))))
  (define (<= . lst)
    (let ((kont7347 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7318 (apply-prim <= lst))) (kont7347 x7318)))))
  (define (>= . lst)
    (let ((kont7349 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x7319 (apply-prim >= lst))) (kont7349 x7319)))))
  (define (null? kont7351 x) (let ((x7320 (prim null? x))) (kont7351 x7320)))
  (define (equal? kont7352 x y)
    (let ((x7321 (prim equal? x y))) (kont7352 x7321)))
  (define (eq? kont7353 x y) (let ((x7322 (prim eq? x y))) (kont7353 x7322)))
  (define (cons kont7354 a b) (let ((x7323 (prim cons a b))) (kont7354 x7323)))
  (define (car kont7355 lst) (let ((x7324 (prim car lst))) (kont7355 x7324)))
  (define (cdr kont7356 lst) (let ((x7325 (prim cdr lst))) (kont7356 x7325)))
  (define (even? kont7357 x)
    (let ((a7326 '0))
      (let ((a7327 '2))
        (let ((f7358 (lambda (a7328) (equal? kont7357 a7326 a7328))))
          (modulo f7358 x a7327)))))
  (define (odd? kont7359 x)
    (let ((a7329 '1))
      (let ((a7330 '2))
        (let ((f7360 (lambda (a7331) (equal? kont7359 a7329 a7331))))
          (modulo f7360 x a7330)))))
  (define (list . x)
    (let ((kont7361 (prim car x))) (let ((x (prim cdr x))) (kont7361 x))))
  (define (call kont7363) (let ((a7332 '5)) (even? kont7363 a7332)))
  (define (brouhaha_main kont7364)
    (let ((f7365 (lambda (x7333) (kont7364 x7333)))) (call f7365))))
