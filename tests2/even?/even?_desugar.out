'((define (+ . lst) (apply-prim + lst))
  (define (- . lst) (apply-prim - lst))
  (define (* . lst) (apply-prim * lst))
  (define (modulo a b) (prim modulo a b))
  (define (= . lst) (apply-prim = lst))
  (define (> . lst) (apply-prim > lst))
  (define (< . lst) (apply-prim < lst))
  (define (<= . lst) (apply-prim <= lst))
  (define (>= . lst) (apply-prim >= lst))
  (define (null? x) (prim null? x))
  (define (equal? x y) (prim equal? x y))
  (define (eq? x y) (prim eq? x y))
  (define (cons a b) (prim cons a b))
  (define (car lst) (prim car lst))
  (define (cdr lst) (prim cdr lst))
  (define (even? x) (equal? '0 (modulo x '2)))
  (define (odd? x) (equal? '1 (modulo x '2)))
  (define (list . x) x)
  (define (call) (even? '5))
  (define (brouhaha_main) (call)))
