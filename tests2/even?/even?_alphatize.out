'((define (+ . lst) (let ((x7311 (apply-prim + lst))) x7311))
  (define (- . lst) (let ((x7312 (apply-prim - lst))) x7312))
  (define (* . lst) (let ((x7313 (apply-prim * lst))) x7313))
  (define (modulo a b) (let ((x7314 (prim modulo a b))) x7314))
  (define (= . lst) (let ((x7315 (apply-prim = lst))) x7315))
  (define (> . lst) (let ((x7316 (apply-prim > lst))) x7316))
  (define (< . lst) (let ((x7317 (apply-prim < lst))) x7317))
  (define (<= . lst) (let ((x7318 (apply-prim <= lst))) x7318))
  (define (>= . lst) (let ((x7319 (apply-prim >= lst))) x7319))
  (define (null? x) (let ((x7320 (prim null? x))) x7320))
  (define (equal? x y) (let ((x7321 (prim equal? x y))) x7321))
  (define (eq? x y) (let ((x7322 (prim eq? x y))) x7322))
  (define (cons a b) (let ((x7323 (prim cons a b))) x7323))
  (define (car lst) (let ((x7324 (prim car lst))) x7324))
  (define (cdr lst) (let ((x7325 (prim cdr lst))) x7325))
  (define (even? x)
    (let ((a7326 '0))
      (let ((a7327 '2))
        (let ((a7328 (modulo x a7327))) (equal? a7326 a7328)))))
  (define (odd? x)
    (let ((a7329 '1))
      (let ((a7330 '2))
        (let ((a7331 (modulo x a7330))) (equal? a7329 a7331)))))
  (define (list . x) x)
  (define (call) (let ((a7332 '5)) (even? a7332)))
  (define (brouhaha_main) (let ((x7333 (call))) x7333)))
