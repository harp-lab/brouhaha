'((define (+ . lst) (let ((x39426 (apply-prim + lst))) x39426))
  (define (- . lst) (let ((x39427 (apply-prim - lst))) x39427))
  (define (* . lst) (let ((x39428 (apply-prim * lst))) x39428))
  (define (modulo a b) (let ((x39429 (prim modulo a b))) x39429))
  (define (/ . lst) (let ((x39430 (apply-prim / lst))) x39430))
  (define (= . lst) (let ((x39431 (apply-prim = lst))) x39431))
  (define (> . lst) (let ((x39432 (apply-prim > lst))) x39432))
  (define (< . lst) (let ((x39433 (apply-prim < lst))) x39433))
  (define (<= . lst) (let ((x39434 (apply-prim <= lst))) x39434))
  (define (>= . lst) (let ((x39435 (apply-prim >= lst))) x39435))
  (define (null? x) (let ((x39436 (prim null? x))) x39436))
  (define (equal? x y) (let ((x39437 (prim equal? x y))) x39437))
  (define (eq? x y) (let ((x39438 (prim eq? x y))) x39438))
  (define (cons a b) (let ((x39439 (prim cons a b))) x39439))
  (define (car lst) (let ((x39440 (prim car lst))) x39440))
  (define (cdr lst) (let ((x39441 (prim cdr lst))) x39441))
  (define (even? x)
    (let ((a39442 '0))
      (let ((a39443 '2))
        (let ((a39444 (modulo x a39443))) (equal? a39442 a39444)))))
  (define (odd? x)
    (let ((a39445 '1))
      (let ((a39446 '2))
        (let ((a39447 (modulo x a39446))) (equal? a39445 a39447)))))
  (define (list . x) x)
  (define (and . lst) (let ((x39448 (apply-prim and lst))) x39448))
  (define (or . lst) (let ((x39449 (apply-prim or lst))) x39449))
  (define (member? x lst)
    (let ((a39450 (null? lst)))
      (if a39450
        (let ((x39451 '#f)) x39451)
        (let ((a39452 (car lst)))
          (let ((a39453 (equal? a39452 x)))
            (if a39453
              (let ((x39454 '#t)) x39454)
              (let ((a39455 (cdr lst))) (member? x a39455))))))))
  (define (foldl fun acc lst)
    (let ((a39456 (null? lst)))
      (if a39456
        acc
        (let ((a39457 (car lst)))
          (let ((a39458 (fun a39457 acc)))
            (let ((a39459 (cdr lst))) (foldl fun a39458 a39459)))))))
  (define (reverse-helper lst lst2)
    (let ((a39460 (null? lst)))
      (if a39460
        lst2
        (let ((a39461 (cdr lst)))
          (let ((a39462 (car lst)))
            (let ((a39463 (cons a39462 lst2)))
              (reverse-helper a39461 a39463)))))))
  (define (reverse lst) (let ((a39464 (list))) (reverse-helper lst a39464)))
  (define (take-helper lst n lst2)
    (let ((a39465 '0))
      (let ((a39466 (= n a39465)))
        (if a39466
          (let ((x39467 (reverse lst2))) x39467)
          (let ((a39468 (cdr lst)))
            (let ((a39469 '1))
              (let ((a39470 (- n a39469)))
                (let ((a39471 (car lst)))
                  (let ((a39472 (cons a39471 lst2)))
                    (take-helper a39468 a39470 a39472))))))))))
  (define (take lst n) (let ((a39473 (list))) (take-helper lst n a39473)))
  (define (length lst)
    (let ((a39474 (null? lst)))
      (if a39474
        (let ((x39475 '0)) x39475)
        (let ((a39476 '1))
          (let ((a39477 (cdr lst)))
            (let ((a39478 (length a39477))) (+ a39476 a39478)))))))
  (define (map proc lst)
    (let ((a39479 (null? lst)))
      (if a39479
        (let ((x39480 (list))) x39480)
        (let ((a39481 (car lst)))
          (let ((a39482 (proc a39481)))
            (let ((a39483 (cdr lst)))
              (let ((a39484 (map proc a39483))) (cons a39482 a39484))))))))
  (define (filter op lst)
    (let ((a39485 (null? lst)))
      (if a39485
        (let ((x39486 (list))) x39486)
        (let ((a39487 (car lst)))
          (let ((a39488 (op a39487)))
            (if a39488
              (let ((a39489 (car lst)))
                (let ((a39490 (cdr lst)))
                  (let ((a39491 (filter op a39490))) (cons a39489 a39491))))
              (let ((a39492 (cdr lst))) (filter op a39492))))))))
  (define (drop lst n)
    (let ((a39493 '0))
      (let ((a39494 (= n a39493)))
        (if a39494
          lst
          (let ((a39495 (cdr lst)))
            (let ((a39496 '1))
              (let ((a39497 (- n a39496))) (drop a39495 a39497))))))))
  (define (foldr proc acc lst)
    (let ((a39498 (null? lst)))
      (if a39498
        acc
        (let ((a39499 (car lst)))
          (let ((a39500 (cdr lst)))
            (let ((a39501 (foldr proc acc a39500))) (proc a39499 a39501)))))))
  (define (append lst1 lst2)
    (let ((a39502 (null? lst1)))
      (if a39502
        lst2
        (let ((a39503 (car lst1)))
          (let ((a39504 (cdr lst1)))
            (let ((a39505 (append a39504 lst2))) (cons a39503 a39505)))))))
  (define (hash . lst) (let ((x39506 (apply-prim hash lst))) x39506))
  (define (hash-ref h k) (let ((x39507 (prim hash-ref h k))) x39507))
  (define (hash-set h k v) (let ((x39508 (prim hash-set h k v))) x39508))
  (define (hash-has-key? h k) (let ((x39509 (prim hash-has-key? h k))) x39509))
  (define (hash-count h) (let ((x39510 (prim hash-count h))) x39510))
  (define (call)
    (let ((a39511 '100))
      (let ((a39512 '80))
        (let ((a39513 '10))
          (let ((a39514 '2))
            (let ((a39515 (hash a39511 a39512 a39513 a39514)))
              (let ((a39516 '5)) (hash-has-key? a39515 a39516))))))))
  (define (brouhaha_main) (let ((x39517 (call))) x39517)))
