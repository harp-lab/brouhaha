'((define (+ . lst) (let ((x41025 (apply-prim + lst))) x41025))
  (define (- . lst) (let ((x41026 (apply-prim - lst))) x41026))
  (define (* . lst) (let ((x41027 (apply-prim * lst))) x41027))
  (define (modulo a b) (let ((x41028 (prim modulo a b))) x41028))
  (define (/ . lst) (let ((x41029 (apply-prim / lst))) x41029))
  (define (= . lst) (let ((x41030 (apply-prim = lst))) x41030))
  (define (> . lst) (let ((x41031 (apply-prim > lst))) x41031))
  (define (< . lst) (let ((x41032 (apply-prim < lst))) x41032))
  (define (<= . lst) (let ((x41033 (apply-prim <= lst))) x41033))
  (define (>= . lst) (let ((x41034 (apply-prim >= lst))) x41034))
  (define (null? x) (let ((x41035 (prim null? x))) x41035))
  (define (equal? x y) (let ((x41036 (prim equal? x y))) x41036))
  (define (eq? x y) (let ((x41037 (prim eq? x y))) x41037))
  (define (cons a b) (let ((x41038 (prim cons a b))) x41038))
  (define (car lst) (let ((x41039 (prim car lst))) x41039))
  (define (cdr lst) (let ((x41040 (prim cdr lst))) x41040))
  (define (even? x)
    (let ((a41041 '0))
      (let ((a41042 '2))
        (let ((a41043 (modulo x a41042))) (equal? a41041 a41043)))))
  (define (odd? x)
    (let ((a41044 '1))
      (let ((a41045 '2))
        (let ((a41046 (modulo x a41045))) (equal? a41044 a41046)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a41047 (null? lst)))
      (if a41047
        (let ((x41048 '#f)) x41048)
        (let ((a41049 (car lst)))
          (let ((a41050 (equal? a41049 x)))
            (if a41050
              (let ((x41051 '#t)) x41051)
              (let ((a41052 (cdr lst))) (member? x a41052))))))))
  (define (foldl fun acc lst)
    (let ((a41053 (null? lst)))
      (if a41053
        acc
        (let ((a41054 (car lst)))
          (let ((a41055 (fun a41054 acc)))
            (let ((a41056 (cdr lst))) (foldl fun a41055 a41056)))))))
  (define (reverse-helper lst lst2)
    (let ((a41057 (null? lst)))
      (if a41057
        lst2
        (let ((a41058 (cdr lst)))
          (let ((a41059 (car lst)))
            (let ((a41060 (cons a41059 lst2)))
              (reverse-helper a41058 a41060)))))))
  (define (reverse lst) (let ((a41061 (list))) (reverse-helper lst a41061)))
  (define (take-helper lst n lst2)
    (let ((a41062 '0))
      (let ((a41063 (= n a41062)))
        (if a41063
          (let ((x41064 (reverse lst2))) x41064)
          (let ((a41065 (cdr lst)))
            (let ((a41066 '1))
              (let ((a41067 (- n a41066)))
                (let ((a41068 (car lst)))
                  (let ((a41069 (cons a41068 lst2)))
                    (take-helper a41065 a41067 a41069))))))))))
  (define (take lst n) (let ((a41070 (list))) (take-helper lst n a41070)))
  (define (length lst)
    (let ((a41071 (null? lst)))
      (if a41071
        (let ((x41072 '0)) x41072)
        (let ((a41073 '1))
          (let ((a41074 (cdr lst)))
            (let ((a41075 (length a41074))) (+ a41073 a41075)))))))
  (define (map proc lst)
    (let ((a41076 (null? lst)))
      (if a41076
        (let ((x41077 (list))) x41077)
        (let ((a41078 (car lst)))
          (let ((a41079 (proc a41078)))
            (let ((a41080 (cdr lst)))
              (let ((a41081 (map proc a41080))) (cons a41079 a41081))))))))
  (define (filter op lst)
    (let ((a41082 (null? lst)))
      (if a41082
        (let ((x41083 (list))) x41083)
        (let ((a41084 (car lst)))
          (let ((a41085 (op a41084)))
            (if a41085
              (let ((a41086 (car lst)))
                (let ((a41087 (cdr lst)))
                  (let ((a41088 (filter op a41087))) (cons a41086 a41088))))
              (let ((a41089 (cdr lst))) (filter op a41089))))))))
  (define (drop lst n)
    (let ((a41090 '0))
      (let ((a41091 (= n a41090)))
        (if a41091
          lst
          (let ((a41092 (cdr lst)))
            (let ((a41093 '1))
              (let ((a41094 (- n a41093))) (drop a41092 a41094))))))))
  (define (foldr proc acc lst)
    (let ((a41095 (null? lst)))
      (if a41095
        acc
        (let ((a41096 (car lst)))
          (let ((a41097 (cdr lst)))
            (let ((a41098 (foldr proc acc a41097))) (proc a41096 a41098)))))))
  (define (append lst1 lst2)
    (let ((a41099 (null? lst1)))
      (if a41099
        lst2
        (let ((a41100 (car lst1)))
          (let ((a41101 (cdr lst1)))
            (let ((a41102 (append a41101 lst2))) (cons a41100 a41102)))))))
  (define (hash . lst) (let ((x41103 (apply-prim hash lst))) x41103))
  (define (hash-ref h k) (let ((x41104 (prim hash-ref h k))) x41104))
  (define (hash-set h k v) (let ((x41105 (prim hash-set h k v))) x41105))
  (define (hash-has-key? h k) (let ((x41106 (prim hash-has-key? h k))) x41106))
  (define (hash-count h) (let ((x41107 (prim hash-count h))) x41107))
  (define (call)
    (let ((a41108 '100))
      (let ((a41109 '80))
        (let ((a41110 '10))
          (let ((a41111 '2))
            (let ((a41112 (hash a41108 a41109 a41110 a41111)))
              (let ((a41113 '5)) (hash-has-key? a41112 a41113))))))))
  (define (brouhaha_main) (let ((x41114 (call))) x41114)))
