'((define (+ . lst) (let ((x39041 (apply-prim + lst))) x39041))
  (define (- . lst) (let ((x39042 (apply-prim - lst))) x39042))
  (define (* . lst) (let ((x39043 (apply-prim * lst))) x39043))
  (define (modulo a b) (let ((x39044 (prim modulo a b))) x39044))
  (define (/ . lst) (let ((x39045 (apply-prim / lst))) x39045))
  (define (= . lst) (let ((x39046 (apply-prim = lst))) x39046))
  (define (> . lst) (let ((x39047 (apply-prim > lst))) x39047))
  (define (< . lst) (let ((x39048 (apply-prim < lst))) x39048))
  (define (<= . lst) (let ((x39049 (apply-prim <= lst))) x39049))
  (define (>= . lst) (let ((x39050 (apply-prim >= lst))) x39050))
  (define (null? x) (let ((x39051 (prim null? x))) x39051))
  (define (equal? x y) (let ((x39052 (prim equal? x y))) x39052))
  (define (eq? x y) (let ((x39053 (prim eq? x y))) x39053))
  (define (cons a b) (let ((x39054 (prim cons a b))) x39054))
  (define (car lst) (let ((x39055 (prim car lst))) x39055))
  (define (cdr lst) (let ((x39056 (prim cdr lst))) x39056))
  (define (even? x)
    (let ((a39057 '0))
      (let ((a39058 '2))
        (let ((a39059 (modulo x a39058))) (equal? a39057 a39059)))))
  (define (odd? x)
    (let ((a39060 '1))
      (let ((a39061 '2))
        (let ((a39062 (modulo x a39061))) (equal? a39060 a39062)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a39063 (null? lst)))
      (if a39063
        (let ((x39064 '#f)) x39064)
        (let ((a39065 (car lst)))
          (let ((a39066 (equal? a39065 x)))
            (if a39066
              (let ((x39067 '#t)) x39067)
              (let ((a39068 (cdr lst))) (member? x a39068))))))))
  (define (foldl fun acc lst)
    (let ((a39069 (null? lst)))
      (if a39069
        acc
        (let ((a39070 (car lst)))
          (let ((a39071 (fun a39070 acc)))
            (let ((a39072 (cdr lst))) (foldl fun a39071 a39072)))))))
  (define (reverse-helper lst lst2)
    (let ((a39073 (null? lst)))
      (if a39073
        lst2
        (let ((a39074 (cdr lst)))
          (let ((a39075 (car lst)))
            (let ((a39076 (cons a39075 lst2)))
              (reverse-helper a39074 a39076)))))))
  (define (reverse lst) (let ((a39077 (list))) (reverse-helper lst a39077)))
  (define (take-helper lst n lst2)
    (let ((a39078 '0))
      (let ((a39079 (= n a39078)))
        (if a39079
          (let ((x39080 (reverse lst2))) x39080)
          (let ((a39081 (cdr lst)))
            (let ((a39082 '1))
              (let ((a39083 (- n a39082)))
                (let ((a39084 (car lst)))
                  (let ((a39085 (cons a39084 lst2)))
                    (take-helper a39081 a39083 a39085))))))))))
  (define (take lst n) (let ((a39086 (list))) (take-helper lst n a39086)))
  (define (length lst)
    (let ((a39087 (null? lst)))
      (if a39087
        (let ((x39088 '0)) x39088)
        (let ((a39089 '1))
          (let ((a39090 (cdr lst)))
            (let ((a39091 (length a39090))) (+ a39089 a39091)))))))
  (define (map proc lst)
    (let ((a39092 (null? lst)))
      (if a39092
        (let ((x39093 (list))) x39093)
        (let ((a39094 (car lst)))
          (let ((a39095 (proc a39094)))
            (let ((a39096 (cdr lst)))
              (let ((a39097 (map proc a39096))) (cons a39095 a39097))))))))
  (define (filter op lst)
    (let ((a39098 (null? lst)))
      (if a39098
        (let ((x39099 (list))) x39099)
        (let ((a39100 (car lst)))
          (let ((a39101 (op a39100)))
            (if a39101
              (let ((a39102 (car lst)))
                (let ((a39103 (cdr lst)))
                  (let ((a39104 (filter op a39103))) (cons a39102 a39104))))
              (let ((a39105 (cdr lst))) (filter op a39105))))))))
  (define (drop lst n)
    (let ((a39106 '0))
      (let ((a39107 (= n a39106)))
        (if a39107
          lst
          (let ((a39108 (cdr lst)))
            (let ((a39109 '1))
              (let ((a39110 (- n a39109))) (drop a39108 a39110))))))))
  (define (foldr proc acc lst)
    (let ((a39111 (null? lst)))
      (if a39111
        acc
        (let ((a39112 (car lst)))
          (let ((a39113 (cdr lst)))
            (let ((a39114 (foldr proc acc a39113))) (proc a39112 a39114)))))))
  (define (append lst1 lst2)
    (let ((a39115 (null? lst1)))
      (if a39115
        lst2
        (let ((a39116 (car lst1)))
          (let ((a39117 (cdr lst1)))
            (let ((a39118 (append a39117 lst2))) (cons a39116 a39118)))))))
  (define (hash . lst) (let ((x39119 (apply-prim hash lst))) x39119))
  (define (hash-ref h k) (let ((x39120 (prim hash-ref h k))) x39120))
  (define (hash-set h k v) (let ((x39121 (prim hash-set h k v))) x39121))
  (define (hash-has-key? h k) (let ((x39122 (prim hash-has-key? h k))) x39122))
  (define (hash-count h) (let ((x39123 (prim hash-count h))) x39123))
  (define (call)
    (let ((a39124 '100))
      (let ((a39125 '80))
        (let ((a39126 '10))
          (let ((a39127 '2))
            (let ((a39128 (hash a39124 a39125 a39126 a39127)))
              (let ((a39129 '5)) (hash-has-key? a39128 a39129))))))))
  (define (brouhaha_main) (let ((x39130 (call))) x39130)))
