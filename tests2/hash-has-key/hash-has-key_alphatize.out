'((define (+ . lst) (let ((x39837 (apply-prim + lst))) x39837))
  (define (- . lst) (let ((x39838 (apply-prim - lst))) x39838))
  (define (* . lst) (let ((x39839 (apply-prim * lst))) x39839))
  (define (modulo a b) (let ((x39840 (prim modulo a b))) x39840))
  (define (/ . lst) (let ((x39841 (apply-prim / lst))) x39841))
  (define (= . lst) (let ((x39842 (apply-prim = lst))) x39842))
  (define (> . lst) (let ((x39843 (apply-prim > lst))) x39843))
  (define (< . lst) (let ((x39844 (apply-prim < lst))) x39844))
  (define (<= . lst) (let ((x39845 (apply-prim <= lst))) x39845))
  (define (>= . lst) (let ((x39846 (apply-prim >= lst))) x39846))
  (define (null? x) (let ((x39847 (prim null? x))) x39847))
  (define (equal? x y) (let ((x39848 (prim equal? x y))) x39848))
  (define (eq? x y) (let ((x39849 (prim eq? x y))) x39849))
  (define (cons a b) (let ((x39850 (prim cons a b))) x39850))
  (define (car lst) (let ((x39851 (prim car lst))) x39851))
  (define (cdr lst) (let ((x39852 (prim cdr lst))) x39852))
  (define (even? x)
    (let ((a39853 '0))
      (let ((a39854 '2))
        (let ((a39855 (modulo x a39854))) (equal? a39853 a39855)))))
  (define (odd? x)
    (let ((a39856 '1))
      (let ((a39857 '2))
        (let ((a39858 (modulo x a39857))) (equal? a39856 a39858)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a39859 (null? lst)))
      (if a39859
        (let ((x39860 '#f)) x39860)
        (let ((a39861 (car lst)))
          (let ((a39862 (equal? a39861 x)))
            (if a39862
              (let ((x39863 '#t)) x39863)
              (let ((a39864 (cdr lst))) (member? x a39864))))))))
  (define (foldl fun acc lst)
    (let ((a39865 (null? lst)))
      (if a39865
        acc
        (let ((a39866 (car lst)))
          (let ((a39867 (fun a39866 acc)))
            (let ((a39868 (cdr lst))) (foldl fun a39867 a39868)))))))
  (define (reverse-helper lst lst2)
    (let ((a39869 (null? lst)))
      (if a39869
        lst2
        (let ((a39870 (cdr lst)))
          (let ((a39871 (car lst)))
            (let ((a39872 (cons a39871 lst2)))
              (reverse-helper a39870 a39872)))))))
  (define (reverse lst) (let ((a39873 (list))) (reverse-helper lst a39873)))
  (define (take-helper lst n lst2)
    (let ((a39874 '0))
      (let ((a39875 (= n a39874)))
        (if a39875
          (let ((x39876 (reverse lst2))) x39876)
          (let ((a39877 (cdr lst)))
            (let ((a39878 '1))
              (let ((a39879 (- n a39878)))
                (let ((a39880 (car lst)))
                  (let ((a39881 (cons a39880 lst2)))
                    (take-helper a39877 a39879 a39881))))))))))
  (define (take lst n) (let ((a39882 (list))) (take-helper lst n a39882)))
  (define (length lst)
    (let ((a39883 (null? lst)))
      (if a39883
        (let ((x39884 '0)) x39884)
        (let ((a39885 '1))
          (let ((a39886 (cdr lst)))
            (let ((a39887 (length a39886))) (+ a39885 a39887)))))))
  (define (map proc lst)
    (let ((a39888 (null? lst)))
      (if a39888
        (let ((x39889 (list))) x39889)
        (let ((a39890 (car lst)))
          (let ((a39891 (proc a39890)))
            (let ((a39892 (cdr lst)))
              (let ((a39893 (map proc a39892))) (cons a39891 a39893))))))))
  (define (filter op lst)
    (let ((a39894 (null? lst)))
      (if a39894
        (let ((x39895 (list))) x39895)
        (let ((a39896 (car lst)))
          (let ((a39897 (op a39896)))
            (if a39897
              (let ((a39898 (car lst)))
                (let ((a39899 (cdr lst)))
                  (let ((a39900 (filter op a39899))) (cons a39898 a39900))))
              (let ((a39901 (cdr lst))) (filter op a39901))))))))
  (define (drop lst n)
    (let ((a39902 '0))
      (let ((a39903 (= n a39902)))
        (if a39903
          lst
          (let ((a39904 (cdr lst)))
            (let ((a39905 '1))
              (let ((a39906 (- n a39905))) (drop a39904 a39906))))))))
  (define (foldr proc acc lst)
    (let ((a39907 (null? lst)))
      (if a39907
        acc
        (let ((a39908 (car lst)))
          (let ((a39909 (cdr lst)))
            (let ((a39910 (foldr proc acc a39909))) (proc a39908 a39910)))))))
  (define (append lst1 lst2)
    (let ((a39911 (null? lst1)))
      (if a39911
        lst2
        (let ((a39912 (car lst1)))
          (let ((a39913 (cdr lst1)))
            (let ((a39914 (append a39913 lst2))) (cons a39912 a39914)))))))
  (define (hash . lst) (let ((x39915 (apply-prim hash lst))) x39915))
  (define (hash-ref h k) (let ((x39916 (prim hash-ref h k))) x39916))
  (define (hash-set h k v) (let ((x39917 (prim hash-set h k v))) x39917))
  (define (hash-has-key? h k) (let ((x39918 (prim hash-has-key? h k))) x39918))
  (define (hash-count h) (let ((x39919 (prim hash-count h))) x39919))
  (define (call)
    (let ((a39920 '100))
      (let ((a39921 '80))
        (let ((a39922 '10))
          (let ((a39923 '2))
            (let ((a39924 (hash a39920 a39921 a39922 a39923)))
              (let ((a39925 '5)) (hash-has-key? a39924 a39925))))))))
  (define (brouhaha_main) (let ((x39926 (call))) x39926)))
