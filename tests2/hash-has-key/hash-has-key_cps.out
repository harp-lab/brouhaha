'((define (+ . lst)
    (let ((kont3913139232 (prim car lst)))
      (let ((lst39233 (prim cdr lst)))
        (let ((x3904139234 (apply-prim + lst39233)))
          (kont3913139232 x3904139234)))))
  (define (- . lst)
    (let ((kont3913339235 (prim car lst)))
      (let ((lst39236 (prim cdr lst)))
        (let ((x3904239237 (apply-prim - lst39236)))
          (kont3913339235 x3904239237)))))
  (define (* . lst)
    (let ((kont3913539238 (prim car lst)))
      (let ((lst39239 (prim cdr lst)))
        (let ((x3904339240 (apply-prim * lst39239)))
          (kont3913539238 x3904339240)))))
  (define (modulo kont39137 a b)
    (let ((x3904439241 (prim modulo a b))) (kont39137 x3904439241)))
  (define (/ . lst)
    (let ((kont3913839242 (prim car lst)))
      (let ((lst39243 (prim cdr lst)))
        (let ((x3904539244 (apply-prim / lst39243)))
          (kont3913839242 x3904539244)))))
  (define (= . lst)
    (let ((kont3914039245 (prim car lst)))
      (let ((lst39246 (prim cdr lst)))
        (let ((x3904639247 (apply-prim = lst39246)))
          (kont3914039245 x3904639247)))))
  (define (> . lst)
    (let ((kont3914239248 (prim car lst)))
      (let ((lst39249 (prim cdr lst)))
        (let ((x3904739250 (apply-prim > lst39249)))
          (kont3914239248 x3904739250)))))
  (define (< . lst)
    (let ((kont3914439251 (prim car lst)))
      (let ((lst39252 (prim cdr lst)))
        (let ((x3904839253 (apply-prim < lst39252)))
          (kont3914439251 x3904839253)))))
  (define (<= . lst)
    (let ((kont3914639254 (prim car lst)))
      (let ((lst39255 (prim cdr lst)))
        (let ((x3904939256 (apply-prim <= lst39255)))
          (kont3914639254 x3904939256)))))
  (define (>= . lst)
    (let ((kont3914839257 (prim car lst)))
      (let ((lst39258 (prim cdr lst)))
        (let ((x3905039259 (apply-prim >= lst39258)))
          (kont3914839257 x3905039259)))))
  (define (null? kont39150 x)
    (let ((x3905139260 (prim null? x))) (kont39150 x3905139260)))
  (define (equal? kont39151 x y)
    (let ((x3905239261 (prim equal? x y))) (kont39151 x3905239261)))
  (define (eq? kont39152 x y)
    (let ((x3905339262 (prim eq? x y))) (kont39152 x3905339262)))
  (define (cons kont39153 a b)
    (let ((x3905439263 (prim cons a b))) (kont39153 x3905439263)))
  (define (car kont39154 lst)
    (let ((x3905539264 (prim car lst))) (kont39154 x3905539264)))
  (define (cdr kont39155 lst)
    (let ((x3905639265 (prim cdr lst))) (kont39155 x3905639265)))
  (define (even? kont39156 x)
    (let ((a3905739266 '0))
      (let ((a3905839267 '2))
        (let ((f3915739268
               (lambda (a3905939269)
                 (equal? kont39156 a3905739266 a3905939269))))
          (modulo f3915739268 x a3905839267)))))
  (define (odd? kont39158 x)
    (let ((a3906039270 '1))
      (let ((a3906139271 '2))
        (let ((f3915939272
               (lambda (a3906239273)
                 (equal? kont39158 a3906039270 a3906239273))))
          (modulo f3915939272 x a3906139271)))))
  (define (list . x)
    (let ((kont3916039274 (prim car x)))
      (let ((x39275 (prim cdr x))) (kont3916039274 x39275))))
  (define (member? kont39162 x lst)
    (let ((f3916639276
           (lambda (a3906339277)
             (if a3906339277
               (let ((x3906439278 '#f)) (kont39162 x3906439278))
               (let ((f3916539279
                      (lambda (a3906539280)
                        (let ((f3916439281
                               (lambda (a3906639282)
                                 (if a3906639282
                                   (let ((x3906739283 '#t))
                                     (kont39162 x3906739283))
                                   (let ((f3916339284
                                          (lambda (a3906839285)
                                            (member?
                                             kont39162
                                             x
                                             a3906839285))))
                                     (cdr f3916339284 lst))))))
                          (equal? f3916439281 a3906539280 x)))))
                 (car f3916539279 lst))))))
      (null? f3916639276 lst)))
  (define (foldl kont39167 fun acc lst)
    (let ((f3917139286
           (lambda (a3906939287)
             (if a3906939287
               (kont39167 acc)
               (let ((f3917039288
                      (lambda (a3907039289)
                        (let ((f3916939290
                               (lambda (a3907139291)
                                 (let ((f3916839292
                                        (lambda (a3907239293)
                                          (foldl
                                           kont39167
                                           fun
                                           a3907139291
                                           a3907239293))))
                                   (cdr f3916839292 lst)))))
                          (fun f3916939290 a3907039289 acc)))))
                 (car f3917039288 lst))))))
      (null? f3917139286 lst)))
  (define (reverse-helper kont39172 lst lst2)
    (let ((f3917639294
           (lambda (a3907339295)
             (if a3907339295
               (kont39172 lst2)
               (let ((f3917539296
                      (lambda (a3907439297)
                        (let ((f3917439298
                               (lambda (a3907539299)
                                 (let ((f3917339300
                                        (lambda (a3907639301)
                                          (reverse-helper
                                           kont39172
                                           a3907439297
                                           a3907639301))))
                                   (cons f3917339300 a3907539299 lst2)))))
                          (car f3917439298 lst)))))
                 (cdr f3917539296 lst))))))
      (null? f3917639294 lst)))
  (define (reverse kont39177 lst)
    (let ((f3917839302
           (lambda (a3907739303) (reverse-helper kont39177 lst a3907739303))))
      (list f3917839302)))
  (define (take-helper kont39179 lst n lst2)
    (let ((a3907839304 '0))
      (let ((f3918539305
             (lambda (a3907939306)
               (if a3907939306
                 (let ((f3918039307
                        (lambda (x3908039308) (kont39179 x3908039308))))
                   (reverse f3918039307 lst2))
                 (let ((f3918439309
                        (lambda (a3908139310)
                          (let ((a3908239311 '1))
                            (let ((f3918339312
                                   (lambda (a3908339313)
                                     (let ((f3918239314
                                            (lambda (a3908439315)
                                              (let ((f3918139316
                                                     (lambda (a3908539317)
                                                       (take-helper
                                                        kont39179
                                                        a3908139310
                                                        a3908339313
                                                        a3908539317))))
                                                (cons
                                                 f3918139316
                                                 a3908439315
                                                 lst2)))))
                                       (car f3918239314 lst)))))
                              (- f3918339312 n a3908239311))))))
                   (cdr f3918439309 lst))))))
        (= f3918539305 n a3907839304))))
  (define (take kont39186 lst n)
    (let ((f3918739318
           (lambda (a3908639319) (take-helper kont39186 lst n a3908639319))))
      (list f3918739318)))
  (define (length kont39188 lst)
    (let ((f3919139320
           (lambda (a3908739321)
             (if a3908739321
               (let ((x3908839322 '0)) (kont39188 x3908839322))
               (let ((a3908939323 '1))
                 (let ((f3919039324
                        (lambda (a3909039325)
                          (let ((f3918939326
                                 (lambda (a3909139327)
                                   (+ kont39188 a3908939323 a3909139327))))
                            (length f3918939326 a3909039325)))))
                   (cdr f3919039324 lst)))))))
      (null? f3919139320 lst)))
  (define (map kont39192 proc lst)
    (let ((f3919839328
           (lambda (a3909239329)
             (if a3909239329
               (let ((f3919339330
                      (lambda (x3909339331) (kont39192 x3909339331))))
                 (list f3919339330))
               (let ((f3919739332
                      (lambda (a3909439333)
                        (let ((f3919639334
                               (lambda (a3909539335)
                                 (let ((f3919539336
                                        (lambda (a3909639337)
                                          (let ((f3919439338
                                                 (lambda (a3909739339)
                                                   (cons
                                                    kont39192
                                                    a3909539335
                                                    a3909739339))))
                                            (map
                                             f3919439338
                                             proc
                                             a3909639337)))))
                                   (cdr f3919539336 lst)))))
                          (proc f3919639334 a3909439333)))))
                 (car f3919739332 lst))))))
      (null? f3919839328 lst)))
  (define (filter kont39199 op lst)
    (let ((f3920739340
           (lambda (a3909839341)
             (if a3909839341
               (let ((f3920039342
                      (lambda (x3909939343) (kont39199 x3909939343))))
                 (list f3920039342))
               (let ((f3920639344
                      (lambda (a3910039345)
                        (let ((f3920539346
                               (lambda (a3910139347)
                                 (if a3910139347
                                   (let ((f3920339348
                                          (lambda (a3910239349)
                                            (let ((f3920239350
                                                   (lambda (a3910339351)
                                                     (let ((f3920139352
                                                            (lambda (a3910439353)
                                                              (cons
                                                               kont39199
                                                               a3910239349
                                                               a3910439353))))
                                                       (filter
                                                        f3920139352
                                                        op
                                                        a3910339351)))))
                                              (cdr f3920239350 lst)))))
                                     (car f3920339348 lst))
                                   (let ((f3920439354
                                          (lambda (a3910539355)
                                            (filter
                                             kont39199
                                             op
                                             a3910539355))))
                                     (cdr f3920439354 lst))))))
                          (op f3920539346 a3910039345)))))
                 (car f3920639344 lst))))))
      (null? f3920739340 lst)))
  (define (drop kont39208 lst n)
    (let ((a3910639356 '0))
      (let ((f3921139357
             (lambda (a3910739358)
               (if a3910739358
                 (kont39208 lst)
                 (let ((f3921039359
                        (lambda (a3910839360)
                          (let ((a3910939361 '1))
                            (let ((f3920939362
                                   (lambda (a3911039363)
                                     (drop
                                      kont39208
                                      a3910839360
                                      a3911039363))))
                              (- f3920939362 n a3910939361))))))
                   (cdr f3921039359 lst))))))
        (= f3921139357 n a3910639356))))
  (define (foldr kont39212 proc acc lst)
    (let ((f3921639364
           (lambda (a3911139365)
             (if a3911139365
               (kont39212 acc)
               (let ((f3921539366
                      (lambda (a3911239367)
                        (let ((f3921439368
                               (lambda (a3911339369)
                                 (let ((f3921339370
                                        (lambda (a3911439371)
                                          (proc
                                           kont39212
                                           a3911239367
                                           a3911439371))))
                                   (foldr f3921339370 proc acc a3911339369)))))
                          (cdr f3921439368 lst)))))
                 (car f3921539366 lst))))))
      (null? f3921639364 lst)))
  (define (append kont39217 lst1 lst2)
    (let ((f3922139372
           (lambda (a3911539373)
             (if a3911539373
               (kont39217 lst2)
               (let ((f3922039374
                      (lambda (a3911639375)
                        (let ((f3921939376
                               (lambda (a3911739377)
                                 (let ((f3921839378
                                        (lambda (a3911839379)
                                          (cons
                                           kont39217
                                           a3911639375
                                           a3911839379))))
                                   (append f3921839378 a3911739377 lst2)))))
                          (cdr f3921939376 lst1)))))
                 (car f3922039374 lst1))))))
      (null? f3922139372 lst1)))
  (define (hash . lst)
    (let ((kont3922239380 (prim car lst)))
      (let ((lst39381 (prim cdr lst)))
        (let ((x3911939382 (apply-prim hash lst39381)))
          (kont3922239380 x3911939382)))))
  (define (hash-ref kont39224 h k)
    (let ((x3912039383 (prim hash-ref h k))) (kont39224 x3912039383)))
  (define (hash-set kont39225 h k v)
    (let ((x3912139384 (prim hash-set h k v))) (kont39225 x3912139384)))
  (define (hash-has-key? kont39226 h k)
    (let ((x3912239385 (prim hash-has-key? h k))) (kont39226 x3912239385)))
  (define (hash-count kont39227 h)
    (let ((x3912339386 (prim hash-count h))) (kont39227 x3912339386)))
  (define (call kont39228)
    (let ((a3912439387 '100))
      (let ((a3912539388 '80))
        (let ((a3912639389 '10))
          (let ((a3912739390 '2))
            (let ((f3922939391
                   (lambda (a3912839392)
                     (let ((a3912939393 '5))
                       (hash-has-key? kont39228 a3912839392 a3912939393)))))
              (hash
               f3922939391
               a3912439387
               a3912539388
               a3912639389
               a3912739390)))))))
  (define (brouhaha_main kont39230)
    (let ((f3923139394 (lambda (x3913039395) (kont39230 x3913039395))))
      (call f3923139394))))
