'((define (+ . lst)
    (let ((kont39131 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39041 (apply-prim + lst))) (kont39131 x39041)))))
  (define (- . lst)
    (let ((kont39133 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39042 (apply-prim - lst))) (kont39133 x39042)))))
  (define (* . lst)
    (let ((kont39135 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39043 (apply-prim * lst))) (kont39135 x39043)))))
  (define (modulo kont39137 a b)
    (let ((x39044 (prim modulo a b))) (kont39137 x39044)))
  (define (/ . lst)
    (let ((kont39138 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39045 (apply-prim / lst))) (kont39138 x39045)))))
  (define (= . lst)
    (let ((kont39140 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39046 (apply-prim = lst))) (kont39140 x39046)))))
  (define (> . lst)
    (let ((kont39142 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39047 (apply-prim > lst))) (kont39142 x39047)))))
  (define (< . lst)
    (let ((kont39144 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39048 (apply-prim < lst))) (kont39144 x39048)))))
  (define (<= . lst)
    (let ((kont39146 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39049 (apply-prim <= lst))) (kont39146 x39049)))))
  (define (>= . lst)
    (let ((kont39148 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39050 (apply-prim >= lst))) (kont39148 x39050)))))
  (define (null? kont39150 x)
    (let ((x39051 (prim null? x))) (kont39150 x39051)))
  (define (equal? kont39151 x y)
    (let ((x39052 (prim equal? x y))) (kont39151 x39052)))
  (define (eq? kont39152 x y)
    (let ((x39053 (prim eq? x y))) (kont39152 x39053)))
  (define (cons kont39153 a b)
    (let ((x39054 (prim cons a b))) (kont39153 x39054)))
  (define (car kont39154 lst)
    (let ((x39055 (prim car lst))) (kont39154 x39055)))
  (define (cdr kont39155 lst)
    (let ((x39056 (prim cdr lst))) (kont39155 x39056)))
  (define (even? kont39156 x)
    (let ((a39057 '0))
      (let ((a39058 '2))
        (let ((f39157 (lambda (a39059) (equal? kont39156 a39057 a39059))))
          (modulo f39157 x a39058)))))
  (define (odd? kont39158 x)
    (let ((a39060 '1))
      (let ((a39061 '2))
        (let ((f39159 (lambda (a39062) (equal? kont39158 a39060 a39062))))
          (modulo f39159 x a39061)))))
  (define (list . x)
    (let ((kont39160 (prim car x))) (let ((x (prim cdr x))) (kont39160 x))))
  (define (member? kont39162 x lst)
    (let ((f39166
           (lambda (a39063)
             (if a39063
               (let ((x39064 '#f)) (kont39162 x39064))
               (let ((f39165
                      (lambda (a39065)
                        (let ((f39164
                               (lambda (a39066)
                                 (if a39066
                                   (let ((x39067 '#t)) (kont39162 x39067))
                                   (let ((f39163
                                          (lambda (a39068)
                                            (member? kont39162 x a39068))))
                                     (cdr f39163 lst))))))
                          (equal? f39164 a39065 x)))))
                 (car f39165 lst))))))
      (null? f39166 lst)))
  (define (foldl kont39167 fun acc lst)
    (let ((f39171
           (lambda (a39069)
             (if a39069
               (kont39167 acc)
               (let ((f39170
                      (lambda (a39070)
                        (let ((f39169
                               (lambda (a39071)
                                 (let ((f39168
                                        (lambda (a39072)
                                          (foldl
                                           kont39167
                                           fun
                                           a39071
                                           a39072))))
                                   (cdr f39168 lst)))))
                          (fun f39169 a39070 acc)))))
                 (car f39170 lst))))))
      (null? f39171 lst)))
  (define (reverse-helper kont39172 lst lst2)
    (let ((f39176
           (lambda (a39073)
             (if a39073
               (kont39172 lst2)
               (let ((f39175
                      (lambda (a39074)
                        (let ((f39174
                               (lambda (a39075)
                                 (let ((f39173
                                        (lambda (a39076)
                                          (reverse-helper
                                           kont39172
                                           a39074
                                           a39076))))
                                   (cons f39173 a39075 lst2)))))
                          (car f39174 lst)))))
                 (cdr f39175 lst))))))
      (null? f39176 lst)))
  (define (reverse kont39177 lst)
    (let ((f39178 (lambda (a39077) (reverse-helper kont39177 lst a39077))))
      (list f39178)))
  (define (take-helper kont39179 lst n lst2)
    (let ((a39078 '0))
      (let ((f39185
             (lambda (a39079)
               (if a39079
                 (let ((f39180 (lambda (x39080) (kont39179 x39080))))
                   (reverse f39180 lst2))
                 (let ((f39184
                        (lambda (a39081)
                          (let ((a39082 '1))
                            (let ((f39183
                                   (lambda (a39083)
                                     (let ((f39182
                                            (lambda (a39084)
                                              (let ((f39181
                                                     (lambda (a39085)
                                                       (take-helper
                                                        kont39179
                                                        a39081
                                                        a39083
                                                        a39085))))
                                                (cons f39181 a39084 lst2)))))
                                       (car f39182 lst)))))
                              (- f39183 n a39082))))))
                   (cdr f39184 lst))))))
        (= f39185 n a39078))))
  (define (take kont39186 lst n)
    (let ((f39187 (lambda (a39086) (take-helper kont39186 lst n a39086))))
      (list f39187)))
  (define (length kont39188 lst)
    (let ((f39191
           (lambda (a39087)
             (if a39087
               (let ((x39088 '0)) (kont39188 x39088))
               (let ((a39089 '1))
                 (let ((f39190
                        (lambda (a39090)
                          (let ((f39189
                                 (lambda (a39091)
                                   (+ kont39188 a39089 a39091))))
                            (length f39189 a39090)))))
                   (cdr f39190 lst)))))))
      (null? f39191 lst)))
  (define (map kont39192 proc lst)
    (let ((f39198
           (lambda (a39092)
             (if a39092
               (let ((f39193 (lambda (x39093) (kont39192 x39093))))
                 (list f39193))
               (let ((f39197
                      (lambda (a39094)
                        (let ((f39196
                               (lambda (a39095)
                                 (let ((f39195
                                        (lambda (a39096)
                                          (let ((f39194
                                                 (lambda (a39097)
                                                   (cons
                                                    kont39192
                                                    a39095
                                                    a39097))))
                                            (map f39194 proc a39096)))))
                                   (cdr f39195 lst)))))
                          (proc f39196 a39094)))))
                 (car f39197 lst))))))
      (null? f39198 lst)))
  (define (filter kont39199 op lst)
    (let ((f39207
           (lambda (a39098)
             (if a39098
               (let ((f39200 (lambda (x39099) (kont39199 x39099))))
                 (list f39200))
               (let ((f39206
                      (lambda (a39100)
                        (let ((f39205
                               (lambda (a39101)
                                 (if a39101
                                   (let ((f39203
                                          (lambda (a39102)
                                            (let ((f39202
                                                   (lambda (a39103)
                                                     (let ((f39201
                                                            (lambda (a39104)
                                                              (cons
                                                               kont39199
                                                               a39102
                                                               a39104))))
                                                       (filter
                                                        f39201
                                                        op
                                                        a39103)))))
                                              (cdr f39202 lst)))))
                                     (car f39203 lst))
                                   (let ((f39204
                                          (lambda (a39105)
                                            (filter kont39199 op a39105))))
                                     (cdr f39204 lst))))))
                          (op f39205 a39100)))))
                 (car f39206 lst))))))
      (null? f39207 lst)))
  (define (drop kont39208 lst n)
    (let ((a39106 '0))
      (let ((f39211
             (lambda (a39107)
               (if a39107
                 (kont39208 lst)
                 (let ((f39210
                        (lambda (a39108)
                          (let ((a39109 '1))
                            (let ((f39209
                                   (lambda (a39110)
                                     (drop kont39208 a39108 a39110))))
                              (- f39209 n a39109))))))
                   (cdr f39210 lst))))))
        (= f39211 n a39106))))
  (define (foldr kont39212 proc acc lst)
    (let ((f39216
           (lambda (a39111)
             (if a39111
               (kont39212 acc)
               (let ((f39215
                      (lambda (a39112)
                        (let ((f39214
                               (lambda (a39113)
                                 (let ((f39213
                                        (lambda (a39114)
                                          (proc kont39212 a39112 a39114))))
                                   (foldr f39213 proc acc a39113)))))
                          (cdr f39214 lst)))))
                 (car f39215 lst))))))
      (null? f39216 lst)))
  (define (append kont39217 lst1 lst2)
    (let ((f39221
           (lambda (a39115)
             (if a39115
               (kont39217 lst2)
               (let ((f39220
                      (lambda (a39116)
                        (let ((f39219
                               (lambda (a39117)
                                 (let ((f39218
                                        (lambda (a39118)
                                          (cons kont39217 a39116 a39118))))
                                   (append f39218 a39117 lst2)))))
                          (cdr f39219 lst1)))))
                 (car f39220 lst1))))))
      (null? f39221 lst1)))
  (define (hash . lst)
    (let ((kont39222 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x39119 (apply-prim hash lst))) (kont39222 x39119)))))
  (define (hash-ref kont39224 h k)
    (let ((x39120 (prim hash-ref h k))) (kont39224 x39120)))
  (define (hash-set kont39225 h k v)
    (let ((x39121 (prim hash-set h k v))) (kont39225 x39121)))
  (define (hash-has-key? kont39226 h k)
    (let ((x39122 (prim hash-has-key? h k))) (kont39226 x39122)))
  (define (hash-count kont39227 h)
    (let ((x39123 (prim hash-count h))) (kont39227 x39123)))
  (define (call kont39228)
    (let ((a39124 '100))
      (let ((a39125 '80))
        (let ((a39126 '10))
          (let ((a39127 '2))
            (let ((f39229
                   (lambda (a39128)
                     (let ((a39129 '5))
                       (hash-has-key? kont39228 a39128 a39129)))))
              (hash f39229 a39124 a39125 a39126 a39127)))))))
  (define (brouhaha_main kont39230)
    (let ((f39231 (lambda (x39130) (kont39230 x39130)))) (call f39231))))
