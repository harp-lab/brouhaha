'((define (+ . lst) (let ((x5730 (apply-prim + lst))) x5730))
  (define (- . lst) (let ((x5731 (apply-prim - lst))) x5731))
  (define (* . lst) (let ((x5732 (apply-prim * lst))) x5732))
  (define (modulo a b) (let ((x5733 (prim modulo a b))) x5733))
  (define (/ . lst) (let ((x5734 (apply-prim / lst))) x5734))
  (define (= . lst) (let ((x5735 (apply-prim = lst))) x5735))
  (define (> . lst) (let ((x5736 (apply-prim > lst))) x5736))
  (define (< . lst) (let ((x5737 (apply-prim < lst))) x5737))
  (define (<= . lst) (let ((x5738 (apply-prim <= lst))) x5738))
  (define (>= . lst) (let ((x5739 (apply-prim >= lst))) x5739))
  (define (null? x) (let ((x5740 (prim null? x))) x5740))
  (define (equal? x y) (let ((x5741 (prim equal? x y))) x5741))
  (define (eq? x y) (let ((x5742 (prim eq? x y))) x5742))
  (define (cons a b) (let ((x5743 (prim cons a b))) x5743))
  (define (car lst) (let ((x5744 (prim car lst))) x5744))
  (define (cdr lst) (let ((x5745 (prim cdr lst))) x5745))
  (define (even? x)
    (let ((a5746 '0))
      (let ((a5747 '2))
        (let ((a5748 (modulo x a5747))) (equal? a5746 a5748)))))
  (define (odd? x)
    (let ((a5749 '1))
      (let ((a5750 '2))
        (let ((a5751 (modulo x a5750))) (equal? a5749 a5751)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a5752 (null? lst)))
      (if a5752
        (let ((x5753 '#f)) x5753)
        (let ((a5754 (car lst)))
          (let ((a5755 (equal? a5754 x)))
            (if a5755
              (let ((x5756 '#t)) x5756)
              (let ((a5757 (cdr lst))) (member? x a5757))))))))
  (define (foldl fun acc lst)
    (let ((a5758 (null? lst)))
      (if a5758
        acc
        (let ((a5759 (car lst)))
          (let ((a5760 (fun a5759 acc)))
            (let ((a5761 (cdr lst))) (foldl fun a5760 a5761)))))))
  (define (reverse-helper lst lst2)
    (let ((a5762 (null? lst)))
      (if a5762
        lst2
        (let ((a5763 (cdr lst)))
          (let ((a5764 (car lst)))
            (let ((a5765 (cons a5764 lst2))) (reverse-helper a5763 a5765)))))))
  (define (reverse lst) (let ((a5766 (list))) (reverse-helper lst a5766)))
  (define (take-helper lst n lst2)
    (let ((a5767 '0))
      (let ((a5768 (= n a5767)))
        (if a5768
          (let ((x5769 (reverse lst2))) x5769)
          (let ((a5770 (cdr lst)))
            (let ((a5771 '1))
              (let ((a5772 (- n a5771)))
                (let ((a5773 (car lst)))
                  (let ((a5774 (cons a5773 lst2)))
                    (take-helper a5770 a5772 a5774))))))))))
  (define (take lst n) (let ((a5775 (list))) (take-helper lst n a5775)))
  (define (length lst)
    (let ((a5776 (null? lst)))
      (if a5776
        (let ((x5777 '0)) x5777)
        (let ((a5778 '1))
          (let ((a5779 (cdr lst)))
            (let ((a5780 (length a5779))) (+ a5778 a5780)))))))
  (define (map proc lst)
    (let ((a5781 (null? lst)))
      (if a5781
        (let ((x5782 (list))) x5782)
        (let ((a5783 (car lst)))
          (let ((a5784 (proc a5783)))
            (let ((a5785 (cdr lst)))
              (let ((a5786 (map proc a5785))) (cons a5784 a5786))))))))
  (define (filter op lst)
    (let ((a5787 (null? lst)))
      (if a5787
        (let ((x5788 (list))) x5788)
        (let ((a5789 (car lst)))
          (let ((a5790 (op a5789)))
            (if a5790
              (let ((a5791 (car lst)))
                (let ((a5792 (cdr lst)))
                  (let ((a5793 (filter op a5792))) (cons a5791 a5793))))
              (let ((a5794 (cdr lst))) (filter op a5794))))))))
  (define (drop lst n)
    (let ((a5795 '0))
      (let ((a5796 (= n a5795)))
        (if a5796
          lst
          (let ((a5797 (cdr lst)))
            (let ((a5798 '1))
              (let ((a5799 (- n a5798))) (drop a5797 a5799))))))))
  (define (foldr proc acc lst)
    (let ((a5800 (null? lst)))
      (if a5800
        acc
        (let ((a5801 (car lst)))
          (let ((a5802 (cdr lst)))
            (let ((a5803 (foldr proc acc a5802))) (proc a5801 a5803)))))))
  (define (append lst1 lst2)
    (let ((a5804 (null? lst1)))
      (if a5804
        lst2
        (let ((a5805 (car lst1)))
          (let ((a5806 (cdr lst1)))
            (let ((a5807 (append a5806 lst2))) (cons a5805 a5807)))))))
  (define (hash . lst) (let ((x5808 (apply-prim hash lst))) x5808))
  (define (hash-ref h k) (let ((x5809 (prim hash-ref h k))) x5809))
  (define (hash-set h k v) (let ((x5810 (prim hash-set h k v))) x5810))
  (define (hash-has-key? h k) (let ((x5811 (prim hash-has-key? h k))) x5811))
  (define (hash-count h) (let ((x5812 (prim hash-count h))) x5812))
  (define (call)
    (let ((a5813 '1))
      (let ((a5814 '1))
        (let ((a5815 (equal? a5813 a5814)))
          (if a5815
            (let ((a5816 '2))
              (let ((a5817 (even? a5816)))
                (if a5817
                  (let ((a5818 '2)) (odd? a5818))
                  (let ((x5819 '#f)) x5819))))
            (let ((x5820 '#f)) x5820))))))
  (define (brouhaha_main) (let ((x5821 (call))) x5821)))
