'((define (+ . lst) (let ((x5729 (apply-prim + lst))) x5729))
  (define (- . lst) (let ((x5730 (apply-prim - lst))) x5730))
  (define (* . lst) (let ((x5731 (apply-prim * lst))) x5731))
  (define (modulo a b) (let ((x5732 (prim modulo a b))) x5732))
  (define (/ . lst) (let ((x5733 (apply-prim / lst))) x5733))
  (define (= . lst) (let ((x5734 (apply-prim = lst))) x5734))
  (define (> . lst) (let ((x5735 (apply-prim > lst))) x5735))
  (define (< . lst) (let ((x5736 (apply-prim < lst))) x5736))
  (define (<= . lst) (let ((x5737 (apply-prim <= lst))) x5737))
  (define (>= . lst) (let ((x5738 (apply-prim >= lst))) x5738))
  (define (null? x) (let ((x5739 (prim null? x))) x5739))
  (define (equal? x y) (let ((x5740 (prim equal? x y))) x5740))
  (define (eq? x y) (let ((x5741 (prim eq? x y))) x5741))
  (define (cons a b) (let ((x5742 (prim cons a b))) x5742))
  (define (car lst) (let ((x5743 (prim car lst))) x5743))
  (define (cdr lst) (let ((x5744 (prim cdr lst))) x5744))
  (define (even? x)
    (let ((a5745 '0))
      (let ((a5746 '2))
        (let ((a5747 (modulo x a5746))) (equal? a5745 a5747)))))
  (define (odd? x)
    (let ((a5748 '1))
      (let ((a5749 '2))
        (let ((a5750 (modulo x a5749))) (equal? a5748 a5750)))))
  (define (list . x) x)
  (define (and . lst) (let ((x5751 (apply-prim and lst))) x5751))
  (define (or . lst) (let ((x5752 (apply-prim or lst))) x5752))
  (define (member? x lst)
    (let ((a5753 (null? lst)))
      (if a5753
        (let ((x5754 '#f)) x5754)
        (let ((a5755 (car lst)))
          (let ((a5756 (equal? a5755 x)))
            (if a5756
              (let ((x5757 '#t)) x5757)
              (let ((a5758 (cdr lst))) (member? x a5758))))))))
  (define (foldl fun acc lst)
    (let ((a5759 (null? lst)))
      (if a5759
        acc
        (let ((a5760 (car lst)))
          (let ((a5761 (fun a5760 acc)))
            (let ((a5762 (cdr lst))) (foldl fun a5761 a5762)))))))
  (define (reverse-helper lst lst2)
    (let ((a5763 (null? lst)))
      (if a5763
        lst2
        (let ((a5764 (cdr lst)))
          (let ((a5765 (car lst)))
            (let ((a5766 (cons a5765 lst2))) (reverse-helper a5764 a5766)))))))
  (define (reverse lst) (let ((a5767 (list))) (reverse-helper lst a5767)))
  (define (take-helper lst n lst2)
    (let ((a5768 '0))
      (let ((a5769 (= n a5768)))
        (if a5769
          (let ((x5770 (reverse lst2))) x5770)
          (let ((a5771 (cdr lst)))
            (let ((a5772 '1))
              (let ((a5773 (- n a5772)))
                (let ((a5774 (car lst)))
                  (let ((a5775 (cons a5774 lst2)))
                    (take-helper a5771 a5773 a5775))))))))))
  (define (take lst n) (let ((a5776 (list))) (take-helper lst n a5776)))
  (define (length lst)
    (let ((a5777 (null? lst)))
      (if a5777
        (let ((x5778 '0)) x5778)
        (let ((a5779 '1))
          (let ((a5780 (cdr lst)))
            (let ((a5781 (length a5780))) (+ a5779 a5781)))))))
  (define (map proc lst)
    (let ((a5782 (null? lst)))
      (if a5782
        (let ((x5783 (list))) x5783)
        (let ((a5784 (car lst)))
          (let ((a5785 (proc a5784)))
            (let ((a5786 (cdr lst)))
              (let ((a5787 (map proc a5786))) (cons a5785 a5787))))))))
  (define (filter op lst)
    (let ((a5788 (null? lst)))
      (if a5788
        (let ((x5789 (list))) x5789)
        (let ((a5790 (car lst)))
          (let ((a5791 (op a5790)))
            (if a5791
              (let ((a5792 (car lst)))
                (let ((a5793 (cdr lst)))
                  (let ((a5794 (filter op a5793))) (cons a5792 a5794))))
              (let ((a5795 (cdr lst))) (filter op a5795))))))))
  (define (drop lst n)
    (let ((a5796 '0))
      (let ((a5797 (= n a5796)))
        (if a5797
          lst
          (let ((a5798 (cdr lst)))
            (let ((a5799 '1))
              (let ((a5800 (- n a5799))) (drop a5798 a5800))))))))
  (define (foldr proc acc lst)
    (let ((a5801 (null? lst)))
      (if a5801
        acc
        (let ((a5802 (car lst)))
          (let ((a5803 (cdr lst)))
            (let ((a5804 (foldr proc acc a5803))) (proc a5802 a5804)))))))
  (define (append lst1 lst2)
    (let ((a5805 (null? lst1)))
      (if a5805
        lst2
        (let ((a5806 (car lst1)))
          (let ((a5807 (cdr lst1)))
            (let ((a5808 (append a5807 lst2))) (cons a5806 a5808)))))))
  (define (hash . lst) (let ((x5809 (apply-prim hash lst))) x5809))
  (define (hash-ref h k) (let ((x5810 (prim hash-ref h k))) x5810))
  (define (hash-set h k v) (let ((x5811 (prim hash-set h k v))) x5811))
  (define (hash-has-key? h k) (let ((x5812 (prim hash-has-key? h k))) x5812))
  (define (hash-count h) (let ((x5813 (prim hash-count h))) x5813))
  (define (call)
    (let ((a5814 '1))
      (let ((a5815 '1))
        (let ((a5816 (equal? a5814 a5815)))
          (if a5816
            (let ((a5817 '2))
              (let ((a5818 (even? a5817)))
                (if a5818
                  (let ((a5819 '2)) (odd? a5819))
                  (let ((x5820 '#f)) x5820))))
            (let ((x5821 '#f)) x5821))))))
  (define (brouhaha_main) (let ((x5822 (call))) x5822)))
