'((define (+ . lst) (let ((x5674 (apply-prim + lst))) x5674))
  (define (- . lst) (let ((x5675 (apply-prim - lst))) x5675))
  (define (* . lst) (let ((x5676 (apply-prim * lst))) x5676))
  (define (modulo a b) (let ((x5677 (prim modulo a b))) x5677))
  (define (/ . lst) (let ((x5678 (apply-prim / lst))) x5678))
  (define (= . lst) (let ((x5679 (apply-prim = lst))) x5679))
  (define (> . lst) (let ((x5680 (apply-prim > lst))) x5680))
  (define (< . lst) (let ((x5681 (apply-prim < lst))) x5681))
  (define (<= . lst) (let ((x5682 (apply-prim <= lst))) x5682))
  (define (>= . lst) (let ((x5683 (apply-prim >= lst))) x5683))
  (define (null? x) (let ((x5684 (prim null? x))) x5684))
  (define (equal? x y) (let ((x5685 (prim equal? x y))) x5685))
  (define (eq? x y) (let ((x5686 (prim eq? x y))) x5686))
  (define (cons a b) (let ((x5687 (prim cons a b))) x5687))
  (define (car lst) (let ((x5688 (prim car lst))) x5688))
  (define (cdr lst) (let ((x5689 (prim cdr lst))) x5689))
  (define (even? x)
    (let ((a5690 '0))
      (let ((a5691 '2))
        (let ((a5692 (modulo x a5691))) (equal? a5690 a5692)))))
  (define (odd? x)
    (let ((a5693 '1))
      (let ((a5694 '2))
        (let ((a5695 (modulo x a5694))) (equal? a5693 a5695)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a5696 (null? lst)))
      (if a5696
        (let ((x5697 '#f)) x5697)
        (let ((a5698 (car lst)))
          (let ((a5699 (equal? a5698 x)))
            (if a5699
              (let ((x5700 '#t)) x5700)
              (let ((a5701 (cdr lst))) (member? x a5701))))))))
  (define (foldl fun acc lst)
    (let ((a5702 (null? lst)))
      (if a5702
        acc
        (let ((a5703 (car lst)))
          (let ((a5704 (fun a5703 acc)))
            (let ((a5705 (cdr lst))) (foldl fun a5704 a5705)))))))
  (define (reverse-helper lst lst2)
    (let ((a5706 (null? lst)))
      (if a5706
        lst2
        (let ((a5707 (cdr lst)))
          (let ((a5708 (car lst)))
            (let ((a5709 (cons a5708 lst2))) (reverse-helper a5707 a5709)))))))
  (define (reverse lst) (let ((a5710 (list))) (reverse-helper lst a5710)))
  (define (take-helper lst n lst2)
    (let ((a5711 '0))
      (let ((a5712 (= n a5711)))
        (if a5712
          (let ((x5713 (reverse lst2))) x5713)
          (let ((a5714 (cdr lst)))
            (let ((a5715 '1))
              (let ((a5716 (- n a5715)))
                (let ((a5717 (car lst)))
                  (let ((a5718 (cons a5717 lst2)))
                    (take-helper a5714 a5716 a5718))))))))))
  (define (take lst n) (let ((a5719 (list))) (take-helper lst n a5719)))
  (define (length lst)
    (let ((a5720 (null? lst)))
      (if a5720
        (let ((x5721 '0)) x5721)
        (let ((a5722 '1))
          (let ((a5723 (cdr lst)))
            (let ((a5724 (length a5723))) (+ a5722 a5724)))))))
  (define (map proc lst)
    (let ((a5725 (null? lst)))
      (if a5725
        (let ((x5726 (list))) x5726)
        (let ((a5727 (car lst)))
          (let ((a5728 (proc a5727)))
            (let ((a5729 (cdr lst)))
              (let ((a5730 (map proc a5729))) (cons a5728 a5730))))))))
  (define (filter op lst)
    (let ((a5731 (null? lst)))
      (if a5731
        (let ((x5732 (list))) x5732)
        (let ((a5733 (car lst)))
          (let ((a5734 (op a5733)))
            (if a5734
              (let ((a5735 (car lst)))
                (let ((a5736 (cdr lst)))
                  (let ((a5737 (filter op a5736))) (cons a5735 a5737))))
              (let ((a5738 (cdr lst))) (filter op a5738))))))))
  (define (drop lst n)
    (let ((a5739 '0))
      (let ((a5740 (= n a5739)))
        (if a5740
          lst
          (let ((a5741 (cdr lst)))
            (let ((a5742 '1))
              (let ((a5743 (- n a5742))) (drop a5741 a5743))))))))
  (define (foldr proc acc lst)
    (let ((a5744 (null? lst)))
      (if a5744
        acc
        (let ((a5745 (car lst)))
          (let ((a5746 (cdr lst)))
            (let ((a5747 (foldr proc acc a5746))) (proc a5745 a5747)))))))
  (define (append lst1 lst2)
    (let ((a5748 (null? lst1)))
      (if a5748
        lst2
        (let ((a5749 (car lst1)))
          (let ((a5750 (cdr lst1)))
            (let ((a5751 (append a5750 lst2))) (cons a5749 a5751)))))))
  (define (hash . lst) (let ((x5752 (apply-prim hash lst))) x5752))
  (define (hash-ref h k) (let ((x5753 (prim hash-ref h k))) x5753))
  (define (hash-set h k v) (let ((x5754 (prim hash-set h k v))) x5754))
  (define (hash-has-key? h k) (let ((x5755 (prim hash-has-key? h k))) x5755))
  (define (hash-count h) (let ((x5756 (prim hash-count h))) x5756))
  (define (call)
    (let ((a5757 '1))
      (let ((a5758 '1))
        (let ((a5759 (equal? a5757 a5758)))
          (if a5759
            (let ((a5760 '2))
              (let ((a5761 (even? a5760)))
                (if a5761
                  (let ((a5762 '2)) (odd? a5762))
                  (let ((x5763 '#f)) x5763))))
            (let ((x5764 '#f)) x5764))))))
  (define (brouhaha_main) (let ((x5765 (call))) x5765)))
