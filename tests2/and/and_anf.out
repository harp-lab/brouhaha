'((define (+ . lst)
    (let ((kont5766 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5674 (apply-prim + lst))) (kont5766 x5674)))))
  (define (- . lst)
    (let ((kont5768 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5675 (apply-prim - lst))) (kont5768 x5675)))))
  (define (* . lst)
    (let ((kont5770 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5676 (apply-prim * lst))) (kont5770 x5676)))))
  (define (modulo kont5772 a b)
    (let ((x5677 (prim modulo a b))) (kont5772 x5677)))
  (define (/ . lst)
    (let ((kont5773 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5678 (apply-prim / lst))) (kont5773 x5678)))))
  (define (= . lst)
    (let ((kont5775 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5679 (apply-prim = lst))) (kont5775 x5679)))))
  (define (> . lst)
    (let ((kont5777 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5680 (apply-prim > lst))) (kont5777 x5680)))))
  (define (< . lst)
    (let ((kont5779 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5681 (apply-prim < lst))) (kont5779 x5681)))))
  (define (<= . lst)
    (let ((kont5781 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5682 (apply-prim <= lst))) (kont5781 x5682)))))
  (define (>= . lst)
    (let ((kont5783 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5683 (apply-prim >= lst))) (kont5783 x5683)))))
  (define (null? kont5785 x) (let ((x5684 (prim null? x))) (kont5785 x5684)))
  (define (equal? kont5786 x y)
    (let ((x5685 (prim equal? x y))) (kont5786 x5685)))
  (define (eq? kont5787 x y) (let ((x5686 (prim eq? x y))) (kont5787 x5686)))
  (define (cons kont5788 a b) (let ((x5687 (prim cons a b))) (kont5788 x5687)))
  (define (car kont5789 lst) (let ((x5688 (prim car lst))) (kont5789 x5688)))
  (define (cdr kont5790 lst) (let ((x5689 (prim cdr lst))) (kont5790 x5689)))
  (define (even? kont5791 x)
    (let ((a5690 '0))
      (let ((a5691 '2))
        (let ((f5792 (lambda (a5692) (equal? kont5791 a5690 a5692))))
          (modulo f5792 x a5691)))))
  (define (odd? kont5793 x)
    (let ((a5693 '1))
      (let ((a5694 '2))
        (let ((f5794 (lambda (a5695) (equal? kont5793 a5693 a5695))))
          (modulo f5794 x a5694)))))
  (define (list . x)
    (let ((kont5795 (prim car x))) (let ((x (prim cdr x))) (kont5795 x))))
  (define (member? kont5797 x lst)
    (let ((f5801
           (lambda (a5696)
             (if a5696
               (let ((x5697 '#f)) (kont5797 x5697))
               (let ((f5800
                      (lambda (a5698)
                        (let ((f5799
                               (lambda (a5699)
                                 (if a5699
                                   (let ((x5700 '#t)) (kont5797 x5700))
                                   (let ((f5798
                                          (lambda (a5701)
                                            (member? kont5797 x a5701))))
                                     (cdr f5798 lst))))))
                          (equal? f5799 a5698 x)))))
                 (car f5800 lst))))))
      (null? f5801 lst)))
  (define (foldl kont5802 fun acc lst)
    (let ((f5806
           (lambda (a5702)
             (if a5702
               (kont5802 acc)
               (let ((f5805
                      (lambda (a5703)
                        (let ((f5804
                               (lambda (a5704)
                                 (let ((f5803
                                        (lambda (a5705)
                                          (foldl kont5802 fun a5704 a5705))))
                                   (cdr f5803 lst)))))
                          (fun f5804 a5703 acc)))))
                 (car f5805 lst))))))
      (null? f5806 lst)))
  (define (reverse-helper kont5807 lst lst2)
    (let ((f5811
           (lambda (a5706)
             (if a5706
               (kont5807 lst2)
               (let ((f5810
                      (lambda (a5707)
                        (let ((f5809
                               (lambda (a5708)
                                 (let ((f5808
                                        (lambda (a5709)
                                          (reverse-helper
                                           kont5807
                                           a5707
                                           a5709))))
                                   (cons f5808 a5708 lst2)))))
                          (car f5809 lst)))))
                 (cdr f5810 lst))))))
      (null? f5811 lst)))
  (define (reverse kont5812 lst)
    (let ((f5813 (lambda (a5710) (reverse-helper kont5812 lst a5710))))
      (list f5813)))
  (define (take-helper kont5814 lst n lst2)
    (let ((a5711 '0))
      (let ((f5820
             (lambda (a5712)
               (if a5712
                 (let ((f5815 (lambda (x5713) (kont5814 x5713))))
                   (reverse f5815 lst2))
                 (let ((f5819
                        (lambda (a5714)
                          (let ((a5715 '1))
                            (let ((f5818
                                   (lambda (a5716)
                                     (let ((f5817
                                            (lambda (a5717)
                                              (let ((f5816
                                                     (lambda (a5718)
                                                       (take-helper
                                                        kont5814
                                                        a5714
                                                        a5716
                                                        a5718))))
                                                (cons f5816 a5717 lst2)))))
                                       (car f5817 lst)))))
                              (- f5818 n a5715))))))
                   (cdr f5819 lst))))))
        (= f5820 n a5711))))
  (define (take kont5821 lst n)
    (let ((f5822 (lambda (a5719) (take-helper kont5821 lst n a5719))))
      (list f5822)))
  (define (length kont5823 lst)
    (let ((f5826
           (lambda (a5720)
             (if a5720
               (let ((x5721 '0)) (kont5823 x5721))
               (let ((a5722 '1))
                 (let ((f5825
                        (lambda (a5723)
                          (let ((f5824
                                 (lambda (a5724) (+ kont5823 a5722 a5724))))
                            (length f5824 a5723)))))
                   (cdr f5825 lst)))))))
      (null? f5826 lst)))
  (define (map kont5827 proc lst)
    (let ((f5833
           (lambda (a5725)
             (if a5725
               (let ((f5828 (lambda (x5726) (kont5827 x5726)))) (list f5828))
               (let ((f5832
                      (lambda (a5727)
                        (let ((f5831
                               (lambda (a5728)
                                 (let ((f5830
                                        (lambda (a5729)
                                          (let ((f5829
                                                 (lambda (a5730)
                                                   (cons
                                                    kont5827
                                                    a5728
                                                    a5730))))
                                            (map f5829 proc a5729)))))
                                   (cdr f5830 lst)))))
                          (proc f5831 a5727)))))
                 (car f5832 lst))))))
      (null? f5833 lst)))
  (define (filter kont5834 op lst)
    (let ((f5842
           (lambda (a5731)
             (if a5731
               (let ((f5835 (lambda (x5732) (kont5834 x5732)))) (list f5835))
               (let ((f5841
                      (lambda (a5733)
                        (let ((f5840
                               (lambda (a5734)
                                 (if a5734
                                   (let ((f5838
                                          (lambda (a5735)
                                            (let ((f5837
                                                   (lambda (a5736)
                                                     (let ((f5836
                                                            (lambda (a5737)
                                                              (cons
                                                               kont5834
                                                               a5735
                                                               a5737))))
                                                       (filter
                                                        f5836
                                                        op
                                                        a5736)))))
                                              (cdr f5837 lst)))))
                                     (car f5838 lst))
                                   (let ((f5839
                                          (lambda (a5738)
                                            (filter kont5834 op a5738))))
                                     (cdr f5839 lst))))))
                          (op f5840 a5733)))))
                 (car f5841 lst))))))
      (null? f5842 lst)))
  (define (drop kont5843 lst n)
    (let ((a5739 '0))
      (let ((f5846
             (lambda (a5740)
               (if a5740
                 (kont5843 lst)
                 (let ((f5845
                        (lambda (a5741)
                          (let ((a5742 '1))
                            (let ((f5844
                                   (lambda (a5743)
                                     (drop kont5843 a5741 a5743))))
                              (- f5844 n a5742))))))
                   (cdr f5845 lst))))))
        (= f5846 n a5739))))
  (define (foldr kont5847 proc acc lst)
    (let ((f5851
           (lambda (a5744)
             (if a5744
               (kont5847 acc)
               (let ((f5850
                      (lambda (a5745)
                        (let ((f5849
                               (lambda (a5746)
                                 (let ((f5848
                                        (lambda (a5747)
                                          (proc kont5847 a5745 a5747))))
                                   (foldr f5848 proc acc a5746)))))
                          (cdr f5849 lst)))))
                 (car f5850 lst))))))
      (null? f5851 lst)))
  (define (append kont5852 lst1 lst2)
    (let ((f5856
           (lambda (a5748)
             (if a5748
               (kont5852 lst2)
               (let ((f5855
                      (lambda (a5749)
                        (let ((f5854
                               (lambda (a5750)
                                 (let ((f5853
                                        (lambda (a5751)
                                          (cons kont5852 a5749 a5751))))
                                   (append f5853 a5750 lst2)))))
                          (cdr f5854 lst1)))))
                 (car f5855 lst1))))))
      (null? f5856 lst1)))
  (define (hash . lst)
    (let ((kont5857 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5752 (apply-prim hash lst))) (kont5857 x5752)))))
  (define (hash-ref kont5859 h k)
    (let ((x5753 (prim hash-ref h k))) (kont5859 x5753)))
  (define (hash-set kont5860 h k v)
    (let ((x5754 (prim hash-set h k v))) (kont5860 x5754)))
  (define (hash-has-key? kont5861 h k)
    (let ((x5755 (prim hash-has-key? h k))) (kont5861 x5755)))
  (define (hash-count kont5862 h)
    (let ((x5756 (prim hash-count h))) (kont5862 x5756)))
  (define (call kont5863)
    (let ((a5757 '1))
      (let ((a5758 '1))
        (let ((f5865
               (lambda (a5759)
                 (if a5759
                   (let ((a5760 '2))
                     (let ((f5864
                            (lambda (a5761)
                              (if a5761
                                (let ((a5762 '2)) (odd? kont5863 a5762))
                                (let ((x5763 '#f)) (kont5863 x5763))))))
                       (even? f5864 a5760)))
                   (let ((x5764 '#f)) (kont5863 x5764))))))
          (equal? f5865 a5757 a5758)))))
  (define (brouhaha_main kont5866)
    (let ((f5867 (lambda (x5765) (kont5866 x5765)))) (call f5867))))
