'((define (+ . lst)
    (let ((kont5826 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5734 (apply-prim + lst))) (kont5826 x5734)))))
  (define (- . lst)
    (let ((kont5828 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5735 (apply-prim - lst))) (kont5828 x5735)))))
  (define (* . lst)
    (let ((kont5830 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5736 (apply-prim * lst))) (kont5830 x5736)))))
  (define (modulo kont5832 a b)
    (let ((x5737 (prim modulo a b))) (kont5832 x5737)))
  (define (/ . lst)
    (let ((kont5833 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5738 (apply-prim / lst))) (kont5833 x5738)))))
  (define (= . lst)
    (let ((kont5835 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5739 (apply-prim = lst))) (kont5835 x5739)))))
  (define (> . lst)
    (let ((kont5837 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5740 (apply-prim > lst))) (kont5837 x5740)))))
  (define (< . lst)
    (let ((kont5839 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5741 (apply-prim < lst))) (kont5839 x5741)))))
  (define (<= . lst)
    (let ((kont5841 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5742 (apply-prim <= lst))) (kont5841 x5742)))))
  (define (>= . lst)
    (let ((kont5843 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5743 (apply-prim >= lst))) (kont5843 x5743)))))
  (define (null? kont5845 x) (let ((x5744 (prim null? x))) (kont5845 x5744)))
  (define (equal? kont5846 x y)
    (let ((x5745 (prim equal? x y))) (kont5846 x5745)))
  (define (eq? kont5847 x y) (let ((x5746 (prim eq? x y))) (kont5847 x5746)))
  (define (cons kont5848 a b) (let ((x5747 (prim cons a b))) (kont5848 x5747)))
  (define (car kont5849 lst) (let ((x5748 (prim car lst))) (kont5849 x5748)))
  (define (cdr kont5850 lst) (let ((x5749 (prim cdr lst))) (kont5850 x5749)))
  (define (even? kont5851 x)
    (let ((a5750 '0))
      (let ((a5751 '2))
        (let ((f5852 (lambda (a5752) (equal? kont5851 a5750 a5752))))
          (modulo f5852 x a5751)))))
  (define (odd? kont5853 x)
    (let ((a5753 '1))
      (let ((a5754 '2))
        (let ((f5854 (lambda (a5755) (equal? kont5853 a5753 a5755))))
          (modulo f5854 x a5754)))))
  (define (list . x)
    (let ((kont5855 (prim car x))) (let ((x (prim cdr x))) (kont5855 x))))
  (define (member? kont5857 x lst)
    (let ((f5861
           (lambda (a5756)
             (if a5756
               (let ((x5757 '#f)) (kont5857 x5757))
               (let ((f5860
                      (lambda (a5758)
                        (let ((f5859
                               (lambda (a5759)
                                 (if a5759
                                   (let ((x5760 '#t)) (kont5857 x5760))
                                   (let ((f5858
                                          (lambda (a5761)
                                            (member? kont5857 x a5761))))
                                     (cdr f5858 lst))))))
                          (equal? f5859 a5758 x)))))
                 (car f5860 lst))))))
      (null? f5861 lst)))
  (define (foldl kont5862 fun acc lst)
    (let ((f5866
           (lambda (a5762)
             (if a5762
               (kont5862 acc)
               (let ((f5865
                      (lambda (a5763)
                        (let ((f5864
                               (lambda (a5764)
                                 (let ((f5863
                                        (lambda (a5765)
                                          (foldl kont5862 fun a5764 a5765))))
                                   (cdr f5863 lst)))))
                          (fun f5864 a5763 acc)))))
                 (car f5865 lst))))))
      (null? f5866 lst)))
  (define (reverse-helper kont5867 lst lst2)
    (let ((f5871
           (lambda (a5766)
             (if a5766
               (kont5867 lst2)
               (let ((f5870
                      (lambda (a5767)
                        (let ((f5869
                               (lambda (a5768)
                                 (let ((f5868
                                        (lambda (a5769)
                                          (reverse-helper
                                           kont5867
                                           a5767
                                           a5769))))
                                   (cons f5868 a5768 lst2)))))
                          (car f5869 lst)))))
                 (cdr f5870 lst))))))
      (null? f5871 lst)))
  (define (reverse kont5872 lst)
    (let ((f5873 (lambda (a5770) (reverse-helper kont5872 lst a5770))))
      (list f5873)))
  (define (take-helper kont5874 lst n lst2)
    (let ((a5771 '0))
      (let ((f5880
             (lambda (a5772)
               (if a5772
                 (let ((f5875 (lambda (x5773) (kont5874 x5773))))
                   (reverse f5875 lst2))
                 (let ((f5879
                        (lambda (a5774)
                          (let ((a5775 '1))
                            (let ((f5878
                                   (lambda (a5776)
                                     (let ((f5877
                                            (lambda (a5777)
                                              (let ((f5876
                                                     (lambda (a5778)
                                                       (take-helper
                                                        kont5874
                                                        a5774
                                                        a5776
                                                        a5778))))
                                                (cons f5876 a5777 lst2)))))
                                       (car f5877 lst)))))
                              (- f5878 n a5775))))))
                   (cdr f5879 lst))))))
        (= f5880 n a5771))))
  (define (take kont5881 lst n)
    (let ((f5882 (lambda (a5779) (take-helper kont5881 lst n a5779))))
      (list f5882)))
  (define (length kont5883 lst)
    (let ((f5886
           (lambda (a5780)
             (if a5780
               (let ((x5781 '0)) (kont5883 x5781))
               (let ((a5782 '1))
                 (let ((f5885
                        (lambda (a5783)
                          (let ((f5884
                                 (lambda (a5784) (+ kont5883 a5782 a5784))))
                            (length f5884 a5783)))))
                   (cdr f5885 lst)))))))
      (null? f5886 lst)))
  (define (map kont5887 proc lst)
    (let ((f5893
           (lambda (a5785)
             (if a5785
               (let ((f5888 (lambda (x5786) (kont5887 x5786)))) (list f5888))
               (let ((f5892
                      (lambda (a5787)
                        (let ((f5891
                               (lambda (a5788)
                                 (let ((f5890
                                        (lambda (a5789)
                                          (let ((f5889
                                                 (lambda (a5790)
                                                   (cons
                                                    kont5887
                                                    a5788
                                                    a5790))))
                                            (map f5889 proc a5789)))))
                                   (cdr f5890 lst)))))
                          (proc f5891 a5787)))))
                 (car f5892 lst))))))
      (null? f5893 lst)))
  (define (filter kont5894 op lst)
    (let ((f5902
           (lambda (a5791)
             (if a5791
               (let ((f5895 (lambda (x5792) (kont5894 x5792)))) (list f5895))
               (let ((f5901
                      (lambda (a5793)
                        (let ((f5900
                               (lambda (a5794)
                                 (if a5794
                                   (let ((f5898
                                          (lambda (a5795)
                                            (let ((f5897
                                                   (lambda (a5796)
                                                     (let ((f5896
                                                            (lambda (a5797)
                                                              (cons
                                                               kont5894
                                                               a5795
                                                               a5797))))
                                                       (filter
                                                        f5896
                                                        op
                                                        a5796)))))
                                              (cdr f5897 lst)))))
                                     (car f5898 lst))
                                   (let ((f5899
                                          (lambda (a5798)
                                            (filter kont5894 op a5798))))
                                     (cdr f5899 lst))))))
                          (op f5900 a5793)))))
                 (car f5901 lst))))))
      (null? f5902 lst)))
  (define (drop kont5903 lst n)
    (let ((a5799 '0))
      (let ((f5906
             (lambda (a5800)
               (if a5800
                 (kont5903 lst)
                 (let ((f5905
                        (lambda (a5801)
                          (let ((a5802 '1))
                            (let ((f5904
                                   (lambda (a5803)
                                     (drop kont5903 a5801 a5803))))
                              (- f5904 n a5802))))))
                   (cdr f5905 lst))))))
        (= f5906 n a5799))))
  (define (foldr kont5907 proc acc lst)
    (let ((f5911
           (lambda (a5804)
             (if a5804
               (kont5907 acc)
               (let ((f5910
                      (lambda (a5805)
                        (let ((f5909
                               (lambda (a5806)
                                 (let ((f5908
                                        (lambda (a5807)
                                          (proc kont5907 a5805 a5807))))
                                   (foldr f5908 proc acc a5806)))))
                          (cdr f5909 lst)))))
                 (car f5910 lst))))))
      (null? f5911 lst)))
  (define (append kont5912 lst1 lst2)
    (let ((f5916
           (lambda (a5808)
             (if a5808
               (kont5912 lst2)
               (let ((f5915
                      (lambda (a5809)
                        (let ((f5914
                               (lambda (a5810)
                                 (let ((f5913
                                        (lambda (a5811)
                                          (cons kont5912 a5809 a5811))))
                                   (append f5913 a5810 lst2)))))
                          (cdr f5914 lst1)))))
                 (car f5915 lst1))))))
      (null? f5916 lst1)))
  (define (hash . lst)
    (let ((kont5917 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5812 (apply-prim hash lst))) (kont5917 x5812)))))
  (define (hash-ref kont5919 h k)
    (let ((x5813 (prim hash-ref h k))) (kont5919 x5813)))
  (define (hash-set kont5920 h k v)
    (let ((x5814 (prim hash-set h k v))) (kont5920 x5814)))
  (define (hash-has-key? kont5921 h k)
    (let ((x5815 (prim hash-has-key? h k))) (kont5921 x5815)))
  (define (hash-count kont5922 h)
    (let ((x5816 (prim hash-count h))) (kont5922 x5816)))
  (define (call kont5923)
    (let ((a5817 '1))
      (let ((a5818 '1))
        (let ((f5925
               (lambda (a5819)
                 (if a5819
                   (let ((a5820 '2))
                     (let ((f5924
                            (lambda (a5821)
                              (if a5821
                                (let ((a5822 '2)) (odd? kont5923 a5822))
                                (let ((x5823 '#f)) (kont5923 x5823))))))
                       (even? f5924 a5820)))
                   (let ((x5824 '#f)) (kont5923 x5824))))))
          (equal? f5925 a5817 a5818)))))
  (define (brouhaha_main kont5926)
    (let ((f5927 (lambda (x5825) (kont5926 x5825)))) (call f5927))))
