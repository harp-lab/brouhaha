'((define (+ . lst)
    (let ((kont5822 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5730 (apply-prim + lst))) (kont5822 x5730)))))
  (define (- . lst)
    (let ((kont5824 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5731 (apply-prim - lst))) (kont5824 x5731)))))
  (define (* . lst)
    (let ((kont5826 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5732 (apply-prim * lst))) (kont5826 x5732)))))
  (define (modulo kont5828 a b)
    (let ((x5733 (prim modulo a b))) (kont5828 x5733)))
  (define (/ . lst)
    (let ((kont5829 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5734 (apply-prim / lst))) (kont5829 x5734)))))
  (define (= . lst)
    (let ((kont5831 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5735 (apply-prim = lst))) (kont5831 x5735)))))
  (define (> . lst)
    (let ((kont5833 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5736 (apply-prim > lst))) (kont5833 x5736)))))
  (define (< . lst)
    (let ((kont5835 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5737 (apply-prim < lst))) (kont5835 x5737)))))
  (define (<= . lst)
    (let ((kont5837 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5738 (apply-prim <= lst))) (kont5837 x5738)))))
  (define (>= . lst)
    (let ((kont5839 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5739 (apply-prim >= lst))) (kont5839 x5739)))))
  (define (null? kont5841 x) (let ((x5740 (prim null? x))) (kont5841 x5740)))
  (define (equal? kont5842 x y)
    (let ((x5741 (prim equal? x y))) (kont5842 x5741)))
  (define (eq? kont5843 x y) (let ((x5742 (prim eq? x y))) (kont5843 x5742)))
  (define (cons kont5844 a b) (let ((x5743 (prim cons a b))) (kont5844 x5743)))
  (define (car kont5845 lst) (let ((x5744 (prim car lst))) (kont5845 x5744)))
  (define (cdr kont5846 lst) (let ((x5745 (prim cdr lst))) (kont5846 x5745)))
  (define (even? kont5847 x)
    (let ((a5746 '0))
      (let ((a5747 '2))
        (let ((f5848 (lambda (a5748) (equal? kont5847 a5746 a5748))))
          (modulo f5848 x a5747)))))
  (define (odd? kont5849 x)
    (let ((a5749 '1))
      (let ((a5750 '2))
        (let ((f5850 (lambda (a5751) (equal? kont5849 a5749 a5751))))
          (modulo f5850 x a5750)))))
  (define (list . x)
    (let ((kont5851 (prim car x))) (let ((x (prim cdr x))) (kont5851 x))))
  (define (member? kont5853 x lst)
    (let ((f5857
           (lambda (a5752)
             (if a5752
               (let ((x5753 '#f)) (kont5853 x5753))
               (let ((f5856
                      (lambda (a5754)
                        (let ((f5855
                               (lambda (a5755)
                                 (if a5755
                                   (let ((x5756 '#t)) (kont5853 x5756))
                                   (let ((f5854
                                          (lambda (a5757)
                                            (member? kont5853 x a5757))))
                                     (cdr f5854 lst))))))
                          (equal? f5855 a5754 x)))))
                 (car f5856 lst))))))
      (null? f5857 lst)))
  (define (foldl kont5858 fun acc lst)
    (let ((f5862
           (lambda (a5758)
             (if a5758
               (kont5858 acc)
               (let ((f5861
                      (lambda (a5759)
                        (let ((f5860
                               (lambda (a5760)
                                 (let ((f5859
                                        (lambda (a5761)
                                          (foldl kont5858 fun a5760 a5761))))
                                   (cdr f5859 lst)))))
                          (fun f5860 a5759 acc)))))
                 (car f5861 lst))))))
      (null? f5862 lst)))
  (define (reverse-helper kont5863 lst lst2)
    (let ((f5867
           (lambda (a5762)
             (if a5762
               (kont5863 lst2)
               (let ((f5866
                      (lambda (a5763)
                        (let ((f5865
                               (lambda (a5764)
                                 (let ((f5864
                                        (lambda (a5765)
                                          (reverse-helper
                                           kont5863
                                           a5763
                                           a5765))))
                                   (cons f5864 a5764 lst2)))))
                          (car f5865 lst)))))
                 (cdr f5866 lst))))))
      (null? f5867 lst)))
  (define (reverse kont5868 lst)
    (let ((f5869 (lambda (a5766) (reverse-helper kont5868 lst a5766))))
      (list f5869)))
  (define (take-helper kont5870 lst n lst2)
    (let ((a5767 '0))
      (let ((f5876
             (lambda (a5768)
               (if a5768
                 (let ((f5871 (lambda (x5769) (kont5870 x5769))))
                   (reverse f5871 lst2))
                 (let ((f5875
                        (lambda (a5770)
                          (let ((a5771 '1))
                            (let ((f5874
                                   (lambda (a5772)
                                     (let ((f5873
                                            (lambda (a5773)
                                              (let ((f5872
                                                     (lambda (a5774)
                                                       (take-helper
                                                        kont5870
                                                        a5770
                                                        a5772
                                                        a5774))))
                                                (cons f5872 a5773 lst2)))))
                                       (car f5873 lst)))))
                              (- f5874 n a5771))))))
                   (cdr f5875 lst))))))
        (= f5876 n a5767))))
  (define (take kont5877 lst n)
    (let ((f5878 (lambda (a5775) (take-helper kont5877 lst n a5775))))
      (list f5878)))
  (define (length kont5879 lst)
    (let ((f5882
           (lambda (a5776)
             (if a5776
               (let ((x5777 '0)) (kont5879 x5777))
               (let ((a5778 '1))
                 (let ((f5881
                        (lambda (a5779)
                          (let ((f5880
                                 (lambda (a5780) (+ kont5879 a5778 a5780))))
                            (length f5880 a5779)))))
                   (cdr f5881 lst)))))))
      (null? f5882 lst)))
  (define (map kont5883 proc lst)
    (let ((f5889
           (lambda (a5781)
             (if a5781
               (let ((f5884 (lambda (x5782) (kont5883 x5782)))) (list f5884))
               (let ((f5888
                      (lambda (a5783)
                        (let ((f5887
                               (lambda (a5784)
                                 (let ((f5886
                                        (lambda (a5785)
                                          (let ((f5885
                                                 (lambda (a5786)
                                                   (cons
                                                    kont5883
                                                    a5784
                                                    a5786))))
                                            (map f5885 proc a5785)))))
                                   (cdr f5886 lst)))))
                          (proc f5887 a5783)))))
                 (car f5888 lst))))))
      (null? f5889 lst)))
  (define (filter kont5890 op lst)
    (let ((f5898
           (lambda (a5787)
             (if a5787
               (let ((f5891 (lambda (x5788) (kont5890 x5788)))) (list f5891))
               (let ((f5897
                      (lambda (a5789)
                        (let ((f5896
                               (lambda (a5790)
                                 (if a5790
                                   (let ((f5894
                                          (lambda (a5791)
                                            (let ((f5893
                                                   (lambda (a5792)
                                                     (let ((f5892
                                                            (lambda (a5793)
                                                              (cons
                                                               kont5890
                                                               a5791
                                                               a5793))))
                                                       (filter
                                                        f5892
                                                        op
                                                        a5792)))))
                                              (cdr f5893 lst)))))
                                     (car f5894 lst))
                                   (let ((f5895
                                          (lambda (a5794)
                                            (filter kont5890 op a5794))))
                                     (cdr f5895 lst))))))
                          (op f5896 a5789)))))
                 (car f5897 lst))))))
      (null? f5898 lst)))
  (define (drop kont5899 lst n)
    (let ((a5795 '0))
      (let ((f5902
             (lambda (a5796)
               (if a5796
                 (kont5899 lst)
                 (let ((f5901
                        (lambda (a5797)
                          (let ((a5798 '1))
                            (let ((f5900
                                   (lambda (a5799)
                                     (drop kont5899 a5797 a5799))))
                              (- f5900 n a5798))))))
                   (cdr f5901 lst))))))
        (= f5902 n a5795))))
  (define (foldr kont5903 proc acc lst)
    (let ((f5907
           (lambda (a5800)
             (if a5800
               (kont5903 acc)
               (let ((f5906
                      (lambda (a5801)
                        (let ((f5905
                               (lambda (a5802)
                                 (let ((f5904
                                        (lambda (a5803)
                                          (proc kont5903 a5801 a5803))))
                                   (foldr f5904 proc acc a5802)))))
                          (cdr f5905 lst)))))
                 (car f5906 lst))))))
      (null? f5907 lst)))
  (define (append kont5908 lst1 lst2)
    (let ((f5912
           (lambda (a5804)
             (if a5804
               (kont5908 lst2)
               (let ((f5911
                      (lambda (a5805)
                        (let ((f5910
                               (lambda (a5806)
                                 (let ((f5909
                                        (lambda (a5807)
                                          (cons kont5908 a5805 a5807))))
                                   (append f5909 a5806 lst2)))))
                          (cdr f5910 lst1)))))
                 (car f5911 lst1))))))
      (null? f5912 lst1)))
  (define (hash . lst)
    (let ((kont5913 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5808 (apply-prim hash lst))) (kont5913 x5808)))))
  (define (hash-ref kont5915 h k)
    (let ((x5809 (prim hash-ref h k))) (kont5915 x5809)))
  (define (hash-set kont5916 h k v)
    (let ((x5810 (prim hash-set h k v))) (kont5916 x5810)))
  (define (hash-has-key? kont5917 h k)
    (let ((x5811 (prim hash-has-key? h k))) (kont5917 x5811)))
  (define (hash-count kont5918 h)
    (let ((x5812 (prim hash-count h))) (kont5918 x5812)))
  (define (call kont5919)
    (let ((a5813 '1))
      (let ((a5814 '1))
        (let ((f5921
               (lambda (a5815)
                 (if a5815
                   (let ((a5816 '2))
                     (let ((f5920
                            (lambda (a5817)
                              (if a5817
                                (let ((a5818 '2)) (odd? kont5919 a5818))
                                (let ((x5819 '#f)) (kont5919 x5819))))))
                       (even? f5920 a5816)))
                   (let ((x5820 '#f)) (kont5919 x5820))))))
          (equal? f5921 a5813 a5814)))))
  (define (brouhaha_main kont5922)
    (let ((f5923 (lambda (x5821) (kont5922 x5821)))) (call f5923))))
