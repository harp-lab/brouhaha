'((define (+ . lst)
    (let ((kont5823 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5729 (apply-prim + lst))) (kont5823 x5729)))))
  (define (- . lst)
    (let ((kont5825 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5730 (apply-prim - lst))) (kont5825 x5730)))))
  (define (* . lst)
    (let ((kont5827 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5731 (apply-prim * lst))) (kont5827 x5731)))))
  (define (modulo kont5829 a b)
    (let ((x5732 (prim modulo a b))) (kont5829 x5732)))
  (define (/ . lst)
    (let ((kont5830 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5733 (apply-prim / lst))) (kont5830 x5733)))))
  (define (= . lst)
    (let ((kont5832 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5734 (apply-prim = lst))) (kont5832 x5734)))))
  (define (> . lst)
    (let ((kont5834 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5735 (apply-prim > lst))) (kont5834 x5735)))))
  (define (< . lst)
    (let ((kont5836 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5736 (apply-prim < lst))) (kont5836 x5736)))))
  (define (<= . lst)
    (let ((kont5838 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5737 (apply-prim <= lst))) (kont5838 x5737)))))
  (define (>= . lst)
    (let ((kont5840 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5738 (apply-prim >= lst))) (kont5840 x5738)))))
  (define (null? kont5842 x) (let ((x5739 (prim null? x))) (kont5842 x5739)))
  (define (equal? kont5843 x y)
    (let ((x5740 (prim equal? x y))) (kont5843 x5740)))
  (define (eq? kont5844 x y) (let ((x5741 (prim eq? x y))) (kont5844 x5741)))
  (define (cons kont5845 a b) (let ((x5742 (prim cons a b))) (kont5845 x5742)))
  (define (car kont5846 lst) (let ((x5743 (prim car lst))) (kont5846 x5743)))
  (define (cdr kont5847 lst) (let ((x5744 (prim cdr lst))) (kont5847 x5744)))
  (define (even? kont5848 x)
    (let ((a5745 '0))
      (let ((a5746 '2))
        (let ((f5849 (lambda (a5747) (equal? kont5848 a5745 a5747))))
          (modulo f5849 x a5746)))))
  (define (odd? kont5850 x)
    (let ((a5748 '1))
      (let ((a5749 '2))
        (let ((f5851 (lambda (a5750) (equal? kont5850 a5748 a5750))))
          (modulo f5851 x a5749)))))
  (define (list . x)
    (let ((kont5852 (prim car x))) (let ((x (prim cdr x))) (kont5852 x))))
  (define (and . lst)
    (let ((kont5854 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5751 (apply-prim and lst))) (kont5854 x5751)))))
  (define (or . lst)
    (let ((kont5856 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5752 (apply-prim or lst))) (kont5856 x5752)))))
  (define (member? kont5858 x lst)
    (let ((f5862
           (lambda (a5753)
             (if a5753
               (let ((x5754 '#f)) (kont5858 x5754))
               (let ((f5861
                      (lambda (a5755)
                        (let ((f5860
                               (lambda (a5756)
                                 (if a5756
                                   (let ((x5757 '#t)) (kont5858 x5757))
                                   (let ((f5859
                                          (lambda (a5758)
                                            (member? kont5858 x a5758))))
                                     (cdr f5859 lst))))))
                          (equal? f5860 a5755 x)))))
                 (car f5861 lst))))))
      (null? f5862 lst)))
  (define (foldl kont5863 fun acc lst)
    (let ((f5867
           (lambda (a5759)
             (if a5759
               (kont5863 acc)
               (let ((f5866
                      (lambda (a5760)
                        (let ((f5865
                               (lambda (a5761)
                                 (let ((f5864
                                        (lambda (a5762)
                                          (foldl kont5863 fun a5761 a5762))))
                                   (cdr f5864 lst)))))
                          (fun f5865 a5760 acc)))))
                 (car f5866 lst))))))
      (null? f5867 lst)))
  (define (reverse-helper kont5868 lst lst2)
    (let ((f5872
           (lambda (a5763)
             (if a5763
               (kont5868 lst2)
               (let ((f5871
                      (lambda (a5764)
                        (let ((f5870
                               (lambda (a5765)
                                 (let ((f5869
                                        (lambda (a5766)
                                          (reverse-helper
                                           kont5868
                                           a5764
                                           a5766))))
                                   (cons f5869 a5765 lst2)))))
                          (car f5870 lst)))))
                 (cdr f5871 lst))))))
      (null? f5872 lst)))
  (define (reverse kont5873 lst)
    (let ((f5874 (lambda (a5767) (reverse-helper kont5873 lst a5767))))
      (list f5874)))
  (define (take-helper kont5875 lst n lst2)
    (let ((a5768 '0))
      (let ((f5881
             (lambda (a5769)
               (if a5769
                 (let ((f5876 (lambda (x5770) (kont5875 x5770))))
                   (reverse f5876 lst2))
                 (let ((f5880
                        (lambda (a5771)
                          (let ((a5772 '1))
                            (let ((f5879
                                   (lambda (a5773)
                                     (let ((f5878
                                            (lambda (a5774)
                                              (let ((f5877
                                                     (lambda (a5775)
                                                       (take-helper
                                                        kont5875
                                                        a5771
                                                        a5773
                                                        a5775))))
                                                (cons f5877 a5774 lst2)))))
                                       (car f5878 lst)))))
                              (- f5879 n a5772))))))
                   (cdr f5880 lst))))))
        (= f5881 n a5768))))
  (define (take kont5882 lst n)
    (let ((f5883 (lambda (a5776) (take-helper kont5882 lst n a5776))))
      (list f5883)))
  (define (length kont5884 lst)
    (let ((f5887
           (lambda (a5777)
             (if a5777
               (let ((x5778 '0)) (kont5884 x5778))
               (let ((a5779 '1))
                 (let ((f5886
                        (lambda (a5780)
                          (let ((f5885
                                 (lambda (a5781) (+ kont5884 a5779 a5781))))
                            (length f5885 a5780)))))
                   (cdr f5886 lst)))))))
      (null? f5887 lst)))
  (define (map kont5888 proc lst)
    (let ((f5894
           (lambda (a5782)
             (if a5782
               (let ((f5889 (lambda (x5783) (kont5888 x5783)))) (list f5889))
               (let ((f5893
                      (lambda (a5784)
                        (let ((f5892
                               (lambda (a5785)
                                 (let ((f5891
                                        (lambda (a5786)
                                          (let ((f5890
                                                 (lambda (a5787)
                                                   (cons
                                                    kont5888
                                                    a5785
                                                    a5787))))
                                            (map f5890 proc a5786)))))
                                   (cdr f5891 lst)))))
                          (proc f5892 a5784)))))
                 (car f5893 lst))))))
      (null? f5894 lst)))
  (define (filter kont5895 op lst)
    (let ((f5903
           (lambda (a5788)
             (if a5788
               (let ((f5896 (lambda (x5789) (kont5895 x5789)))) (list f5896))
               (let ((f5902
                      (lambda (a5790)
                        (let ((f5901
                               (lambda (a5791)
                                 (if a5791
                                   (let ((f5899
                                          (lambda (a5792)
                                            (let ((f5898
                                                   (lambda (a5793)
                                                     (let ((f5897
                                                            (lambda (a5794)
                                                              (cons
                                                               kont5895
                                                               a5792
                                                               a5794))))
                                                       (filter
                                                        f5897
                                                        op
                                                        a5793)))))
                                              (cdr f5898 lst)))))
                                     (car f5899 lst))
                                   (let ((f5900
                                          (lambda (a5795)
                                            (filter kont5895 op a5795))))
                                     (cdr f5900 lst))))))
                          (op f5901 a5790)))))
                 (car f5902 lst))))))
      (null? f5903 lst)))
  (define (drop kont5904 lst n)
    (let ((a5796 '0))
      (let ((f5907
             (lambda (a5797)
               (if a5797
                 (kont5904 lst)
                 (let ((f5906
                        (lambda (a5798)
                          (let ((a5799 '1))
                            (let ((f5905
                                   (lambda (a5800)
                                     (drop kont5904 a5798 a5800))))
                              (- f5905 n a5799))))))
                   (cdr f5906 lst))))))
        (= f5907 n a5796))))
  (define (foldr kont5908 proc acc lst)
    (let ((f5912
           (lambda (a5801)
             (if a5801
               (kont5908 acc)
               (let ((f5911
                      (lambda (a5802)
                        (let ((f5910
                               (lambda (a5803)
                                 (let ((f5909
                                        (lambda (a5804)
                                          (proc kont5908 a5802 a5804))))
                                   (foldr f5909 proc acc a5803)))))
                          (cdr f5910 lst)))))
                 (car f5911 lst))))))
      (null? f5912 lst)))
  (define (append kont5913 lst1 lst2)
    (let ((f5917
           (lambda (a5805)
             (if a5805
               (kont5913 lst2)
               (let ((f5916
                      (lambda (a5806)
                        (let ((f5915
                               (lambda (a5807)
                                 (let ((f5914
                                        (lambda (a5808)
                                          (cons kont5913 a5806 a5808))))
                                   (append f5914 a5807 lst2)))))
                          (cdr f5915 lst1)))))
                 (car f5916 lst1))))))
      (null? f5917 lst1)))
  (define (hash . lst)
    (let ((kont5918 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x5809 (apply-prim hash lst))) (kont5918 x5809)))))
  (define (hash-ref kont5920 h k)
    (let ((x5810 (prim hash-ref h k))) (kont5920 x5810)))
  (define (hash-set kont5921 h k v)
    (let ((x5811 (prim hash-set h k v))) (kont5921 x5811)))
  (define (hash-has-key? kont5922 h k)
    (let ((x5812 (prim hash-has-key? h k))) (kont5922 x5812)))
  (define (hash-count kont5923 h)
    (let ((x5813 (prim hash-count h))) (kont5923 x5813)))
  (define (call kont5924)
    (let ((a5814 '1))
      (let ((a5815 '1))
        (let ((f5926
               (lambda (a5816)
                 (if a5816
                   (let ((a5817 '2))
                     (let ((f5925
                            (lambda (a5818)
                              (if a5818
                                (let ((a5819 '2)) (odd? kont5924 a5819))
                                (let ((x5820 '#f)) (kont5924 x5820))))))
                       (even? f5925 a5817)))
                   (let ((x5821 '#f)) (kont5924 x5821))))))
          (equal? f5926 a5814 a5815)))))
  (define (brouhaha_main kont5927)
    (let ((f5928 (lambda (x5822) (kont5927 x5822)))) (call f5928))))
