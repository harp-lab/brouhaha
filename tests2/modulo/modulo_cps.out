'((define (+ . lst)
    (let ((kont4599346093 (prim car lst)))
      (let ((lst46094 (prim cdr lst)))
        (let ((x4590746095 (apply-prim + lst46094)))
          (kont4599346093 x4590746095)))))
  (define (- . lst)
    (let ((kont4599546096 (prim car lst)))
      (let ((lst46097 (prim cdr lst)))
        (let ((x4590846098 (apply-prim - lst46097)))
          (kont4599546096 x4590846098)))))
  (define (* . lst)
    (let ((kont4599746099 (prim car lst)))
      (let ((lst46100 (prim cdr lst)))
        (let ((x4590946101 (apply-prim * lst46100)))
          (kont4599746099 x4590946101)))))
  (define (modulo kont45999 a b)
    (let ((x4591046102 (prim modulo a b))) (kont45999 x4591046102)))
  (define (/ . lst)
    (let ((kont4600046103 (prim car lst)))
      (let ((lst46104 (prim cdr lst)))
        (let ((x4591146105 (apply-prim / lst46104)))
          (kont4600046103 x4591146105)))))
  (define (= . lst)
    (let ((kont4600246106 (prim car lst)))
      (let ((lst46107 (prim cdr lst)))
        (let ((x4591246108 (apply-prim = lst46107)))
          (kont4600246106 x4591246108)))))
  (define (> . lst)
    (let ((kont4600446109 (prim car lst)))
      (let ((lst46110 (prim cdr lst)))
        (let ((x4591346111 (apply-prim > lst46110)))
          (kont4600446109 x4591346111)))))
  (define (< . lst)
    (let ((kont4600646112 (prim car lst)))
      (let ((lst46113 (prim cdr lst)))
        (let ((x4591446114 (apply-prim < lst46113)))
          (kont4600646112 x4591446114)))))
  (define (<= . lst)
    (let ((kont4600846115 (prim car lst)))
      (let ((lst46116 (prim cdr lst)))
        (let ((x4591546117 (apply-prim <= lst46116)))
          (kont4600846115 x4591546117)))))
  (define (>= . lst)
    (let ((kont4601046118 (prim car lst)))
      (let ((lst46119 (prim cdr lst)))
        (let ((x4591646120 (apply-prim >= lst46119)))
          (kont4601046118 x4591646120)))))
  (define (null? kont46012 x)
    (let ((x4591746121 (prim null? x))) (kont46012 x4591746121)))
  (define (equal? kont46013 x y)
    (let ((x4591846122 (prim equal? x y))) (kont46013 x4591846122)))
  (define (eq? kont46014 x y)
    (let ((x4591946123 (prim eq? x y))) (kont46014 x4591946123)))
  (define (cons kont46015 a b)
    (let ((x4592046124 (prim cons a b))) (kont46015 x4592046124)))
  (define (car kont46016 lst)
    (let ((x4592146125 (prim car lst))) (kont46016 x4592146125)))
  (define (cdr kont46017 lst)
    (let ((x4592246126 (prim cdr lst))) (kont46017 x4592246126)))
  (define (even? kont46018 x)
    (let ((a4592346127 '0))
      (let ((a4592446128 '2))
        (let ((f4601946129
               (lambda (a4592546130)
                 (equal? kont46018 a4592346127 a4592546130))))
          (modulo f4601946129 x a4592446128)))))
  (define (odd? kont46020 x)
    (let ((a4592646131 '1))
      (let ((a4592746132 '2))
        (let ((f4602146133
               (lambda (a4592846134)
                 (equal? kont46020 a4592646131 a4592846134))))
          (modulo f4602146133 x a4592746132)))))
  (define (list . x)
    (let ((kont4602246135 (prim car x)))
      (let ((x46136 (prim cdr x))) (kont4602246135 x46136))))
  (define (member? kont46024 x lst)
    (let ((f4602846137
           (lambda (a4592946138)
             (if a4592946138
               (let ((x4593046139 '#f)) (kont46024 x4593046139))
               (let ((f4602746140
                      (lambda (a4593146141)
                        (let ((f4602646142
                               (lambda (a4593246143)
                                 (if a4593246143
                                   (let ((x4593346144 '#t))
                                     (kont46024 x4593346144))
                                   (let ((f4602546145
                                          (lambda (a4593446146)
                                            (member?
                                             kont46024
                                             x
                                             a4593446146))))
                                     (cdr f4602546145 lst))))))
                          (equal? f4602646142 a4593146141 x)))))
                 (car f4602746140 lst))))))
      (null? f4602846137 lst)))
  (define (foldl kont46029 fun acc lst)
    (let ((f4603346147
           (lambda (a4593546148)
             (if a4593546148
               (kont46029 acc)
               (let ((f4603246149
                      (lambda (a4593646150)
                        (let ((f4603146151
                               (lambda (a4593746152)
                                 (let ((f4603046153
                                        (lambda (a4593846154)
                                          (foldl
                                           kont46029
                                           fun
                                           a4593746152
                                           a4593846154))))
                                   (cdr f4603046153 lst)))))
                          (fun f4603146151 a4593646150 acc)))))
                 (car f4603246149 lst))))))
      (null? f4603346147 lst)))
  (define (reverse-helper kont46034 lst lst2)
    (let ((f4603846155
           (lambda (a4593946156)
             (if a4593946156
               (kont46034 lst2)
               (let ((f4603746157
                      (lambda (a4594046158)
                        (let ((f4603646159
                               (lambda (a4594146160)
                                 (let ((f4603546161
                                        (lambda (a4594246162)
                                          (reverse-helper
                                           kont46034
                                           a4594046158
                                           a4594246162))))
                                   (cons f4603546161 a4594146160 lst2)))))
                          (car f4603646159 lst)))))
                 (cdr f4603746157 lst))))))
      (null? f4603846155 lst)))
  (define (reverse kont46039 lst)
    (let ((f4604046163
           (lambda (a4594346164) (reverse-helper kont46039 lst a4594346164))))
      (list f4604046163)))
  (define (take-helper kont46041 lst n lst2)
    (let ((a4594446165 '0))
      (let ((f4604746166
             (lambda (a4594546167)
               (if a4594546167
                 (let ((f4604246168
                        (lambda (x4594646169) (kont46041 x4594646169))))
                   (reverse f4604246168 lst2))
                 (let ((f4604646170
                        (lambda (a4594746171)
                          (let ((a4594846172 '1))
                            (let ((f4604546173
                                   (lambda (a4594946174)
                                     (let ((f4604446175
                                            (lambda (a4595046176)
                                              (let ((f4604346177
                                                     (lambda (a4595146178)
                                                       (take-helper
                                                        kont46041
                                                        a4594746171
                                                        a4594946174
                                                        a4595146178))))
                                                (cons
                                                 f4604346177
                                                 a4595046176
                                                 lst2)))))
                                       (car f4604446175 lst)))))
                              (- f4604546173 n a4594846172))))))
                   (cdr f4604646170 lst))))))
        (= f4604746166 n a4594446165))))
  (define (take kont46048 lst n)
    (let ((f4604946179
           (lambda (a4595246180) (take-helper kont46048 lst n a4595246180))))
      (list f4604946179)))
  (define (length kont46050 lst)
    (let ((f4605346181
           (lambda (a4595346182)
             (if a4595346182
               (let ((x4595446183 '0)) (kont46050 x4595446183))
               (let ((a4595546184 '1))
                 (let ((f4605246185
                        (lambda (a4595646186)
                          (let ((f4605146187
                                 (lambda (a4595746188)
                                   (+ kont46050 a4595546184 a4595746188))))
                            (length f4605146187 a4595646186)))))
                   (cdr f4605246185 lst)))))))
      (null? f4605346181 lst)))
  (define (map kont46054 proc lst)
    (let ((f4606046189
           (lambda (a4595846190)
             (if a4595846190
               (let ((f4605546191
                      (lambda (x4595946192) (kont46054 x4595946192))))
                 (list f4605546191))
               (let ((f4605946193
                      (lambda (a4596046194)
                        (let ((f4605846195
                               (lambda (a4596146196)
                                 (let ((f4605746197
                                        (lambda (a4596246198)
                                          (let ((f4605646199
                                                 (lambda (a4596346200)
                                                   (cons
                                                    kont46054
                                                    a4596146196
                                                    a4596346200))))
                                            (map
                                             f4605646199
                                             proc
                                             a4596246198)))))
                                   (cdr f4605746197 lst)))))
                          (proc f4605846195 a4596046194)))))
                 (car f4605946193 lst))))))
      (null? f4606046189 lst)))
  (define (filter kont46061 op lst)
    (let ((f4606946201
           (lambda (a4596446202)
             (if a4596446202
               (let ((f4606246203
                      (lambda (x4596546204) (kont46061 x4596546204))))
                 (list f4606246203))
               (let ((f4606846205
                      (lambda (a4596646206)
                        (let ((f4606746207
                               (lambda (a4596746208)
                                 (if a4596746208
                                   (let ((f4606546209
                                          (lambda (a4596846210)
                                            (let ((f4606446211
                                                   (lambda (a4596946212)
                                                     (let ((f4606346213
                                                            (lambda (a4597046214)
                                                              (cons
                                                               kont46061
                                                               a4596846210
                                                               a4597046214))))
                                                       (filter
                                                        f4606346213
                                                        op
                                                        a4596946212)))))
                                              (cdr f4606446211 lst)))))
                                     (car f4606546209 lst))
                                   (let ((f4606646215
                                          (lambda (a4597146216)
                                            (filter
                                             kont46061
                                             op
                                             a4597146216))))
                                     (cdr f4606646215 lst))))))
                          (op f4606746207 a4596646206)))))
                 (car f4606846205 lst))))))
      (null? f4606946201 lst)))
  (define (drop kont46070 lst n)
    (let ((a4597246217 '0))
      (let ((f4607346218
             (lambda (a4597346219)
               (if a4597346219
                 (kont46070 lst)
                 (let ((f4607246220
                        (lambda (a4597446221)
                          (let ((a4597546222 '1))
                            (let ((f4607146223
                                   (lambda (a4597646224)
                                     (drop
                                      kont46070
                                      a4597446221
                                      a4597646224))))
                              (- f4607146223 n a4597546222))))))
                   (cdr f4607246220 lst))))))
        (= f4607346218 n a4597246217))))
  (define (foldr kont46074 proc acc lst)
    (let ((f4607846225
           (lambda (a4597746226)
             (if a4597746226
               (kont46074 acc)
               (let ((f4607746227
                      (lambda (a4597846228)
                        (let ((f4607646229
                               (lambda (a4597946230)
                                 (let ((f4607546231
                                        (lambda (a4598046232)
                                          (proc
                                           kont46074
                                           a4597846228
                                           a4598046232))))
                                   (foldr f4607546231 proc acc a4597946230)))))
                          (cdr f4607646229 lst)))))
                 (car f4607746227 lst))))))
      (null? f4607846225 lst)))
  (define (append kont46079 lst1 lst2)
    (let ((f4608346233
           (lambda (a4598146234)
             (if a4598146234
               (kont46079 lst2)
               (let ((f4608246235
                      (lambda (a4598246236)
                        (let ((f4608146237
                               (lambda (a4598346238)
                                 (let ((f4608046239
                                        (lambda (a4598446240)
                                          (cons
                                           kont46079
                                           a4598246236
                                           a4598446240))))
                                   (append f4608046239 a4598346238 lst2)))))
                          (cdr f4608146237 lst1)))))
                 (car f4608246235 lst1))))))
      (null? f4608346233 lst1)))
  (define (hash . lst)
    (let ((kont4608446241 (prim car lst)))
      (let ((lst46242 (prim cdr lst)))
        (let ((x4598546243 (apply-prim hash lst46242)))
          (kont4608446241 x4598546243)))))
  (define (hash-ref kont46086 h k)
    (let ((x4598646244 (prim hash-ref h k))) (kont46086 x4598646244)))
  (define (hash-set kont46087 h k v)
    (let ((x4598746245 (prim hash-set h k v))) (kont46087 x4598746245)))
  (define (hash-has-key? kont46088 h k)
    (let ((x4598846246 (prim hash-has-key? h k))) (kont46088 x4598846246)))
  (define (hash-count kont46089 h)
    (let ((x4598946247 (prim hash-count h))) (kont46089 x4598946247)))
  (define (call kont46090)
    (let ((a4599046248 '28))
      (let ((a4599146249 '8)) (modulo kont46090 a4599046248 a4599146249))))
  (define (brouhaha_main kont46091)
    (let ((f4609246250 (lambda (x4599246251) (kont46091 x4599246251))))
      (call f4609246250))))
