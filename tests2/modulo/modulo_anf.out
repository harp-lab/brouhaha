'((define (+ . lst)
    (let ((kont48237 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48151 (apply-prim + lst))) (kont48237 x48151)))))
  (define (- . lst)
    (let ((kont48239 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48152 (apply-prim - lst))) (kont48239 x48152)))))
  (define (* . lst)
    (let ((kont48241 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48153 (apply-prim * lst))) (kont48241 x48153)))))
  (define (modulo kont48243 a b)
    (let ((x48154 (prim modulo a b))) (kont48243 x48154)))
  (define (/ . lst)
    (let ((kont48244 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48155 (apply-prim / lst))) (kont48244 x48155)))))
  (define (= . lst)
    (let ((kont48246 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48156 (apply-prim = lst))) (kont48246 x48156)))))
  (define (> . lst)
    (let ((kont48248 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48157 (apply-prim > lst))) (kont48248 x48157)))))
  (define (< . lst)
    (let ((kont48250 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48158 (apply-prim < lst))) (kont48250 x48158)))))
  (define (<= . lst)
    (let ((kont48252 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48159 (apply-prim <= lst))) (kont48252 x48159)))))
  (define (>= . lst)
    (let ((kont48254 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48160 (apply-prim >= lst))) (kont48254 x48160)))))
  (define (null? kont48256 x)
    (let ((x48161 (prim null? x))) (kont48256 x48161)))
  (define (equal? kont48257 x y)
    (let ((x48162 (prim equal? x y))) (kont48257 x48162)))
  (define (eq? kont48258 x y)
    (let ((x48163 (prim eq? x y))) (kont48258 x48163)))
  (define (cons kont48259 a b)
    (let ((x48164 (prim cons a b))) (kont48259 x48164)))
  (define (car kont48260 lst)
    (let ((x48165 (prim car lst))) (kont48260 x48165)))
  (define (cdr kont48261 lst)
    (let ((x48166 (prim cdr lst))) (kont48261 x48166)))
  (define (even? kont48262 x)
    (let ((a48167 '0))
      (let ((a48168 '2))
        (let ((f48263 (lambda (a48169) (equal? kont48262 a48167 a48169))))
          (modulo f48263 x a48168)))))
  (define (odd? kont48264 x)
    (let ((a48170 '1))
      (let ((a48171 '2))
        (let ((f48265 (lambda (a48172) (equal? kont48264 a48170 a48172))))
          (modulo f48265 x a48171)))))
  (define (list . x)
    (let ((kont48266 (prim car x))) (let ((x (prim cdr x))) (kont48266 x))))
  (define (member? kont48268 x lst)
    (let ((f48272
           (lambda (a48173)
             (if a48173
               (let ((x48174 '#f)) (kont48268 x48174))
               (let ((f48271
                      (lambda (a48175)
                        (let ((f48270
                               (lambda (a48176)
                                 (if a48176
                                   (let ((x48177 '#t)) (kont48268 x48177))
                                   (let ((f48269
                                          (lambda (a48178)
                                            (member? kont48268 x a48178))))
                                     (cdr f48269 lst))))))
                          (equal? f48270 a48175 x)))))
                 (car f48271 lst))))))
      (null? f48272 lst)))
  (define (foldl kont48273 fun acc lst)
    (let ((f48277
           (lambda (a48179)
             (if a48179
               (kont48273 acc)
               (let ((f48276
                      (lambda (a48180)
                        (let ((f48275
                               (lambda (a48181)
                                 (let ((f48274
                                        (lambda (a48182)
                                          (foldl
                                           kont48273
                                           fun
                                           a48181
                                           a48182))))
                                   (cdr f48274 lst)))))
                          (fun f48275 a48180 acc)))))
                 (car f48276 lst))))))
      (null? f48277 lst)))
  (define (reverse-helper kont48278 lst lst2)
    (let ((f48282
           (lambda (a48183)
             (if a48183
               (kont48278 lst2)
               (let ((f48281
                      (lambda (a48184)
                        (let ((f48280
                               (lambda (a48185)
                                 (let ((f48279
                                        (lambda (a48186)
                                          (reverse-helper
                                           kont48278
                                           a48184
                                           a48186))))
                                   (cons f48279 a48185 lst2)))))
                          (car f48280 lst)))))
                 (cdr f48281 lst))))))
      (null? f48282 lst)))
  (define (reverse kont48283 lst)
    (let ((f48284 (lambda (a48187) (reverse-helper kont48283 lst a48187))))
      (list f48284)))
  (define (take-helper kont48285 lst n lst2)
    (let ((a48188 '0))
      (let ((f48291
             (lambda (a48189)
               (if a48189
                 (let ((f48286 (lambda (x48190) (kont48285 x48190))))
                   (reverse f48286 lst2))
                 (let ((f48290
                        (lambda (a48191)
                          (let ((a48192 '1))
                            (let ((f48289
                                   (lambda (a48193)
                                     (let ((f48288
                                            (lambda (a48194)
                                              (let ((f48287
                                                     (lambda (a48195)
                                                       (take-helper
                                                        kont48285
                                                        a48191
                                                        a48193
                                                        a48195))))
                                                (cons f48287 a48194 lst2)))))
                                       (car f48288 lst)))))
                              (- f48289 n a48192))))))
                   (cdr f48290 lst))))))
        (= f48291 n a48188))))
  (define (take kont48292 lst n)
    (let ((f48293 (lambda (a48196) (take-helper kont48292 lst n a48196))))
      (list f48293)))
  (define (length kont48294 lst)
    (let ((f48297
           (lambda (a48197)
             (if a48197
               (let ((x48198 '0)) (kont48294 x48198))
               (let ((a48199 '1))
                 (let ((f48296
                        (lambda (a48200)
                          (let ((f48295
                                 (lambda (a48201)
                                   (+ kont48294 a48199 a48201))))
                            (length f48295 a48200)))))
                   (cdr f48296 lst)))))))
      (null? f48297 lst)))
  (define (map kont48298 proc lst)
    (let ((f48304
           (lambda (a48202)
             (if a48202
               (let ((f48299 (lambda (x48203) (kont48298 x48203))))
                 (list f48299))
               (let ((f48303
                      (lambda (a48204)
                        (let ((f48302
                               (lambda (a48205)
                                 (let ((f48301
                                        (lambda (a48206)
                                          (let ((f48300
                                                 (lambda (a48207)
                                                   (cons
                                                    kont48298
                                                    a48205
                                                    a48207))))
                                            (map f48300 proc a48206)))))
                                   (cdr f48301 lst)))))
                          (proc f48302 a48204)))))
                 (car f48303 lst))))))
      (null? f48304 lst)))
  (define (filter kont48305 op lst)
    (let ((f48313
           (lambda (a48208)
             (if a48208
               (let ((f48306 (lambda (x48209) (kont48305 x48209))))
                 (list f48306))
               (let ((f48312
                      (lambda (a48210)
                        (let ((f48311
                               (lambda (a48211)
                                 (if a48211
                                   (let ((f48309
                                          (lambda (a48212)
                                            (let ((f48308
                                                   (lambda (a48213)
                                                     (let ((f48307
                                                            (lambda (a48214)
                                                              (cons
                                                               kont48305
                                                               a48212
                                                               a48214))))
                                                       (filter
                                                        f48307
                                                        op
                                                        a48213)))))
                                              (cdr f48308 lst)))))
                                     (car f48309 lst))
                                   (let ((f48310
                                          (lambda (a48215)
                                            (filter kont48305 op a48215))))
                                     (cdr f48310 lst))))))
                          (op f48311 a48210)))))
                 (car f48312 lst))))))
      (null? f48313 lst)))
  (define (drop kont48314 lst n)
    (let ((a48216 '0))
      (let ((f48317
             (lambda (a48217)
               (if a48217
                 (kont48314 lst)
                 (let ((f48316
                        (lambda (a48218)
                          (let ((a48219 '1))
                            (let ((f48315
                                   (lambda (a48220)
                                     (drop kont48314 a48218 a48220))))
                              (- f48315 n a48219))))))
                   (cdr f48316 lst))))))
        (= f48317 n a48216))))
  (define (foldr kont48318 proc acc lst)
    (let ((f48322
           (lambda (a48221)
             (if a48221
               (kont48318 acc)
               (let ((f48321
                      (lambda (a48222)
                        (let ((f48320
                               (lambda (a48223)
                                 (let ((f48319
                                        (lambda (a48224)
                                          (proc kont48318 a48222 a48224))))
                                   (foldr f48319 proc acc a48223)))))
                          (cdr f48320 lst)))))
                 (car f48321 lst))))))
      (null? f48322 lst)))
  (define (append kont48323 lst1 lst2)
    (let ((f48327
           (lambda (a48225)
             (if a48225
               (kont48323 lst2)
               (let ((f48326
                      (lambda (a48226)
                        (let ((f48325
                               (lambda (a48227)
                                 (let ((f48324
                                        (lambda (a48228)
                                          (cons kont48323 a48226 a48228))))
                                   (append f48324 a48227 lst2)))))
                          (cdr f48325 lst1)))))
                 (car f48326 lst1))))))
      (null? f48327 lst1)))
  (define (hash . lst)
    (let ((kont48328 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x48229 (apply-prim hash lst))) (kont48328 x48229)))))
  (define (hash-ref kont48330 h k)
    (let ((x48230 (prim hash-ref h k))) (kont48330 x48230)))
  (define (hash-set kont48331 h k v)
    (let ((x48231 (prim hash-set h k v))) (kont48331 x48231)))
  (define (hash-has-key? kont48332 h k)
    (let ((x48232 (prim hash-has-key? h k))) (kont48332 x48232)))
  (define (hash-count kont48333 h)
    (let ((x48233 (prim hash-count h))) (kont48333 x48233)))
  (define (call kont48334)
    (let ((a48234 '28)) (let ((a48235 '8)) (modulo kont48334 a48234 a48235))))
  (define (brouhaha_main kont48335)
    (let ((f48336 (lambda (x48236) (kont48335 x48236)))) (call f48336))))
