'((define (+ . lst)
    (let ((kont45873 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45787 (apply-prim + lst))) (kont45873 x45787)))))
  (define (- . lst)
    (let ((kont45875 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45788 (apply-prim - lst))) (kont45875 x45788)))))
  (define (* . lst)
    (let ((kont45877 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45789 (apply-prim * lst))) (kont45877 x45789)))))
  (define (modulo kont45879 a b)
    (let ((x45790 (prim modulo a b))) (kont45879 x45790)))
  (define (/ . lst)
    (let ((kont45880 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45791 (apply-prim / lst))) (kont45880 x45791)))))
  (define (= . lst)
    (let ((kont45882 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45792 (apply-prim = lst))) (kont45882 x45792)))))
  (define (> . lst)
    (let ((kont45884 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45793 (apply-prim > lst))) (kont45884 x45793)))))
  (define (< . lst)
    (let ((kont45886 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45794 (apply-prim < lst))) (kont45886 x45794)))))
  (define (<= . lst)
    (let ((kont45888 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45795 (apply-prim <= lst))) (kont45888 x45795)))))
  (define (>= . lst)
    (let ((kont45890 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45796 (apply-prim >= lst))) (kont45890 x45796)))))
  (define (null? kont45892 x)
    (let ((x45797 (prim null? x))) (kont45892 x45797)))
  (define (equal? kont45893 x y)
    (let ((x45798 (prim equal? x y))) (kont45893 x45798)))
  (define (eq? kont45894 x y)
    (let ((x45799 (prim eq? x y))) (kont45894 x45799)))
  (define (cons kont45895 a b)
    (let ((x45800 (prim cons a b))) (kont45895 x45800)))
  (define (car kont45896 lst)
    (let ((x45801 (prim car lst))) (kont45896 x45801)))
  (define (cdr kont45897 lst)
    (let ((x45802 (prim cdr lst))) (kont45897 x45802)))
  (define (even? kont45898 x)
    (let ((a45803 '0))
      (let ((a45804 '2))
        (let ((f45899 (lambda (a45805) (equal? kont45898 a45803 a45805))))
          (modulo f45899 x a45804)))))
  (define (odd? kont45900 x)
    (let ((a45806 '1))
      (let ((a45807 '2))
        (let ((f45901 (lambda (a45808) (equal? kont45900 a45806 a45808))))
          (modulo f45901 x a45807)))))
  (define (list . x)
    (let ((kont45902 (prim car x))) (let ((x (prim cdr x))) (kont45902 x))))
  (define (member? kont45904 x lst)
    (let ((f45908
           (lambda (a45809)
             (if a45809
               (let ((x45810 '#f)) (kont45904 x45810))
               (let ((f45907
                      (lambda (a45811)
                        (let ((f45906
                               (lambda (a45812)
                                 (if a45812
                                   (let ((x45813 '#t)) (kont45904 x45813))
                                   (let ((f45905
                                          (lambda (a45814)
                                            (member? kont45904 x a45814))))
                                     (cdr f45905 lst))))))
                          (equal? f45906 a45811 x)))))
                 (car f45907 lst))))))
      (null? f45908 lst)))
  (define (foldl kont45909 fun acc lst)
    (let ((f45913
           (lambda (a45815)
             (if a45815
               (kont45909 acc)
               (let ((f45912
                      (lambda (a45816)
                        (let ((f45911
                               (lambda (a45817)
                                 (let ((f45910
                                        (lambda (a45818)
                                          (foldl
                                           kont45909
                                           fun
                                           a45817
                                           a45818))))
                                   (cdr f45910 lst)))))
                          (fun f45911 a45816 acc)))))
                 (car f45912 lst))))))
      (null? f45913 lst)))
  (define (reverse-helper kont45914 lst lst2)
    (let ((f45918
           (lambda (a45819)
             (if a45819
               (kont45914 lst2)
               (let ((f45917
                      (lambda (a45820)
                        (let ((f45916
                               (lambda (a45821)
                                 (let ((f45915
                                        (lambda (a45822)
                                          (reverse-helper
                                           kont45914
                                           a45820
                                           a45822))))
                                   (cons f45915 a45821 lst2)))))
                          (car f45916 lst)))))
                 (cdr f45917 lst))))))
      (null? f45918 lst)))
  (define (reverse kont45919 lst)
    (let ((f45920 (lambda (a45823) (reverse-helper kont45919 lst a45823))))
      (list f45920)))
  (define (take-helper kont45921 lst n lst2)
    (let ((a45824 '0))
      (let ((f45927
             (lambda (a45825)
               (if a45825
                 (let ((f45922 (lambda (x45826) (kont45921 x45826))))
                   (reverse f45922 lst2))
                 (let ((f45926
                        (lambda (a45827)
                          (let ((a45828 '1))
                            (let ((f45925
                                   (lambda (a45829)
                                     (let ((f45924
                                            (lambda (a45830)
                                              (let ((f45923
                                                     (lambda (a45831)
                                                       (take-helper
                                                        kont45921
                                                        a45827
                                                        a45829
                                                        a45831))))
                                                (cons f45923 a45830 lst2)))))
                                       (car f45924 lst)))))
                              (- f45925 n a45828))))))
                   (cdr f45926 lst))))))
        (= f45927 n a45824))))
  (define (take kont45928 lst n)
    (let ((f45929 (lambda (a45832) (take-helper kont45928 lst n a45832))))
      (list f45929)))
  (define (length kont45930 lst)
    (let ((f45933
           (lambda (a45833)
             (if a45833
               (let ((x45834 '0)) (kont45930 x45834))
               (let ((a45835 '1))
                 (let ((f45932
                        (lambda (a45836)
                          (let ((f45931
                                 (lambda (a45837)
                                   (+ kont45930 a45835 a45837))))
                            (length f45931 a45836)))))
                   (cdr f45932 lst)))))))
      (null? f45933 lst)))
  (define (map kont45934 proc lst)
    (let ((f45940
           (lambda (a45838)
             (if a45838
               (let ((f45935 (lambda (x45839) (kont45934 x45839))))
                 (list f45935))
               (let ((f45939
                      (lambda (a45840)
                        (let ((f45938
                               (lambda (a45841)
                                 (let ((f45937
                                        (lambda (a45842)
                                          (let ((f45936
                                                 (lambda (a45843)
                                                   (cons
                                                    kont45934
                                                    a45841
                                                    a45843))))
                                            (map f45936 proc a45842)))))
                                   (cdr f45937 lst)))))
                          (proc f45938 a45840)))))
                 (car f45939 lst))))))
      (null? f45940 lst)))
  (define (filter kont45941 op lst)
    (let ((f45949
           (lambda (a45844)
             (if a45844
               (let ((f45942 (lambda (x45845) (kont45941 x45845))))
                 (list f45942))
               (let ((f45948
                      (lambda (a45846)
                        (let ((f45947
                               (lambda (a45847)
                                 (if a45847
                                   (let ((f45945
                                          (lambda (a45848)
                                            (let ((f45944
                                                   (lambda (a45849)
                                                     (let ((f45943
                                                            (lambda (a45850)
                                                              (cons
                                                               kont45941
                                                               a45848
                                                               a45850))))
                                                       (filter
                                                        f45943
                                                        op
                                                        a45849)))))
                                              (cdr f45944 lst)))))
                                     (car f45945 lst))
                                   (let ((f45946
                                          (lambda (a45851)
                                            (filter kont45941 op a45851))))
                                     (cdr f45946 lst))))))
                          (op f45947 a45846)))))
                 (car f45948 lst))))))
      (null? f45949 lst)))
  (define (drop kont45950 lst n)
    (let ((a45852 '0))
      (let ((f45953
             (lambda (a45853)
               (if a45853
                 (kont45950 lst)
                 (let ((f45952
                        (lambda (a45854)
                          (let ((a45855 '1))
                            (let ((f45951
                                   (lambda (a45856)
                                     (drop kont45950 a45854 a45856))))
                              (- f45951 n a45855))))))
                   (cdr f45952 lst))))))
        (= f45953 n a45852))))
  (define (foldr kont45954 proc acc lst)
    (let ((f45958
           (lambda (a45857)
             (if a45857
               (kont45954 acc)
               (let ((f45957
                      (lambda (a45858)
                        (let ((f45956
                               (lambda (a45859)
                                 (let ((f45955
                                        (lambda (a45860)
                                          (proc kont45954 a45858 a45860))))
                                   (foldr f45955 proc acc a45859)))))
                          (cdr f45956 lst)))))
                 (car f45957 lst))))))
      (null? f45958 lst)))
  (define (append kont45959 lst1 lst2)
    (let ((f45963
           (lambda (a45861)
             (if a45861
               (kont45959 lst2)
               (let ((f45962
                      (lambda (a45862)
                        (let ((f45961
                               (lambda (a45863)
                                 (let ((f45960
                                        (lambda (a45864)
                                          (cons kont45959 a45862 a45864))))
                                   (append f45960 a45863 lst2)))))
                          (cdr f45961 lst1)))))
                 (car f45962 lst1))))))
      (null? f45963 lst1)))
  (define (hash . lst)
    (let ((kont45964 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45865 (apply-prim hash lst))) (kont45964 x45865)))))
  (define (hash-ref kont45966 h k)
    (let ((x45866 (prim hash-ref h k))) (kont45966 x45866)))
  (define (hash-set kont45967 h k v)
    (let ((x45867 (prim hash-set h k v))) (kont45967 x45867)))
  (define (hash-has-key? kont45968 h k)
    (let ((x45868 (prim hash-has-key? h k))) (kont45968 x45868)))
  (define (hash-count kont45969 h)
    (let ((x45869 (prim hash-count h))) (kont45969 x45869)))
  (define (call kont45970)
    (let ((a45870 '28)) (let ((a45871 '8)) (modulo kont45970 a45870 a45871))))
  (define (brouhaha_main kont45971)
    (let ((f45972 (lambda (x45872) (kont45971 x45872)))) (call f45972))))
