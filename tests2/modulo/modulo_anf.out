'((define (+ . lst)
    (let ((kont45993 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45907 (apply-prim + lst))) (kont45993 x45907)))))
  (define (- . lst)
    (let ((kont45995 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45908 (apply-prim - lst))) (kont45995 x45908)))))
  (define (* . lst)
    (let ((kont45997 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45909 (apply-prim * lst))) (kont45997 x45909)))))
  (define (modulo kont45999 a b)
    (let ((x45910 (prim modulo a b))) (kont45999 x45910)))
  (define (/ . lst)
    (let ((kont46000 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45911 (apply-prim / lst))) (kont46000 x45911)))))
  (define (= . lst)
    (let ((kont46002 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45912 (apply-prim = lst))) (kont46002 x45912)))))
  (define (> . lst)
    (let ((kont46004 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45913 (apply-prim > lst))) (kont46004 x45913)))))
  (define (< . lst)
    (let ((kont46006 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45914 (apply-prim < lst))) (kont46006 x45914)))))
  (define (<= . lst)
    (let ((kont46008 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45915 (apply-prim <= lst))) (kont46008 x45915)))))
  (define (>= . lst)
    (let ((kont46010 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45916 (apply-prim >= lst))) (kont46010 x45916)))))
  (define (null? kont46012 x)
    (let ((x45917 (prim null? x))) (kont46012 x45917)))
  (define (equal? kont46013 x y)
    (let ((x45918 (prim equal? x y))) (kont46013 x45918)))
  (define (eq? kont46014 x y)
    (let ((x45919 (prim eq? x y))) (kont46014 x45919)))
  (define (cons kont46015 a b)
    (let ((x45920 (prim cons a b))) (kont46015 x45920)))
  (define (car kont46016 lst)
    (let ((x45921 (prim car lst))) (kont46016 x45921)))
  (define (cdr kont46017 lst)
    (let ((x45922 (prim cdr lst))) (kont46017 x45922)))
  (define (even? kont46018 x)
    (let ((a45923 '0))
      (let ((a45924 '2))
        (let ((f46019 (lambda (a45925) (equal? kont46018 a45923 a45925))))
          (modulo f46019 x a45924)))))
  (define (odd? kont46020 x)
    (let ((a45926 '1))
      (let ((a45927 '2))
        (let ((f46021 (lambda (a45928) (equal? kont46020 a45926 a45928))))
          (modulo f46021 x a45927)))))
  (define (list . x)
    (let ((kont46022 (prim car x))) (let ((x (prim cdr x))) (kont46022 x))))
  (define (member? kont46024 x lst)
    (let ((f46028
           (lambda (a45929)
             (if a45929
               (let ((x45930 '#f)) (kont46024 x45930))
               (let ((f46027
                      (lambda (a45931)
                        (let ((f46026
                               (lambda (a45932)
                                 (if a45932
                                   (let ((x45933 '#t)) (kont46024 x45933))
                                   (let ((f46025
                                          (lambda (a45934)
                                            (member? kont46024 x a45934))))
                                     (cdr f46025 lst))))))
                          (equal? f46026 a45931 x)))))
                 (car f46027 lst))))))
      (null? f46028 lst)))
  (define (foldl kont46029 fun acc lst)
    (let ((f46033
           (lambda (a45935)
             (if a45935
               (kont46029 acc)
               (let ((f46032
                      (lambda (a45936)
                        (let ((f46031
                               (lambda (a45937)
                                 (let ((f46030
                                        (lambda (a45938)
                                          (foldl
                                           kont46029
                                           fun
                                           a45937
                                           a45938))))
                                   (cdr f46030 lst)))))
                          (fun f46031 a45936 acc)))))
                 (car f46032 lst))))))
      (null? f46033 lst)))
  (define (reverse-helper kont46034 lst lst2)
    (let ((f46038
           (lambda (a45939)
             (if a45939
               (kont46034 lst2)
               (let ((f46037
                      (lambda (a45940)
                        (let ((f46036
                               (lambda (a45941)
                                 (let ((f46035
                                        (lambda (a45942)
                                          (reverse-helper
                                           kont46034
                                           a45940
                                           a45942))))
                                   (cons f46035 a45941 lst2)))))
                          (car f46036 lst)))))
                 (cdr f46037 lst))))))
      (null? f46038 lst)))
  (define (reverse kont46039 lst)
    (let ((f46040 (lambda (a45943) (reverse-helper kont46039 lst a45943))))
      (list f46040)))
  (define (take-helper kont46041 lst n lst2)
    (let ((a45944 '0))
      (let ((f46047
             (lambda (a45945)
               (if a45945
                 (let ((f46042 (lambda (x45946) (kont46041 x45946))))
                   (reverse f46042 lst2))
                 (let ((f46046
                        (lambda (a45947)
                          (let ((a45948 '1))
                            (let ((f46045
                                   (lambda (a45949)
                                     (let ((f46044
                                            (lambda (a45950)
                                              (let ((f46043
                                                     (lambda (a45951)
                                                       (take-helper
                                                        kont46041
                                                        a45947
                                                        a45949
                                                        a45951))))
                                                (cons f46043 a45950 lst2)))))
                                       (car f46044 lst)))))
                              (- f46045 n a45948))))))
                   (cdr f46046 lst))))))
        (= f46047 n a45944))))
  (define (take kont46048 lst n)
    (let ((f46049 (lambda (a45952) (take-helper kont46048 lst n a45952))))
      (list f46049)))
  (define (length kont46050 lst)
    (let ((f46053
           (lambda (a45953)
             (if a45953
               (let ((x45954 '0)) (kont46050 x45954))
               (let ((a45955 '1))
                 (let ((f46052
                        (lambda (a45956)
                          (let ((f46051
                                 (lambda (a45957)
                                   (+ kont46050 a45955 a45957))))
                            (length f46051 a45956)))))
                   (cdr f46052 lst)))))))
      (null? f46053 lst)))
  (define (map kont46054 proc lst)
    (let ((f46060
           (lambda (a45958)
             (if a45958
               (let ((f46055 (lambda (x45959) (kont46054 x45959))))
                 (list f46055))
               (let ((f46059
                      (lambda (a45960)
                        (let ((f46058
                               (lambda (a45961)
                                 (let ((f46057
                                        (lambda (a45962)
                                          (let ((f46056
                                                 (lambda (a45963)
                                                   (cons
                                                    kont46054
                                                    a45961
                                                    a45963))))
                                            (map f46056 proc a45962)))))
                                   (cdr f46057 lst)))))
                          (proc f46058 a45960)))))
                 (car f46059 lst))))))
      (null? f46060 lst)))
  (define (filter kont46061 op lst)
    (let ((f46069
           (lambda (a45964)
             (if a45964
               (let ((f46062 (lambda (x45965) (kont46061 x45965))))
                 (list f46062))
               (let ((f46068
                      (lambda (a45966)
                        (let ((f46067
                               (lambda (a45967)
                                 (if a45967
                                   (let ((f46065
                                          (lambda (a45968)
                                            (let ((f46064
                                                   (lambda (a45969)
                                                     (let ((f46063
                                                            (lambda (a45970)
                                                              (cons
                                                               kont46061
                                                               a45968
                                                               a45970))))
                                                       (filter
                                                        f46063
                                                        op
                                                        a45969)))))
                                              (cdr f46064 lst)))))
                                     (car f46065 lst))
                                   (let ((f46066
                                          (lambda (a45971)
                                            (filter kont46061 op a45971))))
                                     (cdr f46066 lst))))))
                          (op f46067 a45966)))))
                 (car f46068 lst))))))
      (null? f46069 lst)))
  (define (drop kont46070 lst n)
    (let ((a45972 '0))
      (let ((f46073
             (lambda (a45973)
               (if a45973
                 (kont46070 lst)
                 (let ((f46072
                        (lambda (a45974)
                          (let ((a45975 '1))
                            (let ((f46071
                                   (lambda (a45976)
                                     (drop kont46070 a45974 a45976))))
                              (- f46071 n a45975))))))
                   (cdr f46072 lst))))))
        (= f46073 n a45972))))
  (define (foldr kont46074 proc acc lst)
    (let ((f46078
           (lambda (a45977)
             (if a45977
               (kont46074 acc)
               (let ((f46077
                      (lambda (a45978)
                        (let ((f46076
                               (lambda (a45979)
                                 (let ((f46075
                                        (lambda (a45980)
                                          (proc kont46074 a45978 a45980))))
                                   (foldr f46075 proc acc a45979)))))
                          (cdr f46076 lst)))))
                 (car f46077 lst))))))
      (null? f46078 lst)))
  (define (append kont46079 lst1 lst2)
    (let ((f46083
           (lambda (a45981)
             (if a45981
               (kont46079 lst2)
               (let ((f46082
                      (lambda (a45982)
                        (let ((f46081
                               (lambda (a45983)
                                 (let ((f46080
                                        (lambda (a45984)
                                          (cons kont46079 a45982 a45984))))
                                   (append f46080 a45983 lst2)))))
                          (cdr f46081 lst1)))))
                 (car f46082 lst1))))))
      (null? f46083 lst1)))
  (define (hash . lst)
    (let ((kont46084 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x45985 (apply-prim hash lst))) (kont46084 x45985)))))
  (define (hash-ref kont46086 h k)
    (let ((x45986 (prim hash-ref h k))) (kont46086 x45986)))
  (define (hash-set kont46087 h k v)
    (let ((x45987 (prim hash-set h k v))) (kont46087 x45987)))
  (define (hash-has-key? kont46088 h k)
    (let ((x45988 (prim hash-has-key? h k))) (kont46088 x45988)))
  (define (hash-count kont46089 h)
    (let ((x45989 (prim hash-count h))) (kont46089 x45989)))
  (define (call kont46090)
    (let ((a45990 '28)) (let ((a45991 '8)) (modulo kont46090 a45990 a45991))))
  (define (brouhaha_main kont46091)
    (let ((f46092 (lambda (x45992) (kont46091 x45992)))) (call f46092))))
