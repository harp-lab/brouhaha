'((define (+ . lst) (let ((x45787 (apply-prim + lst))) x45787))
  (define (- . lst) (let ((x45788 (apply-prim - lst))) x45788))
  (define (* . lst) (let ((x45789 (apply-prim * lst))) x45789))
  (define (modulo a b) (let ((x45790 (prim modulo a b))) x45790))
  (define (/ . lst) (let ((x45791 (apply-prim / lst))) x45791))
  (define (= . lst) (let ((x45792 (apply-prim = lst))) x45792))
  (define (> . lst) (let ((x45793 (apply-prim > lst))) x45793))
  (define (< . lst) (let ((x45794 (apply-prim < lst))) x45794))
  (define (<= . lst) (let ((x45795 (apply-prim <= lst))) x45795))
  (define (>= . lst) (let ((x45796 (apply-prim >= lst))) x45796))
  (define (null? x) (let ((x45797 (prim null? x))) x45797))
  (define (equal? x y) (let ((x45798 (prim equal? x y))) x45798))
  (define (eq? x y) (let ((x45799 (prim eq? x y))) x45799))
  (define (cons a b) (let ((x45800 (prim cons a b))) x45800))
  (define (car lst) (let ((x45801 (prim car lst))) x45801))
  (define (cdr lst) (let ((x45802 (prim cdr lst))) x45802))
  (define (even? x)
    (let ((a45803 '0))
      (let ((a45804 '2))
        (let ((a45805 (modulo x a45804))) (equal? a45803 a45805)))))
  (define (odd? x)
    (let ((a45806 '1))
      (let ((a45807 '2))
        (let ((a45808 (modulo x a45807))) (equal? a45806 a45808)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a45809 (null? lst)))
      (if a45809
        (let ((x45810 '#f)) x45810)
        (let ((a45811 (car lst)))
          (let ((a45812 (equal? a45811 x)))
            (if a45812
              (let ((x45813 '#t)) x45813)
              (let ((a45814 (cdr lst))) (member? x a45814))))))))
  (define (foldl fun acc lst)
    (let ((a45815 (null? lst)))
      (if a45815
        acc
        (let ((a45816 (car lst)))
          (let ((a45817 (fun a45816 acc)))
            (let ((a45818 (cdr lst))) (foldl fun a45817 a45818)))))))
  (define (reverse-helper lst lst2)
    (let ((a45819 (null? lst)))
      (if a45819
        lst2
        (let ((a45820 (cdr lst)))
          (let ((a45821 (car lst)))
            (let ((a45822 (cons a45821 lst2)))
              (reverse-helper a45820 a45822)))))))
  (define (reverse lst) (let ((a45823 (list))) (reverse-helper lst a45823)))
  (define (take-helper lst n lst2)
    (let ((a45824 '0))
      (let ((a45825 (= n a45824)))
        (if a45825
          (let ((x45826 (reverse lst2))) x45826)
          (let ((a45827 (cdr lst)))
            (let ((a45828 '1))
              (let ((a45829 (- n a45828)))
                (let ((a45830 (car lst)))
                  (let ((a45831 (cons a45830 lst2)))
                    (take-helper a45827 a45829 a45831))))))))))
  (define (take lst n) (let ((a45832 (list))) (take-helper lst n a45832)))
  (define (length lst)
    (let ((a45833 (null? lst)))
      (if a45833
        (let ((x45834 '0)) x45834)
        (let ((a45835 '1))
          (let ((a45836 (cdr lst)))
            (let ((a45837 (length a45836))) (+ a45835 a45837)))))))
  (define (map proc lst)
    (let ((a45838 (null? lst)))
      (if a45838
        (let ((x45839 (list))) x45839)
        (let ((a45840 (car lst)))
          (let ((a45841 (proc a45840)))
            (let ((a45842 (cdr lst)))
              (let ((a45843 (map proc a45842))) (cons a45841 a45843))))))))
  (define (filter op lst)
    (let ((a45844 (null? lst)))
      (if a45844
        (let ((x45845 (list))) x45845)
        (let ((a45846 (car lst)))
          (let ((a45847 (op a45846)))
            (if a45847
              (let ((a45848 (car lst)))
                (let ((a45849 (cdr lst)))
                  (let ((a45850 (filter op a45849))) (cons a45848 a45850))))
              (let ((a45851 (cdr lst))) (filter op a45851))))))))
  (define (drop lst n)
    (let ((a45852 '0))
      (let ((a45853 (= n a45852)))
        (if a45853
          lst
          (let ((a45854 (cdr lst)))
            (let ((a45855 '1))
              (let ((a45856 (- n a45855))) (drop a45854 a45856))))))))
  (define (foldr proc acc lst)
    (let ((a45857 (null? lst)))
      (if a45857
        acc
        (let ((a45858 (car lst)))
          (let ((a45859 (cdr lst)))
            (let ((a45860 (foldr proc acc a45859))) (proc a45858 a45860)))))))
  (define (append lst1 lst2)
    (let ((a45861 (null? lst1)))
      (if a45861
        lst2
        (let ((a45862 (car lst1)))
          (let ((a45863 (cdr lst1)))
            (let ((a45864 (append a45863 lst2))) (cons a45862 a45864)))))))
  (define (hash . lst) (let ((x45865 (apply-prim hash lst))) x45865))
  (define (hash-ref h k) (let ((x45866 (prim hash-ref h k))) x45866))
  (define (hash-set h k v) (let ((x45867 (prim hash-set h k v))) x45867))
  (define (hash-has-key? h k) (let ((x45868 (prim hash-has-key? h k))) x45868))
  (define (hash-count h) (let ((x45869 (prim hash-count h))) x45869))
  (define (call)
    (let ((a45870 '28)) (let ((a45871 '8)) (modulo a45870 a45871))))
  (define (brouhaha_main) (let ((x45872 (call))) x45872)))
