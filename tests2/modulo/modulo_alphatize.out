'((define (+ . lst) (let ((x45907 (apply-prim + lst))) x45907))
  (define (- . lst) (let ((x45908 (apply-prim - lst))) x45908))
  (define (* . lst) (let ((x45909 (apply-prim * lst))) x45909))
  (define (modulo a b) (let ((x45910 (prim modulo a b))) x45910))
  (define (/ . lst) (let ((x45911 (apply-prim / lst))) x45911))
  (define (= . lst) (let ((x45912 (apply-prim = lst))) x45912))
  (define (> . lst) (let ((x45913 (apply-prim > lst))) x45913))
  (define (< . lst) (let ((x45914 (apply-prim < lst))) x45914))
  (define (<= . lst) (let ((x45915 (apply-prim <= lst))) x45915))
  (define (>= . lst) (let ((x45916 (apply-prim >= lst))) x45916))
  (define (null? x) (let ((x45917 (prim null? x))) x45917))
  (define (equal? x y) (let ((x45918 (prim equal? x y))) x45918))
  (define (eq? x y) (let ((x45919 (prim eq? x y))) x45919))
  (define (cons a b) (let ((x45920 (prim cons a b))) x45920))
  (define (car lst) (let ((x45921 (prim car lst))) x45921))
  (define (cdr lst) (let ((x45922 (prim cdr lst))) x45922))
  (define (even? x)
    (let ((a45923 '0))
      (let ((a45924 '2))
        (let ((a45925 (modulo x a45924))) (equal? a45923 a45925)))))
  (define (odd? x)
    (let ((a45926 '1))
      (let ((a45927 '2))
        (let ((a45928 (modulo x a45927))) (equal? a45926 a45928)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a45929 (null? lst)))
      (if a45929
        (let ((x45930 '#f)) x45930)
        (let ((a45931 (car lst)))
          (let ((a45932 (equal? a45931 x)))
            (if a45932
              (let ((x45933 '#t)) x45933)
              (let ((a45934 (cdr lst))) (member? x a45934))))))))
  (define (foldl fun acc lst)
    (let ((a45935 (null? lst)))
      (if a45935
        acc
        (let ((a45936 (car lst)))
          (let ((a45937 (fun a45936 acc)))
            (let ((a45938 (cdr lst))) (foldl fun a45937 a45938)))))))
  (define (reverse-helper lst lst2)
    (let ((a45939 (null? lst)))
      (if a45939
        lst2
        (let ((a45940 (cdr lst)))
          (let ((a45941 (car lst)))
            (let ((a45942 (cons a45941 lst2)))
              (reverse-helper a45940 a45942)))))))
  (define (reverse lst) (let ((a45943 (list))) (reverse-helper lst a45943)))
  (define (take-helper lst n lst2)
    (let ((a45944 '0))
      (let ((a45945 (= n a45944)))
        (if a45945
          (let ((x45946 (reverse lst2))) x45946)
          (let ((a45947 (cdr lst)))
            (let ((a45948 '1))
              (let ((a45949 (- n a45948)))
                (let ((a45950 (car lst)))
                  (let ((a45951 (cons a45950 lst2)))
                    (take-helper a45947 a45949 a45951))))))))))
  (define (take lst n) (let ((a45952 (list))) (take-helper lst n a45952)))
  (define (length lst)
    (let ((a45953 (null? lst)))
      (if a45953
        (let ((x45954 '0)) x45954)
        (let ((a45955 '1))
          (let ((a45956 (cdr lst)))
            (let ((a45957 (length a45956))) (+ a45955 a45957)))))))
  (define (map proc lst)
    (let ((a45958 (null? lst)))
      (if a45958
        (let ((x45959 (list))) x45959)
        (let ((a45960 (car lst)))
          (let ((a45961 (proc a45960)))
            (let ((a45962 (cdr lst)))
              (let ((a45963 (map proc a45962))) (cons a45961 a45963))))))))
  (define (filter op lst)
    (let ((a45964 (null? lst)))
      (if a45964
        (let ((x45965 (list))) x45965)
        (let ((a45966 (car lst)))
          (let ((a45967 (op a45966)))
            (if a45967
              (let ((a45968 (car lst)))
                (let ((a45969 (cdr lst)))
                  (let ((a45970 (filter op a45969))) (cons a45968 a45970))))
              (let ((a45971 (cdr lst))) (filter op a45971))))))))
  (define (drop lst n)
    (let ((a45972 '0))
      (let ((a45973 (= n a45972)))
        (if a45973
          lst
          (let ((a45974 (cdr lst)))
            (let ((a45975 '1))
              (let ((a45976 (- n a45975))) (drop a45974 a45976))))))))
  (define (foldr proc acc lst)
    (let ((a45977 (null? lst)))
      (if a45977
        acc
        (let ((a45978 (car lst)))
          (let ((a45979 (cdr lst)))
            (let ((a45980 (foldr proc acc a45979))) (proc a45978 a45980)))))))
  (define (append lst1 lst2)
    (let ((a45981 (null? lst1)))
      (if a45981
        lst2
        (let ((a45982 (car lst1)))
          (let ((a45983 (cdr lst1)))
            (let ((a45984 (append a45983 lst2))) (cons a45982 a45984)))))))
  (define (hash . lst) (let ((x45985 (apply-prim hash lst))) x45985))
  (define (hash-ref h k) (let ((x45986 (prim hash-ref h k))) x45986))
  (define (hash-set h k v) (let ((x45987 (prim hash-set h k v))) x45987))
  (define (hash-has-key? h k) (let ((x45988 (prim hash-has-key? h k))) x45988))
  (define (hash-count h) (let ((x45989 (prim hash-count h))) x45989))
  (define (call)
    (let ((a45990 '28)) (let ((a45991 '8)) (modulo a45990 a45991))))
  (define (brouhaha_main) (let ((x45992 (call))) x45992)))
