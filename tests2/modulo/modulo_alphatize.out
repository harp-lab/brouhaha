'((define (+ . lst) (let ((x48151 (apply-prim + lst))) x48151))
  (define (- . lst) (let ((x48152 (apply-prim - lst))) x48152))
  (define (* . lst) (let ((x48153 (apply-prim * lst))) x48153))
  (define (modulo a b) (let ((x48154 (prim modulo a b))) x48154))
  (define (/ . lst) (let ((x48155 (apply-prim / lst))) x48155))
  (define (= . lst) (let ((x48156 (apply-prim = lst))) x48156))
  (define (> . lst) (let ((x48157 (apply-prim > lst))) x48157))
  (define (< . lst) (let ((x48158 (apply-prim < lst))) x48158))
  (define (<= . lst) (let ((x48159 (apply-prim <= lst))) x48159))
  (define (>= . lst) (let ((x48160 (apply-prim >= lst))) x48160))
  (define (null? x) (let ((x48161 (prim null? x))) x48161))
  (define (equal? x y) (let ((x48162 (prim equal? x y))) x48162))
  (define (eq? x y) (let ((x48163 (prim eq? x y))) x48163))
  (define (cons a b) (let ((x48164 (prim cons a b))) x48164))
  (define (car lst) (let ((x48165 (prim car lst))) x48165))
  (define (cdr lst) (let ((x48166 (prim cdr lst))) x48166))
  (define (even? x)
    (let ((a48167 '0))
      (let ((a48168 '2))
        (let ((a48169 (modulo x a48168))) (equal? a48167 a48169)))))
  (define (odd? x)
    (let ((a48170 '1))
      (let ((a48171 '2))
        (let ((a48172 (modulo x a48171))) (equal? a48170 a48172)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a48173 (null? lst)))
      (if a48173
        (let ((x48174 '#f)) x48174)
        (let ((a48175 (car lst)))
          (let ((a48176 (equal? a48175 x)))
            (if a48176
              (let ((x48177 '#t)) x48177)
              (let ((a48178 (cdr lst))) (member? x a48178))))))))
  (define (foldl fun acc lst)
    (let ((a48179 (null? lst)))
      (if a48179
        acc
        (let ((a48180 (car lst)))
          (let ((a48181 (fun a48180 acc)))
            (let ((a48182 (cdr lst))) (foldl fun a48181 a48182)))))))
  (define (reverse-helper lst lst2)
    (let ((a48183 (null? lst)))
      (if a48183
        lst2
        (let ((a48184 (cdr lst)))
          (let ((a48185 (car lst)))
            (let ((a48186 (cons a48185 lst2)))
              (reverse-helper a48184 a48186)))))))
  (define (reverse lst) (let ((a48187 (list))) (reverse-helper lst a48187)))
  (define (take-helper lst n lst2)
    (let ((a48188 '0))
      (let ((a48189 (= n a48188)))
        (if a48189
          (let ((x48190 (reverse lst2))) x48190)
          (let ((a48191 (cdr lst)))
            (let ((a48192 '1))
              (let ((a48193 (- n a48192)))
                (let ((a48194 (car lst)))
                  (let ((a48195 (cons a48194 lst2)))
                    (take-helper a48191 a48193 a48195))))))))))
  (define (take lst n) (let ((a48196 (list))) (take-helper lst n a48196)))
  (define (length lst)
    (let ((a48197 (null? lst)))
      (if a48197
        (let ((x48198 '0)) x48198)
        (let ((a48199 '1))
          (let ((a48200 (cdr lst)))
            (let ((a48201 (length a48200))) (+ a48199 a48201)))))))
  (define (map proc lst)
    (let ((a48202 (null? lst)))
      (if a48202
        (let ((x48203 (list))) x48203)
        (let ((a48204 (car lst)))
          (let ((a48205 (proc a48204)))
            (let ((a48206 (cdr lst)))
              (let ((a48207 (map proc a48206))) (cons a48205 a48207))))))))
  (define (filter op lst)
    (let ((a48208 (null? lst)))
      (if a48208
        (let ((x48209 (list))) x48209)
        (let ((a48210 (car lst)))
          (let ((a48211 (op a48210)))
            (if a48211
              (let ((a48212 (car lst)))
                (let ((a48213 (cdr lst)))
                  (let ((a48214 (filter op a48213))) (cons a48212 a48214))))
              (let ((a48215 (cdr lst))) (filter op a48215))))))))
  (define (drop lst n)
    (let ((a48216 '0))
      (let ((a48217 (= n a48216)))
        (if a48217
          lst
          (let ((a48218 (cdr lst)))
            (let ((a48219 '1))
              (let ((a48220 (- n a48219))) (drop a48218 a48220))))))))
  (define (foldr proc acc lst)
    (let ((a48221 (null? lst)))
      (if a48221
        acc
        (let ((a48222 (car lst)))
          (let ((a48223 (cdr lst)))
            (let ((a48224 (foldr proc acc a48223))) (proc a48222 a48224)))))))
  (define (append lst1 lst2)
    (let ((a48225 (null? lst1)))
      (if a48225
        lst2
        (let ((a48226 (car lst1)))
          (let ((a48227 (cdr lst1)))
            (let ((a48228 (append a48227 lst2))) (cons a48226 a48228)))))))
  (define (hash . lst) (let ((x48229 (apply-prim hash lst))) x48229))
  (define (hash-ref h k) (let ((x48230 (prim hash-ref h k))) x48230))
  (define (hash-set h k v) (let ((x48231 (prim hash-set h k v))) x48231))
  (define (hash-has-key? h k) (let ((x48232 (prim hash-has-key? h k))) x48232))
  (define (hash-count h) (let ((x48233 (prim hash-count h))) x48233))
  (define (call)
    (let ((a48234 '28)) (let ((a48235 '8)) (modulo a48234 a48235))))
  (define (brouhaha_main) (let ((x48236 (call))) x48236)))
