'((define (+ . lst) (let ((x46622 (apply-prim + lst))) x46622))
  (define (- . lst) (let ((x46623 (apply-prim - lst))) x46623))
  (define (* . lst) (let ((x46624 (apply-prim * lst))) x46624))
  (define (modulo a b) (let ((x46625 (prim modulo a b))) x46625))
  (define (/ . lst) (let ((x46626 (apply-prim / lst))) x46626))
  (define (= . lst) (let ((x46627 (apply-prim = lst))) x46627))
  (define (> . lst) (let ((x46628 (apply-prim > lst))) x46628))
  (define (< . lst) (let ((x46629 (apply-prim < lst))) x46629))
  (define (<= . lst) (let ((x46630 (apply-prim <= lst))) x46630))
  (define (>= . lst) (let ((x46631 (apply-prim >= lst))) x46631))
  (define (null? x) (let ((x46632 (prim null? x))) x46632))
  (define (equal? x y) (let ((x46633 (prim equal? x y))) x46633))
  (define (eq? x y) (let ((x46634 (prim eq? x y))) x46634))
  (define (cons a b) (let ((x46635 (prim cons a b))) x46635))
  (define (car lst) (let ((x46636 (prim car lst))) x46636))
  (define (cdr lst) (let ((x46637 (prim cdr lst))) x46637))
  (define (even? x)
    (let ((a46638 '0))
      (let ((a46639 '2))
        (let ((a46640 (modulo x a46639))) (equal? a46638 a46640)))))
  (define (odd? x)
    (let ((a46641 '1))
      (let ((a46642 '2))
        (let ((a46643 (modulo x a46642))) (equal? a46641 a46643)))))
  (define (list . x) x)
  (define (and . lst) (let ((x46644 (apply-prim and lst))) x46644))
  (define (or . lst) (let ((x46645 (apply-prim or lst))) x46645))
  (define (member? x lst)
    (let ((a46646 (null? lst)))
      (if a46646
        (let ((x46647 '#f)) x46647)
        (let ((a46648 (car lst)))
          (let ((a46649 (equal? a46648 x)))
            (if a46649
              (let ((x46650 '#t)) x46650)
              (let ((a46651 (cdr lst))) (member? x a46651))))))))
  (define (foldl fun acc lst)
    (let ((a46652 (null? lst)))
      (if a46652
        acc
        (let ((a46653 (car lst)))
          (let ((a46654 (fun a46653 acc)))
            (let ((a46655 (cdr lst))) (foldl fun a46654 a46655)))))))
  (define (reverse-helper lst lst2)
    (let ((a46656 (null? lst)))
      (if a46656
        lst2
        (let ((a46657 (cdr lst)))
          (let ((a46658 (car lst)))
            (let ((a46659 (cons a46658 lst2)))
              (reverse-helper a46657 a46659)))))))
  (define (reverse lst) (let ((a46660 (list))) (reverse-helper lst a46660)))
  (define (take-helper lst n lst2)
    (let ((a46661 '0))
      (let ((a46662 (= n a46661)))
        (if a46662
          (let ((x46663 (reverse lst2))) x46663)
          (let ((a46664 (cdr lst)))
            (let ((a46665 '1))
              (let ((a46666 (- n a46665)))
                (let ((a46667 (car lst)))
                  (let ((a46668 (cons a46667 lst2)))
                    (take-helper a46664 a46666 a46668))))))))))
  (define (take lst n) (let ((a46669 (list))) (take-helper lst n a46669)))
  (define (length lst)
    (let ((a46670 (null? lst)))
      (if a46670
        (let ((x46671 '0)) x46671)
        (let ((a46672 '1))
          (let ((a46673 (cdr lst)))
            (let ((a46674 (length a46673))) (+ a46672 a46674)))))))
  (define (map proc lst)
    (let ((a46675 (null? lst)))
      (if a46675
        (let ((x46676 (list))) x46676)
        (let ((a46677 (car lst)))
          (let ((a46678 (proc a46677)))
            (let ((a46679 (cdr lst)))
              (let ((a46680 (map proc a46679))) (cons a46678 a46680))))))))
  (define (filter op lst)
    (let ((a46681 (null? lst)))
      (if a46681
        (let ((x46682 (list))) x46682)
        (let ((a46683 (car lst)))
          (let ((a46684 (op a46683)))
            (if a46684
              (let ((a46685 (car lst)))
                (let ((a46686 (cdr lst)))
                  (let ((a46687 (filter op a46686))) (cons a46685 a46687))))
              (let ((a46688 (cdr lst))) (filter op a46688))))))))
  (define (drop lst n)
    (let ((a46689 '0))
      (let ((a46690 (= n a46689)))
        (if a46690
          lst
          (let ((a46691 (cdr lst)))
            (let ((a46692 '1))
              (let ((a46693 (- n a46692))) (drop a46691 a46693))))))))
  (define (foldr proc acc lst)
    (let ((a46694 (null? lst)))
      (if a46694
        acc
        (let ((a46695 (car lst)))
          (let ((a46696 (cdr lst)))
            (let ((a46697 (foldr proc acc a46696))) (proc a46695 a46697)))))))
  (define (append lst1 lst2)
    (let ((a46698 (null? lst1)))
      (if a46698
        lst2
        (let ((a46699 (car lst1)))
          (let ((a46700 (cdr lst1)))
            (let ((a46701 (append a46700 lst2))) (cons a46699 a46701)))))))
  (define (hash . lst) (let ((x46702 (apply-prim hash lst))) x46702))
  (define (hash-ref h k) (let ((x46703 (prim hash-ref h k))) x46703))
  (define (hash-set h k v) (let ((x46704 (prim hash-set h k v))) x46704))
  (define (hash-has-key? h k) (let ((x46705 (prim hash-has-key? h k))) x46705))
  (define (hash-count h) (let ((x46706 (prim hash-count h))) x46706))
  (define (call)
    (let ((a46707 '28)) (let ((a46708 '8)) (modulo a46707 a46708))))
  (define (brouhaha_main) (let ((x46709 (call))) x46709)))
