'((define (+ . lst) (let ((x37605 (apply-prim + lst))) x37605))
  (define (- . lst) (let ((x37606 (apply-prim - lst))) x37606))
  (define (* . lst) (let ((x37607 (apply-prim * lst))) x37607))
  (define (modulo a b) (let ((x37608 (prim modulo a b))) x37608))
  (define (/ . lst) (let ((x37609 (apply-prim / lst))) x37609))
  (define (= . lst) (let ((x37610 (apply-prim = lst))) x37610))
  (define (> . lst) (let ((x37611 (apply-prim > lst))) x37611))
  (define (< . lst) (let ((x37612 (apply-prim < lst))) x37612))
  (define (<= . lst) (let ((x37613 (apply-prim <= lst))) x37613))
  (define (>= . lst) (let ((x37614 (apply-prim >= lst))) x37614))
  (define (null? x) (let ((x37615 (prim null? x))) x37615))
  (define (equal? x y) (let ((x37616 (prim equal? x y))) x37616))
  (define (eq? x y) (let ((x37617 (prim eq? x y))) x37617))
  (define (cons a b) (let ((x37618 (prim cons a b))) x37618))
  (define (car lst) (let ((x37619 (prim car lst))) x37619))
  (define (cdr lst) (let ((x37620 (prim cdr lst))) x37620))
  (define (even? x)
    (let ((a37621 '0))
      (let ((a37622 '2))
        (let ((a37623 (modulo x a37622))) (equal? a37621 a37623)))))
  (define (odd? x)
    (let ((a37624 '1))
      (let ((a37625 '2))
        (let ((a37626 (modulo x a37625))) (equal? a37624 a37626)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a37627 (null? lst)))
      (if a37627
        (let ((x37628 '#f)) x37628)
        (let ((a37629 (car lst)))
          (let ((a37630 (equal? a37629 x)))
            (if a37630
              (let ((x37631 '#t)) x37631)
              (let ((a37632 (cdr lst))) (member? x a37632))))))))
  (define (foldl fun acc lst)
    (let ((a37633 (null? lst)))
      (if a37633
        acc
        (let ((a37634 (car lst)))
          (let ((a37635 (fun a37634 acc)))
            (let ((a37636 (cdr lst))) (foldl fun a37635 a37636)))))))
  (define (reverse-helper lst lst2)
    (let ((a37637 (null? lst)))
      (if a37637
        lst2
        (let ((a37638 (cdr lst)))
          (let ((a37639 (car lst)))
            (let ((a37640 (cons a37639 lst2)))
              (reverse-helper a37638 a37640)))))))
  (define (reverse lst) (let ((a37641 (list))) (reverse-helper lst a37641)))
  (define (take-helper lst n lst2)
    (let ((a37642 '0))
      (let ((a37643 (= n a37642)))
        (if a37643
          (let ((x37644 (reverse lst2))) x37644)
          (let ((a37645 (cdr lst)))
            (let ((a37646 '1))
              (let ((a37647 (- n a37646)))
                (let ((a37648 (car lst)))
                  (let ((a37649 (cons a37648 lst2)))
                    (take-helper a37645 a37647 a37649))))))))))
  (define (take lst n) (let ((a37650 (list))) (take-helper lst n a37650)))
  (define (length lst)
    (let ((a37651 (null? lst)))
      (if a37651
        (let ((x37652 '0)) x37652)
        (let ((a37653 '1))
          (let ((a37654 (cdr lst)))
            (let ((a37655 (length a37654))) (+ a37653 a37655)))))))
  (define (map proc lst)
    (let ((a37656 (null? lst)))
      (if a37656
        (let ((x37657 (list))) x37657)
        (let ((a37658 (car lst)))
          (let ((a37659 (proc a37658)))
            (let ((a37660 (cdr lst)))
              (let ((a37661 (map proc a37660))) (cons a37659 a37661))))))))
  (define (filter op lst)
    (let ((a37662 (null? lst)))
      (if a37662
        (let ((x37663 (list))) x37663)
        (let ((a37664 (car lst)))
          (let ((a37665 (op a37664)))
            (if a37665
              (let ((a37666 (car lst)))
                (let ((a37667 (cdr lst)))
                  (let ((a37668 (filter op a37667))) (cons a37666 a37668))))
              (let ((a37669 (cdr lst))) (filter op a37669))))))))
  (define (drop lst n)
    (let ((a37670 '0))
      (let ((a37671 (= n a37670)))
        (if a37671
          lst
          (let ((a37672 (cdr lst)))
            (let ((a37673 '1))
              (let ((a37674 (- n a37673))) (drop a37672 a37674))))))))
  (define (foldr proc acc lst)
    (let ((a37675 (null? lst)))
      (if a37675
        acc
        (let ((a37676 (car lst)))
          (let ((a37677 (cdr lst)))
            (let ((a37678 (foldr proc acc a37677))) (proc a37676 a37678)))))))
  (define (append lst1 lst2)
    (let ((a37679 (null? lst1)))
      (if a37679
        lst2
        (let ((a37680 (car lst1)))
          (let ((a37681 (cdr lst1)))
            (let ((a37682 (append a37681 lst2))) (cons a37680 a37682)))))))
  (define (hash . lst) (let ((x37683 (apply-prim hash lst))) x37683))
  (define (hash-ref h k) (let ((x37684 (prim hash-ref h k))) x37684))
  (define (hash-set h k v) (let ((x37685 (prim hash-set h k v))) x37685))
  (define (hash-has-key? h k) (let ((x37686 (prim hash-has-key? h k))) x37686))
  (define (hash-count h) (let ((x37687 (prim hash-count h))) x37687))
  (define (call)
    (let ((a37688 '100))
      (let ((a37689 '80))
        (let ((a37690 '10))
          (let ((a37691 '2))
            (let ((a37692 '25))
              (let ((a37693 '30))
                (let ((a37694
                       (hash a37688 a37689 a37690 a37691 a37692 a37693)))
                  (hash-count a37694)))))))))
  (define (brouhaha_main) (let ((x37695 (call))) x37695)))
