'((define (+ . lst) (let ((x37920 (apply-prim + lst))) x37920))
  (define (- . lst) (let ((x37921 (apply-prim - lst))) x37921))
  (define (* . lst) (let ((x37922 (apply-prim * lst))) x37922))
  (define (modulo a b) (let ((x37923 (prim modulo a b))) x37923))
  (define (/ . lst) (let ((x37924 (apply-prim / lst))) x37924))
  (define (= . lst) (let ((x37925 (apply-prim = lst))) x37925))
  (define (> . lst) (let ((x37926 (apply-prim > lst))) x37926))
  (define (< . lst) (let ((x37927 (apply-prim < lst))) x37927))
  (define (<= . lst) (let ((x37928 (apply-prim <= lst))) x37928))
  (define (>= . lst) (let ((x37929 (apply-prim >= lst))) x37929))
  (define (null? x) (let ((x37930 (prim null? x))) x37930))
  (define (equal? x y) (let ((x37931 (prim equal? x y))) x37931))
  (define (eq? x y) (let ((x37932 (prim eq? x y))) x37932))
  (define (cons a b) (let ((x37933 (prim cons a b))) x37933))
  (define (car lst) (let ((x37934 (prim car lst))) x37934))
  (define (cdr lst) (let ((x37935 (prim cdr lst))) x37935))
  (define (even? x)
    (let ((a37936 '0))
      (let ((a37937 '2))
        (let ((a37938 (modulo x a37937))) (equal? a37936 a37938)))))
  (define (odd? x)
    (let ((a37939 '1))
      (let ((a37940 '2))
        (let ((a37941 (modulo x a37940))) (equal? a37939 a37941)))))
  (define (list . x) x)
  (define (and . lst) (let ((x37942 (apply-prim and lst))) x37942))
  (define (or . lst) (let ((x37943 (apply-prim or lst))) x37943))
  (define (member? x lst)
    (let ((a37944 (null? lst)))
      (if a37944
        (let ((x37945 '#f)) x37945)
        (let ((a37946 (car lst)))
          (let ((a37947 (equal? a37946 x)))
            (if a37947
              (let ((x37948 '#t)) x37948)
              (let ((a37949 (cdr lst))) (member? x a37949))))))))
  (define (foldl fun acc lst)
    (let ((a37950 (null? lst)))
      (if a37950
        acc
        (let ((a37951 (car lst)))
          (let ((a37952 (fun a37951 acc)))
            (let ((a37953 (cdr lst))) (foldl fun a37952 a37953)))))))
  (define (reverse-helper lst lst2)
    (let ((a37954 (null? lst)))
      (if a37954
        lst2
        (let ((a37955 (cdr lst)))
          (let ((a37956 (car lst)))
            (let ((a37957 (cons a37956 lst2)))
              (reverse-helper a37955 a37957)))))))
  (define (reverse lst) (let ((a37958 (list))) (reverse-helper lst a37958)))
  (define (take-helper lst n lst2)
    (let ((a37959 '0))
      (let ((a37960 (= n a37959)))
        (if a37960
          (let ((x37961 (reverse lst2))) x37961)
          (let ((a37962 (cdr lst)))
            (let ((a37963 '1))
              (let ((a37964 (- n a37963)))
                (let ((a37965 (car lst)))
                  (let ((a37966 (cons a37965 lst2)))
                    (take-helper a37962 a37964 a37966))))))))))
  (define (take lst n) (let ((a37967 (list))) (take-helper lst n a37967)))
  (define (length lst)
    (let ((a37968 (null? lst)))
      (if a37968
        (let ((x37969 '0)) x37969)
        (let ((a37970 '1))
          (let ((a37971 (cdr lst)))
            (let ((a37972 (length a37971))) (+ a37970 a37972)))))))
  (define (map proc lst)
    (let ((a37973 (null? lst)))
      (if a37973
        (let ((x37974 (list))) x37974)
        (let ((a37975 (car lst)))
          (let ((a37976 (proc a37975)))
            (let ((a37977 (cdr lst)))
              (let ((a37978 (map proc a37977))) (cons a37976 a37978))))))))
  (define (filter op lst)
    (let ((a37979 (null? lst)))
      (if a37979
        (let ((x37980 (list))) x37980)
        (let ((a37981 (car lst)))
          (let ((a37982 (op a37981)))
            (if a37982
              (let ((a37983 (car lst)))
                (let ((a37984 (cdr lst)))
                  (let ((a37985 (filter op a37984))) (cons a37983 a37985))))
              (let ((a37986 (cdr lst))) (filter op a37986))))))))
  (define (drop lst n)
    (let ((a37987 '0))
      (let ((a37988 (= n a37987)))
        (if a37988
          lst
          (let ((a37989 (cdr lst)))
            (let ((a37990 '1))
              (let ((a37991 (- n a37990))) (drop a37989 a37991))))))))
  (define (foldr proc acc lst)
    (let ((a37992 (null? lst)))
      (if a37992
        acc
        (let ((a37993 (car lst)))
          (let ((a37994 (cdr lst)))
            (let ((a37995 (foldr proc acc a37994))) (proc a37993 a37995)))))))
  (define (append lst1 lst2)
    (let ((a37996 (null? lst1)))
      (if a37996
        lst2
        (let ((a37997 (car lst1)))
          (let ((a37998 (cdr lst1)))
            (let ((a37999 (append a37998 lst2))) (cons a37997 a37999)))))))
  (define (hash . lst) (let ((x38000 (apply-prim hash lst))) x38000))
  (define (hash-ref h k) (let ((x38001 (prim hash-ref h k))) x38001))
  (define (hash-set h k v) (let ((x38002 (prim hash-set h k v))) x38002))
  (define (hash-has-key? h k) (let ((x38003 (prim hash-has-key? h k))) x38003))
  (define (hash-count h) (let ((x38004 (prim hash-count h))) x38004))
  (define (call)
    (let ((a38005 '100))
      (let ((a38006 '80))
        (let ((a38007 '10))
          (let ((a38008 '2))
            (let ((a38009 '25))
              (let ((a38010 '30))
                (let ((a38011
                       (hash a38005 a38006 a38007 a38008 a38009 a38010)))
                  (hash-count a38011)))))))))
  (define (brouhaha_main) (let ((x38012 (call))) x38012)))
