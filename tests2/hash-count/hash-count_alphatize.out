'((define (+ . lst) (let ((x39533 (apply-prim + lst))) x39533))
  (define (- . lst) (let ((x39534 (apply-prim - lst))) x39534))
  (define (* . lst) (let ((x39535 (apply-prim * lst))) x39535))
  (define (modulo a b) (let ((x39536 (prim modulo a b))) x39536))
  (define (/ . lst) (let ((x39537 (apply-prim / lst))) x39537))
  (define (= . lst) (let ((x39538 (apply-prim = lst))) x39538))
  (define (> . lst) (let ((x39539 (apply-prim > lst))) x39539))
  (define (< . lst) (let ((x39540 (apply-prim < lst))) x39540))
  (define (<= . lst) (let ((x39541 (apply-prim <= lst))) x39541))
  (define (>= . lst) (let ((x39542 (apply-prim >= lst))) x39542))
  (define (null? x) (let ((x39543 (prim null? x))) x39543))
  (define (equal? x y) (let ((x39544 (prim equal? x y))) x39544))
  (define (eq? x y) (let ((x39545 (prim eq? x y))) x39545))
  (define (cons a b) (let ((x39546 (prim cons a b))) x39546))
  (define (car lst) (let ((x39547 (prim car lst))) x39547))
  (define (cdr lst) (let ((x39548 (prim cdr lst))) x39548))
  (define (even? x)
    (let ((a39549 '0))
      (let ((a39550 '2))
        (let ((a39551 (modulo x a39550))) (equal? a39549 a39551)))))
  (define (odd? x)
    (let ((a39552 '1))
      (let ((a39553 '2))
        (let ((a39554 (modulo x a39553))) (equal? a39552 a39554)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a39555 (null? lst)))
      (if a39555
        (let ((x39556 '#f)) x39556)
        (let ((a39557 (car lst)))
          (let ((a39558 (equal? a39557 x)))
            (if a39558
              (let ((x39559 '#t)) x39559)
              (let ((a39560 (cdr lst))) (member? x a39560))))))))
  (define (foldl fun acc lst)
    (let ((a39561 (null? lst)))
      (if a39561
        acc
        (let ((a39562 (car lst)))
          (let ((a39563 (fun a39562 acc)))
            (let ((a39564 (cdr lst))) (foldl fun a39563 a39564)))))))
  (define (reverse-helper lst lst2)
    (let ((a39565 (null? lst)))
      (if a39565
        lst2
        (let ((a39566 (cdr lst)))
          (let ((a39567 (car lst)))
            (let ((a39568 (cons a39567 lst2)))
              (reverse-helper a39566 a39568)))))))
  (define (reverse lst) (let ((a39569 (list))) (reverse-helper lst a39569)))
  (define (take-helper lst n lst2)
    (let ((a39570 '0))
      (let ((a39571 (= n a39570)))
        (if a39571
          (let ((x39572 (reverse lst2))) x39572)
          (let ((a39573 (cdr lst)))
            (let ((a39574 '1))
              (let ((a39575 (- n a39574)))
                (let ((a39576 (car lst)))
                  (let ((a39577 (cons a39576 lst2)))
                    (take-helper a39573 a39575 a39577))))))))))
  (define (take lst n) (let ((a39578 (list))) (take-helper lst n a39578)))
  (define (length lst)
    (let ((a39579 (null? lst)))
      (if a39579
        (let ((x39580 '0)) x39580)
        (let ((a39581 '1))
          (let ((a39582 (cdr lst)))
            (let ((a39583 (length a39582))) (+ a39581 a39583)))))))
  (define (map proc lst)
    (let ((a39584 (null? lst)))
      (if a39584
        (let ((x39585 (list))) x39585)
        (let ((a39586 (car lst)))
          (let ((a39587 (proc a39586)))
            (let ((a39588 (cdr lst)))
              (let ((a39589 (map proc a39588))) (cons a39587 a39589))))))))
  (define (filter op lst)
    (let ((a39590 (null? lst)))
      (if a39590
        (let ((x39591 (list))) x39591)
        (let ((a39592 (car lst)))
          (let ((a39593 (op a39592)))
            (if a39593
              (let ((a39594 (car lst)))
                (let ((a39595 (cdr lst)))
                  (let ((a39596 (filter op a39595))) (cons a39594 a39596))))
              (let ((a39597 (cdr lst))) (filter op a39597))))))))
  (define (drop lst n)
    (let ((a39598 '0))
      (let ((a39599 (= n a39598)))
        (if a39599
          lst
          (let ((a39600 (cdr lst)))
            (let ((a39601 '1))
              (let ((a39602 (- n a39601))) (drop a39600 a39602))))))))
  (define (foldr proc acc lst)
    (let ((a39603 (null? lst)))
      (if a39603
        acc
        (let ((a39604 (car lst)))
          (let ((a39605 (cdr lst)))
            (let ((a39606 (foldr proc acc a39605))) (proc a39604 a39606)))))))
  (define (append lst1 lst2)
    (let ((a39607 (null? lst1)))
      (if a39607
        lst2
        (let ((a39608 (car lst1)))
          (let ((a39609 (cdr lst1)))
            (let ((a39610 (append a39609 lst2))) (cons a39608 a39610)))))))
  (define (hash . lst) (let ((x39611 (apply-prim hash lst))) x39611))
  (define (hash-ref h k) (let ((x39612 (prim hash-ref h k))) x39612))
  (define (hash-set h k v) (let ((x39613 (prim hash-set h k v))) x39613))
  (define (hash-has-key? h k) (let ((x39614 (prim hash-has-key? h k))) x39614))
  (define (hash-count h) (let ((x39615 (prim hash-count h))) x39615))
  (define (call)
    (let ((a39616 '100))
      (let ((a39617 '80))
        (let ((a39618 '10))
          (let ((a39619 '2))
            (let ((a39620 '25))
              (let ((a39621 '30))
                (let ((a39622
                       (hash a39616 a39617 a39618 a39619 a39620 a39621)))
                  (hash-count a39622)))))))))
  (define (brouhaha_main) (let ((x39623 (call))) x39623)))
