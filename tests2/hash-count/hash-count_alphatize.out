'((define (+ . lst) (let ((x38345 (apply-prim + lst))) x38345))
  (define (- . lst) (let ((x38346 (apply-prim - lst))) x38346))
  (define (* . lst) (let ((x38347 (apply-prim * lst))) x38347))
  (define (modulo a b) (let ((x38348 (prim modulo a b))) x38348))
  (define (/ . lst) (let ((x38349 (apply-prim / lst))) x38349))
  (define (= . lst) (let ((x38350 (apply-prim = lst))) x38350))
  (define (> . lst) (let ((x38351 (apply-prim > lst))) x38351))
  (define (< . lst) (let ((x38352 (apply-prim < lst))) x38352))
  (define (<= . lst) (let ((x38353 (apply-prim <= lst))) x38353))
  (define (>= . lst) (let ((x38354 (apply-prim >= lst))) x38354))
  (define (null? x) (let ((x38355 (prim null? x))) x38355))
  (define (equal? x y) (let ((x38356 (prim equal? x y))) x38356))
  (define (eq? x y) (let ((x38357 (prim eq? x y))) x38357))
  (define (cons a b) (let ((x38358 (prim cons a b))) x38358))
  (define (car lst) (let ((x38359 (prim car lst))) x38359))
  (define (cdr lst) (let ((x38360 (prim cdr lst))) x38360))
  (define (even? x)
    (let ((a38361 '0))
      (let ((a38362 '2))
        (let ((a38363 (modulo x a38362))) (equal? a38361 a38363)))))
  (define (odd? x)
    (let ((a38364 '1))
      (let ((a38365 '2))
        (let ((a38366 (modulo x a38365))) (equal? a38364 a38366)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a38367 (null? lst)))
      (if a38367
        (let ((x38368 '#f)) x38368)
        (let ((a38369 (car lst)))
          (let ((a38370 (equal? a38369 x)))
            (if a38370
              (let ((x38371 '#t)) x38371)
              (let ((a38372 (cdr lst))) (member? x a38372))))))))
  (define (foldl fun acc lst)
    (let ((a38373 (null? lst)))
      (if a38373
        acc
        (let ((a38374 (car lst)))
          (let ((a38375 (fun a38374 acc)))
            (let ((a38376 (cdr lst))) (foldl fun a38375 a38376)))))))
  (define (reverse-helper lst lst2)
    (let ((a38377 (null? lst)))
      (if a38377
        lst2
        (let ((a38378 (cdr lst)))
          (let ((a38379 (car lst)))
            (let ((a38380 (cons a38379 lst2)))
              (reverse-helper a38378 a38380)))))))
  (define (reverse lst) (let ((a38381 (list))) (reverse-helper lst a38381)))
  (define (take-helper lst n lst2)
    (let ((a38382 '0))
      (let ((a38383 (= n a38382)))
        (if a38383
          (let ((x38384 (reverse lst2))) x38384)
          (let ((a38385 (cdr lst)))
            (let ((a38386 '1))
              (let ((a38387 (- n a38386)))
                (let ((a38388 (car lst)))
                  (let ((a38389 (cons a38388 lst2)))
                    (take-helper a38385 a38387 a38389))))))))))
  (define (take lst n) (let ((a38390 (list))) (take-helper lst n a38390)))
  (define (length lst)
    (let ((a38391 (null? lst)))
      (if a38391
        (let ((x38392 '0)) x38392)
        (let ((a38393 '1))
          (let ((a38394 (cdr lst)))
            (let ((a38395 (length a38394))) (+ a38393 a38395)))))))
  (define (map proc lst)
    (let ((a38396 (null? lst)))
      (if a38396
        (let ((x38397 (list))) x38397)
        (let ((a38398 (car lst)))
          (let ((a38399 (proc a38398)))
            (let ((a38400 (cdr lst)))
              (let ((a38401 (map proc a38400))) (cons a38399 a38401))))))))
  (define (filter op lst)
    (let ((a38402 (null? lst)))
      (if a38402
        (let ((x38403 (list))) x38403)
        (let ((a38404 (car lst)))
          (let ((a38405 (op a38404)))
            (if a38405
              (let ((a38406 (car lst)))
                (let ((a38407 (cdr lst)))
                  (let ((a38408 (filter op a38407))) (cons a38406 a38408))))
              (let ((a38409 (cdr lst))) (filter op a38409))))))))
  (define (drop lst n)
    (let ((a38410 '0))
      (let ((a38411 (= n a38410)))
        (if a38411
          lst
          (let ((a38412 (cdr lst)))
            (let ((a38413 '1))
              (let ((a38414 (- n a38413))) (drop a38412 a38414))))))))
  (define (foldr proc acc lst)
    (let ((a38415 (null? lst)))
      (if a38415
        acc
        (let ((a38416 (car lst)))
          (let ((a38417 (cdr lst)))
            (let ((a38418 (foldr proc acc a38417))) (proc a38416 a38418)))))))
  (define (append lst1 lst2)
    (let ((a38419 (null? lst1)))
      (if a38419
        lst2
        (let ((a38420 (car lst1)))
          (let ((a38421 (cdr lst1)))
            (let ((a38422 (append a38421 lst2))) (cons a38420 a38422)))))))
  (define (hash . lst) (let ((x38423 (apply-prim hash lst))) x38423))
  (define (hash-ref h k) (let ((x38424 (prim hash-ref h k))) x38424))
  (define (hash-set h k v) (let ((x38425 (prim hash-set h k v))) x38425))
  (define (hash-has-key? h k) (let ((x38426 (prim hash-has-key? h k))) x38426))
  (define (hash-count h) (let ((x38427 (prim hash-count h))) x38427))
  (define (call)
    (let ((a38428 '100))
      (let ((a38429 '80))
        (let ((a38430 '10))
          (let ((a38431 '2))
            (let ((a38432 '25))
              (let ((a38433 '30))
                (let ((a38434
                       (hash a38428 a38429 a38430 a38431 a38432 a38433)))
                  (hash-count a38434)))))))))
  (define (brouhaha_main) (let ((x38435 (call))) x38435)))
