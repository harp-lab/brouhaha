'((define (+ . lst)
    (let ((kont3843638537 (prim car lst)))
      (let ((lst38538 (prim cdr lst)))
        (let ((x3834538539 (apply-prim + lst38538)))
          (kont3843638537 x3834538539)))))
  (define (- . lst)
    (let ((kont3843838540 (prim car lst)))
      (let ((lst38541 (prim cdr lst)))
        (let ((x3834638542 (apply-prim - lst38541)))
          (kont3843838540 x3834638542)))))
  (define (* . lst)
    (let ((kont3844038543 (prim car lst)))
      (let ((lst38544 (prim cdr lst)))
        (let ((x3834738545 (apply-prim * lst38544)))
          (kont3844038543 x3834738545)))))
  (define (modulo kont38442 a b)
    (let ((x3834838546 (prim modulo a b))) (kont38442 x3834838546)))
  (define (/ . lst)
    (let ((kont3844338547 (prim car lst)))
      (let ((lst38548 (prim cdr lst)))
        (let ((x3834938549 (apply-prim / lst38548)))
          (kont3844338547 x3834938549)))))
  (define (= . lst)
    (let ((kont3844538550 (prim car lst)))
      (let ((lst38551 (prim cdr lst)))
        (let ((x3835038552 (apply-prim = lst38551)))
          (kont3844538550 x3835038552)))))
  (define (> . lst)
    (let ((kont3844738553 (prim car lst)))
      (let ((lst38554 (prim cdr lst)))
        (let ((x3835138555 (apply-prim > lst38554)))
          (kont3844738553 x3835138555)))))
  (define (< . lst)
    (let ((kont3844938556 (prim car lst)))
      (let ((lst38557 (prim cdr lst)))
        (let ((x3835238558 (apply-prim < lst38557)))
          (kont3844938556 x3835238558)))))
  (define (<= . lst)
    (let ((kont3845138559 (prim car lst)))
      (let ((lst38560 (prim cdr lst)))
        (let ((x3835338561 (apply-prim <= lst38560)))
          (kont3845138559 x3835338561)))))
  (define (>= . lst)
    (let ((kont3845338562 (prim car lst)))
      (let ((lst38563 (prim cdr lst)))
        (let ((x3835438564 (apply-prim >= lst38563)))
          (kont3845338562 x3835438564)))))
  (define (null? kont38455 x)
    (let ((x3835538565 (prim null? x))) (kont38455 x3835538565)))
  (define (equal? kont38456 x y)
    (let ((x3835638566 (prim equal? x y))) (kont38456 x3835638566)))
  (define (eq? kont38457 x y)
    (let ((x3835738567 (prim eq? x y))) (kont38457 x3835738567)))
  (define (cons kont38458 a b)
    (let ((x3835838568 (prim cons a b))) (kont38458 x3835838568)))
  (define (car kont38459 lst)
    (let ((x3835938569 (prim car lst))) (kont38459 x3835938569)))
  (define (cdr kont38460 lst)
    (let ((x3836038570 (prim cdr lst))) (kont38460 x3836038570)))
  (define (even? kont38461 x)
    (let ((a3836138571 '0))
      (let ((a3836238572 '2))
        (let ((f3846238573
               (lambda (a3836338574)
                 (equal? kont38461 a3836138571 a3836338574))))
          (modulo f3846238573 x a3836238572)))))
  (define (odd? kont38463 x)
    (let ((a3836438575 '1))
      (let ((a3836538576 '2))
        (let ((f3846438577
               (lambda (a3836638578)
                 (equal? kont38463 a3836438575 a3836638578))))
          (modulo f3846438577 x a3836538576)))))
  (define (list . x)
    (let ((kont3846538579 (prim car x)))
      (let ((x38580 (prim cdr x))) (kont3846538579 x38580))))
  (define (member? kont38467 x lst)
    (let ((f3847138581
           (lambda (a3836738582)
             (if a3836738582
               (let ((x3836838583 '#f)) (kont38467 x3836838583))
               (let ((f3847038584
                      (lambda (a3836938585)
                        (let ((f3846938586
                               (lambda (a3837038587)
                                 (if a3837038587
                                   (let ((x3837138588 '#t))
                                     (kont38467 x3837138588))
                                   (let ((f3846838589
                                          (lambda (a3837238590)
                                            (member?
                                             kont38467
                                             x
                                             a3837238590))))
                                     (cdr f3846838589 lst))))))
                          (equal? f3846938586 a3836938585 x)))))
                 (car f3847038584 lst))))))
      (null? f3847138581 lst)))
  (define (foldl kont38472 fun acc lst)
    (let ((f3847638591
           (lambda (a3837338592)
             (if a3837338592
               (kont38472 acc)
               (let ((f3847538593
                      (lambda (a3837438594)
                        (let ((f3847438595
                               (lambda (a3837538596)
                                 (let ((f3847338597
                                        (lambda (a3837638598)
                                          (foldl
                                           kont38472
                                           fun
                                           a3837538596
                                           a3837638598))))
                                   (cdr f3847338597 lst)))))
                          (fun f3847438595 a3837438594 acc)))))
                 (car f3847538593 lst))))))
      (null? f3847638591 lst)))
  (define (reverse-helper kont38477 lst lst2)
    (let ((f3848138599
           (lambda (a3837738600)
             (if a3837738600
               (kont38477 lst2)
               (let ((f3848038601
                      (lambda (a3837838602)
                        (let ((f3847938603
                               (lambda (a3837938604)
                                 (let ((f3847838605
                                        (lambda (a3838038606)
                                          (reverse-helper
                                           kont38477
                                           a3837838602
                                           a3838038606))))
                                   (cons f3847838605 a3837938604 lst2)))))
                          (car f3847938603 lst)))))
                 (cdr f3848038601 lst))))))
      (null? f3848138599 lst)))
  (define (reverse kont38482 lst)
    (let ((f3848338607
           (lambda (a3838138608) (reverse-helper kont38482 lst a3838138608))))
      (list f3848338607)))
  (define (take-helper kont38484 lst n lst2)
    (let ((a3838238609 '0))
      (let ((f3849038610
             (lambda (a3838338611)
               (if a3838338611
                 (let ((f3848538612
                        (lambda (x3838438613) (kont38484 x3838438613))))
                   (reverse f3848538612 lst2))
                 (let ((f3848938614
                        (lambda (a3838538615)
                          (let ((a3838638616 '1))
                            (let ((f3848838617
                                   (lambda (a3838738618)
                                     (let ((f3848738619
                                            (lambda (a3838838620)
                                              (let ((f3848638621
                                                     (lambda (a3838938622)
                                                       (take-helper
                                                        kont38484
                                                        a3838538615
                                                        a3838738618
                                                        a3838938622))))
                                                (cons
                                                 f3848638621
                                                 a3838838620
                                                 lst2)))))
                                       (car f3848738619 lst)))))
                              (- f3848838617 n a3838638616))))))
                   (cdr f3848938614 lst))))))
        (= f3849038610 n a3838238609))))
  (define (take kont38491 lst n)
    (let ((f3849238623
           (lambda (a3839038624) (take-helper kont38491 lst n a3839038624))))
      (list f3849238623)))
  (define (length kont38493 lst)
    (let ((f3849638625
           (lambda (a3839138626)
             (if a3839138626
               (let ((x3839238627 '0)) (kont38493 x3839238627))
               (let ((a3839338628 '1))
                 (let ((f3849538629
                        (lambda (a3839438630)
                          (let ((f3849438631
                                 (lambda (a3839538632)
                                   (+ kont38493 a3839338628 a3839538632))))
                            (length f3849438631 a3839438630)))))
                   (cdr f3849538629 lst)))))))
      (null? f3849638625 lst)))
  (define (map kont38497 proc lst)
    (let ((f3850338633
           (lambda (a3839638634)
             (if a3839638634
               (let ((f3849838635
                      (lambda (x3839738636) (kont38497 x3839738636))))
                 (list f3849838635))
               (let ((f3850238637
                      (lambda (a3839838638)
                        (let ((f3850138639
                               (lambda (a3839938640)
                                 (let ((f3850038641
                                        (lambda (a3840038642)
                                          (let ((f3849938643
                                                 (lambda (a3840138644)
                                                   (cons
                                                    kont38497
                                                    a3839938640
                                                    a3840138644))))
                                            (map
                                             f3849938643
                                             proc
                                             a3840038642)))))
                                   (cdr f3850038641 lst)))))
                          (proc f3850138639 a3839838638)))))
                 (car f3850238637 lst))))))
      (null? f3850338633 lst)))
  (define (filter kont38504 op lst)
    (let ((f3851238645
           (lambda (a3840238646)
             (if a3840238646
               (let ((f3850538647
                      (lambda (x3840338648) (kont38504 x3840338648))))
                 (list f3850538647))
               (let ((f3851138649
                      (lambda (a3840438650)
                        (let ((f3851038651
                               (lambda (a3840538652)
                                 (if a3840538652
                                   (let ((f3850838653
                                          (lambda (a3840638654)
                                            (let ((f3850738655
                                                   (lambda (a3840738656)
                                                     (let ((f3850638657
                                                            (lambda (a3840838658)
                                                              (cons
                                                               kont38504
                                                               a3840638654
                                                               a3840838658))))
                                                       (filter
                                                        f3850638657
                                                        op
                                                        a3840738656)))))
                                              (cdr f3850738655 lst)))))
                                     (car f3850838653 lst))
                                   (let ((f3850938659
                                          (lambda (a3840938660)
                                            (filter
                                             kont38504
                                             op
                                             a3840938660))))
                                     (cdr f3850938659 lst))))))
                          (op f3851038651 a3840438650)))))
                 (car f3851138649 lst))))))
      (null? f3851238645 lst)))
  (define (drop kont38513 lst n)
    (let ((a3841038661 '0))
      (let ((f3851638662
             (lambda (a3841138663)
               (if a3841138663
                 (kont38513 lst)
                 (let ((f3851538664
                        (lambda (a3841238665)
                          (let ((a3841338666 '1))
                            (let ((f3851438667
                                   (lambda (a3841438668)
                                     (drop
                                      kont38513
                                      a3841238665
                                      a3841438668))))
                              (- f3851438667 n a3841338666))))))
                   (cdr f3851538664 lst))))))
        (= f3851638662 n a3841038661))))
  (define (foldr kont38517 proc acc lst)
    (let ((f3852138669
           (lambda (a3841538670)
             (if a3841538670
               (kont38517 acc)
               (let ((f3852038671
                      (lambda (a3841638672)
                        (let ((f3851938673
                               (lambda (a3841738674)
                                 (let ((f3851838675
                                        (lambda (a3841838676)
                                          (proc
                                           kont38517
                                           a3841638672
                                           a3841838676))))
                                   (foldr f3851838675 proc acc a3841738674)))))
                          (cdr f3851938673 lst)))))
                 (car f3852038671 lst))))))
      (null? f3852138669 lst)))
  (define (append kont38522 lst1 lst2)
    (let ((f3852638677
           (lambda (a3841938678)
             (if a3841938678
               (kont38522 lst2)
               (let ((f3852538679
                      (lambda (a3842038680)
                        (let ((f3852438681
                               (lambda (a3842138682)
                                 (let ((f3852338683
                                        (lambda (a3842238684)
                                          (cons
                                           kont38522
                                           a3842038680
                                           a3842238684))))
                                   (append f3852338683 a3842138682 lst2)))))
                          (cdr f3852438681 lst1)))))
                 (car f3852538679 lst1))))))
      (null? f3852638677 lst1)))
  (define (hash . lst)
    (let ((kont3852738685 (prim car lst)))
      (let ((lst38686 (prim cdr lst)))
        (let ((x3842338687 (apply-prim hash lst38686)))
          (kont3852738685 x3842338687)))))
  (define (hash-ref kont38529 h k)
    (let ((x3842438688 (prim hash-ref h k))) (kont38529 x3842438688)))
  (define (hash-set kont38530 h k v)
    (let ((x3842538689 (prim hash-set h k v))) (kont38530 x3842538689)))
  (define (hash-has-key? kont38531 h k)
    (let ((x3842638690 (prim hash-has-key? h k))) (kont38531 x3842638690)))
  (define (hash-count kont38532 h)
    (let ((x3842738691 (prim hash-count h))) (kont38532 x3842738691)))
  (define (call kont38533)
    (let ((a3842838692 '100))
      (let ((a3842938693 '80))
        (let ((a3843038694 '10))
          (let ((a3843138695 '2))
            (let ((a3843238696 '25))
              (let ((a3843338697 '30))
                (let ((f3853438698
                       (lambda (a3843438699)
                         (hash-count kont38533 a3843438699))))
                  (hash
                   f3853438698
                   a3842838692
                   a3842938693
                   a3843038694
                   a3843138695
                   a3843238696
                   a3843338697)))))))))
  (define (brouhaha_main kont38535)
    (let ((f3853638700 (lambda (x3843538701) (kont38535 x3843538701))))
      (call f3853638700))))
