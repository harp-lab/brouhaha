'((define (+ . lst)
    (let ((kont3769637797 (prim car lst)))
      (let ((lst37798 (prim cdr lst)))
        (let ((x3760537799 (apply-prim + lst37798)))
          (kont3769637797 x3760537799)))))
  (define (- . lst)
    (let ((kont3769837800 (prim car lst)))
      (let ((lst37801 (prim cdr lst)))
        (let ((x3760637802 (apply-prim - lst37801)))
          (kont3769837800 x3760637802)))))
  (define (* . lst)
    (let ((kont3770037803 (prim car lst)))
      (let ((lst37804 (prim cdr lst)))
        (let ((x3760737805 (apply-prim * lst37804)))
          (kont3770037803 x3760737805)))))
  (define (modulo kont37702 a b)
    (let ((x3760837806 (prim modulo a b))) (kont37702 x3760837806)))
  (define (/ . lst)
    (let ((kont3770337807 (prim car lst)))
      (let ((lst37808 (prim cdr lst)))
        (let ((x3760937809 (apply-prim / lst37808)))
          (kont3770337807 x3760937809)))))
  (define (= . lst)
    (let ((kont3770537810 (prim car lst)))
      (let ((lst37811 (prim cdr lst)))
        (let ((x3761037812 (apply-prim = lst37811)))
          (kont3770537810 x3761037812)))))
  (define (> . lst)
    (let ((kont3770737813 (prim car lst)))
      (let ((lst37814 (prim cdr lst)))
        (let ((x3761137815 (apply-prim > lst37814)))
          (kont3770737813 x3761137815)))))
  (define (< . lst)
    (let ((kont3770937816 (prim car lst)))
      (let ((lst37817 (prim cdr lst)))
        (let ((x3761237818 (apply-prim < lst37817)))
          (kont3770937816 x3761237818)))))
  (define (<= . lst)
    (let ((kont3771137819 (prim car lst)))
      (let ((lst37820 (prim cdr lst)))
        (let ((x3761337821 (apply-prim <= lst37820)))
          (kont3771137819 x3761337821)))))
  (define (>= . lst)
    (let ((kont3771337822 (prim car lst)))
      (let ((lst37823 (prim cdr lst)))
        (let ((x3761437824 (apply-prim >= lst37823)))
          (kont3771337822 x3761437824)))))
  (define (null? kont37715 x)
    (let ((x3761537825 (prim null? x))) (kont37715 x3761537825)))
  (define (equal? kont37716 x y)
    (let ((x3761637826 (prim equal? x y))) (kont37716 x3761637826)))
  (define (eq? kont37717 x y)
    (let ((x3761737827 (prim eq? x y))) (kont37717 x3761737827)))
  (define (cons kont37718 a b)
    (let ((x3761837828 (prim cons a b))) (kont37718 x3761837828)))
  (define (car kont37719 lst)
    (let ((x3761937829 (prim car lst))) (kont37719 x3761937829)))
  (define (cdr kont37720 lst)
    (let ((x3762037830 (prim cdr lst))) (kont37720 x3762037830)))
  (define (even? kont37721 x)
    (let ((a3762137831 '0))
      (let ((a3762237832 '2))
        (let ((f3772237833
               (lambda (a3762337834)
                 (equal? kont37721 a3762137831 a3762337834))))
          (modulo f3772237833 x a3762237832)))))
  (define (odd? kont37723 x)
    (let ((a3762437835 '1))
      (let ((a3762537836 '2))
        (let ((f3772437837
               (lambda (a3762637838)
                 (equal? kont37723 a3762437835 a3762637838))))
          (modulo f3772437837 x a3762537836)))))
  (define (list . x)
    (let ((kont3772537839 (prim car x)))
      (let ((x37840 (prim cdr x))) (kont3772537839 x37840))))
  (define (member? kont37727 x lst)
    (let ((f3773137841
           (lambda (a3762737842)
             (if a3762737842
               (let ((x3762837843 '#f)) (kont37727 x3762837843))
               (let ((f3773037844
                      (lambda (a3762937845)
                        (let ((f3772937846
                               (lambda (a3763037847)
                                 (if a3763037847
                                   (let ((x3763137848 '#t))
                                     (kont37727 x3763137848))
                                   (let ((f3772837849
                                          (lambda (a3763237850)
                                            (member?
                                             kont37727
                                             x
                                             a3763237850))))
                                     (cdr f3772837849 lst))))))
                          (equal? f3772937846 a3762937845 x)))))
                 (car f3773037844 lst))))))
      (null? f3773137841 lst)))
  (define (foldl kont37732 fun acc lst)
    (let ((f3773637851
           (lambda (a3763337852)
             (if a3763337852
               (kont37732 acc)
               (let ((f3773537853
                      (lambda (a3763437854)
                        (let ((f3773437855
                               (lambda (a3763537856)
                                 (let ((f3773337857
                                        (lambda (a3763637858)
                                          (foldl
                                           kont37732
                                           fun
                                           a3763537856
                                           a3763637858))))
                                   (cdr f3773337857 lst)))))
                          (fun f3773437855 a3763437854 acc)))))
                 (car f3773537853 lst))))))
      (null? f3773637851 lst)))
  (define (reverse-helper kont37737 lst lst2)
    (let ((f3774137859
           (lambda (a3763737860)
             (if a3763737860
               (kont37737 lst2)
               (let ((f3774037861
                      (lambda (a3763837862)
                        (let ((f3773937863
                               (lambda (a3763937864)
                                 (let ((f3773837865
                                        (lambda (a3764037866)
                                          (reverse-helper
                                           kont37737
                                           a3763837862
                                           a3764037866))))
                                   (cons f3773837865 a3763937864 lst2)))))
                          (car f3773937863 lst)))))
                 (cdr f3774037861 lst))))))
      (null? f3774137859 lst)))
  (define (reverse kont37742 lst)
    (let ((f3774337867
           (lambda (a3764137868) (reverse-helper kont37742 lst a3764137868))))
      (list f3774337867)))
  (define (take-helper kont37744 lst n lst2)
    (let ((a3764237869 '0))
      (let ((f3775037870
             (lambda (a3764337871)
               (if a3764337871
                 (let ((f3774537872
                        (lambda (x3764437873) (kont37744 x3764437873))))
                   (reverse f3774537872 lst2))
                 (let ((f3774937874
                        (lambda (a3764537875)
                          (let ((a3764637876 '1))
                            (let ((f3774837877
                                   (lambda (a3764737878)
                                     (let ((f3774737879
                                            (lambda (a3764837880)
                                              (let ((f3774637881
                                                     (lambda (a3764937882)
                                                       (take-helper
                                                        kont37744
                                                        a3764537875
                                                        a3764737878
                                                        a3764937882))))
                                                (cons
                                                 f3774637881
                                                 a3764837880
                                                 lst2)))))
                                       (car f3774737879 lst)))))
                              (- f3774837877 n a3764637876))))))
                   (cdr f3774937874 lst))))))
        (= f3775037870 n a3764237869))))
  (define (take kont37751 lst n)
    (let ((f3775237883
           (lambda (a3765037884) (take-helper kont37751 lst n a3765037884))))
      (list f3775237883)))
  (define (length kont37753 lst)
    (let ((f3775637885
           (lambda (a3765137886)
             (if a3765137886
               (let ((x3765237887 '0)) (kont37753 x3765237887))
               (let ((a3765337888 '1))
                 (let ((f3775537889
                        (lambda (a3765437890)
                          (let ((f3775437891
                                 (lambda (a3765537892)
                                   (+ kont37753 a3765337888 a3765537892))))
                            (length f3775437891 a3765437890)))))
                   (cdr f3775537889 lst)))))))
      (null? f3775637885 lst)))
  (define (map kont37757 proc lst)
    (let ((f3776337893
           (lambda (a3765637894)
             (if a3765637894
               (let ((f3775837895
                      (lambda (x3765737896) (kont37757 x3765737896))))
                 (list f3775837895))
               (let ((f3776237897
                      (lambda (a3765837898)
                        (let ((f3776137899
                               (lambda (a3765937900)
                                 (let ((f3776037901
                                        (lambda (a3766037902)
                                          (let ((f3775937903
                                                 (lambda (a3766137904)
                                                   (cons
                                                    kont37757
                                                    a3765937900
                                                    a3766137904))))
                                            (map
                                             f3775937903
                                             proc
                                             a3766037902)))))
                                   (cdr f3776037901 lst)))))
                          (proc f3776137899 a3765837898)))))
                 (car f3776237897 lst))))))
      (null? f3776337893 lst)))
  (define (filter kont37764 op lst)
    (let ((f3777237905
           (lambda (a3766237906)
             (if a3766237906
               (let ((f3776537907
                      (lambda (x3766337908) (kont37764 x3766337908))))
                 (list f3776537907))
               (let ((f3777137909
                      (lambda (a3766437910)
                        (let ((f3777037911
                               (lambda (a3766537912)
                                 (if a3766537912
                                   (let ((f3776837913
                                          (lambda (a3766637914)
                                            (let ((f3776737915
                                                   (lambda (a3766737916)
                                                     (let ((f3776637917
                                                            (lambda (a3766837918)
                                                              (cons
                                                               kont37764
                                                               a3766637914
                                                               a3766837918))))
                                                       (filter
                                                        f3776637917
                                                        op
                                                        a3766737916)))))
                                              (cdr f3776737915 lst)))))
                                     (car f3776837913 lst))
                                   (let ((f3776937919
                                          (lambda (a3766937920)
                                            (filter
                                             kont37764
                                             op
                                             a3766937920))))
                                     (cdr f3776937919 lst))))))
                          (op f3777037911 a3766437910)))))
                 (car f3777137909 lst))))))
      (null? f3777237905 lst)))
  (define (drop kont37773 lst n)
    (let ((a3767037921 '0))
      (let ((f3777637922
             (lambda (a3767137923)
               (if a3767137923
                 (kont37773 lst)
                 (let ((f3777537924
                        (lambda (a3767237925)
                          (let ((a3767337926 '1))
                            (let ((f3777437927
                                   (lambda (a3767437928)
                                     (drop
                                      kont37773
                                      a3767237925
                                      a3767437928))))
                              (- f3777437927 n a3767337926))))))
                   (cdr f3777537924 lst))))))
        (= f3777637922 n a3767037921))))
  (define (foldr kont37777 proc acc lst)
    (let ((f3778137929
           (lambda (a3767537930)
             (if a3767537930
               (kont37777 acc)
               (let ((f3778037931
                      (lambda (a3767637932)
                        (let ((f3777937933
                               (lambda (a3767737934)
                                 (let ((f3777837935
                                        (lambda (a3767837936)
                                          (proc
                                           kont37777
                                           a3767637932
                                           a3767837936))))
                                   (foldr f3777837935 proc acc a3767737934)))))
                          (cdr f3777937933 lst)))))
                 (car f3778037931 lst))))))
      (null? f3778137929 lst)))
  (define (append kont37782 lst1 lst2)
    (let ((f3778637937
           (lambda (a3767937938)
             (if a3767937938
               (kont37782 lst2)
               (let ((f3778537939
                      (lambda (a3768037940)
                        (let ((f3778437941
                               (lambda (a3768137942)
                                 (let ((f3778337943
                                        (lambda (a3768237944)
                                          (cons
                                           kont37782
                                           a3768037940
                                           a3768237944))))
                                   (append f3778337943 a3768137942 lst2)))))
                          (cdr f3778437941 lst1)))))
                 (car f3778537939 lst1))))))
      (null? f3778637937 lst1)))
  (define (hash . lst)
    (let ((kont3778737945 (prim car lst)))
      (let ((lst37946 (prim cdr lst)))
        (let ((x3768337947 (apply-prim hash lst37946)))
          (kont3778737945 x3768337947)))))
  (define (hash-ref kont37789 h k)
    (let ((x3768437948 (prim hash-ref h k))) (kont37789 x3768437948)))
  (define (hash-set kont37790 h k v)
    (let ((x3768537949 (prim hash-set h k v))) (kont37790 x3768537949)))
  (define (hash-has-key? kont37791 h k)
    (let ((x3768637950 (prim hash-has-key? h k))) (kont37791 x3768637950)))
  (define (hash-count kont37792 h)
    (let ((x3768737951 (prim hash-count h))) (kont37792 x3768737951)))
  (define (call kont37793)
    (let ((a3768837952 '100))
      (let ((a3768937953 '80))
        (let ((a3769037954 '10))
          (let ((a3769137955 '2))
            (let ((a3769237956 '25))
              (let ((a3769337957 '30))
                (let ((f3779437958
                       (lambda (a3769437959)
                         (hash-count kont37793 a3769437959))))
                  (hash
                   f3779437958
                   a3768837952
                   a3768937953
                   a3769037954
                   a3769137955
                   a3769237956
                   a3769337957)))))))))
  (define (brouhaha_main kont37795)
    (let ((f3779637960 (lambda (x3769537961) (kont37795 x3769537961))))
      (call f3779637960))))
