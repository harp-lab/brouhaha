'((define (+ . lst)
    (let ((kont38436 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38345 (apply-prim + lst))) (kont38436 x38345)))))
  (define (- . lst)
    (let ((kont38438 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38346 (apply-prim - lst))) (kont38438 x38346)))))
  (define (* . lst)
    (let ((kont38440 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38347 (apply-prim * lst))) (kont38440 x38347)))))
  (define (modulo kont38442 a b)
    (let ((x38348 (prim modulo a b))) (kont38442 x38348)))
  (define (/ . lst)
    (let ((kont38443 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38349 (apply-prim / lst))) (kont38443 x38349)))))
  (define (= . lst)
    (let ((kont38445 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38350 (apply-prim = lst))) (kont38445 x38350)))))
  (define (> . lst)
    (let ((kont38447 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38351 (apply-prim > lst))) (kont38447 x38351)))))
  (define (< . lst)
    (let ((kont38449 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38352 (apply-prim < lst))) (kont38449 x38352)))))
  (define (<= . lst)
    (let ((kont38451 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38353 (apply-prim <= lst))) (kont38451 x38353)))))
  (define (>= . lst)
    (let ((kont38453 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38354 (apply-prim >= lst))) (kont38453 x38354)))))
  (define (null? kont38455 x)
    (let ((x38355 (prim null? x))) (kont38455 x38355)))
  (define (equal? kont38456 x y)
    (let ((x38356 (prim equal? x y))) (kont38456 x38356)))
  (define (eq? kont38457 x y)
    (let ((x38357 (prim eq? x y))) (kont38457 x38357)))
  (define (cons kont38458 a b)
    (let ((x38358 (prim cons a b))) (kont38458 x38358)))
  (define (car kont38459 lst)
    (let ((x38359 (prim car lst))) (kont38459 x38359)))
  (define (cdr kont38460 lst)
    (let ((x38360 (prim cdr lst))) (kont38460 x38360)))
  (define (even? kont38461 x)
    (let ((a38361 '0))
      (let ((a38362 '2))
        (let ((f38462 (lambda (a38363) (equal? kont38461 a38361 a38363))))
          (modulo f38462 x a38362)))))
  (define (odd? kont38463 x)
    (let ((a38364 '1))
      (let ((a38365 '2))
        (let ((f38464 (lambda (a38366) (equal? kont38463 a38364 a38366))))
          (modulo f38464 x a38365)))))
  (define (list . x)
    (let ((kont38465 (prim car x))) (let ((x (prim cdr x))) (kont38465 x))))
  (define (member? kont38467 x lst)
    (let ((f38471
           (lambda (a38367)
             (if a38367
               (let ((x38368 '#f)) (kont38467 x38368))
               (let ((f38470
                      (lambda (a38369)
                        (let ((f38469
                               (lambda (a38370)
                                 (if a38370
                                   (let ((x38371 '#t)) (kont38467 x38371))
                                   (let ((f38468
                                          (lambda (a38372)
                                            (member? kont38467 x a38372))))
                                     (cdr f38468 lst))))))
                          (equal? f38469 a38369 x)))))
                 (car f38470 lst))))))
      (null? f38471 lst)))
  (define (foldl kont38472 fun acc lst)
    (let ((f38476
           (lambda (a38373)
             (if a38373
               (kont38472 acc)
               (let ((f38475
                      (lambda (a38374)
                        (let ((f38474
                               (lambda (a38375)
                                 (let ((f38473
                                        (lambda (a38376)
                                          (foldl
                                           kont38472
                                           fun
                                           a38375
                                           a38376))))
                                   (cdr f38473 lst)))))
                          (fun f38474 a38374 acc)))))
                 (car f38475 lst))))))
      (null? f38476 lst)))
  (define (reverse-helper kont38477 lst lst2)
    (let ((f38481
           (lambda (a38377)
             (if a38377
               (kont38477 lst2)
               (let ((f38480
                      (lambda (a38378)
                        (let ((f38479
                               (lambda (a38379)
                                 (let ((f38478
                                        (lambda (a38380)
                                          (reverse-helper
                                           kont38477
                                           a38378
                                           a38380))))
                                   (cons f38478 a38379 lst2)))))
                          (car f38479 lst)))))
                 (cdr f38480 lst))))))
      (null? f38481 lst)))
  (define (reverse kont38482 lst)
    (let ((f38483 (lambda (a38381) (reverse-helper kont38482 lst a38381))))
      (list f38483)))
  (define (take-helper kont38484 lst n lst2)
    (let ((a38382 '0))
      (let ((f38490
             (lambda (a38383)
               (if a38383
                 (let ((f38485 (lambda (x38384) (kont38484 x38384))))
                   (reverse f38485 lst2))
                 (let ((f38489
                        (lambda (a38385)
                          (let ((a38386 '1))
                            (let ((f38488
                                   (lambda (a38387)
                                     (let ((f38487
                                            (lambda (a38388)
                                              (let ((f38486
                                                     (lambda (a38389)
                                                       (take-helper
                                                        kont38484
                                                        a38385
                                                        a38387
                                                        a38389))))
                                                (cons f38486 a38388 lst2)))))
                                       (car f38487 lst)))))
                              (- f38488 n a38386))))))
                   (cdr f38489 lst))))))
        (= f38490 n a38382))))
  (define (take kont38491 lst n)
    (let ((f38492 (lambda (a38390) (take-helper kont38491 lst n a38390))))
      (list f38492)))
  (define (length kont38493 lst)
    (let ((f38496
           (lambda (a38391)
             (if a38391
               (let ((x38392 '0)) (kont38493 x38392))
               (let ((a38393 '1))
                 (let ((f38495
                        (lambda (a38394)
                          (let ((f38494
                                 (lambda (a38395)
                                   (+ kont38493 a38393 a38395))))
                            (length f38494 a38394)))))
                   (cdr f38495 lst)))))))
      (null? f38496 lst)))
  (define (map kont38497 proc lst)
    (let ((f38503
           (lambda (a38396)
             (if a38396
               (let ((f38498 (lambda (x38397) (kont38497 x38397))))
                 (list f38498))
               (let ((f38502
                      (lambda (a38398)
                        (let ((f38501
                               (lambda (a38399)
                                 (let ((f38500
                                        (lambda (a38400)
                                          (let ((f38499
                                                 (lambda (a38401)
                                                   (cons
                                                    kont38497
                                                    a38399
                                                    a38401))))
                                            (map f38499 proc a38400)))))
                                   (cdr f38500 lst)))))
                          (proc f38501 a38398)))))
                 (car f38502 lst))))))
      (null? f38503 lst)))
  (define (filter kont38504 op lst)
    (let ((f38512
           (lambda (a38402)
             (if a38402
               (let ((f38505 (lambda (x38403) (kont38504 x38403))))
                 (list f38505))
               (let ((f38511
                      (lambda (a38404)
                        (let ((f38510
                               (lambda (a38405)
                                 (if a38405
                                   (let ((f38508
                                          (lambda (a38406)
                                            (let ((f38507
                                                   (lambda (a38407)
                                                     (let ((f38506
                                                            (lambda (a38408)
                                                              (cons
                                                               kont38504
                                                               a38406
                                                               a38408))))
                                                       (filter
                                                        f38506
                                                        op
                                                        a38407)))))
                                              (cdr f38507 lst)))))
                                     (car f38508 lst))
                                   (let ((f38509
                                          (lambda (a38409)
                                            (filter kont38504 op a38409))))
                                     (cdr f38509 lst))))))
                          (op f38510 a38404)))))
                 (car f38511 lst))))))
      (null? f38512 lst)))
  (define (drop kont38513 lst n)
    (let ((a38410 '0))
      (let ((f38516
             (lambda (a38411)
               (if a38411
                 (kont38513 lst)
                 (let ((f38515
                        (lambda (a38412)
                          (let ((a38413 '1))
                            (let ((f38514
                                   (lambda (a38414)
                                     (drop kont38513 a38412 a38414))))
                              (- f38514 n a38413))))))
                   (cdr f38515 lst))))))
        (= f38516 n a38410))))
  (define (foldr kont38517 proc acc lst)
    (let ((f38521
           (lambda (a38415)
             (if a38415
               (kont38517 acc)
               (let ((f38520
                      (lambda (a38416)
                        (let ((f38519
                               (lambda (a38417)
                                 (let ((f38518
                                        (lambda (a38418)
                                          (proc kont38517 a38416 a38418))))
                                   (foldr f38518 proc acc a38417)))))
                          (cdr f38519 lst)))))
                 (car f38520 lst))))))
      (null? f38521 lst)))
  (define (append kont38522 lst1 lst2)
    (let ((f38526
           (lambda (a38419)
             (if a38419
               (kont38522 lst2)
               (let ((f38525
                      (lambda (a38420)
                        (let ((f38524
                               (lambda (a38421)
                                 (let ((f38523
                                        (lambda (a38422)
                                          (cons kont38522 a38420 a38422))))
                                   (append f38523 a38421 lst2)))))
                          (cdr f38524 lst1)))))
                 (car f38525 lst1))))))
      (null? f38526 lst1)))
  (define (hash . lst)
    (let ((kont38527 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x38423 (apply-prim hash lst))) (kont38527 x38423)))))
  (define (hash-ref kont38529 h k)
    (let ((x38424 (prim hash-ref h k))) (kont38529 x38424)))
  (define (hash-set kont38530 h k v)
    (let ((x38425 (prim hash-set h k v))) (kont38530 x38425)))
  (define (hash-has-key? kont38531 h k)
    (let ((x38426 (prim hash-has-key? h k))) (kont38531 x38426)))
  (define (hash-count kont38532 h)
    (let ((x38427 (prim hash-count h))) (kont38532 x38427)))
  (define (call kont38533)
    (let ((a38428 '100))
      (let ((a38429 '80))
        (let ((a38430 '10))
          (let ((a38431 '2))
            (let ((a38432 '25))
              (let ((a38433 '30))
                (let ((f38534 (lambda (a38434) (hash-count kont38533 a38434))))
                  (hash
                   f38534
                   a38428
                   a38429
                   a38430
                   a38431
                   a38432
                   a38433)))))))))
  (define (brouhaha_main kont38535)
    (let ((f38536 (lambda (x38435) (kont38535 x38435)))) (call f38536))))
