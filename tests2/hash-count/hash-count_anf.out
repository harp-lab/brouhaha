'((define (+ . lst)
    (let ((kont37696 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37605 (apply-prim + lst))) (kont37696 x37605)))))
  (define (- . lst)
    (let ((kont37698 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37606 (apply-prim - lst))) (kont37698 x37606)))))
  (define (* . lst)
    (let ((kont37700 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37607 (apply-prim * lst))) (kont37700 x37607)))))
  (define (modulo kont37702 a b)
    (let ((x37608 (prim modulo a b))) (kont37702 x37608)))
  (define (/ . lst)
    (let ((kont37703 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37609 (apply-prim / lst))) (kont37703 x37609)))))
  (define (= . lst)
    (let ((kont37705 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37610 (apply-prim = lst))) (kont37705 x37610)))))
  (define (> . lst)
    (let ((kont37707 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37611 (apply-prim > lst))) (kont37707 x37611)))))
  (define (< . lst)
    (let ((kont37709 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37612 (apply-prim < lst))) (kont37709 x37612)))))
  (define (<= . lst)
    (let ((kont37711 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37613 (apply-prim <= lst))) (kont37711 x37613)))))
  (define (>= . lst)
    (let ((kont37713 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37614 (apply-prim >= lst))) (kont37713 x37614)))))
  (define (null? kont37715 x)
    (let ((x37615 (prim null? x))) (kont37715 x37615)))
  (define (equal? kont37716 x y)
    (let ((x37616 (prim equal? x y))) (kont37716 x37616)))
  (define (eq? kont37717 x y)
    (let ((x37617 (prim eq? x y))) (kont37717 x37617)))
  (define (cons kont37718 a b)
    (let ((x37618 (prim cons a b))) (kont37718 x37618)))
  (define (car kont37719 lst)
    (let ((x37619 (prim car lst))) (kont37719 x37619)))
  (define (cdr kont37720 lst)
    (let ((x37620 (prim cdr lst))) (kont37720 x37620)))
  (define (even? kont37721 x)
    (let ((a37621 '0))
      (let ((a37622 '2))
        (let ((f37722 (lambda (a37623) (equal? kont37721 a37621 a37623))))
          (modulo f37722 x a37622)))))
  (define (odd? kont37723 x)
    (let ((a37624 '1))
      (let ((a37625 '2))
        (let ((f37724 (lambda (a37626) (equal? kont37723 a37624 a37626))))
          (modulo f37724 x a37625)))))
  (define (list . x)
    (let ((kont37725 (prim car x))) (let ((x (prim cdr x))) (kont37725 x))))
  (define (member? kont37727 x lst)
    (let ((f37731
           (lambda (a37627)
             (if a37627
               (let ((x37628 '#f)) (kont37727 x37628))
               (let ((f37730
                      (lambda (a37629)
                        (let ((f37729
                               (lambda (a37630)
                                 (if a37630
                                   (let ((x37631 '#t)) (kont37727 x37631))
                                   (let ((f37728
                                          (lambda (a37632)
                                            (member? kont37727 x a37632))))
                                     (cdr f37728 lst))))))
                          (equal? f37729 a37629 x)))))
                 (car f37730 lst))))))
      (null? f37731 lst)))
  (define (foldl kont37732 fun acc lst)
    (let ((f37736
           (lambda (a37633)
             (if a37633
               (kont37732 acc)
               (let ((f37735
                      (lambda (a37634)
                        (let ((f37734
                               (lambda (a37635)
                                 (let ((f37733
                                        (lambda (a37636)
                                          (foldl
                                           kont37732
                                           fun
                                           a37635
                                           a37636))))
                                   (cdr f37733 lst)))))
                          (fun f37734 a37634 acc)))))
                 (car f37735 lst))))))
      (null? f37736 lst)))
  (define (reverse-helper kont37737 lst lst2)
    (let ((f37741
           (lambda (a37637)
             (if a37637
               (kont37737 lst2)
               (let ((f37740
                      (lambda (a37638)
                        (let ((f37739
                               (lambda (a37639)
                                 (let ((f37738
                                        (lambda (a37640)
                                          (reverse-helper
                                           kont37737
                                           a37638
                                           a37640))))
                                   (cons f37738 a37639 lst2)))))
                          (car f37739 lst)))))
                 (cdr f37740 lst))))))
      (null? f37741 lst)))
  (define (reverse kont37742 lst)
    (let ((f37743 (lambda (a37641) (reverse-helper kont37742 lst a37641))))
      (list f37743)))
  (define (take-helper kont37744 lst n lst2)
    (let ((a37642 '0))
      (let ((f37750
             (lambda (a37643)
               (if a37643
                 (let ((f37745 (lambda (x37644) (kont37744 x37644))))
                   (reverse f37745 lst2))
                 (let ((f37749
                        (lambda (a37645)
                          (let ((a37646 '1))
                            (let ((f37748
                                   (lambda (a37647)
                                     (let ((f37747
                                            (lambda (a37648)
                                              (let ((f37746
                                                     (lambda (a37649)
                                                       (take-helper
                                                        kont37744
                                                        a37645
                                                        a37647
                                                        a37649))))
                                                (cons f37746 a37648 lst2)))))
                                       (car f37747 lst)))))
                              (- f37748 n a37646))))))
                   (cdr f37749 lst))))))
        (= f37750 n a37642))))
  (define (take kont37751 lst n)
    (let ((f37752 (lambda (a37650) (take-helper kont37751 lst n a37650))))
      (list f37752)))
  (define (length kont37753 lst)
    (let ((f37756
           (lambda (a37651)
             (if a37651
               (let ((x37652 '0)) (kont37753 x37652))
               (let ((a37653 '1))
                 (let ((f37755
                        (lambda (a37654)
                          (let ((f37754
                                 (lambda (a37655)
                                   (+ kont37753 a37653 a37655))))
                            (length f37754 a37654)))))
                   (cdr f37755 lst)))))))
      (null? f37756 lst)))
  (define (map kont37757 proc lst)
    (let ((f37763
           (lambda (a37656)
             (if a37656
               (let ((f37758 (lambda (x37657) (kont37757 x37657))))
                 (list f37758))
               (let ((f37762
                      (lambda (a37658)
                        (let ((f37761
                               (lambda (a37659)
                                 (let ((f37760
                                        (lambda (a37660)
                                          (let ((f37759
                                                 (lambda (a37661)
                                                   (cons
                                                    kont37757
                                                    a37659
                                                    a37661))))
                                            (map f37759 proc a37660)))))
                                   (cdr f37760 lst)))))
                          (proc f37761 a37658)))))
                 (car f37762 lst))))))
      (null? f37763 lst)))
  (define (filter kont37764 op lst)
    (let ((f37772
           (lambda (a37662)
             (if a37662
               (let ((f37765 (lambda (x37663) (kont37764 x37663))))
                 (list f37765))
               (let ((f37771
                      (lambda (a37664)
                        (let ((f37770
                               (lambda (a37665)
                                 (if a37665
                                   (let ((f37768
                                          (lambda (a37666)
                                            (let ((f37767
                                                   (lambda (a37667)
                                                     (let ((f37766
                                                            (lambda (a37668)
                                                              (cons
                                                               kont37764
                                                               a37666
                                                               a37668))))
                                                       (filter
                                                        f37766
                                                        op
                                                        a37667)))))
                                              (cdr f37767 lst)))))
                                     (car f37768 lst))
                                   (let ((f37769
                                          (lambda (a37669)
                                            (filter kont37764 op a37669))))
                                     (cdr f37769 lst))))))
                          (op f37770 a37664)))))
                 (car f37771 lst))))))
      (null? f37772 lst)))
  (define (drop kont37773 lst n)
    (let ((a37670 '0))
      (let ((f37776
             (lambda (a37671)
               (if a37671
                 (kont37773 lst)
                 (let ((f37775
                        (lambda (a37672)
                          (let ((a37673 '1))
                            (let ((f37774
                                   (lambda (a37674)
                                     (drop kont37773 a37672 a37674))))
                              (- f37774 n a37673))))))
                   (cdr f37775 lst))))))
        (= f37776 n a37670))))
  (define (foldr kont37777 proc acc lst)
    (let ((f37781
           (lambda (a37675)
             (if a37675
               (kont37777 acc)
               (let ((f37780
                      (lambda (a37676)
                        (let ((f37779
                               (lambda (a37677)
                                 (let ((f37778
                                        (lambda (a37678)
                                          (proc kont37777 a37676 a37678))))
                                   (foldr f37778 proc acc a37677)))))
                          (cdr f37779 lst)))))
                 (car f37780 lst))))))
      (null? f37781 lst)))
  (define (append kont37782 lst1 lst2)
    (let ((f37786
           (lambda (a37679)
             (if a37679
               (kont37782 lst2)
               (let ((f37785
                      (lambda (a37680)
                        (let ((f37784
                               (lambda (a37681)
                                 (let ((f37783
                                        (lambda (a37682)
                                          (cons kont37782 a37680 a37682))))
                                   (append f37783 a37681 lst2)))))
                          (cdr f37784 lst1)))))
                 (car f37785 lst1))))))
      (null? f37786 lst1)))
  (define (hash . lst)
    (let ((kont37787 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x37683 (apply-prim hash lst))) (kont37787 x37683)))))
  (define (hash-ref kont37789 h k)
    (let ((x37684 (prim hash-ref h k))) (kont37789 x37684)))
  (define (hash-set kont37790 h k v)
    (let ((x37685 (prim hash-set h k v))) (kont37790 x37685)))
  (define (hash-has-key? kont37791 h k)
    (let ((x37686 (prim hash-has-key? h k))) (kont37791 x37686)))
  (define (hash-count kont37792 h)
    (let ((x37687 (prim hash-count h))) (kont37792 x37687)))
  (define (call kont37793)
    (let ((a37688 '100))
      (let ((a37689 '80))
        (let ((a37690 '10))
          (let ((a37691 '2))
            (let ((a37692 '25))
              (let ((a37693 '30))
                (let ((f37794 (lambda (a37694) (hash-count kont37793 a37694))))
                  (hash
                   f37794
                   a37688
                   a37689
                   a37690
                   a37691
                   a37692
                   a37693)))))))))
  (define (brouhaha_main kont37795)
    (let ((f37796 (lambda (x37695) (kont37795 x37695)))) (call f37796))))
