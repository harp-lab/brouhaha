'((define (+ . lst)
    (let ((kont10470 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10447 (apply-prim + lst))) (kont10470 x10447)))))
  (define (- . lst)
    (let ((kont10472 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10448 (apply-prim - lst))) (kont10472 x10448)))))
  (define (* . lst)
    (let ((kont10474 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10449 (apply-prim * lst))) (kont10474 x10449)))))
  (define (modulo kont10476 a b)
    (let ((x10450 (prim modulo a b))) (kont10476 x10450)))
  (define (= . lst)
    (let ((kont10477 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10451 (apply-prim = lst))) (kont10477 x10451)))))
  (define (> . lst)
    (let ((kont10479 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10452 (apply-prim > lst))) (kont10479 x10452)))))
  (define (< . lst)
    (let ((kont10481 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10453 (apply-prim < lst))) (kont10481 x10453)))))
  (define (<= . lst)
    (let ((kont10483 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10454 (apply-prim <= lst))) (kont10483 x10454)))))
  (define (>= . lst)
    (let ((kont10485 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x10455 (apply-prim >= lst))) (kont10485 x10455)))))
  (define (null? kont10487 x)
    (let ((x10456 (prim null? x))) (kont10487 x10456)))
  (define (equal? kont10488 x y)
    (let ((x10457 (prim equal? x y))) (kont10488 x10457)))
  (define (eq? kont10489 x y)
    (let ((x10458 (prim eq? x y))) (kont10489 x10458)))
  (define (cons kont10490 a b)
    (let ((x10459 (prim cons a b))) (kont10490 x10459)))
  (define (car kont10491 lst)
    (let ((x10460 (prim car lst))) (kont10491 x10460)))
  (define (cdr kont10492 lst)
    (let ((x10461 (prim cdr lst))) (kont10492 x10461)))
  (define (even? kont10493 x)
    (let ((a10462 '0))
      (let ((a10463 '2))
        (let ((f10494 (lambda (a10464) (equal? kont10493 a10462 a10464))))
          (modulo f10494 x a10463)))))
  (define (odd? kont10495 x)
    (let ((a10465 '1))
      (let ((a10466 '2))
        (let ((f10496 (lambda (a10467) (equal? kont10495 a10465 a10467))))
          (modulo f10496 x a10466)))))
  (define (list . x)
    (let ((kont10497 (prim car x))) (let ((x (prim cdr x))) (kont10497 x))))
  (define (call kont10499) (let ((a10468 '1)) (null? kont10499 a10468)))
  (define (brouhaha_main kont10500)
    (let ((f10501 (lambda (x10469) (kont10500 x10469)))) (call f10501))))
