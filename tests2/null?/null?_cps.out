'((define (+ . lst)
    (let ((kont1047010502 (prim car lst)))
      (let ((lst10503 (prim cdr lst)))
        (let ((x1044710504 (apply-prim + lst10503)))
          (kont1047010502 x1044710504)))))
  (define (- . lst)
    (let ((kont1047210505 (prim car lst)))
      (let ((lst10506 (prim cdr lst)))
        (let ((x1044810507 (apply-prim - lst10506)))
          (kont1047210505 x1044810507)))))
  (define (* . lst)
    (let ((kont1047410508 (prim car lst)))
      (let ((lst10509 (prim cdr lst)))
        (let ((x1044910510 (apply-prim * lst10509)))
          (kont1047410508 x1044910510)))))
  (define (modulo kont10476 a b)
    (let ((x1045010511 (prim modulo a b))) (kont10476 x1045010511)))
  (define (= . lst)
    (let ((kont1047710512 (prim car lst)))
      (let ((lst10513 (prim cdr lst)))
        (let ((x1045110514 (apply-prim = lst10513)))
          (kont1047710512 x1045110514)))))
  (define (> . lst)
    (let ((kont1047910515 (prim car lst)))
      (let ((lst10516 (prim cdr lst)))
        (let ((x1045210517 (apply-prim > lst10516)))
          (kont1047910515 x1045210517)))))
  (define (< . lst)
    (let ((kont1048110518 (prim car lst)))
      (let ((lst10519 (prim cdr lst)))
        (let ((x1045310520 (apply-prim < lst10519)))
          (kont1048110518 x1045310520)))))
  (define (<= . lst)
    (let ((kont1048310521 (prim car lst)))
      (let ((lst10522 (prim cdr lst)))
        (let ((x1045410523 (apply-prim <= lst10522)))
          (kont1048310521 x1045410523)))))
  (define (>= . lst)
    (let ((kont1048510524 (prim car lst)))
      (let ((lst10525 (prim cdr lst)))
        (let ((x1045510526 (apply-prim >= lst10525)))
          (kont1048510524 x1045510526)))))
  (define (null? kont10487 x)
    (let ((x1045610527 (prim null? x))) (kont10487 x1045610527)))
  (define (equal? kont10488 x y)
    (let ((x1045710528 (prim equal? x y))) (kont10488 x1045710528)))
  (define (eq? kont10489 x y)
    (let ((x1045810529 (prim eq? x y))) (kont10489 x1045810529)))
  (define (cons kont10490 a b)
    (let ((x1045910530 (prim cons a b))) (kont10490 x1045910530)))
  (define (car kont10491 lst)
    (let ((x1046010531 (prim car lst))) (kont10491 x1046010531)))
  (define (cdr kont10492 lst)
    (let ((x1046110532 (prim cdr lst))) (kont10492 x1046110532)))
  (define (even? kont10493 x)
    (let ((a1046210533 '0))
      (let ((a1046310534 '2))
        (let ((f1049410535
               (lambda (a1046410536)
                 (equal? kont10493 a1046210533 a1046410536))))
          (modulo f1049410535 x a1046310534)))))
  (define (odd? kont10495 x)
    (let ((a1046510537 '1))
      (let ((a1046610538 '2))
        (let ((f1049610539
               (lambda (a1046710540)
                 (equal? kont10495 a1046510537 a1046710540))))
          (modulo f1049610539 x a1046610538)))))
  (define (list . x)
    (let ((kont1049710541 (prim car x)))
      (let ((x10542 (prim cdr x))) (kont1049710541 x10542))))
  (define (call kont10499)
    (let ((a1046810543 '1)) (null? kont10499 a1046810543)))
  (define (brouhaha_main kont10500)
    (let ((f1050110544 (lambda (x1046910545) (kont10500 x1046910545))))
      (call f1050110544))))
