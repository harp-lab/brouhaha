'((define (+ . lst) (let ((x10447 (apply-prim + lst))) x10447))
  (define (- . lst) (let ((x10448 (apply-prim - lst))) x10448))
  (define (* . lst) (let ((x10449 (apply-prim * lst))) x10449))
  (define (modulo a b) (let ((x10450 (prim modulo a b))) x10450))
  (define (= . lst) (let ((x10451 (apply-prim = lst))) x10451))
  (define (> . lst) (let ((x10452 (apply-prim > lst))) x10452))
  (define (< . lst) (let ((x10453 (apply-prim < lst))) x10453))
  (define (<= . lst) (let ((x10454 (apply-prim <= lst))) x10454))
  (define (>= . lst) (let ((x10455 (apply-prim >= lst))) x10455))
  (define (null? x) (let ((x10456 (prim null? x))) x10456))
  (define (equal? x y) (let ((x10457 (prim equal? x y))) x10457))
  (define (eq? x y) (let ((x10458 (prim eq? x y))) x10458))
  (define (cons a b) (let ((x10459 (prim cons a b))) x10459))
  (define (car lst) (let ((x10460 (prim car lst))) x10460))
  (define (cdr lst) (let ((x10461 (prim cdr lst))) x10461))
  (define (even? x)
    (let ((a10462 '0))
      (let ((a10463 '2))
        (let ((a10464 (modulo x a10463))) (equal? a10462 a10464)))))
  (define (odd? x)
    (let ((a10465 '1))
      (let ((a10466 '2))
        (let ((a10467 (modulo x a10466))) (equal? a10465 a10467)))))
  (define (list . x) x)
  (define (call) (let ((a10468 '1)) (null? a10468)))
  (define (brouhaha_main) (let ((x10469 (call))) x10469)))
