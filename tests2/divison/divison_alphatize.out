'((define (+ . lst) (let ((x9436 (apply-prim + lst))) x9436))
  (define (- . lst) (let ((x9437 (apply-prim - lst))) x9437))
  (define (* . lst) (let ((x9438 (apply-prim * lst))) x9438))
  (define (modulo a b) (let ((x9439 (prim modulo a b))) x9439))
  (define (/ . lst) (let ((x9440 (apply-prim / lst))) x9440))
  (define (= . lst) (let ((x9441 (apply-prim = lst))) x9441))
  (define (> . lst) (let ((x9442 (apply-prim > lst))) x9442))
  (define (< . lst) (let ((x9443 (apply-prim < lst))) x9443))
  (define (<= . lst) (let ((x9444 (apply-prim <= lst))) x9444))
  (define (>= . lst) (let ((x9445 (apply-prim >= lst))) x9445))
  (define (null? x) (let ((x9446 (prim null? x))) x9446))
  (define (equal? x y) (let ((x9447 (prim equal? x y))) x9447))
  (define (eq? x y) (let ((x9448 (prim eq? x y))) x9448))
  (define (cons a b) (let ((x9449 (prim cons a b))) x9449))
  (define (car lst) (let ((x9450 (prim car lst))) x9450))
  (define (cdr lst) (let ((x9451 (prim cdr lst))) x9451))
  (define (even? x)
    (let ((a9452 '0))
      (let ((a9453 '2))
        (let ((a9454 (modulo x a9453))) (equal? a9452 a9454)))))
  (define (odd? x)
    (let ((a9455 '1))
      (let ((a9456 '2))
        (let ((a9457 (modulo x a9456))) (equal? a9455 a9457)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a9458 (null? lst)))
      (if a9458
        (let ((x9459 '#f)) x9459)
        (let ((a9460 (car lst)))
          (let ((a9461 (equal? a9460 x)))
            (if a9461
              (let ((x9462 '#t)) x9462)
              (let ((a9463 (cdr lst))) (member? x a9463))))))))
  (define (foldl fun acc lst)
    (let ((a9464 (null? lst)))
      (if a9464
        acc
        (let ((a9465 (car lst)))
          (let ((a9466 (fun a9465 acc)))
            (let ((a9467 (cdr lst))) (foldl fun a9466 a9467)))))))
  (define (reverse-helper lst lst2)
    (let ((a9468 (null? lst)))
      (if a9468
        lst2
        (let ((a9469 (cdr lst)))
          (let ((a9470 (car lst)))
            (let ((a9471 (cons a9470 lst2))) (reverse-helper a9469 a9471)))))))
  (define (reverse lst) (let ((a9472 (list))) (reverse-helper lst a9472)))
  (define (take-helper lst n lst2)
    (let ((a9473 '0))
      (let ((a9474 (= n a9473)))
        (if a9474
          (let ((x9475 (reverse lst2))) x9475)
          (let ((a9476 (cdr lst)))
            (let ((a9477 '1))
              (let ((a9478 (- n a9477)))
                (let ((a9479 (car lst)))
                  (let ((a9480 (cons a9479 lst2)))
                    (take-helper a9476 a9478 a9480))))))))))
  (define (take lst n) (let ((a9481 (list))) (take-helper lst n a9481)))
  (define (length lst)
    (let ((a9482 (null? lst)))
      (if a9482
        (let ((x9483 '0)) x9483)
        (let ((a9484 '1))
          (let ((a9485 (cdr lst)))
            (let ((a9486 (length a9485))) (+ a9484 a9486)))))))
  (define (map proc lst)
    (let ((a9487 (null? lst)))
      (if a9487
        (let ((x9488 (list))) x9488)
        (let ((a9489 (car lst)))
          (let ((a9490 (proc a9489)))
            (let ((a9491 (cdr lst)))
              (let ((a9492 (map proc a9491))) (cons a9490 a9492))))))))
  (define (filter op lst)
    (let ((a9493 (null? lst)))
      (if a9493
        (let ((x9494 (list))) x9494)
        (let ((a9495 (car lst)))
          (let ((a9496 (op a9495)))
            (if a9496
              (let ((a9497 (car lst)))
                (let ((a9498 (cdr lst)))
                  (let ((a9499 (filter op a9498))) (cons a9497 a9499))))
              (let ((a9500 (cdr lst))) (filter op a9500))))))))
  (define (drop lst n)
    (let ((a9501 '0))
      (let ((a9502 (= n a9501)))
        (if a9502
          lst
          (let ((a9503 (cdr lst)))
            (let ((a9504 '1))
              (let ((a9505 (- n a9504))) (drop a9503 a9505))))))))
  (define (foldr proc acc lst)
    (let ((a9506 (null? lst)))
      (if a9506
        acc
        (let ((a9507 (car lst)))
          (let ((a9508 (cdr lst)))
            (let ((a9509 (foldr proc acc a9508))) (proc a9507 a9509)))))))
  (define (append lst1 lst2)
    (let ((a9510 (null? lst1)))
      (if a9510
        lst2
        (let ((a9511 (car lst1)))
          (let ((a9512 (cdr lst1)))
            (let ((a9513 (append a9512 lst2))) (cons a9511 a9513)))))))
  (define (hash . lst) (let ((x9514 (apply-prim hash lst))) x9514))
  (define (hash-ref h k) (let ((x9515 (prim hash-ref h k))) x9515))
  (define (hash-set h k v) (let ((x9516 (prim hash-set h k v))) x9516))
  (define (hash-has-key? h k) (let ((x9517 (prim hash-has-key? h k))) x9517))
  (define (hash-count h) (let ((x9518 (prim hash-count h))) x9518))
  (define (call) (let ((a9519 '100)) (let ((a9520 '2)) (/ a9519 a9520))))
  (define (brouhaha_main) (let ((x9521 (call))) x9521)))
