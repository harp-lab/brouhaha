'((define (+ . lst) (let ((x9216 (apply-prim + lst))) x9216))
  (define (- . lst) (let ((x9217 (apply-prim - lst))) x9217))
  (define (* . lst) (let ((x9218 (apply-prim * lst))) x9218))
  (define (modulo a b) (let ((x9219 (prim modulo a b))) x9219))
  (define (/ . lst) (let ((x9220 (apply-prim / lst))) x9220))
  (define (= . lst) (let ((x9221 (apply-prim = lst))) x9221))
  (define (> . lst) (let ((x9222 (apply-prim > lst))) x9222))
  (define (< . lst) (let ((x9223 (apply-prim < lst))) x9223))
  (define (<= . lst) (let ((x9224 (apply-prim <= lst))) x9224))
  (define (>= . lst) (let ((x9225 (apply-prim >= lst))) x9225))
  (define (null? x) (let ((x9226 (prim null? x))) x9226))
  (define (equal? x y) (let ((x9227 (prim equal? x y))) x9227))
  (define (eq? x y) (let ((x9228 (prim eq? x y))) x9228))
  (define (cons a b) (let ((x9229 (prim cons a b))) x9229))
  (define (car lst) (let ((x9230 (prim car lst))) x9230))
  (define (cdr lst) (let ((x9231 (prim cdr lst))) x9231))
  (define (even? x)
    (let ((a9232 '0))
      (let ((a9233 '2))
        (let ((a9234 (modulo x a9233))) (equal? a9232 a9234)))))
  (define (odd? x)
    (let ((a9235 '1))
      (let ((a9236 '2))
        (let ((a9237 (modulo x a9236))) (equal? a9235 a9237)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a9238 (null? lst)))
      (if a9238
        (let ((x9239 '#f)) x9239)
        (let ((a9240 (car lst)))
          (let ((a9241 (equal? a9240 x)))
            (if a9241
              (let ((x9242 '#t)) x9242)
              (let ((a9243 (cdr lst))) (member? x a9243))))))))
  (define (foldl fun acc lst)
    (let ((a9244 (null? lst)))
      (if a9244
        acc
        (let ((a9245 (car lst)))
          (let ((a9246 (fun a9245 acc)))
            (let ((a9247 (cdr lst))) (foldl fun a9246 a9247)))))))
  (define (reverse-helper lst lst2)
    (let ((a9248 (null? lst)))
      (if a9248
        lst2
        (let ((a9249 (cdr lst)))
          (let ((a9250 (car lst)))
            (let ((a9251 (cons a9250 lst2))) (reverse-helper a9249 a9251)))))))
  (define (reverse lst) (let ((a9252 (list))) (reverse-helper lst a9252)))
  (define (take-helper lst n lst2)
    (let ((a9253 '0))
      (let ((a9254 (= n a9253)))
        (if a9254
          (let ((x9255 (reverse lst2))) x9255)
          (let ((a9256 (cdr lst)))
            (let ((a9257 '1))
              (let ((a9258 (- n a9257)))
                (let ((a9259 (car lst)))
                  (let ((a9260 (cons a9259 lst2)))
                    (take-helper a9256 a9258 a9260))))))))))
  (define (take lst n) (let ((a9261 (list))) (take-helper lst n a9261)))
  (define (length lst)
    (let ((a9262 (null? lst)))
      (if a9262
        (let ((x9263 '0)) x9263)
        (let ((a9264 '1))
          (let ((a9265 (cdr lst)))
            (let ((a9266 (length a9265))) (+ a9264 a9266)))))))
  (define (map proc lst)
    (let ((a9267 (null? lst)))
      (if a9267
        (let ((x9268 (list))) x9268)
        (let ((a9269 (car lst)))
          (let ((a9270 (proc a9269)))
            (let ((a9271 (cdr lst)))
              (let ((a9272 (map proc a9271))) (cons a9270 a9272))))))))
  (define (filter op lst)
    (let ((a9273 (null? lst)))
      (if a9273
        (let ((x9274 (list))) x9274)
        (let ((a9275 (car lst)))
          (let ((a9276 (op a9275)))
            (if a9276
              (let ((a9277 (car lst)))
                (let ((a9278 (cdr lst)))
                  (let ((a9279 (filter op a9278))) (cons a9277 a9279))))
              (let ((a9280 (cdr lst))) (filter op a9280))))))))
  (define (drop lst n)
    (let ((a9281 '0))
      (let ((a9282 (= n a9281)))
        (if a9282
          lst
          (let ((a9283 (cdr lst)))
            (let ((a9284 '1))
              (let ((a9285 (- n a9284))) (drop a9283 a9285))))))))
  (define (foldr proc acc lst)
    (let ((a9286 (null? lst)))
      (if a9286
        acc
        (let ((a9287 (car lst)))
          (let ((a9288 (cdr lst)))
            (let ((a9289 (foldr proc acc a9288))) (proc a9287 a9289)))))))
  (define (append lst1 lst2)
    (let ((a9290 (null? lst1)))
      (if a9290
        lst2
        (let ((a9291 (car lst1)))
          (let ((a9292 (cdr lst1)))
            (let ((a9293 (append a9292 lst2))) (cons a9291 a9293)))))))
  (define (hash . lst) (let ((x9294 (apply-prim hash lst))) x9294))
  (define (hash-ref h k) (let ((x9295 (prim hash-ref h k))) x9295))
  (define (hash-set h k v) (let ((x9296 (prim hash-set h k v))) x9296))
  (define (hash-has-key? h k) (let ((x9297 (prim hash-has-key? h k))) x9297))
  (define (hash-count h) (let ((x9298 (prim hash-count h))) x9298))
  (define (call) (let ((a9299 '100.0)) (let ((a9300 '2.0)) (/ a9299 a9300))))
  (define (brouhaha_main) (let ((x9301 (call))) x9301)))
