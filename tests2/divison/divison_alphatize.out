'((define (+ . lst) (let ((x9432 (apply-prim + lst))) x9432))
  (define (- . lst) (let ((x9433 (apply-prim - lst))) x9433))
  (define (* . lst) (let ((x9434 (apply-prim * lst))) x9434))
  (define (modulo a b) (let ((x9435 (prim modulo a b))) x9435))
  (define (/ . lst) (let ((x9436 (apply-prim / lst))) x9436))
  (define (= . lst) (let ((x9437 (apply-prim = lst))) x9437))
  (define (> . lst) (let ((x9438 (apply-prim > lst))) x9438))
  (define (< . lst) (let ((x9439 (apply-prim < lst))) x9439))
  (define (<= . lst) (let ((x9440 (apply-prim <= lst))) x9440))
  (define (>= . lst) (let ((x9441 (apply-prim >= lst))) x9441))
  (define (null? x) (let ((x9442 (prim null? x))) x9442))
  (define (equal? x y) (let ((x9443 (prim equal? x y))) x9443))
  (define (eq? x y) (let ((x9444 (prim eq? x y))) x9444))
  (define (cons a b) (let ((x9445 (prim cons a b))) x9445))
  (define (car lst) (let ((x9446 (prim car lst))) x9446))
  (define (cdr lst) (let ((x9447 (prim cdr lst))) x9447))
  (define (even? x)
    (let ((a9448 '0))
      (let ((a9449 '2))
        (let ((a9450 (modulo x a9449))) (equal? a9448 a9450)))))
  (define (odd? x)
    (let ((a9451 '1))
      (let ((a9452 '2))
        (let ((a9453 (modulo x a9452))) (equal? a9451 a9453)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a9454 (null? lst)))
      (if a9454
        (let ((x9455 '#f)) x9455)
        (let ((a9456 (car lst)))
          (let ((a9457 (equal? a9456 x)))
            (if a9457
              (let ((x9458 '#t)) x9458)
              (let ((a9459 (cdr lst))) (member? x a9459))))))))
  (define (foldl fun acc lst)
    (let ((a9460 (null? lst)))
      (if a9460
        acc
        (let ((a9461 (car lst)))
          (let ((a9462 (fun a9461 acc)))
            (let ((a9463 (cdr lst))) (foldl fun a9462 a9463)))))))
  (define (reverse-helper lst lst2)
    (let ((a9464 (null? lst)))
      (if a9464
        lst2
        (let ((a9465 (cdr lst)))
          (let ((a9466 (car lst)))
            (let ((a9467 (cons a9466 lst2))) (reverse-helper a9465 a9467)))))))
  (define (reverse lst) (let ((a9468 (list))) (reverse-helper lst a9468)))
  (define (take-helper lst n lst2)
    (let ((a9469 '0))
      (let ((a9470 (= n a9469)))
        (if a9470
          (let ((x9471 (reverse lst2))) x9471)
          (let ((a9472 (cdr lst)))
            (let ((a9473 '1))
              (let ((a9474 (- n a9473)))
                (let ((a9475 (car lst)))
                  (let ((a9476 (cons a9475 lst2)))
                    (take-helper a9472 a9474 a9476))))))))))
  (define (take lst n) (let ((a9477 (list))) (take-helper lst n a9477)))
  (define (length lst)
    (let ((a9478 (null? lst)))
      (if a9478
        (let ((x9479 '0)) x9479)
        (let ((a9480 '1))
          (let ((a9481 (cdr lst)))
            (let ((a9482 (length a9481))) (+ a9480 a9482)))))))
  (define (map proc lst)
    (let ((a9483 (null? lst)))
      (if a9483
        (let ((x9484 (list))) x9484)
        (let ((a9485 (car lst)))
          (let ((a9486 (proc a9485)))
            (let ((a9487 (cdr lst)))
              (let ((a9488 (map proc a9487))) (cons a9486 a9488))))))))
  (define (filter op lst)
    (let ((a9489 (null? lst)))
      (if a9489
        (let ((x9490 (list))) x9490)
        (let ((a9491 (car lst)))
          (let ((a9492 (op a9491)))
            (if a9492
              (let ((a9493 (car lst)))
                (let ((a9494 (cdr lst)))
                  (let ((a9495 (filter op a9494))) (cons a9493 a9495))))
              (let ((a9496 (cdr lst))) (filter op a9496))))))))
  (define (drop lst n)
    (let ((a9497 '0))
      (let ((a9498 (= n a9497)))
        (if a9498
          lst
          (let ((a9499 (cdr lst)))
            (let ((a9500 '1))
              (let ((a9501 (- n a9500))) (drop a9499 a9501))))))))
  (define (foldr proc acc lst)
    (let ((a9502 (null? lst)))
      (if a9502
        acc
        (let ((a9503 (car lst)))
          (let ((a9504 (cdr lst)))
            (let ((a9505 (foldr proc acc a9504))) (proc a9503 a9505)))))))
  (define (append lst1 lst2)
    (let ((a9506 (null? lst1)))
      (if a9506
        lst2
        (let ((a9507 (car lst1)))
          (let ((a9508 (cdr lst1)))
            (let ((a9509 (append a9508 lst2))) (cons a9507 a9509)))))))
  (define (hash . lst) (let ((x9510 (apply-prim hash lst))) x9510))
  (define (hash-ref h k) (let ((x9511 (prim hash-ref h k))) x9511))
  (define (hash-set h k v) (let ((x9512 (prim hash-set h k v))) x9512))
  (define (hash-has-key? h k) (let ((x9513 (prim hash-has-key? h k))) x9513))
  (define (hash-count h) (let ((x9514 (prim hash-count h))) x9514))
  (define (call) (let ((a9515 '100)) (let ((a9516 '2)) (/ a9515 a9516))))
  (define (brouhaha_main) (let ((x9517 (call))) x9517)))
