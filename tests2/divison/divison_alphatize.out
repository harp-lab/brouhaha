'((define (+ . lst) (let ((x9459 (apply-prim + lst))) x9459))
  (define (- . lst) (let ((x9460 (apply-prim - lst))) x9460))
  (define (* . lst) (let ((x9461 (apply-prim * lst))) x9461))
  (define (modulo a b) (let ((x9462 (prim modulo a b))) x9462))
  (define (/ . lst) (let ((x9463 (apply-prim / lst))) x9463))
  (define (= . lst) (let ((x9464 (apply-prim = lst))) x9464))
  (define (> . lst) (let ((x9465 (apply-prim > lst))) x9465))
  (define (< . lst) (let ((x9466 (apply-prim < lst))) x9466))
  (define (<= . lst) (let ((x9467 (apply-prim <= lst))) x9467))
  (define (>= . lst) (let ((x9468 (apply-prim >= lst))) x9468))
  (define (null? x) (let ((x9469 (prim null? x))) x9469))
  (define (equal? x y) (let ((x9470 (prim equal? x y))) x9470))
  (define (eq? x y) (let ((x9471 (prim eq? x y))) x9471))
  (define (cons a b) (let ((x9472 (prim cons a b))) x9472))
  (define (car lst) (let ((x9473 (prim car lst))) x9473))
  (define (cdr lst) (let ((x9474 (prim cdr lst))) x9474))
  (define (even? x)
    (let ((a9475 '0))
      (let ((a9476 '2))
        (let ((a9477 (modulo x a9476))) (equal? a9475 a9477)))))
  (define (odd? x)
    (let ((a9478 '1))
      (let ((a9479 '2))
        (let ((a9480 (modulo x a9479))) (equal? a9478 a9480)))))
  (define (list . x) x)
  (define (and . lst) (let ((x9481 (apply-prim and lst))) x9481))
  (define (or . lst) (let ((x9482 (apply-prim or lst))) x9482))
  (define (member? x lst)
    (let ((a9483 (null? lst)))
      (if a9483
        (let ((x9484 '#f)) x9484)
        (let ((a9485 (car lst)))
          (let ((a9486 (equal? a9485 x)))
            (if a9486
              (let ((x9487 '#t)) x9487)
              (let ((a9488 (cdr lst))) (member? x a9488))))))))
  (define (foldl fun acc lst)
    (let ((a9489 (null? lst)))
      (if a9489
        acc
        (let ((a9490 (car lst)))
          (let ((a9491 (fun a9490 acc)))
            (let ((a9492 (cdr lst))) (foldl fun a9491 a9492)))))))
  (define (reverse-helper lst lst2)
    (let ((a9493 (null? lst)))
      (if a9493
        lst2
        (let ((a9494 (cdr lst)))
          (let ((a9495 (car lst)))
            (let ((a9496 (cons a9495 lst2))) (reverse-helper a9494 a9496)))))))
  (define (reverse lst) (let ((a9497 (list))) (reverse-helper lst a9497)))
  (define (take-helper lst n lst2)
    (let ((a9498 '0))
      (let ((a9499 (= n a9498)))
        (if a9499
          (let ((x9500 (reverse lst2))) x9500)
          (let ((a9501 (cdr lst)))
            (let ((a9502 '1))
              (let ((a9503 (- n a9502)))
                (let ((a9504 (car lst)))
                  (let ((a9505 (cons a9504 lst2)))
                    (take-helper a9501 a9503 a9505))))))))))
  (define (take lst n) (let ((a9506 (list))) (take-helper lst n a9506)))
  (define (length lst)
    (let ((a9507 (null? lst)))
      (if a9507
        (let ((x9508 '0)) x9508)
        (let ((a9509 '1))
          (let ((a9510 (cdr lst)))
            (let ((a9511 (length a9510))) (+ a9509 a9511)))))))
  (define (map proc lst)
    (let ((a9512 (null? lst)))
      (if a9512
        (let ((x9513 (list))) x9513)
        (let ((a9514 (car lst)))
          (let ((a9515 (proc a9514)))
            (let ((a9516 (cdr lst)))
              (let ((a9517 (map proc a9516))) (cons a9515 a9517))))))))
  (define (filter op lst)
    (let ((a9518 (null? lst)))
      (if a9518
        (let ((x9519 (list))) x9519)
        (let ((a9520 (car lst)))
          (let ((a9521 (op a9520)))
            (if a9521
              (let ((a9522 (car lst)))
                (let ((a9523 (cdr lst)))
                  (let ((a9524 (filter op a9523))) (cons a9522 a9524))))
              (let ((a9525 (cdr lst))) (filter op a9525))))))))
  (define (drop lst n)
    (let ((a9526 '0))
      (let ((a9527 (= n a9526)))
        (if a9527
          lst
          (let ((a9528 (cdr lst)))
            (let ((a9529 '1))
              (let ((a9530 (- n a9529))) (drop a9528 a9530))))))))
  (define (foldr proc acc lst)
    (let ((a9531 (null? lst)))
      (if a9531
        acc
        (let ((a9532 (car lst)))
          (let ((a9533 (cdr lst)))
            (let ((a9534 (foldr proc acc a9533))) (proc a9532 a9534)))))))
  (define (append lst1 lst2)
    (let ((a9535 (null? lst1)))
      (if a9535
        lst2
        (let ((a9536 (car lst1)))
          (let ((a9537 (cdr lst1)))
            (let ((a9538 (append a9537 lst2))) (cons a9536 a9538)))))))
  (define (hash . lst) (let ((x9539 (apply-prim hash lst))) x9539))
  (define (hash-ref h k) (let ((x9540 (prim hash-ref h k))) x9540))
  (define (hash-set h k v) (let ((x9541 (prim hash-set h k v))) x9541))
  (define (hash-has-key? h k) (let ((x9542 (prim hash-has-key? h k))) x9542))
  (define (hash-count h) (let ((x9543 (prim hash-count h))) x9543))
  (define (call)
    (let ((a9544 '100))
      (let ((a9545 '2)) (let ((a9546 '1)) (/ a9544 a9545 a9546)))))
  (define (brouhaha_main) (let ((x9547 (call))) x9547)))
