'((define (+ . lst)
    (let ((kont9518 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9432 (apply-prim + lst))) (kont9518 x9432)))))
  (define (- . lst)
    (let ((kont9520 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9433 (apply-prim - lst))) (kont9520 x9433)))))
  (define (* . lst)
    (let ((kont9522 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9434 (apply-prim * lst))) (kont9522 x9434)))))
  (define (modulo kont9524 a b)
    (let ((x9435 (prim modulo a b))) (kont9524 x9435)))
  (define (/ . lst)
    (let ((kont9525 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9436 (apply-prim / lst))) (kont9525 x9436)))))
  (define (= . lst)
    (let ((kont9527 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9437 (apply-prim = lst))) (kont9527 x9437)))))
  (define (> . lst)
    (let ((kont9529 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9438 (apply-prim > lst))) (kont9529 x9438)))))
  (define (< . lst)
    (let ((kont9531 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9439 (apply-prim < lst))) (kont9531 x9439)))))
  (define (<= . lst)
    (let ((kont9533 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9440 (apply-prim <= lst))) (kont9533 x9440)))))
  (define (>= . lst)
    (let ((kont9535 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9441 (apply-prim >= lst))) (kont9535 x9441)))))
  (define (null? kont9537 x) (let ((x9442 (prim null? x))) (kont9537 x9442)))
  (define (equal? kont9538 x y)
    (let ((x9443 (prim equal? x y))) (kont9538 x9443)))
  (define (eq? kont9539 x y) (let ((x9444 (prim eq? x y))) (kont9539 x9444)))
  (define (cons kont9540 a b) (let ((x9445 (prim cons a b))) (kont9540 x9445)))
  (define (car kont9541 lst) (let ((x9446 (prim car lst))) (kont9541 x9446)))
  (define (cdr kont9542 lst) (let ((x9447 (prim cdr lst))) (kont9542 x9447)))
  (define (even? kont9543 x)
    (let ((a9448 '0))
      (let ((a9449 '2))
        (let ((f9544 (lambda (a9450) (equal? kont9543 a9448 a9450))))
          (modulo f9544 x a9449)))))
  (define (odd? kont9545 x)
    (let ((a9451 '1))
      (let ((a9452 '2))
        (let ((f9546 (lambda (a9453) (equal? kont9545 a9451 a9453))))
          (modulo f9546 x a9452)))))
  (define (list . x)
    (let ((kont9547 (prim car x))) (let ((x (prim cdr x))) (kont9547 x))))
  (define (member? kont9549 x lst)
    (let ((f9553
           (lambda (a9454)
             (if a9454
               (let ((x9455 '#f)) (kont9549 x9455))
               (let ((f9552
                      (lambda (a9456)
                        (let ((f9551
                               (lambda (a9457)
                                 (if a9457
                                   (let ((x9458 '#t)) (kont9549 x9458))
                                   (let ((f9550
                                          (lambda (a9459)
                                            (member? kont9549 x a9459))))
                                     (cdr f9550 lst))))))
                          (equal? f9551 a9456 x)))))
                 (car f9552 lst))))))
      (null? f9553 lst)))
  (define (foldl kont9554 fun acc lst)
    (let ((f9558
           (lambda (a9460)
             (if a9460
               (kont9554 acc)
               (let ((f9557
                      (lambda (a9461)
                        (let ((f9556
                               (lambda (a9462)
                                 (let ((f9555
                                        (lambda (a9463)
                                          (foldl kont9554 fun a9462 a9463))))
                                   (cdr f9555 lst)))))
                          (fun f9556 a9461 acc)))))
                 (car f9557 lst))))))
      (null? f9558 lst)))
  (define (reverse-helper kont9559 lst lst2)
    (let ((f9563
           (lambda (a9464)
             (if a9464
               (kont9559 lst2)
               (let ((f9562
                      (lambda (a9465)
                        (let ((f9561
                               (lambda (a9466)
                                 (let ((f9560
                                        (lambda (a9467)
                                          (reverse-helper
                                           kont9559
                                           a9465
                                           a9467))))
                                   (cons f9560 a9466 lst2)))))
                          (car f9561 lst)))))
                 (cdr f9562 lst))))))
      (null? f9563 lst)))
  (define (reverse kont9564 lst)
    (let ((f9565 (lambda (a9468) (reverse-helper kont9564 lst a9468))))
      (list f9565)))
  (define (take-helper kont9566 lst n lst2)
    (let ((a9469 '0))
      (let ((f9572
             (lambda (a9470)
               (if a9470
                 (let ((f9567 (lambda (x9471) (kont9566 x9471))))
                   (reverse f9567 lst2))
                 (let ((f9571
                        (lambda (a9472)
                          (let ((a9473 '1))
                            (let ((f9570
                                   (lambda (a9474)
                                     (let ((f9569
                                            (lambda (a9475)
                                              (let ((f9568
                                                     (lambda (a9476)
                                                       (take-helper
                                                        kont9566
                                                        a9472
                                                        a9474
                                                        a9476))))
                                                (cons f9568 a9475 lst2)))))
                                       (car f9569 lst)))))
                              (- f9570 n a9473))))))
                   (cdr f9571 lst))))))
        (= f9572 n a9469))))
  (define (take kont9573 lst n)
    (let ((f9574 (lambda (a9477) (take-helper kont9573 lst n a9477))))
      (list f9574)))
  (define (length kont9575 lst)
    (let ((f9578
           (lambda (a9478)
             (if a9478
               (let ((x9479 '0)) (kont9575 x9479))
               (let ((a9480 '1))
                 (let ((f9577
                        (lambda (a9481)
                          (let ((f9576
                                 (lambda (a9482) (+ kont9575 a9480 a9482))))
                            (length f9576 a9481)))))
                   (cdr f9577 lst)))))))
      (null? f9578 lst)))
  (define (map kont9579 proc lst)
    (let ((f9585
           (lambda (a9483)
             (if a9483
               (let ((f9580 (lambda (x9484) (kont9579 x9484)))) (list f9580))
               (let ((f9584
                      (lambda (a9485)
                        (let ((f9583
                               (lambda (a9486)
                                 (let ((f9582
                                        (lambda (a9487)
                                          (let ((f9581
                                                 (lambda (a9488)
                                                   (cons
                                                    kont9579
                                                    a9486
                                                    a9488))))
                                            (map f9581 proc a9487)))))
                                   (cdr f9582 lst)))))
                          (proc f9583 a9485)))))
                 (car f9584 lst))))))
      (null? f9585 lst)))
  (define (filter kont9586 op lst)
    (let ((f9594
           (lambda (a9489)
             (if a9489
               (let ((f9587 (lambda (x9490) (kont9586 x9490)))) (list f9587))
               (let ((f9593
                      (lambda (a9491)
                        (let ((f9592
                               (lambda (a9492)
                                 (if a9492
                                   (let ((f9590
                                          (lambda (a9493)
                                            (let ((f9589
                                                   (lambda (a9494)
                                                     (let ((f9588
                                                            (lambda (a9495)
                                                              (cons
                                                               kont9586
                                                               a9493
                                                               a9495))))
                                                       (filter
                                                        f9588
                                                        op
                                                        a9494)))))
                                              (cdr f9589 lst)))))
                                     (car f9590 lst))
                                   (let ((f9591
                                          (lambda (a9496)
                                            (filter kont9586 op a9496))))
                                     (cdr f9591 lst))))))
                          (op f9592 a9491)))))
                 (car f9593 lst))))))
      (null? f9594 lst)))
  (define (drop kont9595 lst n)
    (let ((a9497 '0))
      (let ((f9598
             (lambda (a9498)
               (if a9498
                 (kont9595 lst)
                 (let ((f9597
                        (lambda (a9499)
                          (let ((a9500 '1))
                            (let ((f9596
                                   (lambda (a9501)
                                     (drop kont9595 a9499 a9501))))
                              (- f9596 n a9500))))))
                   (cdr f9597 lst))))))
        (= f9598 n a9497))))
  (define (foldr kont9599 proc acc lst)
    (let ((f9603
           (lambda (a9502)
             (if a9502
               (kont9599 acc)
               (let ((f9602
                      (lambda (a9503)
                        (let ((f9601
                               (lambda (a9504)
                                 (let ((f9600
                                        (lambda (a9505)
                                          (proc kont9599 a9503 a9505))))
                                   (foldr f9600 proc acc a9504)))))
                          (cdr f9601 lst)))))
                 (car f9602 lst))))))
      (null? f9603 lst)))
  (define (append kont9604 lst1 lst2)
    (let ((f9608
           (lambda (a9506)
             (if a9506
               (kont9604 lst2)
               (let ((f9607
                      (lambda (a9507)
                        (let ((f9606
                               (lambda (a9508)
                                 (let ((f9605
                                        (lambda (a9509)
                                          (cons kont9604 a9507 a9509))))
                                   (append f9605 a9508 lst2)))))
                          (cdr f9606 lst1)))))
                 (car f9607 lst1))))))
      (null? f9608 lst1)))
  (define (hash . lst)
    (let ((kont9609 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9510 (apply-prim hash lst))) (kont9609 x9510)))))
  (define (hash-ref kont9611 h k)
    (let ((x9511 (prim hash-ref h k))) (kont9611 x9511)))
  (define (hash-set kont9612 h k v)
    (let ((x9512 (prim hash-set h k v))) (kont9612 x9512)))
  (define (hash-has-key? kont9613 h k)
    (let ((x9513 (prim hash-has-key? h k))) (kont9613 x9513)))
  (define (hash-count kont9614 h)
    (let ((x9514 (prim hash-count h))) (kont9614 x9514)))
  (define (call kont9615)
    (let ((a9515 '100)) (let ((a9516 '2)) (/ kont9615 a9515 a9516))))
  (define (brouhaha_main kont9616)
    (let ((f9617 (lambda (x9517) (kont9616 x9517)))) (call f9617))))
