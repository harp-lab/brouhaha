'((define (+ . lst)
    (let ((kont9302 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9216 (apply-prim + lst))) (kont9302 x9216)))))
  (define (- . lst)
    (let ((kont9304 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9217 (apply-prim - lst))) (kont9304 x9217)))))
  (define (* . lst)
    (let ((kont9306 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9218 (apply-prim * lst))) (kont9306 x9218)))))
  (define (modulo kont9308 a b)
    (let ((x9219 (prim modulo a b))) (kont9308 x9219)))
  (define (/ . lst)
    (let ((kont9309 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9220 (apply-prim / lst))) (kont9309 x9220)))))
  (define (= . lst)
    (let ((kont9311 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9221 (apply-prim = lst))) (kont9311 x9221)))))
  (define (> . lst)
    (let ((kont9313 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9222 (apply-prim > lst))) (kont9313 x9222)))))
  (define (< . lst)
    (let ((kont9315 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9223 (apply-prim < lst))) (kont9315 x9223)))))
  (define (<= . lst)
    (let ((kont9317 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9224 (apply-prim <= lst))) (kont9317 x9224)))))
  (define (>= . lst)
    (let ((kont9319 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9225 (apply-prim >= lst))) (kont9319 x9225)))))
  (define (null? kont9321 x) (let ((x9226 (prim null? x))) (kont9321 x9226)))
  (define (equal? kont9322 x y)
    (let ((x9227 (prim equal? x y))) (kont9322 x9227)))
  (define (eq? kont9323 x y) (let ((x9228 (prim eq? x y))) (kont9323 x9228)))
  (define (cons kont9324 a b) (let ((x9229 (prim cons a b))) (kont9324 x9229)))
  (define (car kont9325 lst) (let ((x9230 (prim car lst))) (kont9325 x9230)))
  (define (cdr kont9326 lst) (let ((x9231 (prim cdr lst))) (kont9326 x9231)))
  (define (even? kont9327 x)
    (let ((a9232 '0))
      (let ((a9233 '2))
        (let ((f9328 (lambda (a9234) (equal? kont9327 a9232 a9234))))
          (modulo f9328 x a9233)))))
  (define (odd? kont9329 x)
    (let ((a9235 '1))
      (let ((a9236 '2))
        (let ((f9330 (lambda (a9237) (equal? kont9329 a9235 a9237))))
          (modulo f9330 x a9236)))))
  (define (list . x)
    (let ((kont9331 (prim car x))) (let ((x (prim cdr x))) (kont9331 x))))
  (define (member? kont9333 x lst)
    (let ((f9337
           (lambda (a9238)
             (if a9238
               (let ((x9239 '#f)) (kont9333 x9239))
               (let ((f9336
                      (lambda (a9240)
                        (let ((f9335
                               (lambda (a9241)
                                 (if a9241
                                   (let ((x9242 '#t)) (kont9333 x9242))
                                   (let ((f9334
                                          (lambda (a9243)
                                            (member? kont9333 x a9243))))
                                     (cdr f9334 lst))))))
                          (equal? f9335 a9240 x)))))
                 (car f9336 lst))))))
      (null? f9337 lst)))
  (define (foldl kont9338 fun acc lst)
    (let ((f9342
           (lambda (a9244)
             (if a9244
               (kont9338 acc)
               (let ((f9341
                      (lambda (a9245)
                        (let ((f9340
                               (lambda (a9246)
                                 (let ((f9339
                                        (lambda (a9247)
                                          (foldl kont9338 fun a9246 a9247))))
                                   (cdr f9339 lst)))))
                          (fun f9340 a9245 acc)))))
                 (car f9341 lst))))))
      (null? f9342 lst)))
  (define (reverse-helper kont9343 lst lst2)
    (let ((f9347
           (lambda (a9248)
             (if a9248
               (kont9343 lst2)
               (let ((f9346
                      (lambda (a9249)
                        (let ((f9345
                               (lambda (a9250)
                                 (let ((f9344
                                        (lambda (a9251)
                                          (reverse-helper
                                           kont9343
                                           a9249
                                           a9251))))
                                   (cons f9344 a9250 lst2)))))
                          (car f9345 lst)))))
                 (cdr f9346 lst))))))
      (null? f9347 lst)))
  (define (reverse kont9348 lst)
    (let ((f9349 (lambda (a9252) (reverse-helper kont9348 lst a9252))))
      (list f9349)))
  (define (take-helper kont9350 lst n lst2)
    (let ((a9253 '0))
      (let ((f9356
             (lambda (a9254)
               (if a9254
                 (let ((f9351 (lambda (x9255) (kont9350 x9255))))
                   (reverse f9351 lst2))
                 (let ((f9355
                        (lambda (a9256)
                          (let ((a9257 '1))
                            (let ((f9354
                                   (lambda (a9258)
                                     (let ((f9353
                                            (lambda (a9259)
                                              (let ((f9352
                                                     (lambda (a9260)
                                                       (take-helper
                                                        kont9350
                                                        a9256
                                                        a9258
                                                        a9260))))
                                                (cons f9352 a9259 lst2)))))
                                       (car f9353 lst)))))
                              (- f9354 n a9257))))))
                   (cdr f9355 lst))))))
        (= f9356 n a9253))))
  (define (take kont9357 lst n)
    (let ((f9358 (lambda (a9261) (take-helper kont9357 lst n a9261))))
      (list f9358)))
  (define (length kont9359 lst)
    (let ((f9362
           (lambda (a9262)
             (if a9262
               (let ((x9263 '0)) (kont9359 x9263))
               (let ((a9264 '1))
                 (let ((f9361
                        (lambda (a9265)
                          (let ((f9360
                                 (lambda (a9266) (+ kont9359 a9264 a9266))))
                            (length f9360 a9265)))))
                   (cdr f9361 lst)))))))
      (null? f9362 lst)))
  (define (map kont9363 proc lst)
    (let ((f9369
           (lambda (a9267)
             (if a9267
               (let ((f9364 (lambda (x9268) (kont9363 x9268)))) (list f9364))
               (let ((f9368
                      (lambda (a9269)
                        (let ((f9367
                               (lambda (a9270)
                                 (let ((f9366
                                        (lambda (a9271)
                                          (let ((f9365
                                                 (lambda (a9272)
                                                   (cons
                                                    kont9363
                                                    a9270
                                                    a9272))))
                                            (map f9365 proc a9271)))))
                                   (cdr f9366 lst)))))
                          (proc f9367 a9269)))))
                 (car f9368 lst))))))
      (null? f9369 lst)))
  (define (filter kont9370 op lst)
    (let ((f9378
           (lambda (a9273)
             (if a9273
               (let ((f9371 (lambda (x9274) (kont9370 x9274)))) (list f9371))
               (let ((f9377
                      (lambda (a9275)
                        (let ((f9376
                               (lambda (a9276)
                                 (if a9276
                                   (let ((f9374
                                          (lambda (a9277)
                                            (let ((f9373
                                                   (lambda (a9278)
                                                     (let ((f9372
                                                            (lambda (a9279)
                                                              (cons
                                                               kont9370
                                                               a9277
                                                               a9279))))
                                                       (filter
                                                        f9372
                                                        op
                                                        a9278)))))
                                              (cdr f9373 lst)))))
                                     (car f9374 lst))
                                   (let ((f9375
                                          (lambda (a9280)
                                            (filter kont9370 op a9280))))
                                     (cdr f9375 lst))))))
                          (op f9376 a9275)))))
                 (car f9377 lst))))))
      (null? f9378 lst)))
  (define (drop kont9379 lst n)
    (let ((a9281 '0))
      (let ((f9382
             (lambda (a9282)
               (if a9282
                 (kont9379 lst)
                 (let ((f9381
                        (lambda (a9283)
                          (let ((a9284 '1))
                            (let ((f9380
                                   (lambda (a9285)
                                     (drop kont9379 a9283 a9285))))
                              (- f9380 n a9284))))))
                   (cdr f9381 lst))))))
        (= f9382 n a9281))))
  (define (foldr kont9383 proc acc lst)
    (let ((f9387
           (lambda (a9286)
             (if a9286
               (kont9383 acc)
               (let ((f9386
                      (lambda (a9287)
                        (let ((f9385
                               (lambda (a9288)
                                 (let ((f9384
                                        (lambda (a9289)
                                          (proc kont9383 a9287 a9289))))
                                   (foldr f9384 proc acc a9288)))))
                          (cdr f9385 lst)))))
                 (car f9386 lst))))))
      (null? f9387 lst)))
  (define (append kont9388 lst1 lst2)
    (let ((f9392
           (lambda (a9290)
             (if a9290
               (kont9388 lst2)
               (let ((f9391
                      (lambda (a9291)
                        (let ((f9390
                               (lambda (a9292)
                                 (let ((f9389
                                        (lambda (a9293)
                                          (cons kont9388 a9291 a9293))))
                                   (append f9389 a9292 lst2)))))
                          (cdr f9390 lst1)))))
                 (car f9391 lst1))))))
      (null? f9392 lst1)))
  (define (hash . lst)
    (let ((kont9393 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9294 (apply-prim hash lst))) (kont9393 x9294)))))
  (define (hash-ref kont9395 h k)
    (let ((x9295 (prim hash-ref h k))) (kont9395 x9295)))
  (define (hash-set kont9396 h k v)
    (let ((x9296 (prim hash-set h k v))) (kont9396 x9296)))
  (define (hash-has-key? kont9397 h k)
    (let ((x9297 (prim hash-has-key? h k))) (kont9397 x9297)))
  (define (hash-count kont9398 h)
    (let ((x9298 (prim hash-count h))) (kont9398 x9298)))
  (define (call kont9399)
    (let ((a9299 '100.0)) (let ((a9300 '2.0)) (/ kont9399 a9299 a9300))))
  (define (brouhaha_main kont9400)
    (let ((f9401 (lambda (x9301) (kont9400 x9301)))) (call f9401))))
