'((define (+ . lst)
    (let ((kont9522 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9436 (apply-prim + lst))) (kont9522 x9436)))))
  (define (- . lst)
    (let ((kont9524 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9437 (apply-prim - lst))) (kont9524 x9437)))))
  (define (* . lst)
    (let ((kont9526 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9438 (apply-prim * lst))) (kont9526 x9438)))))
  (define (modulo kont9528 a b)
    (let ((x9439 (prim modulo a b))) (kont9528 x9439)))
  (define (/ . lst)
    (let ((kont9529 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9440 (apply-prim / lst))) (kont9529 x9440)))))
  (define (= . lst)
    (let ((kont9531 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9441 (apply-prim = lst))) (kont9531 x9441)))))
  (define (> . lst)
    (let ((kont9533 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9442 (apply-prim > lst))) (kont9533 x9442)))))
  (define (< . lst)
    (let ((kont9535 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9443 (apply-prim < lst))) (kont9535 x9443)))))
  (define (<= . lst)
    (let ((kont9537 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9444 (apply-prim <= lst))) (kont9537 x9444)))))
  (define (>= . lst)
    (let ((kont9539 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9445 (apply-prim >= lst))) (kont9539 x9445)))))
  (define (null? kont9541 x) (let ((x9446 (prim null? x))) (kont9541 x9446)))
  (define (equal? kont9542 x y)
    (let ((x9447 (prim equal? x y))) (kont9542 x9447)))
  (define (eq? kont9543 x y) (let ((x9448 (prim eq? x y))) (kont9543 x9448)))
  (define (cons kont9544 a b) (let ((x9449 (prim cons a b))) (kont9544 x9449)))
  (define (car kont9545 lst) (let ((x9450 (prim car lst))) (kont9545 x9450)))
  (define (cdr kont9546 lst) (let ((x9451 (prim cdr lst))) (kont9546 x9451)))
  (define (even? kont9547 x)
    (let ((a9452 '0))
      (let ((a9453 '2))
        (let ((f9548 (lambda (a9454) (equal? kont9547 a9452 a9454))))
          (modulo f9548 x a9453)))))
  (define (odd? kont9549 x)
    (let ((a9455 '1))
      (let ((a9456 '2))
        (let ((f9550 (lambda (a9457) (equal? kont9549 a9455 a9457))))
          (modulo f9550 x a9456)))))
  (define (list . x)
    (let ((kont9551 (prim car x))) (let ((x (prim cdr x))) (kont9551 x))))
  (define (member? kont9553 x lst)
    (let ((f9557
           (lambda (a9458)
             (if a9458
               (let ((x9459 '#f)) (kont9553 x9459))
               (let ((f9556
                      (lambda (a9460)
                        (let ((f9555
                               (lambda (a9461)
                                 (if a9461
                                   (let ((x9462 '#t)) (kont9553 x9462))
                                   (let ((f9554
                                          (lambda (a9463)
                                            (member? kont9553 x a9463))))
                                     (cdr f9554 lst))))))
                          (equal? f9555 a9460 x)))))
                 (car f9556 lst))))))
      (null? f9557 lst)))
  (define (foldl kont9558 fun acc lst)
    (let ((f9562
           (lambda (a9464)
             (if a9464
               (kont9558 acc)
               (let ((f9561
                      (lambda (a9465)
                        (let ((f9560
                               (lambda (a9466)
                                 (let ((f9559
                                        (lambda (a9467)
                                          (foldl kont9558 fun a9466 a9467))))
                                   (cdr f9559 lst)))))
                          (fun f9560 a9465 acc)))))
                 (car f9561 lst))))))
      (null? f9562 lst)))
  (define (reverse-helper kont9563 lst lst2)
    (let ((f9567
           (lambda (a9468)
             (if a9468
               (kont9563 lst2)
               (let ((f9566
                      (lambda (a9469)
                        (let ((f9565
                               (lambda (a9470)
                                 (let ((f9564
                                        (lambda (a9471)
                                          (reverse-helper
                                           kont9563
                                           a9469
                                           a9471))))
                                   (cons f9564 a9470 lst2)))))
                          (car f9565 lst)))))
                 (cdr f9566 lst))))))
      (null? f9567 lst)))
  (define (reverse kont9568 lst)
    (let ((f9569 (lambda (a9472) (reverse-helper kont9568 lst a9472))))
      (list f9569)))
  (define (take-helper kont9570 lst n lst2)
    (let ((a9473 '0))
      (let ((f9576
             (lambda (a9474)
               (if a9474
                 (let ((f9571 (lambda (x9475) (kont9570 x9475))))
                   (reverse f9571 lst2))
                 (let ((f9575
                        (lambda (a9476)
                          (let ((a9477 '1))
                            (let ((f9574
                                   (lambda (a9478)
                                     (let ((f9573
                                            (lambda (a9479)
                                              (let ((f9572
                                                     (lambda (a9480)
                                                       (take-helper
                                                        kont9570
                                                        a9476
                                                        a9478
                                                        a9480))))
                                                (cons f9572 a9479 lst2)))))
                                       (car f9573 lst)))))
                              (- f9574 n a9477))))))
                   (cdr f9575 lst))))))
        (= f9576 n a9473))))
  (define (take kont9577 lst n)
    (let ((f9578 (lambda (a9481) (take-helper kont9577 lst n a9481))))
      (list f9578)))
  (define (length kont9579 lst)
    (let ((f9582
           (lambda (a9482)
             (if a9482
               (let ((x9483 '0)) (kont9579 x9483))
               (let ((a9484 '1))
                 (let ((f9581
                        (lambda (a9485)
                          (let ((f9580
                                 (lambda (a9486) (+ kont9579 a9484 a9486))))
                            (length f9580 a9485)))))
                   (cdr f9581 lst)))))))
      (null? f9582 lst)))
  (define (map kont9583 proc lst)
    (let ((f9589
           (lambda (a9487)
             (if a9487
               (let ((f9584 (lambda (x9488) (kont9583 x9488)))) (list f9584))
               (let ((f9588
                      (lambda (a9489)
                        (let ((f9587
                               (lambda (a9490)
                                 (let ((f9586
                                        (lambda (a9491)
                                          (let ((f9585
                                                 (lambda (a9492)
                                                   (cons
                                                    kont9583
                                                    a9490
                                                    a9492))))
                                            (map f9585 proc a9491)))))
                                   (cdr f9586 lst)))))
                          (proc f9587 a9489)))))
                 (car f9588 lst))))))
      (null? f9589 lst)))
  (define (filter kont9590 op lst)
    (let ((f9598
           (lambda (a9493)
             (if a9493
               (let ((f9591 (lambda (x9494) (kont9590 x9494)))) (list f9591))
               (let ((f9597
                      (lambda (a9495)
                        (let ((f9596
                               (lambda (a9496)
                                 (if a9496
                                   (let ((f9594
                                          (lambda (a9497)
                                            (let ((f9593
                                                   (lambda (a9498)
                                                     (let ((f9592
                                                            (lambda (a9499)
                                                              (cons
                                                               kont9590
                                                               a9497
                                                               a9499))))
                                                       (filter
                                                        f9592
                                                        op
                                                        a9498)))))
                                              (cdr f9593 lst)))))
                                     (car f9594 lst))
                                   (let ((f9595
                                          (lambda (a9500)
                                            (filter kont9590 op a9500))))
                                     (cdr f9595 lst))))))
                          (op f9596 a9495)))))
                 (car f9597 lst))))))
      (null? f9598 lst)))
  (define (drop kont9599 lst n)
    (let ((a9501 '0))
      (let ((f9602
             (lambda (a9502)
               (if a9502
                 (kont9599 lst)
                 (let ((f9601
                        (lambda (a9503)
                          (let ((a9504 '1))
                            (let ((f9600
                                   (lambda (a9505)
                                     (drop kont9599 a9503 a9505))))
                              (- f9600 n a9504))))))
                   (cdr f9601 lst))))))
        (= f9602 n a9501))))
  (define (foldr kont9603 proc acc lst)
    (let ((f9607
           (lambda (a9506)
             (if a9506
               (kont9603 acc)
               (let ((f9606
                      (lambda (a9507)
                        (let ((f9605
                               (lambda (a9508)
                                 (let ((f9604
                                        (lambda (a9509)
                                          (proc kont9603 a9507 a9509))))
                                   (foldr f9604 proc acc a9508)))))
                          (cdr f9605 lst)))))
                 (car f9606 lst))))))
      (null? f9607 lst)))
  (define (append kont9608 lst1 lst2)
    (let ((f9612
           (lambda (a9510)
             (if a9510
               (kont9608 lst2)
               (let ((f9611
                      (lambda (a9511)
                        (let ((f9610
                               (lambda (a9512)
                                 (let ((f9609
                                        (lambda (a9513)
                                          (cons kont9608 a9511 a9513))))
                                   (append f9609 a9512 lst2)))))
                          (cdr f9610 lst1)))))
                 (car f9611 lst1))))))
      (null? f9612 lst1)))
  (define (hash . lst)
    (let ((kont9613 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x9514 (apply-prim hash lst))) (kont9613 x9514)))))
  (define (hash-ref kont9615 h k)
    (let ((x9515 (prim hash-ref h k))) (kont9615 x9515)))
  (define (hash-set kont9616 h k v)
    (let ((x9516 (prim hash-set h k v))) (kont9616 x9516)))
  (define (hash-has-key? kont9617 h k)
    (let ((x9517 (prim hash-has-key? h k))) (kont9617 x9517)))
  (define (hash-count kont9618 h)
    (let ((x9518 (prim hash-count h))) (kont9618 x9518)))
  (define (call kont9619)
    (let ((a9519 '100)) (let ((a9520 '2)) (/ kont9619 a9519 a9520))))
  (define (brouhaha_main kont9620)
    (let ((f9621 (lambda (x9521) (kont9620 x9521)))) (call f9621))))
