'((define (+ . lst) (let ((x47564 (apply-prim + lst))) x47564))
  (define (- . lst) (let ((x47565 (apply-prim - lst))) x47565))
  (define (* . lst) (let ((x47566 (apply-prim * lst))) x47566))
  (define (modulo a b) (let ((x47567 (prim modulo a b))) x47567))
  (define (/ . lst) (let ((x47568 (apply-prim / lst))) x47568))
  (define (= . lst) (let ((x47569 (apply-prim = lst))) x47569))
  (define (> . lst) (let ((x47570 (apply-prim > lst))) x47570))
  (define (< . lst) (let ((x47571 (apply-prim < lst))) x47571))
  (define (<= . lst) (let ((x47572 (apply-prim <= lst))) x47572))
  (define (>= . lst) (let ((x47573 (apply-prim >= lst))) x47573))
  (define (null? x) (let ((x47574 (prim null? x))) x47574))
  (define (equal? x y) (let ((x47575 (prim equal? x y))) x47575))
  (define (eq? x y) (let ((x47576 (prim eq? x y))) x47576))
  (define (cons a b) (let ((x47577 (prim cons a b))) x47577))
  (define (car lst) (let ((x47578 (prim car lst))) x47578))
  (define (cdr lst) (let ((x47579 (prim cdr lst))) x47579))
  (define (even? x)
    (let ((a47580 '0))
      (let ((a47581 '2))
        (let ((a47582 (modulo x a47581))) (equal? a47580 a47582)))))
  (define (odd? x)
    (let ((a47583 '1))
      (let ((a47584 '2))
        (let ((a47585 (modulo x a47584))) (equal? a47583 a47585)))))
  (define (list . x) x)
  (define (and . lst) (let ((x47586 (apply-prim and lst))) x47586))
  (define (or . lst) (let ((x47587 (apply-prim or lst))) x47587))
  (define (member? x lst)
    (let ((a47588 (null? lst)))
      (if a47588
        (let ((x47589 '#f)) x47589)
        (let ((a47590 (car lst)))
          (let ((a47591 (equal? a47590 x)))
            (if a47591
              (let ((x47592 '#t)) x47592)
              (let ((a47593 (cdr lst))) (member? x a47593))))))))
  (define (foldl fun acc lst)
    (let ((a47594 (null? lst)))
      (if a47594
        acc
        (let ((a47595 (car lst)))
          (let ((a47596 (fun a47595 acc)))
            (let ((a47597 (cdr lst))) (foldl fun a47596 a47597)))))))
  (define (reverse-helper lst lst2)
    (let ((a47598 (null? lst)))
      (if a47598
        lst2
        (let ((a47599 (cdr lst)))
          (let ((a47600 (car lst)))
            (let ((a47601 (cons a47600 lst2)))
              (reverse-helper a47599 a47601)))))))
  (define (reverse lst) (let ((a47602 (list))) (reverse-helper lst a47602)))
  (define (take-helper lst n lst2)
    (let ((a47603 '0))
      (let ((a47604 (= n a47603)))
        (if a47604
          (let ((x47605 (reverse lst2))) x47605)
          (let ((a47606 (cdr lst)))
            (let ((a47607 '1))
              (let ((a47608 (- n a47607)))
                (let ((a47609 (car lst)))
                  (let ((a47610 (cons a47609 lst2)))
                    (take-helper a47606 a47608 a47610))))))))))
  (define (take lst n) (let ((a47611 (list))) (take-helper lst n a47611)))
  (define (length lst)
    (let ((a47612 (null? lst)))
      (if a47612
        (let ((x47613 '0)) x47613)
        (let ((a47614 '1))
          (let ((a47615 (cdr lst)))
            (let ((a47616 (length a47615))) (+ a47614 a47616)))))))
  (define (map proc lst)
    (let ((a47617 (null? lst)))
      (if a47617
        (let ((x47618 (list))) x47618)
        (let ((a47619 (car lst)))
          (let ((a47620 (proc a47619)))
            (let ((a47621 (cdr lst)))
              (let ((a47622 (map proc a47621))) (cons a47620 a47622))))))))
  (define (filter op lst)
    (let ((a47623 (null? lst)))
      (if a47623
        (let ((x47624 (list))) x47624)
        (let ((a47625 (car lst)))
          (let ((a47626 (op a47625)))
            (if a47626
              (let ((a47627 (car lst)))
                (let ((a47628 (cdr lst)))
                  (let ((a47629 (filter op a47628))) (cons a47627 a47629))))
              (let ((a47630 (cdr lst))) (filter op a47630))))))))
  (define (drop lst n)
    (let ((a47631 '0))
      (let ((a47632 (= n a47631)))
        (if a47632
          lst
          (let ((a47633 (cdr lst)))
            (let ((a47634 '1))
              (let ((a47635 (- n a47634))) (drop a47633 a47635))))))))
  (define (foldr proc acc lst)
    (let ((a47636 (null? lst)))
      (if a47636
        acc
        (let ((a47637 (car lst)))
          (let ((a47638 (cdr lst)))
            (let ((a47639 (foldr proc acc a47638))) (proc a47637 a47639)))))))
  (define (append lst1 lst2)
    (let ((a47640 (null? lst1)))
      (if a47640
        lst2
        (let ((a47641 (car lst1)))
          (let ((a47642 (cdr lst1)))
            (let ((a47643 (append a47642 lst2))) (cons a47641 a47643)))))))
  (define (hash . lst) (let ((x47644 (apply-prim hash lst))) x47644))
  (define (hash-ref h k) (let ((x47645 (prim hash-ref h k))) x47645))
  (define (hash-set h k v) (let ((x47646 (prim hash-set h k v))) x47646))
  (define (hash-has-key? h k) (let ((x47647 (prim hash-has-key? h k))) x47647))
  (define (hash-count h) (let ((x47648 (prim hash-count h))) x47648))
  (define (call)
    (let ((a47649 '1))
      (let ((a47650 '2))
        (let ((a47651 '3))
          (let ((a47652 '4))
            (let ((a47653 '5))
              (let ((a47654 (* a47651 a47652 a47653)))
                (* a47649 a47650 a47654))))))))
  (define (brouhaha_main) (let ((x47655 (call))) x47655)))
