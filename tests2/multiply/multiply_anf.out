'((define (+ . lst)
    (let ((kont47656 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47564 (apply-prim + lst))) (kont47656 x47564)))))
  (define (- . lst)
    (let ((kont47658 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47565 (apply-prim - lst))) (kont47658 x47565)))))
  (define (* . lst)
    (let ((kont47660 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47566 (apply-prim * lst))) (kont47660 x47566)))))
  (define (modulo kont47662 a b)
    (let ((x47567 (prim modulo a b))) (kont47662 x47567)))
  (define (/ . lst)
    (let ((kont47663 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47568 (apply-prim / lst))) (kont47663 x47568)))))
  (define (= . lst)
    (let ((kont47665 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47569 (apply-prim = lst))) (kont47665 x47569)))))
  (define (> . lst)
    (let ((kont47667 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47570 (apply-prim > lst))) (kont47667 x47570)))))
  (define (< . lst)
    (let ((kont47669 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47571 (apply-prim < lst))) (kont47669 x47571)))))
  (define (<= . lst)
    (let ((kont47671 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47572 (apply-prim <= lst))) (kont47671 x47572)))))
  (define (>= . lst)
    (let ((kont47673 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47573 (apply-prim >= lst))) (kont47673 x47573)))))
  (define (null? kont47675 x)
    (let ((x47574 (prim null? x))) (kont47675 x47574)))
  (define (equal? kont47676 x y)
    (let ((x47575 (prim equal? x y))) (kont47676 x47575)))
  (define (eq? kont47677 x y)
    (let ((x47576 (prim eq? x y))) (kont47677 x47576)))
  (define (cons kont47678 a b)
    (let ((x47577 (prim cons a b))) (kont47678 x47577)))
  (define (car kont47679 lst)
    (let ((x47578 (prim car lst))) (kont47679 x47578)))
  (define (cdr kont47680 lst)
    (let ((x47579 (prim cdr lst))) (kont47680 x47579)))
  (define (even? kont47681 x)
    (let ((a47580 '0))
      (let ((a47581 '2))
        (let ((f47682 (lambda (a47582) (equal? kont47681 a47580 a47582))))
          (modulo f47682 x a47581)))))
  (define (odd? kont47683 x)
    (let ((a47583 '1))
      (let ((a47584 '2))
        (let ((f47684 (lambda (a47585) (equal? kont47683 a47583 a47585))))
          (modulo f47684 x a47584)))))
  (define (list . x)
    (let ((kont47685 (prim car x))) (let ((x (prim cdr x))) (kont47685 x))))
  (define (and . lst)
    (let ((kont47687 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47586 (apply-prim and lst))) (kont47687 x47586)))))
  (define (or . lst)
    (let ((kont47689 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47587 (apply-prim or lst))) (kont47689 x47587)))))
  (define (member? kont47691 x lst)
    (let ((f47695
           (lambda (a47588)
             (if a47588
               (let ((x47589 '#f)) (kont47691 x47589))
               (let ((f47694
                      (lambda (a47590)
                        (let ((f47693
                               (lambda (a47591)
                                 (if a47591
                                   (let ((x47592 '#t)) (kont47691 x47592))
                                   (let ((f47692
                                          (lambda (a47593)
                                            (member? kont47691 x a47593))))
                                     (cdr f47692 lst))))))
                          (equal? f47693 a47590 x)))))
                 (car f47694 lst))))))
      (null? f47695 lst)))
  (define (foldl kont47696 fun acc lst)
    (let ((f47700
           (lambda (a47594)
             (if a47594
               (kont47696 acc)
               (let ((f47699
                      (lambda (a47595)
                        (let ((f47698
                               (lambda (a47596)
                                 (let ((f47697
                                        (lambda (a47597)
                                          (foldl
                                           kont47696
                                           fun
                                           a47596
                                           a47597))))
                                   (cdr f47697 lst)))))
                          (fun f47698 a47595 acc)))))
                 (car f47699 lst))))))
      (null? f47700 lst)))
  (define (reverse-helper kont47701 lst lst2)
    (let ((f47705
           (lambda (a47598)
             (if a47598
               (kont47701 lst2)
               (let ((f47704
                      (lambda (a47599)
                        (let ((f47703
                               (lambda (a47600)
                                 (let ((f47702
                                        (lambda (a47601)
                                          (reverse-helper
                                           kont47701
                                           a47599
                                           a47601))))
                                   (cons f47702 a47600 lst2)))))
                          (car f47703 lst)))))
                 (cdr f47704 lst))))))
      (null? f47705 lst)))
  (define (reverse kont47706 lst)
    (let ((f47707 (lambda (a47602) (reverse-helper kont47706 lst a47602))))
      (list f47707)))
  (define (take-helper kont47708 lst n lst2)
    (let ((a47603 '0))
      (let ((f47714
             (lambda (a47604)
               (if a47604
                 (let ((f47709 (lambda (x47605) (kont47708 x47605))))
                   (reverse f47709 lst2))
                 (let ((f47713
                        (lambda (a47606)
                          (let ((a47607 '1))
                            (let ((f47712
                                   (lambda (a47608)
                                     (let ((f47711
                                            (lambda (a47609)
                                              (let ((f47710
                                                     (lambda (a47610)
                                                       (take-helper
                                                        kont47708
                                                        a47606
                                                        a47608
                                                        a47610))))
                                                (cons f47710 a47609 lst2)))))
                                       (car f47711 lst)))))
                              (- f47712 n a47607))))))
                   (cdr f47713 lst))))))
        (= f47714 n a47603))))
  (define (take kont47715 lst n)
    (let ((f47716 (lambda (a47611) (take-helper kont47715 lst n a47611))))
      (list f47716)))
  (define (length kont47717 lst)
    (let ((f47720
           (lambda (a47612)
             (if a47612
               (let ((x47613 '0)) (kont47717 x47613))
               (let ((a47614 '1))
                 (let ((f47719
                        (lambda (a47615)
                          (let ((f47718
                                 (lambda (a47616)
                                   (+ kont47717 a47614 a47616))))
                            (length f47718 a47615)))))
                   (cdr f47719 lst)))))))
      (null? f47720 lst)))
  (define (map kont47721 proc lst)
    (let ((f47727
           (lambda (a47617)
             (if a47617
               (let ((f47722 (lambda (x47618) (kont47721 x47618))))
                 (list f47722))
               (let ((f47726
                      (lambda (a47619)
                        (let ((f47725
                               (lambda (a47620)
                                 (let ((f47724
                                        (lambda (a47621)
                                          (let ((f47723
                                                 (lambda (a47622)
                                                   (cons
                                                    kont47721
                                                    a47620
                                                    a47622))))
                                            (map f47723 proc a47621)))))
                                   (cdr f47724 lst)))))
                          (proc f47725 a47619)))))
                 (car f47726 lst))))))
      (null? f47727 lst)))
  (define (filter kont47728 op lst)
    (let ((f47736
           (lambda (a47623)
             (if a47623
               (let ((f47729 (lambda (x47624) (kont47728 x47624))))
                 (list f47729))
               (let ((f47735
                      (lambda (a47625)
                        (let ((f47734
                               (lambda (a47626)
                                 (if a47626
                                   (let ((f47732
                                          (lambda (a47627)
                                            (let ((f47731
                                                   (lambda (a47628)
                                                     (let ((f47730
                                                            (lambda (a47629)
                                                              (cons
                                                               kont47728
                                                               a47627
                                                               a47629))))
                                                       (filter
                                                        f47730
                                                        op
                                                        a47628)))))
                                              (cdr f47731 lst)))))
                                     (car f47732 lst))
                                   (let ((f47733
                                          (lambda (a47630)
                                            (filter kont47728 op a47630))))
                                     (cdr f47733 lst))))))
                          (op f47734 a47625)))))
                 (car f47735 lst))))))
      (null? f47736 lst)))
  (define (drop kont47737 lst n)
    (let ((a47631 '0))
      (let ((f47740
             (lambda (a47632)
               (if a47632
                 (kont47737 lst)
                 (let ((f47739
                        (lambda (a47633)
                          (let ((a47634 '1))
                            (let ((f47738
                                   (lambda (a47635)
                                     (drop kont47737 a47633 a47635))))
                              (- f47738 n a47634))))))
                   (cdr f47739 lst))))))
        (= f47740 n a47631))))
  (define (foldr kont47741 proc acc lst)
    (let ((f47745
           (lambda (a47636)
             (if a47636
               (kont47741 acc)
               (let ((f47744
                      (lambda (a47637)
                        (let ((f47743
                               (lambda (a47638)
                                 (let ((f47742
                                        (lambda (a47639)
                                          (proc kont47741 a47637 a47639))))
                                   (foldr f47742 proc acc a47638)))))
                          (cdr f47743 lst)))))
                 (car f47744 lst))))))
      (null? f47745 lst)))
  (define (append kont47746 lst1 lst2)
    (let ((f47750
           (lambda (a47640)
             (if a47640
               (kont47746 lst2)
               (let ((f47749
                      (lambda (a47641)
                        (let ((f47748
                               (lambda (a47642)
                                 (let ((f47747
                                        (lambda (a47643)
                                          (cons kont47746 a47641 a47643))))
                                   (append f47747 a47642 lst2)))))
                          (cdr f47748 lst1)))))
                 (car f47749 lst1))))))
      (null? f47750 lst1)))
  (define (hash . lst)
    (let ((kont47751 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x47644 (apply-prim hash lst))) (kont47751 x47644)))))
  (define (hash-ref kont47753 h k)
    (let ((x47645 (prim hash-ref h k))) (kont47753 x47645)))
  (define (hash-set kont47754 h k v)
    (let ((x47646 (prim hash-set h k v))) (kont47754 x47646)))
  (define (hash-has-key? kont47755 h k)
    (let ((x47647 (prim hash-has-key? h k))) (kont47755 x47647)))
  (define (hash-count kont47756 h)
    (let ((x47648 (prim hash-count h))) (kont47756 x47648)))
  (define (call kont47757)
    (let ((a47649 '1))
      (let ((a47650 '2))
        (let ((a47651 '3))
          (let ((a47652 '4))
            (let ((a47653 '5))
              (let ((f47758
                     (lambda (a47654) (* kont47757 a47649 a47650 a47654))))
                (* f47758 a47651 a47652 a47653))))))))
  (define (brouhaha_main kont47759)
    (let ((f47760 (lambda (x47655) (kont47759 x47655)))) (call f47760))))
