'((define (+ . lst) (let ((x42811 (apply-prim + lst))) x42811))
  (define (- . lst) (let ((x42812 (apply-prim - lst))) x42812))
  (define (* . lst) (let ((x42813 (apply-prim * lst))) x42813))
  (define (modulo a b) (let ((x42814 (prim modulo a b))) x42814))
  (define (/ . lst) (let ((x42815 (apply-prim / lst))) x42815))
  (define (= . lst) (let ((x42816 (apply-prim = lst))) x42816))
  (define (> . lst) (let ((x42817 (apply-prim > lst))) x42817))
  (define (< . lst) (let ((x42818 (apply-prim < lst))) x42818))
  (define (<= . lst) (let ((x42819 (apply-prim <= lst))) x42819))
  (define (>= . lst) (let ((x42820 (apply-prim >= lst))) x42820))
  (define (null? x) (let ((x42821 (prim null? x))) x42821))
  (define (equal? x y) (let ((x42822 (prim equal? x y))) x42822))
  (define (eq? x y) (let ((x42823 (prim eq? x y))) x42823))
  (define (cons a b) (let ((x42824 (prim cons a b))) x42824))
  (define (car lst) (let ((x42825 (prim car lst))) x42825))
  (define (cdr lst) (let ((x42826 (prim cdr lst))) x42826))
  (define (even? x)
    (let ((a42827 '0))
      (let ((a42828 '2))
        (let ((a42829 (modulo x a42828))) (equal? a42827 a42829)))))
  (define (odd? x)
    (let ((a42830 '1))
      (let ((a42831 '2))
        (let ((a42832 (modulo x a42831))) (equal? a42830 a42832)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a42833 (null? lst)))
      (if a42833
        (let ((x42834 '#f)) x42834)
        (let ((a42835 (car lst)))
          (let ((a42836 (equal? a42835 x)))
            (if a42836
              (let ((x42837 '#t)) x42837)
              (let ((a42838 (cdr lst))) (member? x a42838))))))))
  (define (foldl fun acc lst)
    (let ((a42839 (null? lst)))
      (if a42839
        acc
        (let ((a42840 (car lst)))
          (let ((a42841 (fun a42840 acc)))
            (let ((a42842 (cdr lst))) (foldl fun a42841 a42842)))))))
  (define (reverse-helper lst lst2)
    (let ((a42843 (null? lst)))
      (if a42843
        lst2
        (let ((a42844 (cdr lst)))
          (let ((a42845 (car lst)))
            (let ((a42846 (cons a42845 lst2)))
              (reverse-helper a42844 a42846)))))))
  (define (reverse lst) (let ((a42847 (list))) (reverse-helper lst a42847)))
  (define (take-helper lst n lst2)
    (let ((a42848 '0))
      (let ((a42849 (= n a42848)))
        (if a42849
          (let ((x42850 (reverse lst2))) x42850)
          (let ((a42851 (cdr lst)))
            (let ((a42852 '1))
              (let ((a42853 (- n a42852)))
                (let ((a42854 (car lst)))
                  (let ((a42855 (cons a42854 lst2)))
                    (take-helper a42851 a42853 a42855))))))))))
  (define (take lst n) (let ((a42856 (list))) (take-helper lst n a42856)))
  (define (length lst)
    (let ((a42857 (null? lst)))
      (if a42857
        (let ((x42858 '0)) x42858)
        (let ((a42859 '1))
          (let ((a42860 (cdr lst)))
            (let ((a42861 (length a42860))) (+ a42859 a42861)))))))
  (define (map proc lst)
    (let ((a42862 (null? lst)))
      (if a42862
        (let ((x42863 (list))) x42863)
        (let ((a42864 (car lst)))
          (let ((a42865 (proc a42864)))
            (let ((a42866 (cdr lst)))
              (let ((a42867 (map proc a42866))) (cons a42865 a42867))))))))
  (define (filter op lst)
    (let ((a42868 (null? lst)))
      (if a42868
        (let ((x42869 (list))) x42869)
        (let ((a42870 (car lst)))
          (let ((a42871 (op a42870)))
            (if a42871
              (let ((a42872 (car lst)))
                (let ((a42873 (cdr lst)))
                  (let ((a42874 (filter op a42873))) (cons a42872 a42874))))
              (let ((a42875 (cdr lst))) (filter op a42875))))))))
  (define (drop lst n)
    (let ((a42876 '0))
      (let ((a42877 (= n a42876)))
        (if a42877
          lst
          (let ((a42878 (cdr lst)))
            (let ((a42879 '1))
              (let ((a42880 (- n a42879))) (drop a42878 a42880))))))))
  (define (foldr proc acc lst)
    (let ((a42881 (null? lst)))
      (if a42881
        acc
        (let ((a42882 (car lst)))
          (let ((a42883 (cdr lst)))
            (let ((a42884 (foldr proc acc a42883))) (proc a42882 a42884)))))))
  (define (append lst1 lst2)
    (let ((a42885 (null? lst1)))
      (if a42885
        lst2
        (let ((a42886 (car lst1)))
          (let ((a42887 (cdr lst1)))
            (let ((a42888 (append a42887 lst2))) (cons a42886 a42888)))))))
  (define (hash . lst) (let ((x42889 (apply-prim hash lst))) x42889))
  (define (hash-ref h k) (let ((x42890 (prim hash-ref h k))) x42890))
  (define (hash-set h k v) (let ((x42891 (prim hash-set h k v))) x42891))
  (define (hash-has-key? h k) (let ((x42892 (prim hash-has-key? h k))) x42892))
  (define (hash-count h) (let ((x42893 (prim hash-count h))) x42893))
  (define (call)
    (let ((a42894 "work"))
      (let ((a42895 '80))
        (let ((a42896 '10))
          (let ((a42897 "lmao"))
            (let ((a42898 (hash a42894 a42895 a42896 a42897)))
              (let ((a42899 "work"))
                (let ((a42900 '90))
                  (let ((a42901 (hash-set a42898 a42899 a42900)))
                    (let ((a42902 "work")) (hash-ref a42901 a42902)))))))))))
  (define (brouhaha_main) (let ((x42903 (call))) x42903)))
