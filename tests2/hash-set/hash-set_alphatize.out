'((define (+ . lst) (let ((x43999 (apply-prim + lst))) x43999))
  (define (- . lst) (let ((x44000 (apply-prim - lst))) x44000))
  (define (* . lst) (let ((x44001 (apply-prim * lst))) x44001))
  (define (modulo a b) (let ((x44002 (prim modulo a b))) x44002))
  (define (/ . lst) (let ((x44003 (apply-prim / lst))) x44003))
  (define (= . lst) (let ((x44004 (apply-prim = lst))) x44004))
  (define (> . lst) (let ((x44005 (apply-prim > lst))) x44005))
  (define (< . lst) (let ((x44006 (apply-prim < lst))) x44006))
  (define (<= . lst) (let ((x44007 (apply-prim <= lst))) x44007))
  (define (>= . lst) (let ((x44008 (apply-prim >= lst))) x44008))
  (define (null? x) (let ((x44009 (prim null? x))) x44009))
  (define (equal? x y) (let ((x44010 (prim equal? x y))) x44010))
  (define (eq? x y) (let ((x44011 (prim eq? x y))) x44011))
  (define (cons a b) (let ((x44012 (prim cons a b))) x44012))
  (define (car lst) (let ((x44013 (prim car lst))) x44013))
  (define (cdr lst) (let ((x44014 (prim cdr lst))) x44014))
  (define (even? x)
    (let ((a44015 '0))
      (let ((a44016 '2))
        (let ((a44017 (modulo x a44016))) (equal? a44015 a44017)))))
  (define (odd? x)
    (let ((a44018 '1))
      (let ((a44019 '2))
        (let ((a44020 (modulo x a44019))) (equal? a44018 a44020)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a44021 (null? lst)))
      (if a44021
        (let ((x44022 '#f)) x44022)
        (let ((a44023 (car lst)))
          (let ((a44024 (equal? a44023 x)))
            (if a44024
              (let ((x44025 '#t)) x44025)
              (let ((a44026 (cdr lst))) (member? x a44026))))))))
  (define (foldl fun acc lst)
    (let ((a44027 (null? lst)))
      (if a44027
        acc
        (let ((a44028 (car lst)))
          (let ((a44029 (fun a44028 acc)))
            (let ((a44030 (cdr lst))) (foldl fun a44029 a44030)))))))
  (define (reverse-helper lst lst2)
    (let ((a44031 (null? lst)))
      (if a44031
        lst2
        (let ((a44032 (cdr lst)))
          (let ((a44033 (car lst)))
            (let ((a44034 (cons a44033 lst2)))
              (reverse-helper a44032 a44034)))))))
  (define (reverse lst) (let ((a44035 (list))) (reverse-helper lst a44035)))
  (define (take-helper lst n lst2)
    (let ((a44036 '0))
      (let ((a44037 (= n a44036)))
        (if a44037
          (let ((x44038 (reverse lst2))) x44038)
          (let ((a44039 (cdr lst)))
            (let ((a44040 '1))
              (let ((a44041 (- n a44040)))
                (let ((a44042 (car lst)))
                  (let ((a44043 (cons a44042 lst2)))
                    (take-helper a44039 a44041 a44043))))))))))
  (define (take lst n) (let ((a44044 (list))) (take-helper lst n a44044)))
  (define (length lst)
    (let ((a44045 (null? lst)))
      (if a44045
        (let ((x44046 '0)) x44046)
        (let ((a44047 '1))
          (let ((a44048 (cdr lst)))
            (let ((a44049 (length a44048))) (+ a44047 a44049)))))))
  (define (map proc lst)
    (let ((a44050 (null? lst)))
      (if a44050
        (let ((x44051 (list))) x44051)
        (let ((a44052 (car lst)))
          (let ((a44053 (proc a44052)))
            (let ((a44054 (cdr lst)))
              (let ((a44055 (map proc a44054))) (cons a44053 a44055))))))))
  (define (filter op lst)
    (let ((a44056 (null? lst)))
      (if a44056
        (let ((x44057 (list))) x44057)
        (let ((a44058 (car lst)))
          (let ((a44059 (op a44058)))
            (if a44059
              (let ((a44060 (car lst)))
                (let ((a44061 (cdr lst)))
                  (let ((a44062 (filter op a44061))) (cons a44060 a44062))))
              (let ((a44063 (cdr lst))) (filter op a44063))))))))
  (define (drop lst n)
    (let ((a44064 '0))
      (let ((a44065 (= n a44064)))
        (if a44065
          lst
          (let ((a44066 (cdr lst)))
            (let ((a44067 '1))
              (let ((a44068 (- n a44067))) (drop a44066 a44068))))))))
  (define (foldr proc acc lst)
    (let ((a44069 (null? lst)))
      (if a44069
        acc
        (let ((a44070 (car lst)))
          (let ((a44071 (cdr lst)))
            (let ((a44072 (foldr proc acc a44071))) (proc a44070 a44072)))))))
  (define (append lst1 lst2)
    (let ((a44073 (null? lst1)))
      (if a44073
        lst2
        (let ((a44074 (car lst1)))
          (let ((a44075 (cdr lst1)))
            (let ((a44076 (append a44075 lst2))) (cons a44074 a44076)))))))
  (define (hash . lst) (let ((x44077 (apply-prim hash lst))) x44077))
  (define (hash-ref h k) (let ((x44078 (prim hash-ref h k))) x44078))
  (define (hash-set h k v) (let ((x44079 (prim hash-set h k v))) x44079))
  (define (hash-has-key? h k) (let ((x44080 (prim hash-has-key? h k))) x44080))
  (define (hash-count h) (let ((x44081 (prim hash-count h))) x44081))
  (define (call)
    (let ((a44082 "work"))
      (let ((a44083 '80))
        (let ((a44084 '10))
          (let ((a44085 "lmao"))
            (let ((a44086 (hash a44082 a44083 a44084 a44085)))
              (let ((a44087 "work"))
                (let ((a44088 '90))
                  (let ((a44089 (hash-set a44086 a44087 a44088)))
                    (let ((a44090 "work")) (hash-ref a44089 a44090)))))))))))
  (define (brouhaha_main) (let ((x44091 (call))) x44091)))
