'((define (+ . lst) (let ((x41903 (apply-prim + lst))) x41903))
  (define (- . lst) (let ((x41904 (apply-prim - lst))) x41904))
  (define (* . lst) (let ((x41905 (apply-prim * lst))) x41905))
  (define (modulo a b) (let ((x41906 (prim modulo a b))) x41906))
  (define (/ . lst) (let ((x41907 (apply-prim / lst))) x41907))
  (define (= . lst) (let ((x41908 (apply-prim = lst))) x41908))
  (define (> . lst) (let ((x41909 (apply-prim > lst))) x41909))
  (define (< . lst) (let ((x41910 (apply-prim < lst))) x41910))
  (define (<= . lst) (let ((x41911 (apply-prim <= lst))) x41911))
  (define (>= . lst) (let ((x41912 (apply-prim >= lst))) x41912))
  (define (null? x) (let ((x41913 (prim null? x))) x41913))
  (define (equal? x y) (let ((x41914 (prim equal? x y))) x41914))
  (define (eq? x y) (let ((x41915 (prim eq? x y))) x41915))
  (define (cons a b) (let ((x41916 (prim cons a b))) x41916))
  (define (car lst) (let ((x41917 (prim car lst))) x41917))
  (define (cdr lst) (let ((x41918 (prim cdr lst))) x41918))
  (define (even? x)
    (let ((a41919 '0))
      (let ((a41920 '2))
        (let ((a41921 (modulo x a41920))) (equal? a41919 a41921)))))
  (define (odd? x)
    (let ((a41922 '1))
      (let ((a41923 '2))
        (let ((a41924 (modulo x a41923))) (equal? a41922 a41924)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a41925 (null? lst)))
      (if a41925
        (let ((x41926 '#f)) x41926)
        (let ((a41927 (car lst)))
          (let ((a41928 (equal? a41927 x)))
            (if a41928
              (let ((x41929 '#t)) x41929)
              (let ((a41930 (cdr lst))) (member? x a41930))))))))
  (define (foldl fun acc lst)
    (let ((a41931 (null? lst)))
      (if a41931
        acc
        (let ((a41932 (car lst)))
          (let ((a41933 (fun a41932 acc)))
            (let ((a41934 (cdr lst))) (foldl fun a41933 a41934)))))))
  (define (reverse-helper lst lst2)
    (let ((a41935 (null? lst)))
      (if a41935
        lst2
        (let ((a41936 (cdr lst)))
          (let ((a41937 (car lst)))
            (let ((a41938 (cons a41937 lst2)))
              (reverse-helper a41936 a41938)))))))
  (define (reverse lst) (let ((a41939 (list))) (reverse-helper lst a41939)))
  (define (take-helper lst n lst2)
    (let ((a41940 '0))
      (let ((a41941 (= n a41940)))
        (if a41941
          (let ((x41942 (reverse lst2))) x41942)
          (let ((a41943 (cdr lst)))
            (let ((a41944 '1))
              (let ((a41945 (- n a41944)))
                (let ((a41946 (car lst)))
                  (let ((a41947 (cons a41946 lst2)))
                    (take-helper a41943 a41945 a41947))))))))))
  (define (take lst n) (let ((a41948 (list))) (take-helper lst n a41948)))
  (define (length lst)
    (let ((a41949 (null? lst)))
      (if a41949
        (let ((x41950 '0)) x41950)
        (let ((a41951 '1))
          (let ((a41952 (cdr lst)))
            (let ((a41953 (length a41952))) (+ a41951 a41953)))))))
  (define (map proc lst)
    (let ((a41954 (null? lst)))
      (if a41954
        (let ((x41955 (list))) x41955)
        (let ((a41956 (car lst)))
          (let ((a41957 (proc a41956)))
            (let ((a41958 (cdr lst)))
              (let ((a41959 (map proc a41958))) (cons a41957 a41959))))))))
  (define (filter op lst)
    (let ((a41960 (null? lst)))
      (if a41960
        (let ((x41961 (list))) x41961)
        (let ((a41962 (car lst)))
          (let ((a41963 (op a41962)))
            (if a41963
              (let ((a41964 (car lst)))
                (let ((a41965 (cdr lst)))
                  (let ((a41966 (filter op a41965))) (cons a41964 a41966))))
              (let ((a41967 (cdr lst))) (filter op a41967))))))))
  (define (drop lst n)
    (let ((a41968 '0))
      (let ((a41969 (= n a41968)))
        (if a41969
          lst
          (let ((a41970 (cdr lst)))
            (let ((a41971 '1))
              (let ((a41972 (- n a41971))) (drop a41970 a41972))))))))
  (define (foldr proc acc lst)
    (let ((a41973 (null? lst)))
      (if a41973
        acc
        (let ((a41974 (car lst)))
          (let ((a41975 (cdr lst)))
            (let ((a41976 (foldr proc acc a41975))) (proc a41974 a41976)))))))
  (define (append lst1 lst2)
    (let ((a41977 (null? lst1)))
      (if a41977
        lst2
        (let ((a41978 (car lst1)))
          (let ((a41979 (cdr lst1)))
            (let ((a41980 (append a41979 lst2))) (cons a41978 a41980)))))))
  (define (hash . lst) (let ((x41981 (apply-prim hash lst))) x41981))
  (define (hash-ref h k) (let ((x41982 (prim hash-ref h k))) x41982))
  (define (hash-set h k v) (let ((x41983 (prim hash-set h k v))) x41983))
  (define (hash-has-key? h k) (let ((x41984 (prim hash-has-key? h k))) x41984))
  (define (hash-count h) (let ((x41985 (prim hash-count h))) x41985))
  (define (call)
    (let ((a41986 "work"))
      (let ((a41987 '80))
        (let ((a41988 '10))
          (let ((a41989 "lmao"))
            (let ((a41990 (hash a41986 a41987 a41988 a41989)))
              (let ((a41991 "work"))
                (let ((a41992 '90))
                  (let ((a41993 (hash-set a41990 a41991 a41992)))
                    (let ((a41994 "work")) (hash-ref a41993 a41994)))))))))))
  (define (brouhaha_main) (let ((x41995 (call))) x41995)))
