'((define (+ . lst) (let ((x42428 (apply-prim + lst))) x42428))
  (define (- . lst) (let ((x42429 (apply-prim - lst))) x42429))
  (define (* . lst) (let ((x42430 (apply-prim * lst))) x42430))
  (define (modulo a b) (let ((x42431 (prim modulo a b))) x42431))
  (define (/ . lst) (let ((x42432 (apply-prim / lst))) x42432))
  (define (= . lst) (let ((x42433 (apply-prim = lst))) x42433))
  (define (> . lst) (let ((x42434 (apply-prim > lst))) x42434))
  (define (< . lst) (let ((x42435 (apply-prim < lst))) x42435))
  (define (<= . lst) (let ((x42436 (apply-prim <= lst))) x42436))
  (define (>= . lst) (let ((x42437 (apply-prim >= lst))) x42437))
  (define (null? x) (let ((x42438 (prim null? x))) x42438))
  (define (equal? x y) (let ((x42439 (prim equal? x y))) x42439))
  (define (eq? x y) (let ((x42440 (prim eq? x y))) x42440))
  (define (cons a b) (let ((x42441 (prim cons a b))) x42441))
  (define (car lst) (let ((x42442 (prim car lst))) x42442))
  (define (cdr lst) (let ((x42443 (prim cdr lst))) x42443))
  (define (even? x)
    (let ((a42444 '0))
      (let ((a42445 '2))
        (let ((a42446 (modulo x a42445))) (equal? a42444 a42446)))))
  (define (odd? x)
    (let ((a42447 '1))
      (let ((a42448 '2))
        (let ((a42449 (modulo x a42448))) (equal? a42447 a42449)))))
  (define (list . x) x)
  (define (and . lst) (let ((x42450 (apply-prim and lst))) x42450))
  (define (or . lst) (let ((x42451 (apply-prim or lst))) x42451))
  (define (member? x lst)
    (let ((a42452 (null? lst)))
      (if a42452
        (let ((x42453 '#f)) x42453)
        (let ((a42454 (car lst)))
          (let ((a42455 (equal? a42454 x)))
            (if a42455
              (let ((x42456 '#t)) x42456)
              (let ((a42457 (cdr lst))) (member? x a42457))))))))
  (define (foldl fun acc lst)
    (let ((a42458 (null? lst)))
      (if a42458
        acc
        (let ((a42459 (car lst)))
          (let ((a42460 (fun a42459 acc)))
            (let ((a42461 (cdr lst))) (foldl fun a42460 a42461)))))))
  (define (reverse-helper lst lst2)
    (let ((a42462 (null? lst)))
      (if a42462
        lst2
        (let ((a42463 (cdr lst)))
          (let ((a42464 (car lst)))
            (let ((a42465 (cons a42464 lst2)))
              (reverse-helper a42463 a42465)))))))
  (define (reverse lst) (let ((a42466 (list))) (reverse-helper lst a42466)))
  (define (take-helper lst n lst2)
    (let ((a42467 '0))
      (let ((a42468 (= n a42467)))
        (if a42468
          (let ((x42469 (reverse lst2))) x42469)
          (let ((a42470 (cdr lst)))
            (let ((a42471 '1))
              (let ((a42472 (- n a42471)))
                (let ((a42473 (car lst)))
                  (let ((a42474 (cons a42473 lst2)))
                    (take-helper a42470 a42472 a42474))))))))))
  (define (take lst n) (let ((a42475 (list))) (take-helper lst n a42475)))
  (define (length lst)
    (let ((a42476 (null? lst)))
      (if a42476
        (let ((x42477 '0)) x42477)
        (let ((a42478 '1))
          (let ((a42479 (cdr lst)))
            (let ((a42480 (length a42479))) (+ a42478 a42480)))))))
  (define (map proc lst)
    (let ((a42481 (null? lst)))
      (if a42481
        (let ((x42482 (list))) x42482)
        (let ((a42483 (car lst)))
          (let ((a42484 (proc a42483)))
            (let ((a42485 (cdr lst)))
              (let ((a42486 (map proc a42485))) (cons a42484 a42486))))))))
  (define (filter op lst)
    (let ((a42487 (null? lst)))
      (if a42487
        (let ((x42488 (list))) x42488)
        (let ((a42489 (car lst)))
          (let ((a42490 (op a42489)))
            (if a42490
              (let ((a42491 (car lst)))
                (let ((a42492 (cdr lst)))
                  (let ((a42493 (filter op a42492))) (cons a42491 a42493))))
              (let ((a42494 (cdr lst))) (filter op a42494))))))))
  (define (drop lst n)
    (let ((a42495 '0))
      (let ((a42496 (= n a42495)))
        (if a42496
          lst
          (let ((a42497 (cdr lst)))
            (let ((a42498 '1))
              (let ((a42499 (- n a42498))) (drop a42497 a42499))))))))
  (define (foldr proc acc lst)
    (let ((a42500 (null? lst)))
      (if a42500
        acc
        (let ((a42501 (car lst)))
          (let ((a42502 (cdr lst)))
            (let ((a42503 (foldr proc acc a42502))) (proc a42501 a42503)))))))
  (define (append lst1 lst2)
    (let ((a42504 (null? lst1)))
      (if a42504
        lst2
        (let ((a42505 (car lst1)))
          (let ((a42506 (cdr lst1)))
            (let ((a42507 (append a42506 lst2))) (cons a42505 a42507)))))))
  (define (hash . lst) (let ((x42508 (apply-prim hash lst))) x42508))
  (define (hash-ref h k) (let ((x42509 (prim hash-ref h k))) x42509))
  (define (hash-set h k v) (let ((x42510 (prim hash-set h k v))) x42510))
  (define (hash-has-key? h k) (let ((x42511 (prim hash-has-key? h k))) x42511))
  (define (hash-count h) (let ((x42512 (prim hash-count h))) x42512))
  (define (call)
    (let ((a42513 "work"))
      (let ((a42514 '80))
        (let ((a42515 '10))
          (let ((a42516 "lmao"))
            (let ((a42517 (hash a42513 a42514 a42515 a42516)))
              (let ((a42518 "work"))
                (let ((a42519 '90))
                  (let ((a42520 (hash-set a42517 a42518 a42519)))
                    (let ((a42521 "work")) (hash-ref a42520 a42521)))))))))))
  (define (brouhaha_main) (let ((x42522 (call))) x42522)))
