'((define (+ . lst)
    (let ((kont41996 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41903 (apply-prim + lst))) (kont41996 x41903)))))
  (define (- . lst)
    (let ((kont41998 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41904 (apply-prim - lst))) (kont41998 x41904)))))
  (define (* . lst)
    (let ((kont42000 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41905 (apply-prim * lst))) (kont42000 x41905)))))
  (define (modulo kont42002 a b)
    (let ((x41906 (prim modulo a b))) (kont42002 x41906)))
  (define (/ . lst)
    (let ((kont42003 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41907 (apply-prim / lst))) (kont42003 x41907)))))
  (define (= . lst)
    (let ((kont42005 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41908 (apply-prim = lst))) (kont42005 x41908)))))
  (define (> . lst)
    (let ((kont42007 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41909 (apply-prim > lst))) (kont42007 x41909)))))
  (define (< . lst)
    (let ((kont42009 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41910 (apply-prim < lst))) (kont42009 x41910)))))
  (define (<= . lst)
    (let ((kont42011 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41911 (apply-prim <= lst))) (kont42011 x41911)))))
  (define (>= . lst)
    (let ((kont42013 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41912 (apply-prim >= lst))) (kont42013 x41912)))))
  (define (null? kont42015 x)
    (let ((x41913 (prim null? x))) (kont42015 x41913)))
  (define (equal? kont42016 x y)
    (let ((x41914 (prim equal? x y))) (kont42016 x41914)))
  (define (eq? kont42017 x y)
    (let ((x41915 (prim eq? x y))) (kont42017 x41915)))
  (define (cons kont42018 a b)
    (let ((x41916 (prim cons a b))) (kont42018 x41916)))
  (define (car kont42019 lst)
    (let ((x41917 (prim car lst))) (kont42019 x41917)))
  (define (cdr kont42020 lst)
    (let ((x41918 (prim cdr lst))) (kont42020 x41918)))
  (define (even? kont42021 x)
    (let ((a41919 '0))
      (let ((a41920 '2))
        (let ((f42022 (lambda (a41921) (equal? kont42021 a41919 a41921))))
          (modulo f42022 x a41920)))))
  (define (odd? kont42023 x)
    (let ((a41922 '1))
      (let ((a41923 '2))
        (let ((f42024 (lambda (a41924) (equal? kont42023 a41922 a41924))))
          (modulo f42024 x a41923)))))
  (define (list . x)
    (let ((kont42025 (prim car x))) (let ((x (prim cdr x))) (kont42025 x))))
  (define (member? kont42027 x lst)
    (let ((f42031
           (lambda (a41925)
             (if a41925
               (let ((x41926 '#f)) (kont42027 x41926))
               (let ((f42030
                      (lambda (a41927)
                        (let ((f42029
                               (lambda (a41928)
                                 (if a41928
                                   (let ((x41929 '#t)) (kont42027 x41929))
                                   (let ((f42028
                                          (lambda (a41930)
                                            (member? kont42027 x a41930))))
                                     (cdr f42028 lst))))))
                          (equal? f42029 a41927 x)))))
                 (car f42030 lst))))))
      (null? f42031 lst)))
  (define (foldl kont42032 fun acc lst)
    (let ((f42036
           (lambda (a41931)
             (if a41931
               (kont42032 acc)
               (let ((f42035
                      (lambda (a41932)
                        (let ((f42034
                               (lambda (a41933)
                                 (let ((f42033
                                        (lambda (a41934)
                                          (foldl
                                           kont42032
                                           fun
                                           a41933
                                           a41934))))
                                   (cdr f42033 lst)))))
                          (fun f42034 a41932 acc)))))
                 (car f42035 lst))))))
      (null? f42036 lst)))
  (define (reverse-helper kont42037 lst lst2)
    (let ((f42041
           (lambda (a41935)
             (if a41935
               (kont42037 lst2)
               (let ((f42040
                      (lambda (a41936)
                        (let ((f42039
                               (lambda (a41937)
                                 (let ((f42038
                                        (lambda (a41938)
                                          (reverse-helper
                                           kont42037
                                           a41936
                                           a41938))))
                                   (cons f42038 a41937 lst2)))))
                          (car f42039 lst)))))
                 (cdr f42040 lst))))))
      (null? f42041 lst)))
  (define (reverse kont42042 lst)
    (let ((f42043 (lambda (a41939) (reverse-helper kont42042 lst a41939))))
      (list f42043)))
  (define (take-helper kont42044 lst n lst2)
    (let ((a41940 '0))
      (let ((f42050
             (lambda (a41941)
               (if a41941
                 (let ((f42045 (lambda (x41942) (kont42044 x41942))))
                   (reverse f42045 lst2))
                 (let ((f42049
                        (lambda (a41943)
                          (let ((a41944 '1))
                            (let ((f42048
                                   (lambda (a41945)
                                     (let ((f42047
                                            (lambda (a41946)
                                              (let ((f42046
                                                     (lambda (a41947)
                                                       (take-helper
                                                        kont42044
                                                        a41943
                                                        a41945
                                                        a41947))))
                                                (cons f42046 a41946 lst2)))))
                                       (car f42047 lst)))))
                              (- f42048 n a41944))))))
                   (cdr f42049 lst))))))
        (= f42050 n a41940))))
  (define (take kont42051 lst n)
    (let ((f42052 (lambda (a41948) (take-helper kont42051 lst n a41948))))
      (list f42052)))
  (define (length kont42053 lst)
    (let ((f42056
           (lambda (a41949)
             (if a41949
               (let ((x41950 '0)) (kont42053 x41950))
               (let ((a41951 '1))
                 (let ((f42055
                        (lambda (a41952)
                          (let ((f42054
                                 (lambda (a41953)
                                   (+ kont42053 a41951 a41953))))
                            (length f42054 a41952)))))
                   (cdr f42055 lst)))))))
      (null? f42056 lst)))
  (define (map kont42057 proc lst)
    (let ((f42063
           (lambda (a41954)
             (if a41954
               (let ((f42058 (lambda (x41955) (kont42057 x41955))))
                 (list f42058))
               (let ((f42062
                      (lambda (a41956)
                        (let ((f42061
                               (lambda (a41957)
                                 (let ((f42060
                                        (lambda (a41958)
                                          (let ((f42059
                                                 (lambda (a41959)
                                                   (cons
                                                    kont42057
                                                    a41957
                                                    a41959))))
                                            (map f42059 proc a41958)))))
                                   (cdr f42060 lst)))))
                          (proc f42061 a41956)))))
                 (car f42062 lst))))))
      (null? f42063 lst)))
  (define (filter kont42064 op lst)
    (let ((f42072
           (lambda (a41960)
             (if a41960
               (let ((f42065 (lambda (x41961) (kont42064 x41961))))
                 (list f42065))
               (let ((f42071
                      (lambda (a41962)
                        (let ((f42070
                               (lambda (a41963)
                                 (if a41963
                                   (let ((f42068
                                          (lambda (a41964)
                                            (let ((f42067
                                                   (lambda (a41965)
                                                     (let ((f42066
                                                            (lambda (a41966)
                                                              (cons
                                                               kont42064
                                                               a41964
                                                               a41966))))
                                                       (filter
                                                        f42066
                                                        op
                                                        a41965)))))
                                              (cdr f42067 lst)))))
                                     (car f42068 lst))
                                   (let ((f42069
                                          (lambda (a41967)
                                            (filter kont42064 op a41967))))
                                     (cdr f42069 lst))))))
                          (op f42070 a41962)))))
                 (car f42071 lst))))))
      (null? f42072 lst)))
  (define (drop kont42073 lst n)
    (let ((a41968 '0))
      (let ((f42076
             (lambda (a41969)
               (if a41969
                 (kont42073 lst)
                 (let ((f42075
                        (lambda (a41970)
                          (let ((a41971 '1))
                            (let ((f42074
                                   (lambda (a41972)
                                     (drop kont42073 a41970 a41972))))
                              (- f42074 n a41971))))))
                   (cdr f42075 lst))))))
        (= f42076 n a41968))))
  (define (foldr kont42077 proc acc lst)
    (let ((f42081
           (lambda (a41973)
             (if a41973
               (kont42077 acc)
               (let ((f42080
                      (lambda (a41974)
                        (let ((f42079
                               (lambda (a41975)
                                 (let ((f42078
                                        (lambda (a41976)
                                          (proc kont42077 a41974 a41976))))
                                   (foldr f42078 proc acc a41975)))))
                          (cdr f42079 lst)))))
                 (car f42080 lst))))))
      (null? f42081 lst)))
  (define (append kont42082 lst1 lst2)
    (let ((f42086
           (lambda (a41977)
             (if a41977
               (kont42082 lst2)
               (let ((f42085
                      (lambda (a41978)
                        (let ((f42084
                               (lambda (a41979)
                                 (let ((f42083
                                        (lambda (a41980)
                                          (cons kont42082 a41978 a41980))))
                                   (append f42083 a41979 lst2)))))
                          (cdr f42084 lst1)))))
                 (car f42085 lst1))))))
      (null? f42086 lst1)))
  (define (hash . lst)
    (let ((kont42087 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x41981 (apply-prim hash lst))) (kont42087 x41981)))))
  (define (hash-ref kont42089 h k)
    (let ((x41982 (prim hash-ref h k))) (kont42089 x41982)))
  (define (hash-set kont42090 h k v)
    (let ((x41983 (prim hash-set h k v))) (kont42090 x41983)))
  (define (hash-has-key? kont42091 h k)
    (let ((x41984 (prim hash-has-key? h k))) (kont42091 x41984)))
  (define (hash-count kont42092 h)
    (let ((x41985 (prim hash-count h))) (kont42092 x41985)))
  (define (call kont42093)
    (let ((a41986 "work"))
      (let ((a41987 '80))
        (let ((a41988 '10))
          (let ((a41989 "lmao"))
            (let ((f42095
                   (lambda (a41990)
                     (let ((a41991 "work"))
                       (let ((a41992 '90))
                         (let ((f42094
                                (lambda (a41993)
                                  (let ((a41994 "work"))
                                    (hash-ref kont42093 a41993 a41994)))))
                           (hash-set f42094 a41990 a41991 a41992)))))))
              (hash f42095 a41986 a41987 a41988 a41989)))))))
  (define (brouhaha_main kont42096)
    (let ((f42097 (lambda (x41995) (kont42096 x41995)))) (call f42097))))
