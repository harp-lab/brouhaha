'((define (+ . lst)
    (let ((kont42904 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42811 (apply-prim + lst))) (kont42904 x42811)))))
  (define (- . lst)
    (let ((kont42906 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42812 (apply-prim - lst))) (kont42906 x42812)))))
  (define (* . lst)
    (let ((kont42908 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42813 (apply-prim * lst))) (kont42908 x42813)))))
  (define (modulo kont42910 a b)
    (let ((x42814 (prim modulo a b))) (kont42910 x42814)))
  (define (/ . lst)
    (let ((kont42911 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42815 (apply-prim / lst))) (kont42911 x42815)))))
  (define (= . lst)
    (let ((kont42913 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42816 (apply-prim = lst))) (kont42913 x42816)))))
  (define (> . lst)
    (let ((kont42915 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42817 (apply-prim > lst))) (kont42915 x42817)))))
  (define (< . lst)
    (let ((kont42917 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42818 (apply-prim < lst))) (kont42917 x42818)))))
  (define (<= . lst)
    (let ((kont42919 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42819 (apply-prim <= lst))) (kont42919 x42819)))))
  (define (>= . lst)
    (let ((kont42921 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42820 (apply-prim >= lst))) (kont42921 x42820)))))
  (define (null? kont42923 x)
    (let ((x42821 (prim null? x))) (kont42923 x42821)))
  (define (equal? kont42924 x y)
    (let ((x42822 (prim equal? x y))) (kont42924 x42822)))
  (define (eq? kont42925 x y)
    (let ((x42823 (prim eq? x y))) (kont42925 x42823)))
  (define (cons kont42926 a b)
    (let ((x42824 (prim cons a b))) (kont42926 x42824)))
  (define (car kont42927 lst)
    (let ((x42825 (prim car lst))) (kont42927 x42825)))
  (define (cdr kont42928 lst)
    (let ((x42826 (prim cdr lst))) (kont42928 x42826)))
  (define (even? kont42929 x)
    (let ((a42827 '0))
      (let ((a42828 '2))
        (let ((f42930 (lambda (a42829) (equal? kont42929 a42827 a42829))))
          (modulo f42930 x a42828)))))
  (define (odd? kont42931 x)
    (let ((a42830 '1))
      (let ((a42831 '2))
        (let ((f42932 (lambda (a42832) (equal? kont42931 a42830 a42832))))
          (modulo f42932 x a42831)))))
  (define (list . x)
    (let ((kont42933 (prim car x))) (let ((x (prim cdr x))) (kont42933 x))))
  (define (member? kont42935 x lst)
    (let ((f42939
           (lambda (a42833)
             (if a42833
               (let ((x42834 '#f)) (kont42935 x42834))
               (let ((f42938
                      (lambda (a42835)
                        (let ((f42937
                               (lambda (a42836)
                                 (if a42836
                                   (let ((x42837 '#t)) (kont42935 x42837))
                                   (let ((f42936
                                          (lambda (a42838)
                                            (member? kont42935 x a42838))))
                                     (cdr f42936 lst))))))
                          (equal? f42937 a42835 x)))))
                 (car f42938 lst))))))
      (null? f42939 lst)))
  (define (foldl kont42940 fun acc lst)
    (let ((f42944
           (lambda (a42839)
             (if a42839
               (kont42940 acc)
               (let ((f42943
                      (lambda (a42840)
                        (let ((f42942
                               (lambda (a42841)
                                 (let ((f42941
                                        (lambda (a42842)
                                          (foldl
                                           kont42940
                                           fun
                                           a42841
                                           a42842))))
                                   (cdr f42941 lst)))))
                          (fun f42942 a42840 acc)))))
                 (car f42943 lst))))))
      (null? f42944 lst)))
  (define (reverse-helper kont42945 lst lst2)
    (let ((f42949
           (lambda (a42843)
             (if a42843
               (kont42945 lst2)
               (let ((f42948
                      (lambda (a42844)
                        (let ((f42947
                               (lambda (a42845)
                                 (let ((f42946
                                        (lambda (a42846)
                                          (reverse-helper
                                           kont42945
                                           a42844
                                           a42846))))
                                   (cons f42946 a42845 lst2)))))
                          (car f42947 lst)))))
                 (cdr f42948 lst))))))
      (null? f42949 lst)))
  (define (reverse kont42950 lst)
    (let ((f42951 (lambda (a42847) (reverse-helper kont42950 lst a42847))))
      (list f42951)))
  (define (take-helper kont42952 lst n lst2)
    (let ((a42848 '0))
      (let ((f42958
             (lambda (a42849)
               (if a42849
                 (let ((f42953 (lambda (x42850) (kont42952 x42850))))
                   (reverse f42953 lst2))
                 (let ((f42957
                        (lambda (a42851)
                          (let ((a42852 '1))
                            (let ((f42956
                                   (lambda (a42853)
                                     (let ((f42955
                                            (lambda (a42854)
                                              (let ((f42954
                                                     (lambda (a42855)
                                                       (take-helper
                                                        kont42952
                                                        a42851
                                                        a42853
                                                        a42855))))
                                                (cons f42954 a42854 lst2)))))
                                       (car f42955 lst)))))
                              (- f42956 n a42852))))))
                   (cdr f42957 lst))))))
        (= f42958 n a42848))))
  (define (take kont42959 lst n)
    (let ((f42960 (lambda (a42856) (take-helper kont42959 lst n a42856))))
      (list f42960)))
  (define (length kont42961 lst)
    (let ((f42964
           (lambda (a42857)
             (if a42857
               (let ((x42858 '0)) (kont42961 x42858))
               (let ((a42859 '1))
                 (let ((f42963
                        (lambda (a42860)
                          (let ((f42962
                                 (lambda (a42861)
                                   (+ kont42961 a42859 a42861))))
                            (length f42962 a42860)))))
                   (cdr f42963 lst)))))))
      (null? f42964 lst)))
  (define (map kont42965 proc lst)
    (let ((f42971
           (lambda (a42862)
             (if a42862
               (let ((f42966 (lambda (x42863) (kont42965 x42863))))
                 (list f42966))
               (let ((f42970
                      (lambda (a42864)
                        (let ((f42969
                               (lambda (a42865)
                                 (let ((f42968
                                        (lambda (a42866)
                                          (let ((f42967
                                                 (lambda (a42867)
                                                   (cons
                                                    kont42965
                                                    a42865
                                                    a42867))))
                                            (map f42967 proc a42866)))))
                                   (cdr f42968 lst)))))
                          (proc f42969 a42864)))))
                 (car f42970 lst))))))
      (null? f42971 lst)))
  (define (filter kont42972 op lst)
    (let ((f42980
           (lambda (a42868)
             (if a42868
               (let ((f42973 (lambda (x42869) (kont42972 x42869))))
                 (list f42973))
               (let ((f42979
                      (lambda (a42870)
                        (let ((f42978
                               (lambda (a42871)
                                 (if a42871
                                   (let ((f42976
                                          (lambda (a42872)
                                            (let ((f42975
                                                   (lambda (a42873)
                                                     (let ((f42974
                                                            (lambda (a42874)
                                                              (cons
                                                               kont42972
                                                               a42872
                                                               a42874))))
                                                       (filter
                                                        f42974
                                                        op
                                                        a42873)))))
                                              (cdr f42975 lst)))))
                                     (car f42976 lst))
                                   (let ((f42977
                                          (lambda (a42875)
                                            (filter kont42972 op a42875))))
                                     (cdr f42977 lst))))))
                          (op f42978 a42870)))))
                 (car f42979 lst))))))
      (null? f42980 lst)))
  (define (drop kont42981 lst n)
    (let ((a42876 '0))
      (let ((f42984
             (lambda (a42877)
               (if a42877
                 (kont42981 lst)
                 (let ((f42983
                        (lambda (a42878)
                          (let ((a42879 '1))
                            (let ((f42982
                                   (lambda (a42880)
                                     (drop kont42981 a42878 a42880))))
                              (- f42982 n a42879))))))
                   (cdr f42983 lst))))))
        (= f42984 n a42876))))
  (define (foldr kont42985 proc acc lst)
    (let ((f42989
           (lambda (a42881)
             (if a42881
               (kont42985 acc)
               (let ((f42988
                      (lambda (a42882)
                        (let ((f42987
                               (lambda (a42883)
                                 (let ((f42986
                                        (lambda (a42884)
                                          (proc kont42985 a42882 a42884))))
                                   (foldr f42986 proc acc a42883)))))
                          (cdr f42987 lst)))))
                 (car f42988 lst))))))
      (null? f42989 lst)))
  (define (append kont42990 lst1 lst2)
    (let ((f42994
           (lambda (a42885)
             (if a42885
               (kont42990 lst2)
               (let ((f42993
                      (lambda (a42886)
                        (let ((f42992
                               (lambda (a42887)
                                 (let ((f42991
                                        (lambda (a42888)
                                          (cons kont42990 a42886 a42888))))
                                   (append f42991 a42887 lst2)))))
                          (cdr f42992 lst1)))))
                 (car f42993 lst1))))))
      (null? f42994 lst1)))
  (define (hash . lst)
    (let ((kont42995 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x42889 (apply-prim hash lst))) (kont42995 x42889)))))
  (define (hash-ref kont42997 h k)
    (let ((x42890 (prim hash-ref h k))) (kont42997 x42890)))
  (define (hash-set kont42998 h k v)
    (let ((x42891 (prim hash-set h k v))) (kont42998 x42891)))
  (define (hash-has-key? kont42999 h k)
    (let ((x42892 (prim hash-has-key? h k))) (kont42999 x42892)))
  (define (hash-count kont43000 h)
    (let ((x42893 (prim hash-count h))) (kont43000 x42893)))
  (define (call kont43001)
    (let ((a42894 "work"))
      (let ((a42895 '80))
        (let ((a42896 '10))
          (let ((a42897 "lmao"))
            (let ((f43003
                   (lambda (a42898)
                     (let ((a42899 "work"))
                       (let ((a42900 '90))
                         (let ((f43002
                                (lambda (a42901)
                                  (let ((a42902 "work"))
                                    (hash-ref kont43001 a42901 a42902)))))
                           (hash-set f43002 a42898 a42899 a42900)))))))
              (hash f43003 a42894 a42895 a42896 a42897)))))))
  (define (brouhaha_main kont43004)
    (let ((f43005 (lambda (x42903) (kont43004 x42903)))) (call f43005))))
