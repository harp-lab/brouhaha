'((define (+ . lst)
    (let ((kont44092 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x43999 (apply-prim + lst))) (kont44092 x43999)))))
  (define (- . lst)
    (let ((kont44094 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44000 (apply-prim - lst))) (kont44094 x44000)))))
  (define (* . lst)
    (let ((kont44096 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44001 (apply-prim * lst))) (kont44096 x44001)))))
  (define (modulo kont44098 a b)
    (let ((x44002 (prim modulo a b))) (kont44098 x44002)))
  (define (/ . lst)
    (let ((kont44099 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44003 (apply-prim / lst))) (kont44099 x44003)))))
  (define (= . lst)
    (let ((kont44101 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44004 (apply-prim = lst))) (kont44101 x44004)))))
  (define (> . lst)
    (let ((kont44103 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44005 (apply-prim > lst))) (kont44103 x44005)))))
  (define (< . lst)
    (let ((kont44105 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44006 (apply-prim < lst))) (kont44105 x44006)))))
  (define (<= . lst)
    (let ((kont44107 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44007 (apply-prim <= lst))) (kont44107 x44007)))))
  (define (>= . lst)
    (let ((kont44109 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44008 (apply-prim >= lst))) (kont44109 x44008)))))
  (define (null? kont44111 x)
    (let ((x44009 (prim null? x))) (kont44111 x44009)))
  (define (equal? kont44112 x y)
    (let ((x44010 (prim equal? x y))) (kont44112 x44010)))
  (define (eq? kont44113 x y)
    (let ((x44011 (prim eq? x y))) (kont44113 x44011)))
  (define (cons kont44114 a b)
    (let ((x44012 (prim cons a b))) (kont44114 x44012)))
  (define (car kont44115 lst)
    (let ((x44013 (prim car lst))) (kont44115 x44013)))
  (define (cdr kont44116 lst)
    (let ((x44014 (prim cdr lst))) (kont44116 x44014)))
  (define (even? kont44117 x)
    (let ((a44015 '0))
      (let ((a44016 '2))
        (let ((f44118 (lambda (a44017) (equal? kont44117 a44015 a44017))))
          (modulo f44118 x a44016)))))
  (define (odd? kont44119 x)
    (let ((a44018 '1))
      (let ((a44019 '2))
        (let ((f44120 (lambda (a44020) (equal? kont44119 a44018 a44020))))
          (modulo f44120 x a44019)))))
  (define (list . x)
    (let ((kont44121 (prim car x))) (let ((x (prim cdr x))) (kont44121 x))))
  (define (member? kont44123 x lst)
    (let ((f44127
           (lambda (a44021)
             (if a44021
               (let ((x44022 '#f)) (kont44123 x44022))
               (let ((f44126
                      (lambda (a44023)
                        (let ((f44125
                               (lambda (a44024)
                                 (if a44024
                                   (let ((x44025 '#t)) (kont44123 x44025))
                                   (let ((f44124
                                          (lambda (a44026)
                                            (member? kont44123 x a44026))))
                                     (cdr f44124 lst))))))
                          (equal? f44125 a44023 x)))))
                 (car f44126 lst))))))
      (null? f44127 lst)))
  (define (foldl kont44128 fun acc lst)
    (let ((f44132
           (lambda (a44027)
             (if a44027
               (kont44128 acc)
               (let ((f44131
                      (lambda (a44028)
                        (let ((f44130
                               (lambda (a44029)
                                 (let ((f44129
                                        (lambda (a44030)
                                          (foldl
                                           kont44128
                                           fun
                                           a44029
                                           a44030))))
                                   (cdr f44129 lst)))))
                          (fun f44130 a44028 acc)))))
                 (car f44131 lst))))))
      (null? f44132 lst)))
  (define (reverse-helper kont44133 lst lst2)
    (let ((f44137
           (lambda (a44031)
             (if a44031
               (kont44133 lst2)
               (let ((f44136
                      (lambda (a44032)
                        (let ((f44135
                               (lambda (a44033)
                                 (let ((f44134
                                        (lambda (a44034)
                                          (reverse-helper
                                           kont44133
                                           a44032
                                           a44034))))
                                   (cons f44134 a44033 lst2)))))
                          (car f44135 lst)))))
                 (cdr f44136 lst))))))
      (null? f44137 lst)))
  (define (reverse kont44138 lst)
    (let ((f44139 (lambda (a44035) (reverse-helper kont44138 lst a44035))))
      (list f44139)))
  (define (take-helper kont44140 lst n lst2)
    (let ((a44036 '0))
      (let ((f44146
             (lambda (a44037)
               (if a44037
                 (let ((f44141 (lambda (x44038) (kont44140 x44038))))
                   (reverse f44141 lst2))
                 (let ((f44145
                        (lambda (a44039)
                          (let ((a44040 '1))
                            (let ((f44144
                                   (lambda (a44041)
                                     (let ((f44143
                                            (lambda (a44042)
                                              (let ((f44142
                                                     (lambda (a44043)
                                                       (take-helper
                                                        kont44140
                                                        a44039
                                                        a44041
                                                        a44043))))
                                                (cons f44142 a44042 lst2)))))
                                       (car f44143 lst)))))
                              (- f44144 n a44040))))))
                   (cdr f44145 lst))))))
        (= f44146 n a44036))))
  (define (take kont44147 lst n)
    (let ((f44148 (lambda (a44044) (take-helper kont44147 lst n a44044))))
      (list f44148)))
  (define (length kont44149 lst)
    (let ((f44152
           (lambda (a44045)
             (if a44045
               (let ((x44046 '0)) (kont44149 x44046))
               (let ((a44047 '1))
                 (let ((f44151
                        (lambda (a44048)
                          (let ((f44150
                                 (lambda (a44049)
                                   (+ kont44149 a44047 a44049))))
                            (length f44150 a44048)))))
                   (cdr f44151 lst)))))))
      (null? f44152 lst)))
  (define (map kont44153 proc lst)
    (let ((f44159
           (lambda (a44050)
             (if a44050
               (let ((f44154 (lambda (x44051) (kont44153 x44051))))
                 (list f44154))
               (let ((f44158
                      (lambda (a44052)
                        (let ((f44157
                               (lambda (a44053)
                                 (let ((f44156
                                        (lambda (a44054)
                                          (let ((f44155
                                                 (lambda (a44055)
                                                   (cons
                                                    kont44153
                                                    a44053
                                                    a44055))))
                                            (map f44155 proc a44054)))))
                                   (cdr f44156 lst)))))
                          (proc f44157 a44052)))))
                 (car f44158 lst))))))
      (null? f44159 lst)))
  (define (filter kont44160 op lst)
    (let ((f44168
           (lambda (a44056)
             (if a44056
               (let ((f44161 (lambda (x44057) (kont44160 x44057))))
                 (list f44161))
               (let ((f44167
                      (lambda (a44058)
                        (let ((f44166
                               (lambda (a44059)
                                 (if a44059
                                   (let ((f44164
                                          (lambda (a44060)
                                            (let ((f44163
                                                   (lambda (a44061)
                                                     (let ((f44162
                                                            (lambda (a44062)
                                                              (cons
                                                               kont44160
                                                               a44060
                                                               a44062))))
                                                       (filter
                                                        f44162
                                                        op
                                                        a44061)))))
                                              (cdr f44163 lst)))))
                                     (car f44164 lst))
                                   (let ((f44165
                                          (lambda (a44063)
                                            (filter kont44160 op a44063))))
                                     (cdr f44165 lst))))))
                          (op f44166 a44058)))))
                 (car f44167 lst))))))
      (null? f44168 lst)))
  (define (drop kont44169 lst n)
    (let ((a44064 '0))
      (let ((f44172
             (lambda (a44065)
               (if a44065
                 (kont44169 lst)
                 (let ((f44171
                        (lambda (a44066)
                          (let ((a44067 '1))
                            (let ((f44170
                                   (lambda (a44068)
                                     (drop kont44169 a44066 a44068))))
                              (- f44170 n a44067))))))
                   (cdr f44171 lst))))))
        (= f44172 n a44064))))
  (define (foldr kont44173 proc acc lst)
    (let ((f44177
           (lambda (a44069)
             (if a44069
               (kont44173 acc)
               (let ((f44176
                      (lambda (a44070)
                        (let ((f44175
                               (lambda (a44071)
                                 (let ((f44174
                                        (lambda (a44072)
                                          (proc kont44173 a44070 a44072))))
                                   (foldr f44174 proc acc a44071)))))
                          (cdr f44175 lst)))))
                 (car f44176 lst))))))
      (null? f44177 lst)))
  (define (append kont44178 lst1 lst2)
    (let ((f44182
           (lambda (a44073)
             (if a44073
               (kont44178 lst2)
               (let ((f44181
                      (lambda (a44074)
                        (let ((f44180
                               (lambda (a44075)
                                 (let ((f44179
                                        (lambda (a44076)
                                          (cons kont44178 a44074 a44076))))
                                   (append f44179 a44075 lst2)))))
                          (cdr f44180 lst1)))))
                 (car f44181 lst1))))))
      (null? f44182 lst1)))
  (define (hash . lst)
    (let ((kont44183 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x44077 (apply-prim hash lst))) (kont44183 x44077)))))
  (define (hash-ref kont44185 h k)
    (let ((x44078 (prim hash-ref h k))) (kont44185 x44078)))
  (define (hash-set kont44186 h k v)
    (let ((x44079 (prim hash-set h k v))) (kont44186 x44079)))
  (define (hash-has-key? kont44187 h k)
    (let ((x44080 (prim hash-has-key? h k))) (kont44187 x44080)))
  (define (hash-count kont44188 h)
    (let ((x44081 (prim hash-count h))) (kont44188 x44081)))
  (define (call kont44189)
    (let ((a44082 "work"))
      (let ((a44083 '80))
        (let ((a44084 '10))
          (let ((a44085 "lmao"))
            (let ((f44191
                   (lambda (a44086)
                     (let ((a44087 "work"))
                       (let ((a44088 '90))
                         (let ((f44190
                                (lambda (a44089)
                                  (let ((a44090 "work"))
                                    (hash-ref kont44189 a44089 a44090)))))
                           (hash-set f44190 a44086 a44087 a44088)))))))
              (hash f44191 a44082 a44083 a44084 a44085)))))))
  (define (brouhaha_main kont44192)
    (let ((f44193 (lambda (x44091) (kont44192 x44091)))) (call f44193))))
