'((define (+ . lst)
    (let ((kont52327 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52238 (apply-prim + lst))) (kont52327 x52238)))))
  (define (- . lst)
    (let ((kont52329 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52239 (apply-prim - lst))) (kont52329 x52239)))))
  (define (* . lst)
    (let ((kont52331 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52240 (apply-prim * lst))) (kont52331 x52240)))))
  (define (modulo kont52333 a b)
    (let ((x52241 (prim modulo a b))) (kont52333 x52241)))
  (define (/ . lst)
    (let ((kont52334 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52242 (apply-prim / lst))) (kont52334 x52242)))))
  (define (= . lst)
    (let ((kont52336 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52243 (apply-prim = lst))) (kont52336 x52243)))))
  (define (> . lst)
    (let ((kont52338 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52244 (apply-prim > lst))) (kont52338 x52244)))))
  (define (< . lst)
    (let ((kont52340 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52245 (apply-prim < lst))) (kont52340 x52245)))))
  (define (<= . lst)
    (let ((kont52342 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52246 (apply-prim <= lst))) (kont52342 x52246)))))
  (define (>= . lst)
    (let ((kont52344 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52247 (apply-prim >= lst))) (kont52344 x52247)))))
  (define (null? kont52346 x)
    (let ((x52248 (prim null? x))) (kont52346 x52248)))
  (define (equal? kont52347 x y)
    (let ((x52249 (prim equal? x y))) (kont52347 x52249)))
  (define (eq? kont52348 x y)
    (let ((x52250 (prim eq? x y))) (kont52348 x52250)))
  (define (cons kont52349 a b)
    (let ((x52251 (prim cons a b))) (kont52349 x52251)))
  (define (car kont52350 lst)
    (let ((x52252 (prim car lst))) (kont52350 x52252)))
  (define (cdr kont52351 lst)
    (let ((x52253 (prim cdr lst))) (kont52351 x52253)))
  (define (even? kont52352 x)
    (let ((a52254 '0))
      (let ((a52255 '2))
        (let ((f52353 (lambda (a52256) (equal? kont52352 a52254 a52256))))
          (modulo f52353 x a52255)))))
  (define (odd? kont52354 x)
    (let ((a52257 '1))
      (let ((a52258 '2))
        (let ((f52355 (lambda (a52259) (equal? kont52354 a52257 a52259))))
          (modulo f52355 x a52258)))))
  (define (list . x)
    (let ((kont52356 (prim car x))) (let ((x (prim cdr x))) (kont52356 x))))
  (define (member? kont52358 x lst)
    (let ((f52362
           (lambda (a52260)
             (if a52260
               (let ((x52261 '#f)) (kont52358 x52261))
               (let ((f52361
                      (lambda (a52262)
                        (let ((f52360
                               (lambda (a52263)
                                 (if a52263
                                   (let ((x52264 '#t)) (kont52358 x52264))
                                   (let ((f52359
                                          (lambda (a52265)
                                            (member? kont52358 x a52265))))
                                     (cdr f52359 lst))))))
                          (equal? f52360 a52262 x)))))
                 (car f52361 lst))))))
      (null? f52362 lst)))
  (define (foldl kont52363 fun acc lst)
    (let ((f52367
           (lambda (a52266)
             (if a52266
               (kont52363 acc)
               (let ((f52366
                      (lambda (a52267)
                        (let ((f52365
                               (lambda (a52268)
                                 (let ((f52364
                                        (lambda (a52269)
                                          (foldl
                                           kont52363
                                           fun
                                           a52268
                                           a52269))))
                                   (cdr f52364 lst)))))
                          (fun f52365 a52267 acc)))))
                 (car f52366 lst))))))
      (null? f52367 lst)))
  (define (reverse-helper kont52368 lst lst2)
    (let ((f52372
           (lambda (a52270)
             (if a52270
               (kont52368 lst2)
               (let ((f52371
                      (lambda (a52271)
                        (let ((f52370
                               (lambda (a52272)
                                 (let ((f52369
                                        (lambda (a52273)
                                          (reverse-helper
                                           kont52368
                                           a52271
                                           a52273))))
                                   (cons f52369 a52272 lst2)))))
                          (car f52370 lst)))))
                 (cdr f52371 lst))))))
      (null? f52372 lst)))
  (define (reverse kont52373 lst)
    (let ((f52374 (lambda (a52274) (reverse-helper kont52373 lst a52274))))
      (list f52374)))
  (define (take-helper kont52375 lst n lst2)
    (let ((a52275 '0))
      (let ((f52381
             (lambda (a52276)
               (if a52276
                 (let ((f52376 (lambda (x52277) (kont52375 x52277))))
                   (reverse f52376 lst2))
                 (let ((f52380
                        (lambda (a52278)
                          (let ((a52279 '1))
                            (let ((f52379
                                   (lambda (a52280)
                                     (let ((f52378
                                            (lambda (a52281)
                                              (let ((f52377
                                                     (lambda (a52282)
                                                       (take-helper
                                                        kont52375
                                                        a52278
                                                        a52280
                                                        a52282))))
                                                (cons f52377 a52281 lst2)))))
                                       (car f52378 lst)))))
                              (- f52379 n a52279))))))
                   (cdr f52380 lst))))))
        (= f52381 n a52275))))
  (define (take kont52382 lst n)
    (let ((f52383 (lambda (a52283) (take-helper kont52382 lst n a52283))))
      (list f52383)))
  (define (length kont52384 lst)
    (let ((f52387
           (lambda (a52284)
             (if a52284
               (let ((x52285 '0)) (kont52384 x52285))
               (let ((a52286 '1))
                 (let ((f52386
                        (lambda (a52287)
                          (let ((f52385
                                 (lambda (a52288)
                                   (+ kont52384 a52286 a52288))))
                            (length f52385 a52287)))))
                   (cdr f52386 lst)))))))
      (null? f52387 lst)))
  (define (map kont52388 proc lst)
    (let ((f52394
           (lambda (a52289)
             (if a52289
               (let ((f52389 (lambda (x52290) (kont52388 x52290))))
                 (list f52389))
               (let ((f52393
                      (lambda (a52291)
                        (let ((f52392
                               (lambda (a52292)
                                 (let ((f52391
                                        (lambda (a52293)
                                          (let ((f52390
                                                 (lambda (a52294)
                                                   (cons
                                                    kont52388
                                                    a52292
                                                    a52294))))
                                            (map f52390 proc a52293)))))
                                   (cdr f52391 lst)))))
                          (proc f52392 a52291)))))
                 (car f52393 lst))))))
      (null? f52394 lst)))
  (define (filter kont52395 op lst)
    (let ((f52403
           (lambda (a52295)
             (if a52295
               (let ((f52396 (lambda (x52296) (kont52395 x52296))))
                 (list f52396))
               (let ((f52402
                      (lambda (a52297)
                        (let ((f52401
                               (lambda (a52298)
                                 (if a52298
                                   (let ((f52399
                                          (lambda (a52299)
                                            (let ((f52398
                                                   (lambda (a52300)
                                                     (let ((f52397
                                                            (lambda (a52301)
                                                              (cons
                                                               kont52395
                                                               a52299
                                                               a52301))))
                                                       (filter
                                                        f52397
                                                        op
                                                        a52300)))))
                                              (cdr f52398 lst)))))
                                     (car f52399 lst))
                                   (let ((f52400
                                          (lambda (a52302)
                                            (filter kont52395 op a52302))))
                                     (cdr f52400 lst))))))
                          (op f52401 a52297)))))
                 (car f52402 lst))))))
      (null? f52403 lst)))
  (define (drop kont52404 lst n)
    (let ((a52303 '0))
      (let ((f52407
             (lambda (a52304)
               (if a52304
                 (kont52404 lst)
                 (let ((f52406
                        (lambda (a52305)
                          (let ((a52306 '1))
                            (let ((f52405
                                   (lambda (a52307)
                                     (drop kont52404 a52305 a52307))))
                              (- f52405 n a52306))))))
                   (cdr f52406 lst))))))
        (= f52407 n a52303))))
  (define (foldr kont52408 proc acc lst)
    (let ((f52412
           (lambda (a52308)
             (if a52308
               (kont52408 acc)
               (let ((f52411
                      (lambda (a52309)
                        (let ((f52410
                               (lambda (a52310)
                                 (let ((f52409
                                        (lambda (a52311)
                                          (proc kont52408 a52309 a52311))))
                                   (foldr f52409 proc acc a52310)))))
                          (cdr f52410 lst)))))
                 (car f52411 lst))))))
      (null? f52412 lst)))
  (define (append kont52413 lst1 lst2)
    (let ((f52417
           (lambda (a52312)
             (if a52312
               (kont52413 lst2)
               (let ((f52416
                      (lambda (a52313)
                        (let ((f52415
                               (lambda (a52314)
                                 (let ((f52414
                                        (lambda (a52315)
                                          (cons kont52413 a52313 a52315))))
                                   (append f52414 a52314 lst2)))))
                          (cdr f52415 lst1)))))
                 (car f52416 lst1))))))
      (null? f52417 lst1)))
  (define (hash . lst)
    (let ((kont52418 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x52316 (apply-prim hash lst))) (kont52418 x52316)))))
  (define (hash-ref kont52420 h k)
    (let ((x52317 (prim hash-ref h k))) (kont52420 x52317)))
  (define (hash-set kont52421 h k v)
    (let ((x52318 (prim hash-set h k v))) (kont52421 x52318)))
  (define (hash-has-key? kont52422 h k)
    (let ((x52319 (prim hash-has-key? h k))) (kont52422 x52319)))
  (define (hash-count kont52423 h)
    (let ((x52320 (prim hash-count h))) (kont52423 x52320)))
  (define (call kont52424)
    (let ((a52321 '100))
      (let ((a52322 '20))
        (let ((a52323 '10))
          (let ((a52324 '5))
            (let ((a52325 '1))
              (> kont52424 a52321 a52322 a52323 a52324 a52325)))))))
  (define (brouhaha_main kont52425)
    (let ((f52426 (lambda (x52326) (kont52425 x52326)))) (call f52426))))
