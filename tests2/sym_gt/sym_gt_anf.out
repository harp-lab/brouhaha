'((define (+ . lst)
    (let ((kont54990 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54899 (apply-prim + lst))) (kont54990 x54899)))))
  (define (- . lst)
    (let ((kont54992 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54900 (apply-prim - lst))) (kont54992 x54900)))))
  (define (* . lst)
    (let ((kont54994 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54901 (apply-prim * lst))) (kont54994 x54901)))))
  (define (modulo kont54996 a b)
    (let ((x54902 (prim modulo a b))) (kont54996 x54902)))
  (define (/ . lst)
    (let ((kont54997 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54903 (apply-prim / lst))) (kont54997 x54903)))))
  (define (= . lst)
    (let ((kont54999 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54904 (apply-prim = lst))) (kont54999 x54904)))))
  (define (> . lst)
    (let ((kont55001 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54905 (apply-prim > lst))) (kont55001 x54905)))))
  (define (< . lst)
    (let ((kont55003 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54906 (apply-prim < lst))) (kont55003 x54906)))))
  (define (<= . lst)
    (let ((kont55005 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54907 (apply-prim <= lst))) (kont55005 x54907)))))
  (define (>= . lst)
    (let ((kont55007 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54908 (apply-prim >= lst))) (kont55007 x54908)))))
  (define (null? kont55009 x)
    (let ((x54909 (prim null? x))) (kont55009 x54909)))
  (define (equal? kont55010 x y)
    (let ((x54910 (prim equal? x y))) (kont55010 x54910)))
  (define (eq? kont55011 x y)
    (let ((x54911 (prim eq? x y))) (kont55011 x54911)))
  (define (cons kont55012 a b)
    (let ((x54912 (prim cons a b))) (kont55012 x54912)))
  (define (car kont55013 lst)
    (let ((x54913 (prim car lst))) (kont55013 x54913)))
  (define (cdr kont55014 lst)
    (let ((x54914 (prim cdr lst))) (kont55014 x54914)))
  (define (even? kont55015 x)
    (let ((a54915 '0))
      (let ((a54916 '2))
        (let ((f55016 (lambda (a54917) (equal? kont55015 a54915 a54917))))
          (modulo f55016 x a54916)))))
  (define (odd? kont55017 x)
    (let ((a54918 '1))
      (let ((a54919 '2))
        (let ((f55018 (lambda (a54920) (equal? kont55017 a54918 a54920))))
          (modulo f55018 x a54919)))))
  (define (list . x)
    (let ((kont55019 (prim car x))) (let ((x (prim cdr x))) (kont55019 x))))
  (define (and . lst)
    (let ((kont55021 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54921 (apply-prim and lst))) (kont55021 x54921)))))
  (define (or . lst)
    (let ((kont55023 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54922 (apply-prim or lst))) (kont55023 x54922)))))
  (define (member? kont55025 x lst)
    (let ((f55029
           (lambda (a54923)
             (if a54923
               (let ((x54924 '#f)) (kont55025 x54924))
               (let ((f55028
                      (lambda (a54925)
                        (let ((f55027
                               (lambda (a54926)
                                 (if a54926
                                   (let ((x54927 '#t)) (kont55025 x54927))
                                   (let ((f55026
                                          (lambda (a54928)
                                            (member? kont55025 x a54928))))
                                     (cdr f55026 lst))))))
                          (equal? f55027 a54925 x)))))
                 (car f55028 lst))))))
      (null? f55029 lst)))
  (define (foldl kont55030 fun acc lst)
    (let ((f55034
           (lambda (a54929)
             (if a54929
               (kont55030 acc)
               (let ((f55033
                      (lambda (a54930)
                        (let ((f55032
                               (lambda (a54931)
                                 (let ((f55031
                                        (lambda (a54932)
                                          (foldl
                                           kont55030
                                           fun
                                           a54931
                                           a54932))))
                                   (cdr f55031 lst)))))
                          (fun f55032 a54930 acc)))))
                 (car f55033 lst))))))
      (null? f55034 lst)))
  (define (reverse-helper kont55035 lst lst2)
    (let ((f55039
           (lambda (a54933)
             (if a54933
               (kont55035 lst2)
               (let ((f55038
                      (lambda (a54934)
                        (let ((f55037
                               (lambda (a54935)
                                 (let ((f55036
                                        (lambda (a54936)
                                          (reverse-helper
                                           kont55035
                                           a54934
                                           a54936))))
                                   (cons f55036 a54935 lst2)))))
                          (car f55037 lst)))))
                 (cdr f55038 lst))))))
      (null? f55039 lst)))
  (define (reverse kont55040 lst)
    (let ((f55041 (lambda (a54937) (reverse-helper kont55040 lst a54937))))
      (list f55041)))
  (define (take-helper kont55042 lst n lst2)
    (let ((a54938 '0))
      (let ((f55048
             (lambda (a54939)
               (if a54939
                 (let ((f55043 (lambda (x54940) (kont55042 x54940))))
                   (reverse f55043 lst2))
                 (let ((f55047
                        (lambda (a54941)
                          (let ((a54942 '1))
                            (let ((f55046
                                   (lambda (a54943)
                                     (let ((f55045
                                            (lambda (a54944)
                                              (let ((f55044
                                                     (lambda (a54945)
                                                       (take-helper
                                                        kont55042
                                                        a54941
                                                        a54943
                                                        a54945))))
                                                (cons f55044 a54944 lst2)))))
                                       (car f55045 lst)))))
                              (- f55046 n a54942))))))
                   (cdr f55047 lst))))))
        (= f55048 n a54938))))
  (define (take kont55049 lst n)
    (let ((f55050 (lambda (a54946) (take-helper kont55049 lst n a54946))))
      (list f55050)))
  (define (length kont55051 lst)
    (let ((f55054
           (lambda (a54947)
             (if a54947
               (let ((x54948 '0)) (kont55051 x54948))
               (let ((a54949 '1))
                 (let ((f55053
                        (lambda (a54950)
                          (let ((f55052
                                 (lambda (a54951)
                                   (+ kont55051 a54949 a54951))))
                            (length f55052 a54950)))))
                   (cdr f55053 lst)))))))
      (null? f55054 lst)))
  (define (map kont55055 proc lst)
    (let ((f55061
           (lambda (a54952)
             (if a54952
               (let ((f55056 (lambda (x54953) (kont55055 x54953))))
                 (list f55056))
               (let ((f55060
                      (lambda (a54954)
                        (let ((f55059
                               (lambda (a54955)
                                 (let ((f55058
                                        (lambda (a54956)
                                          (let ((f55057
                                                 (lambda (a54957)
                                                   (cons
                                                    kont55055
                                                    a54955
                                                    a54957))))
                                            (map f55057 proc a54956)))))
                                   (cdr f55058 lst)))))
                          (proc f55059 a54954)))))
                 (car f55060 lst))))))
      (null? f55061 lst)))
  (define (filter kont55062 op lst)
    (let ((f55070
           (lambda (a54958)
             (if a54958
               (let ((f55063 (lambda (x54959) (kont55062 x54959))))
                 (list f55063))
               (let ((f55069
                      (lambda (a54960)
                        (let ((f55068
                               (lambda (a54961)
                                 (if a54961
                                   (let ((f55066
                                          (lambda (a54962)
                                            (let ((f55065
                                                   (lambda (a54963)
                                                     (let ((f55064
                                                            (lambda (a54964)
                                                              (cons
                                                               kont55062
                                                               a54962
                                                               a54964))))
                                                       (filter
                                                        f55064
                                                        op
                                                        a54963)))))
                                              (cdr f55065 lst)))))
                                     (car f55066 lst))
                                   (let ((f55067
                                          (lambda (a54965)
                                            (filter kont55062 op a54965))))
                                     (cdr f55067 lst))))))
                          (op f55068 a54960)))))
                 (car f55069 lst))))))
      (null? f55070 lst)))
  (define (drop kont55071 lst n)
    (let ((a54966 '0))
      (let ((f55074
             (lambda (a54967)
               (if a54967
                 (kont55071 lst)
                 (let ((f55073
                        (lambda (a54968)
                          (let ((a54969 '1))
                            (let ((f55072
                                   (lambda (a54970)
                                     (drop kont55071 a54968 a54970))))
                              (- f55072 n a54969))))))
                   (cdr f55073 lst))))))
        (= f55074 n a54966))))
  (define (foldr kont55075 proc acc lst)
    (let ((f55079
           (lambda (a54971)
             (if a54971
               (kont55075 acc)
               (let ((f55078
                      (lambda (a54972)
                        (let ((f55077
                               (lambda (a54973)
                                 (let ((f55076
                                        (lambda (a54974)
                                          (proc kont55075 a54972 a54974))))
                                   (foldr f55076 proc acc a54973)))))
                          (cdr f55077 lst)))))
                 (car f55078 lst))))))
      (null? f55079 lst)))
  (define (append kont55080 lst1 lst2)
    (let ((f55084
           (lambda (a54975)
             (if a54975
               (kont55080 lst2)
               (let ((f55083
                      (lambda (a54976)
                        (let ((f55082
                               (lambda (a54977)
                                 (let ((f55081
                                        (lambda (a54978)
                                          (cons kont55080 a54976 a54978))))
                                   (append f55081 a54977 lst2)))))
                          (cdr f55082 lst1)))))
                 (car f55083 lst1))))))
      (null? f55084 lst1)))
  (define (hash . lst)
    (let ((kont55085 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x54979 (apply-prim hash lst))) (kont55085 x54979)))))
  (define (hash-ref kont55087 h k)
    (let ((x54980 (prim hash-ref h k))) (kont55087 x54980)))
  (define (hash-set kont55088 h k v)
    (let ((x54981 (prim hash-set h k v))) (kont55088 x54981)))
  (define (hash-has-key? kont55089 h k)
    (let ((x54982 (prim hash-has-key? h k))) (kont55089 x54982)))
  (define (hash-count kont55090 h)
    (let ((x54983 (prim hash-count h))) (kont55090 x54983)))
  (define (call kont55091)
    (let ((a54984 '100))
      (let ((a54985 '20))
        (let ((a54986 '10))
          (let ((a54987 '5))
            (let ((a54988 '1))
              (> kont55091 a54984 a54985 a54986 a54987 a54988)))))))
  (define (brouhaha_main kont55092)
    (let ((f55093 (lambda (x54989) (kont55092 x54989)))) (call f55093))))
