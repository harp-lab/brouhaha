'((define (+ . lst)
    (let ((kont53923 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53834 (apply-prim + lst))) (kont53923 x53834)))))
  (define (- . lst)
    (let ((kont53925 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53835 (apply-prim - lst))) (kont53925 x53835)))))
  (define (* . lst)
    (let ((kont53927 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53836 (apply-prim * lst))) (kont53927 x53836)))))
  (define (modulo kont53929 a b)
    (let ((x53837 (prim modulo a b))) (kont53929 x53837)))
  (define (/ . lst)
    (let ((kont53930 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53838 (apply-prim / lst))) (kont53930 x53838)))))
  (define (= . lst)
    (let ((kont53932 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53839 (apply-prim = lst))) (kont53932 x53839)))))
  (define (> . lst)
    (let ((kont53934 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53840 (apply-prim > lst))) (kont53934 x53840)))))
  (define (< . lst)
    (let ((kont53936 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53841 (apply-prim < lst))) (kont53936 x53841)))))
  (define (<= . lst)
    (let ((kont53938 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53842 (apply-prim <= lst))) (kont53938 x53842)))))
  (define (>= . lst)
    (let ((kont53940 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53843 (apply-prim >= lst))) (kont53940 x53843)))))
  (define (null? kont53942 x)
    (let ((x53844 (prim null? x))) (kont53942 x53844)))
  (define (equal? kont53943 x y)
    (let ((x53845 (prim equal? x y))) (kont53943 x53845)))
  (define (eq? kont53944 x y)
    (let ((x53846 (prim eq? x y))) (kont53944 x53846)))
  (define (cons kont53945 a b)
    (let ((x53847 (prim cons a b))) (kont53945 x53847)))
  (define (car kont53946 lst)
    (let ((x53848 (prim car lst))) (kont53946 x53848)))
  (define (cdr kont53947 lst)
    (let ((x53849 (prim cdr lst))) (kont53947 x53849)))
  (define (even? kont53948 x)
    (let ((a53850 '0))
      (let ((a53851 '2))
        (let ((f53949 (lambda (a53852) (equal? kont53948 a53850 a53852))))
          (modulo f53949 x a53851)))))
  (define (odd? kont53950 x)
    (let ((a53853 '1))
      (let ((a53854 '2))
        (let ((f53951 (lambda (a53855) (equal? kont53950 a53853 a53855))))
          (modulo f53951 x a53854)))))
  (define (list . x)
    (let ((kont53952 (prim car x))) (let ((x (prim cdr x))) (kont53952 x))))
  (define (member? kont53954 x lst)
    (let ((f53958
           (lambda (a53856)
             (if a53856
               (let ((x53857 '#f)) (kont53954 x53857))
               (let ((f53957
                      (lambda (a53858)
                        (let ((f53956
                               (lambda (a53859)
                                 (if a53859
                                   (let ((x53860 '#t)) (kont53954 x53860))
                                   (let ((f53955
                                          (lambda (a53861)
                                            (member? kont53954 x a53861))))
                                     (cdr f53955 lst))))))
                          (equal? f53956 a53858 x)))))
                 (car f53957 lst))))))
      (null? f53958 lst)))
  (define (foldl kont53959 fun acc lst)
    (let ((f53963
           (lambda (a53862)
             (if a53862
               (kont53959 acc)
               (let ((f53962
                      (lambda (a53863)
                        (let ((f53961
                               (lambda (a53864)
                                 (let ((f53960
                                        (lambda (a53865)
                                          (foldl
                                           kont53959
                                           fun
                                           a53864
                                           a53865))))
                                   (cdr f53960 lst)))))
                          (fun f53961 a53863 acc)))))
                 (car f53962 lst))))))
      (null? f53963 lst)))
  (define (reverse-helper kont53964 lst lst2)
    (let ((f53968
           (lambda (a53866)
             (if a53866
               (kont53964 lst2)
               (let ((f53967
                      (lambda (a53867)
                        (let ((f53966
                               (lambda (a53868)
                                 (let ((f53965
                                        (lambda (a53869)
                                          (reverse-helper
                                           kont53964
                                           a53867
                                           a53869))))
                                   (cons f53965 a53868 lst2)))))
                          (car f53966 lst)))))
                 (cdr f53967 lst))))))
      (null? f53968 lst)))
  (define (reverse kont53969 lst)
    (let ((f53970 (lambda (a53870) (reverse-helper kont53969 lst a53870))))
      (list f53970)))
  (define (take-helper kont53971 lst n lst2)
    (let ((a53871 '0))
      (let ((f53977
             (lambda (a53872)
               (if a53872
                 (let ((f53972 (lambda (x53873) (kont53971 x53873))))
                   (reverse f53972 lst2))
                 (let ((f53976
                        (lambda (a53874)
                          (let ((a53875 '1))
                            (let ((f53975
                                   (lambda (a53876)
                                     (let ((f53974
                                            (lambda (a53877)
                                              (let ((f53973
                                                     (lambda (a53878)
                                                       (take-helper
                                                        kont53971
                                                        a53874
                                                        a53876
                                                        a53878))))
                                                (cons f53973 a53877 lst2)))))
                                       (car f53974 lst)))))
                              (- f53975 n a53875))))))
                   (cdr f53976 lst))))))
        (= f53977 n a53871))))
  (define (take kont53978 lst n)
    (let ((f53979 (lambda (a53879) (take-helper kont53978 lst n a53879))))
      (list f53979)))
  (define (length kont53980 lst)
    (let ((f53983
           (lambda (a53880)
             (if a53880
               (let ((x53881 '0)) (kont53980 x53881))
               (let ((a53882 '1))
                 (let ((f53982
                        (lambda (a53883)
                          (let ((f53981
                                 (lambda (a53884)
                                   (+ kont53980 a53882 a53884))))
                            (length f53981 a53883)))))
                   (cdr f53982 lst)))))))
      (null? f53983 lst)))
  (define (map kont53984 proc lst)
    (let ((f53990
           (lambda (a53885)
             (if a53885
               (let ((f53985 (lambda (x53886) (kont53984 x53886))))
                 (list f53985))
               (let ((f53989
                      (lambda (a53887)
                        (let ((f53988
                               (lambda (a53888)
                                 (let ((f53987
                                        (lambda (a53889)
                                          (let ((f53986
                                                 (lambda (a53890)
                                                   (cons
                                                    kont53984
                                                    a53888
                                                    a53890))))
                                            (map f53986 proc a53889)))))
                                   (cdr f53987 lst)))))
                          (proc f53988 a53887)))))
                 (car f53989 lst))))))
      (null? f53990 lst)))
  (define (filter kont53991 op lst)
    (let ((f53999
           (lambda (a53891)
             (if a53891
               (let ((f53992 (lambda (x53892) (kont53991 x53892))))
                 (list f53992))
               (let ((f53998
                      (lambda (a53893)
                        (let ((f53997
                               (lambda (a53894)
                                 (if a53894
                                   (let ((f53995
                                          (lambda (a53895)
                                            (let ((f53994
                                                   (lambda (a53896)
                                                     (let ((f53993
                                                            (lambda (a53897)
                                                              (cons
                                                               kont53991
                                                               a53895
                                                               a53897))))
                                                       (filter
                                                        f53993
                                                        op
                                                        a53896)))))
                                              (cdr f53994 lst)))))
                                     (car f53995 lst))
                                   (let ((f53996
                                          (lambda (a53898)
                                            (filter kont53991 op a53898))))
                                     (cdr f53996 lst))))))
                          (op f53997 a53893)))))
                 (car f53998 lst))))))
      (null? f53999 lst)))
  (define (drop kont54000 lst n)
    (let ((a53899 '0))
      (let ((f54003
             (lambda (a53900)
               (if a53900
                 (kont54000 lst)
                 (let ((f54002
                        (lambda (a53901)
                          (let ((a53902 '1))
                            (let ((f54001
                                   (lambda (a53903)
                                     (drop kont54000 a53901 a53903))))
                              (- f54001 n a53902))))))
                   (cdr f54002 lst))))))
        (= f54003 n a53899))))
  (define (foldr kont54004 proc acc lst)
    (let ((f54008
           (lambda (a53904)
             (if a53904
               (kont54004 acc)
               (let ((f54007
                      (lambda (a53905)
                        (let ((f54006
                               (lambda (a53906)
                                 (let ((f54005
                                        (lambda (a53907)
                                          (proc kont54004 a53905 a53907))))
                                   (foldr f54005 proc acc a53906)))))
                          (cdr f54006 lst)))))
                 (car f54007 lst))))))
      (null? f54008 lst)))
  (define (append kont54009 lst1 lst2)
    (let ((f54013
           (lambda (a53908)
             (if a53908
               (kont54009 lst2)
               (let ((f54012
                      (lambda (a53909)
                        (let ((f54011
                               (lambda (a53910)
                                 (let ((f54010
                                        (lambda (a53911)
                                          (cons kont54009 a53909 a53911))))
                                   (append f54010 a53910 lst2)))))
                          (cdr f54011 lst1)))))
                 (car f54012 lst1))))))
      (null? f54013 lst1)))
  (define (hash . lst)
    (let ((kont54014 (prim car lst)))
      (let ((lst (prim cdr lst)))
        (let ((x53912 (apply-prim hash lst))) (kont54014 x53912)))))
  (define (hash-ref kont54016 h k)
    (let ((x53913 (prim hash-ref h k))) (kont54016 x53913)))
  (define (hash-set kont54017 h k v)
    (let ((x53914 (prim hash-set h k v))) (kont54017 x53914)))
  (define (hash-has-key? kont54018 h k)
    (let ((x53915 (prim hash-has-key? h k))) (kont54018 x53915)))
  (define (hash-count kont54019 h)
    (let ((x53916 (prim hash-count h))) (kont54019 x53916)))
  (define (call kont54020)
    (let ((a53917 '100))
      (let ((a53918 '20))
        (let ((a53919 '10))
          (let ((a53920 '5))
            (let ((a53921 '1))
              (> kont54020 a53917 a53918 a53919 a53920 a53921)))))))
  (define (brouhaha_main kont54021)
    (let ((f54022 (lambda (x53922) (kont54021 x53922)))) (call f54022))))
