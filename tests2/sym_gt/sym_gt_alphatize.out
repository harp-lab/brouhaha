'((define (+ . lst) (let ((x55774 (apply-prim + lst))) x55774))
  (define (- . lst) (let ((x55775 (apply-prim - lst))) x55775))
  (define (* . lst) (let ((x55776 (apply-prim * lst))) x55776))
  (define (modulo a b) (let ((x55777 (prim modulo a b))) x55777))
  (define (/ . lst) (let ((x55778 (apply-prim / lst))) x55778))
  (define (= . lst) (let ((x55779 (apply-prim = lst))) x55779))
  (define (> . lst) (let ((x55780 (apply-prim > lst))) x55780))
  (define (< . lst) (let ((x55781 (apply-prim < lst))) x55781))
  (define (<= . lst) (let ((x55782 (apply-prim <= lst))) x55782))
  (define (>= . lst) (let ((x55783 (apply-prim >= lst))) x55783))
  (define (null? x) (let ((x55784 (prim null? x))) x55784))
  (define (equal? x y) (let ((x55785 (prim equal? x y))) x55785))
  (define (eq? x y) (let ((x55786 (prim eq? x y))) x55786))
  (define (cons a b) (let ((x55787 (prim cons a b))) x55787))
  (define (car lst) (let ((x55788 (prim car lst))) x55788))
  (define (cdr lst) (let ((x55789 (prim cdr lst))) x55789))
  (define (even? x)
    (let ((a55790 '0))
      (let ((a55791 '2))
        (let ((a55792 (modulo x a55791))) (equal? a55790 a55792)))))
  (define (odd? x)
    (let ((a55793 '1))
      (let ((a55794 '2))
        (let ((a55795 (modulo x a55794))) (equal? a55793 a55795)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a55796 (null? lst)))
      (if a55796
        (let ((x55797 '#f)) x55797)
        (let ((a55798 (car lst)))
          (let ((a55799 (equal? a55798 x)))
            (if a55799
              (let ((x55800 '#t)) x55800)
              (let ((a55801 (cdr lst))) (member? x a55801))))))))
  (define (foldl fun acc lst)
    (let ((a55802 (null? lst)))
      (if a55802
        acc
        (let ((a55803 (car lst)))
          (let ((a55804 (fun a55803 acc)))
            (let ((a55805 (cdr lst))) (foldl fun a55804 a55805)))))))
  (define (reverse-helper lst lst2)
    (let ((a55806 (null? lst)))
      (if a55806
        lst2
        (let ((a55807 (cdr lst)))
          (let ((a55808 (car lst)))
            (let ((a55809 (cons a55808 lst2)))
              (reverse-helper a55807 a55809)))))))
  (define (reverse lst) (let ((a55810 (list))) (reverse-helper lst a55810)))
  (define (take-helper lst n lst2)
    (let ((a55811 '0))
      (let ((a55812 (= n a55811)))
        (if a55812
          (let ((x55813 (reverse lst2))) x55813)
          (let ((a55814 (cdr lst)))
            (let ((a55815 '1))
              (let ((a55816 (- n a55815)))
                (let ((a55817 (car lst)))
                  (let ((a55818 (cons a55817 lst2)))
                    (take-helper a55814 a55816 a55818))))))))))
  (define (take lst n) (let ((a55819 (list))) (take-helper lst n a55819)))
  (define (length lst)
    (let ((a55820 (null? lst)))
      (if a55820
        (let ((x55821 '0)) x55821)
        (let ((a55822 '1))
          (let ((a55823 (cdr lst)))
            (let ((a55824 (length a55823))) (+ a55822 a55824)))))))
  (define (map proc lst)
    (let ((a55825 (null? lst)))
      (if a55825
        (let ((x55826 (list))) x55826)
        (let ((a55827 (car lst)))
          (let ((a55828 (proc a55827)))
            (let ((a55829 (cdr lst)))
              (let ((a55830 (map proc a55829))) (cons a55828 a55830))))))))
  (define (filter op lst)
    (let ((a55831 (null? lst)))
      (if a55831
        (let ((x55832 (list))) x55832)
        (let ((a55833 (car lst)))
          (let ((a55834 (op a55833)))
            (if a55834
              (let ((a55835 (car lst)))
                (let ((a55836 (cdr lst)))
                  (let ((a55837 (filter op a55836))) (cons a55835 a55837))))
              (let ((a55838 (cdr lst))) (filter op a55838))))))))
  (define (drop lst n)
    (let ((a55839 '0))
      (let ((a55840 (= n a55839)))
        (if a55840
          lst
          (let ((a55841 (cdr lst)))
            (let ((a55842 '1))
              (let ((a55843 (- n a55842))) (drop a55841 a55843))))))))
  (define (foldr proc acc lst)
    (let ((a55844 (null? lst)))
      (if a55844
        acc
        (let ((a55845 (car lst)))
          (let ((a55846 (cdr lst)))
            (let ((a55847 (foldr proc acc a55846))) (proc a55845 a55847)))))))
  (define (append lst1 lst2)
    (let ((a55848 (null? lst1)))
      (if a55848
        lst2
        (let ((a55849 (car lst1)))
          (let ((a55850 (cdr lst1)))
            (let ((a55851 (append a55850 lst2))) (cons a55849 a55851)))))))
  (define (hash . lst) (let ((x55852 (apply-prim hash lst))) x55852))
  (define (hash-ref h k) (let ((x55853 (prim hash-ref h k))) x55853))
  (define (hash-set h k v) (let ((x55854 (prim hash-set h k v))) x55854))
  (define (hash-has-key? h k) (let ((x55855 (prim hash-has-key? h k))) x55855))
  (define (hash-count h) (let ((x55856 (prim hash-count h))) x55856))
  (define (call)
    (let ((a55857 '100))
      (let ((a55858 '20))
        (let ((a55859 '10))
          (let ((a55860 '5))
            (let ((a55861 '1)) (> a55857 a55858 a55859 a55860 a55861)))))))
  (define (brouhaha_main) (let ((x55862 (call))) x55862)))
