'((define (+ . lst) (let ((x53834 (apply-prim + lst))) x53834))
  (define (- . lst) (let ((x53835 (apply-prim - lst))) x53835))
  (define (* . lst) (let ((x53836 (apply-prim * lst))) x53836))
  (define (modulo a b) (let ((x53837 (prim modulo a b))) x53837))
  (define (/ . lst) (let ((x53838 (apply-prim / lst))) x53838))
  (define (= . lst) (let ((x53839 (apply-prim = lst))) x53839))
  (define (> . lst) (let ((x53840 (apply-prim > lst))) x53840))
  (define (< . lst) (let ((x53841 (apply-prim < lst))) x53841))
  (define (<= . lst) (let ((x53842 (apply-prim <= lst))) x53842))
  (define (>= . lst) (let ((x53843 (apply-prim >= lst))) x53843))
  (define (null? x) (let ((x53844 (prim null? x))) x53844))
  (define (equal? x y) (let ((x53845 (prim equal? x y))) x53845))
  (define (eq? x y) (let ((x53846 (prim eq? x y))) x53846))
  (define (cons a b) (let ((x53847 (prim cons a b))) x53847))
  (define (car lst) (let ((x53848 (prim car lst))) x53848))
  (define (cdr lst) (let ((x53849 (prim cdr lst))) x53849))
  (define (even? x)
    (let ((a53850 '0))
      (let ((a53851 '2))
        (let ((a53852 (modulo x a53851))) (equal? a53850 a53852)))))
  (define (odd? x)
    (let ((a53853 '1))
      (let ((a53854 '2))
        (let ((a53855 (modulo x a53854))) (equal? a53853 a53855)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a53856 (null? lst)))
      (if a53856
        (let ((x53857 '#f)) x53857)
        (let ((a53858 (car lst)))
          (let ((a53859 (equal? a53858 x)))
            (if a53859
              (let ((x53860 '#t)) x53860)
              (let ((a53861 (cdr lst))) (member? x a53861))))))))
  (define (foldl fun acc lst)
    (let ((a53862 (null? lst)))
      (if a53862
        acc
        (let ((a53863 (car lst)))
          (let ((a53864 (fun a53863 acc)))
            (let ((a53865 (cdr lst))) (foldl fun a53864 a53865)))))))
  (define (reverse-helper lst lst2)
    (let ((a53866 (null? lst)))
      (if a53866
        lst2
        (let ((a53867 (cdr lst)))
          (let ((a53868 (car lst)))
            (let ((a53869 (cons a53868 lst2)))
              (reverse-helper a53867 a53869)))))))
  (define (reverse lst) (let ((a53870 (list))) (reverse-helper lst a53870)))
  (define (take-helper lst n lst2)
    (let ((a53871 '0))
      (let ((a53872 (= n a53871)))
        (if a53872
          (let ((x53873 (reverse lst2))) x53873)
          (let ((a53874 (cdr lst)))
            (let ((a53875 '1))
              (let ((a53876 (- n a53875)))
                (let ((a53877 (car lst)))
                  (let ((a53878 (cons a53877 lst2)))
                    (take-helper a53874 a53876 a53878))))))))))
  (define (take lst n) (let ((a53879 (list))) (take-helper lst n a53879)))
  (define (length lst)
    (let ((a53880 (null? lst)))
      (if a53880
        (let ((x53881 '0)) x53881)
        (let ((a53882 '1))
          (let ((a53883 (cdr lst)))
            (let ((a53884 (length a53883))) (+ a53882 a53884)))))))
  (define (map proc lst)
    (let ((a53885 (null? lst)))
      (if a53885
        (let ((x53886 (list))) x53886)
        (let ((a53887 (car lst)))
          (let ((a53888 (proc a53887)))
            (let ((a53889 (cdr lst)))
              (let ((a53890 (map proc a53889))) (cons a53888 a53890))))))))
  (define (filter op lst)
    (let ((a53891 (null? lst)))
      (if a53891
        (let ((x53892 (list))) x53892)
        (let ((a53893 (car lst)))
          (let ((a53894 (op a53893)))
            (if a53894
              (let ((a53895 (car lst)))
                (let ((a53896 (cdr lst)))
                  (let ((a53897 (filter op a53896))) (cons a53895 a53897))))
              (let ((a53898 (cdr lst))) (filter op a53898))))))))
  (define (drop lst n)
    (let ((a53899 '0))
      (let ((a53900 (= n a53899)))
        (if a53900
          lst
          (let ((a53901 (cdr lst)))
            (let ((a53902 '1))
              (let ((a53903 (- n a53902))) (drop a53901 a53903))))))))
  (define (foldr proc acc lst)
    (let ((a53904 (null? lst)))
      (if a53904
        acc
        (let ((a53905 (car lst)))
          (let ((a53906 (cdr lst)))
            (let ((a53907 (foldr proc acc a53906))) (proc a53905 a53907)))))))
  (define (append lst1 lst2)
    (let ((a53908 (null? lst1)))
      (if a53908
        lst2
        (let ((a53909 (car lst1)))
          (let ((a53910 (cdr lst1)))
            (let ((a53911 (append a53910 lst2))) (cons a53909 a53911)))))))
  (define (hash . lst) (let ((x53912 (apply-prim hash lst))) x53912))
  (define (hash-ref h k) (let ((x53913 (prim hash-ref h k))) x53913))
  (define (hash-set h k v) (let ((x53914 (prim hash-set h k v))) x53914))
  (define (hash-has-key? h k) (let ((x53915 (prim hash-has-key? h k))) x53915))
  (define (hash-count h) (let ((x53916 (prim hash-count h))) x53916))
  (define (call)
    (let ((a53917 '100))
      (let ((a53918 '20))
        (let ((a53919 '10))
          (let ((a53920 '5))
            (let ((a53921 '1)) (> a53917 a53918 a53919 a53920 a53921)))))))
  (define (brouhaha_main) (let ((x53922 (call))) x53922)))
