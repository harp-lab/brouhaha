'((define (+ . lst) (let ((x54899 (apply-prim + lst))) x54899))
  (define (- . lst) (let ((x54900 (apply-prim - lst))) x54900))
  (define (* . lst) (let ((x54901 (apply-prim * lst))) x54901))
  (define (modulo a b) (let ((x54902 (prim modulo a b))) x54902))
  (define (/ . lst) (let ((x54903 (apply-prim / lst))) x54903))
  (define (= . lst) (let ((x54904 (apply-prim = lst))) x54904))
  (define (> . lst) (let ((x54905 (apply-prim > lst))) x54905))
  (define (< . lst) (let ((x54906 (apply-prim < lst))) x54906))
  (define (<= . lst) (let ((x54907 (apply-prim <= lst))) x54907))
  (define (>= . lst) (let ((x54908 (apply-prim >= lst))) x54908))
  (define (null? x) (let ((x54909 (prim null? x))) x54909))
  (define (equal? x y) (let ((x54910 (prim equal? x y))) x54910))
  (define (eq? x y) (let ((x54911 (prim eq? x y))) x54911))
  (define (cons a b) (let ((x54912 (prim cons a b))) x54912))
  (define (car lst) (let ((x54913 (prim car lst))) x54913))
  (define (cdr lst) (let ((x54914 (prim cdr lst))) x54914))
  (define (even? x)
    (let ((a54915 '0))
      (let ((a54916 '2))
        (let ((a54917 (modulo x a54916))) (equal? a54915 a54917)))))
  (define (odd? x)
    (let ((a54918 '1))
      (let ((a54919 '2))
        (let ((a54920 (modulo x a54919))) (equal? a54918 a54920)))))
  (define (list . x) x)
  (define (and . lst) (let ((x54921 (apply-prim and lst))) x54921))
  (define (or . lst) (let ((x54922 (apply-prim or lst))) x54922))
  (define (member? x lst)
    (let ((a54923 (null? lst)))
      (if a54923
        (let ((x54924 '#f)) x54924)
        (let ((a54925 (car lst)))
          (let ((a54926 (equal? a54925 x)))
            (if a54926
              (let ((x54927 '#t)) x54927)
              (let ((a54928 (cdr lst))) (member? x a54928))))))))
  (define (foldl fun acc lst)
    (let ((a54929 (null? lst)))
      (if a54929
        acc
        (let ((a54930 (car lst)))
          (let ((a54931 (fun a54930 acc)))
            (let ((a54932 (cdr lst))) (foldl fun a54931 a54932)))))))
  (define (reverse-helper lst lst2)
    (let ((a54933 (null? lst)))
      (if a54933
        lst2
        (let ((a54934 (cdr lst)))
          (let ((a54935 (car lst)))
            (let ((a54936 (cons a54935 lst2)))
              (reverse-helper a54934 a54936)))))))
  (define (reverse lst) (let ((a54937 (list))) (reverse-helper lst a54937)))
  (define (take-helper lst n lst2)
    (let ((a54938 '0))
      (let ((a54939 (= n a54938)))
        (if a54939
          (let ((x54940 (reverse lst2))) x54940)
          (let ((a54941 (cdr lst)))
            (let ((a54942 '1))
              (let ((a54943 (- n a54942)))
                (let ((a54944 (car lst)))
                  (let ((a54945 (cons a54944 lst2)))
                    (take-helper a54941 a54943 a54945))))))))))
  (define (take lst n) (let ((a54946 (list))) (take-helper lst n a54946)))
  (define (length lst)
    (let ((a54947 (null? lst)))
      (if a54947
        (let ((x54948 '0)) x54948)
        (let ((a54949 '1))
          (let ((a54950 (cdr lst)))
            (let ((a54951 (length a54950))) (+ a54949 a54951)))))))
  (define (map proc lst)
    (let ((a54952 (null? lst)))
      (if a54952
        (let ((x54953 (list))) x54953)
        (let ((a54954 (car lst)))
          (let ((a54955 (proc a54954)))
            (let ((a54956 (cdr lst)))
              (let ((a54957 (map proc a54956))) (cons a54955 a54957))))))))
  (define (filter op lst)
    (let ((a54958 (null? lst)))
      (if a54958
        (let ((x54959 (list))) x54959)
        (let ((a54960 (car lst)))
          (let ((a54961 (op a54960)))
            (if a54961
              (let ((a54962 (car lst)))
                (let ((a54963 (cdr lst)))
                  (let ((a54964 (filter op a54963))) (cons a54962 a54964))))
              (let ((a54965 (cdr lst))) (filter op a54965))))))))
  (define (drop lst n)
    (let ((a54966 '0))
      (let ((a54967 (= n a54966)))
        (if a54967
          lst
          (let ((a54968 (cdr lst)))
            (let ((a54969 '1))
              (let ((a54970 (- n a54969))) (drop a54968 a54970))))))))
  (define (foldr proc acc lst)
    (let ((a54971 (null? lst)))
      (if a54971
        acc
        (let ((a54972 (car lst)))
          (let ((a54973 (cdr lst)))
            (let ((a54974 (foldr proc acc a54973))) (proc a54972 a54974)))))))
  (define (append lst1 lst2)
    (let ((a54975 (null? lst1)))
      (if a54975
        lst2
        (let ((a54976 (car lst1)))
          (let ((a54977 (cdr lst1)))
            (let ((a54978 (append a54977 lst2))) (cons a54976 a54978)))))))
  (define (hash . lst) (let ((x54979 (apply-prim hash lst))) x54979))
  (define (hash-ref h k) (let ((x54980 (prim hash-ref h k))) x54980))
  (define (hash-set h k v) (let ((x54981 (prim hash-set h k v))) x54981))
  (define (hash-has-key? h k) (let ((x54982 (prim hash-has-key? h k))) x54982))
  (define (hash-count h) (let ((x54983 (prim hash-count h))) x54983))
  (define (call)
    (let ((a54984 '100))
      (let ((a54985 '20))
        (let ((a54986 '10))
          (let ((a54987 '5))
            (let ((a54988 '1)) (> a54984 a54985 a54986 a54987 a54988)))))))
  (define (brouhaha_main) (let ((x54989 (call))) x54989)))
