'((define (+ . lst) (let ((x52238 (apply-prim + lst))) x52238))
  (define (- . lst) (let ((x52239 (apply-prim - lst))) x52239))
  (define (* . lst) (let ((x52240 (apply-prim * lst))) x52240))
  (define (modulo a b) (let ((x52241 (prim modulo a b))) x52241))
  (define (/ . lst) (let ((x52242 (apply-prim / lst))) x52242))
  (define (= . lst) (let ((x52243 (apply-prim = lst))) x52243))
  (define (> . lst) (let ((x52244 (apply-prim > lst))) x52244))
  (define (< . lst) (let ((x52245 (apply-prim < lst))) x52245))
  (define (<= . lst) (let ((x52246 (apply-prim <= lst))) x52246))
  (define (>= . lst) (let ((x52247 (apply-prim >= lst))) x52247))
  (define (null? x) (let ((x52248 (prim null? x))) x52248))
  (define (equal? x y) (let ((x52249 (prim equal? x y))) x52249))
  (define (eq? x y) (let ((x52250 (prim eq? x y))) x52250))
  (define (cons a b) (let ((x52251 (prim cons a b))) x52251))
  (define (car lst) (let ((x52252 (prim car lst))) x52252))
  (define (cdr lst) (let ((x52253 (prim cdr lst))) x52253))
  (define (even? x)
    (let ((a52254 '0))
      (let ((a52255 '2))
        (let ((a52256 (modulo x a52255))) (equal? a52254 a52256)))))
  (define (odd? x)
    (let ((a52257 '1))
      (let ((a52258 '2))
        (let ((a52259 (modulo x a52258))) (equal? a52257 a52259)))))
  (define (list . x) x)
  (define (member? x lst)
    (let ((a52260 (null? lst)))
      (if a52260
        (let ((x52261 '#f)) x52261)
        (let ((a52262 (car lst)))
          (let ((a52263 (equal? a52262 x)))
            (if a52263
              (let ((x52264 '#t)) x52264)
              (let ((a52265 (cdr lst))) (member? x a52265))))))))
  (define (foldl fun acc lst)
    (let ((a52266 (null? lst)))
      (if a52266
        acc
        (let ((a52267 (car lst)))
          (let ((a52268 (fun a52267 acc)))
            (let ((a52269 (cdr lst))) (foldl fun a52268 a52269)))))))
  (define (reverse-helper lst lst2)
    (let ((a52270 (null? lst)))
      (if a52270
        lst2
        (let ((a52271 (cdr lst)))
          (let ((a52272 (car lst)))
            (let ((a52273 (cons a52272 lst2)))
              (reverse-helper a52271 a52273)))))))
  (define (reverse lst) (let ((a52274 (list))) (reverse-helper lst a52274)))
  (define (take-helper lst n lst2)
    (let ((a52275 '0))
      (let ((a52276 (= n a52275)))
        (if a52276
          (let ((x52277 (reverse lst2))) x52277)
          (let ((a52278 (cdr lst)))
            (let ((a52279 '1))
              (let ((a52280 (- n a52279)))
                (let ((a52281 (car lst)))
                  (let ((a52282 (cons a52281 lst2)))
                    (take-helper a52278 a52280 a52282))))))))))
  (define (take lst n) (let ((a52283 (list))) (take-helper lst n a52283)))
  (define (length lst)
    (let ((a52284 (null? lst)))
      (if a52284
        (let ((x52285 '0)) x52285)
        (let ((a52286 '1))
          (let ((a52287 (cdr lst)))
            (let ((a52288 (length a52287))) (+ a52286 a52288)))))))
  (define (map proc lst)
    (let ((a52289 (null? lst)))
      (if a52289
        (let ((x52290 (list))) x52290)
        (let ((a52291 (car lst)))
          (let ((a52292 (proc a52291)))
            (let ((a52293 (cdr lst)))
              (let ((a52294 (map proc a52293))) (cons a52292 a52294))))))))
  (define (filter op lst)
    (let ((a52295 (null? lst)))
      (if a52295
        (let ((x52296 (list))) x52296)
        (let ((a52297 (car lst)))
          (let ((a52298 (op a52297)))
            (if a52298
              (let ((a52299 (car lst)))
                (let ((a52300 (cdr lst)))
                  (let ((a52301 (filter op a52300))) (cons a52299 a52301))))
              (let ((a52302 (cdr lst))) (filter op a52302))))))))
  (define (drop lst n)
    (let ((a52303 '0))
      (let ((a52304 (= n a52303)))
        (if a52304
          lst
          (let ((a52305 (cdr lst)))
            (let ((a52306 '1))
              (let ((a52307 (- n a52306))) (drop a52305 a52307))))))))
  (define (foldr proc acc lst)
    (let ((a52308 (null? lst)))
      (if a52308
        acc
        (let ((a52309 (car lst)))
          (let ((a52310 (cdr lst)))
            (let ((a52311 (foldr proc acc a52310))) (proc a52309 a52311)))))))
  (define (append lst1 lst2)
    (let ((a52312 (null? lst1)))
      (if a52312
        lst2
        (let ((a52313 (car lst1)))
          (let ((a52314 (cdr lst1)))
            (let ((a52315 (append a52314 lst2))) (cons a52313 a52315)))))))
  (define (hash . lst) (let ((x52316 (apply-prim hash lst))) x52316))
  (define (hash-ref h k) (let ((x52317 (prim hash-ref h k))) x52317))
  (define (hash-set h k v) (let ((x52318 (prim hash-set h k v))) x52318))
  (define (hash-has-key? h k) (let ((x52319 (prim hash-has-key? h k))) x52319))
  (define (hash-count h) (let ((x52320 (prim hash-count h))) x52320))
  (define (call)
    (let ((a52321 '100))
      (let ((a52322 '20))
        (let ((a52323 '10))
          (let ((a52324 '5))
            (let ((a52325 '1)) (> a52321 a52322 a52323 a52324 a52325)))))))
  (define (brouhaha_main) (let ((x52326 (call))) x52326)))
